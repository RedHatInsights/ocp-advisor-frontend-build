{"version":3,"file":"js/1224.40b0b7dfa655c703ec98.js","mappings":"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","sources":["webpack:///./src/Components/Common/Tables.js","webpack:///./src/Components/Labels/RuleLabels.js","webpack:///./src/Components/Modals/DisableRule.js","webpack:///./src/Utilities/Workloads.js"],"sourcesContent":["import capitalize from 'lodash/capitalize';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { useEffect, useState } from 'react';\nimport { coerce, compare, valid } from 'semver';\nimport {\n  CLUSTER_FILTER_CATEGORIES,\n  FILTER_CATEGORIES,\n  RULE_CATEGORIES,\n} from '../../AppConstants';\nimport {\n  hasAnyValueGreaterThanZero,\n  remappingSeverity,\n} from '../../Utilities/Workloads';\n\nexport const passFilters = (rule, filters) =>\n  Object.entries(filters).every(([filterKey, filterValue]) => {\n    switch (filterKey) {\n      case 'text':\n        return rule.description\n          .toLowerCase()\n          .includes(filterValue.toLowerCase());\n      case FILTER_CATEGORIES.total_risk.urlParam:\n        return filterValue.includes(String(rule.total_risk));\n      case FILTER_CATEGORIES.category.urlParam:\n        return rule.tags.find((c) =>\n          filterValue.includes(String(RULE_CATEGORIES[c]))\n        );\n      case FILTER_CATEGORIES.impact.urlParam:\n        return filterValue.includes(String(rule.impact));\n      case FILTER_CATEGORIES.impacting.urlParam:\n        return filterValue.length > 0\n          ? filterValue.some((v) => {\n              if (v === 'true') {\n                return rule.impacted_clusters_count > 0;\n              }\n              if (v === 'false') {\n                return rule.impacted_clusters_count === 0;\n              }\n            })\n          : true;\n      case FILTER_CATEGORIES.likelihood.urlParam:\n        return filterValue.includes(String(rule.likelihood));\n      case FILTER_CATEGORIES.rule_status.urlParam:\n        return (\n          filterValue === 'all' ||\n          (filterValue === 'disabled' && rule.disabled) ||\n          (filterValue === 'enabled' && !rule.disabled)\n        );\n      case FILTER_CATEGORIES.res_risk.urlParam:\n        return filterValue.includes(String(rule.resolution_risk));\n      default:\n        return true;\n    }\n  });\n\nexport const passFiltersCluster = (cluster, filters) =>\n  Object.entries(filters).every(([filterKey, filterValue]) => {\n    switch (filterKey) {\n      case 'text':\n        return (cluster.cluster_name || cluster.cluster_id)\n          .toLowerCase()\n          .includes(filterValue.toLowerCase());\n      case CLUSTER_FILTER_CATEGORIES.hits.urlParam:\n        return (\n          // clusters with at least one rule hit\n          (filterValue.length === 0 && parseInt(cluster.total_hit_count) > 0) ||\n          // all clusters\n          filterValue.includes('all') ||\n          // clusters with at least one rule hit for any of the active risk filters\n          filterValue.some((v) => cluster.hits_by_total_risk[v] > 0)\n        );\n      case 'version':\n        return (\n          filterValue.length === 0 ||\n          filterValue.includes(toValidSemVer(cluster.cluster_version))\n        );\n      default:\n        return true;\n    }\n  });\n\nconst pruneFilters = (localFilters, filterCategories) => {\n  const prunedFilters = Object.entries(localFilters || {});\n  return prunedFilters.reduce((arr, it) => {\n    const [key, item] = it;\n    if (filterCategories[key]) {\n      const category = filterCategories[key];\n      const chips = Array.isArray(item)\n        ? item.map((value) => {\n            const selectedCategoryValue = category.values.find(\n              (values) => values.value === String(value)\n            );\n            return selectedCategoryValue\n              ? {\n                  name:\n                    selectedCategoryValue.text || selectedCategoryValue.label,\n                  value,\n                }\n              : { name: value, value };\n          })\n        : [\n            {\n              name: category.values.find(\n                (values) => values.value === String(item)\n              ).label,\n              value: item,\n            },\n          ];\n      return [\n        ...arr,\n        {\n          category: capitalize(category.title),\n          chips,\n          urlParam: category.urlParam,\n        },\n      ];\n    } else if (key === 'text') {\n      return [\n        ...arr,\n        ...(item.length > 0\n          ? [\n              {\n                category: 'Name',\n                chips: [{ name: item, value: item }],\n                urlParam: key,\n              },\n            ]\n          : []),\n      ];\n    } else if (key === 'version') {\n      return [\n        ...arr,\n        ...(item.length > 0\n          ? [\n              {\n                category: 'Version',\n                chips: item.map((it) => ({\n                  name: it,\n                  value: it,\n                })),\n                urlParam: key,\n              },\n            ]\n          : []),\n      ];\n    } else if (key === 'namespace_name') {\n      return [\n        ...arr,\n        ...(item.length > 0\n          ? [\n              {\n                category: 'Namespace name',\n                chips: [{ name: item, value: item }],\n                urlParam: key,\n              },\n            ]\n          : []),\n      ];\n    } else if (key === 'cluster_name') {\n      return [\n        ...arr,\n        ...(item.length > 0\n          ? [\n              {\n                category: 'Cluster name',\n                chips: [{ name: item, value: item }],\n                urlParam: key,\n              },\n            ]\n          : []),\n      ];\n    }\n  }, []);\n};\n\nexport const buildFilterChips = (filters, categories) => {\n  const localFilters = cloneDeep(filters);\n  delete localFilters.sortIndex;\n  delete localFilters.sortDirection;\n  delete localFilters.sort;\n  delete localFilters.offset;\n  delete localFilters.limit;\n  localFilters?.hits &&\n    localFilters.hits.length === 0 &&\n    delete localFilters.hits;\n  return pruneFilters(localFilters, categories);\n};\n\n// parses url params for use in table/filter chips\nexport const paramParser = (search) => {\n  const searchParams = new URLSearchParams(search);\n  return Array.from(searchParams).reduce(\n    (acc, [key, value]) => ({\n      ...acc,\n      [key]: [\n        'text',\n        'first',\n        'rule_status',\n        'sort',\n        'cluster_name',\n        'namespace_name',\n      ].includes(key)\n        ? value // just copy the full value\n        : value === 'true' || value === 'false'\n        ? JSON.parse(value) // parse boolean\n        : // parse array of values\n          value.split(','),\n    }),\n    {}\n  );\n};\n\nexport const translateSortParams = (value) => ({\n  name: value.substring(value.startsWith('-') ? 1 : 0),\n  direction: value.startsWith('-') ? 'desc' : 'asc',\n});\n\nexport const translateSortValue = (index, indexMapping, direction) => {\n  if (!['desc', 'asc'].includes(direction)) {\n    console.error('Invalid sort parameters (is not asc nor desc)');\n  }\n  return `${direction === 'asc' ? '' : '-'}${indexMapping[index]}`;\n};\n\n// TODO: remove since unused\nexport const debounce = (value, delay) => {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [delay, value]);\n\n  return debouncedValue;\n};\n\nexport const updateSearchParams = (filters = {}, columnMapping) => {\n  const url = new URL(window.location.origin + window.location.pathname);\n  // separately check the sort param\n  url.searchParams.set(\n    'sort',\n    translateSortValue(filters.sortIndex, columnMapping, filters.sortDirection)\n  );\n  // check the rest of filters\n  Object.entries(filters).forEach(([key, value]) => {\n    return (\n      key !== 'sortIndex' &&\n      key !== 'sortDirection' &&\n      key !== 'sort' &&\n      value !== '' &&\n      !(Array.isArray(value) && value.length === 0) &&\n      url.searchParams.set(key, value)\n    );\n  });\n  window.history.replaceState(null, null, url.href);\n};\n\n// TODO: move to Utils.js\nexport const compareSemVer = (v1, v2, d) => d * compare(v1, v2);\nexport const toValidSemVer = (version) =>\n  coerce(version === undefined || !valid(coerce(version)) ? '0.0.0' : version)\n    .version;\n\nexport const removeFilterParam = (currentFilters, updateFilters, param) => {\n  const { [param]: omitted, ...newFilters } = { ...currentFilters, offset: 0 };\n  updateFilters({\n    ...newFilters,\n    ...(param === 'text'\n      ? { text: '' }\n      : param === 'hits'\n      ? { hits: [] }\n      : param === 'version'\n      ? { version: [] }\n      : {}),\n  });\n};\n\nexport const addFilterParam = (currentFilters, updateFilters, param, values) =>\n  values.length > 0\n    ? updateFilters({\n        ...currentFilters,\n        offset: 0,\n        ...{ [param]: values },\n      })\n    : removeFilterParam(currentFilters, updateFilters, param);\n\nexport const passFilterWorkloads = (workloads, filters) => {\n  const generalSeverityRemapped = remappingSeverity(\n    workloads.metadata.hits_by_severity,\n    'general'\n  );\n  return Object.entries(filters).every(([filterKey, filterValue]) => {\n    switch (filterKey) {\n      case 'cluster_name':\n        return (workloads.cluster.display_name || workloads.cluster.uuid)\n          .toLowerCase()\n          .includes(filterValue.toLowerCase());\n      case 'namespace_name':\n        return (workloads.namespace.name || workloads.namespace.uuid)\n          .toLowerCase()\n          .includes(filterValue.toLowerCase());\n      case 'general_severity':\n        return (\n          filterValue.length === 0 ||\n          hasAnyValueGreaterThanZero(\n            generalSeverityRemapped,\n            filters.general_severity\n          )\n        );\n      default:\n        return true;\n    }\n  });\n};\n","import { TooltipPosition } from '@patternfly/react-core/dist/js/components/Tooltip/Tooltip';\nimport { Tooltip, Label } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { useIntl } from 'react-intl';\nimport messages from '../../Messages';\n\nconst RuleLabels = ({ rule }) => {\n  const intl = useIntl();\n  return (\n    <React.Fragment>\n      {rule.disabled && (\n        <Tooltip\n          content={intl.formatMessage(messages.ruleIsDisabledTooltip)}\n          position={TooltipPosition.right}\n        >\n          <Label color=\"gray\" isCompact>\n            {intl.formatMessage(messages.disabled)}\n          </Label>\n        </Tooltip>\n      )}\n    </React.Fragment>\n  );\n};\n\nRuleLabels.propTypes = {\n  rule: PropTypes.object,\n};\n\nexport default RuleLabels;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\n\nimport {\n  Button,\n  Checkbox,\n  Form,\n  FormGroup,\n  Modal,\n  TextInput,\n} from '@patternfly/react-core';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\n\nimport messages from '../../Messages';\nimport { disableRuleForCluster, useSetAckMutation } from '../../Services/Acks';\n\nconst DisableRule = ({\n  isModalOpen,\n  handleModalToggle,\n  rule,\n  afterFn,\n  host,\n  hosts,\n}) => {\n  const intl = useIntl();\n  const [justification, setJustificaton] = useState('');\n  const [singleHost, setSingleHost] = useState(!!host);\n  const [multipleHosts, setMultipleHosts] = useState(hosts.length > 0);\n  const [setAck] = useSetAckMutation();\n  const dispatch = useDispatch();\n  const notify = (data) => dispatch(addNotification(data));\n\n  const bulkHostActions = async () => {\n    // disable for a group of hosts (clusters)\n    try {\n      const requests = hosts.map((h) =>\n        disableRuleForCluster({\n          uuid: h.id,\n          recId: rule.rule_id,\n          justification,\n        })\n      );\n      await Promise.all(requests);\n      notify({\n        variant: 'success',\n        dismissable: true,\n        timeout: true,\n        title: intl.formatMessage(messages.recSuccessfullyDisabledForCluster),\n      });\n      afterFn && afterFn();\n    } catch (error) {\n      notify({\n        variant: 'danger',\n        dismissable: true,\n        title: intl.formatMessage(messages.error),\n        description: `${error}`,\n      });\n    }\n  };\n\n  const disableRule = async () => {\n    try {\n      if (singleHost) {\n        // disable the rec for this single cluster\n        await disableRuleForCluster({\n          uuid: host,\n          recId: rule.rule_id,\n          justification,\n        });\n        notify({\n          variant: 'success',\n          timeout: true,\n          dismissable: true,\n          title: intl.formatMessage(messages.recSuccessfullyDisabledForCluster),\n        });\n      } else if (multipleHosts) {\n        bulkHostActions();\n      } else {\n        // disable the whole rec\n        await setAck({\n          rule_id: rule.rule_id,\n          justification,\n        }).unwrap();\n        notify({\n          variant: 'success',\n          timeout: true,\n          dismissable: true,\n          title: intl.formatMessage(messages.recSuccessfullyDisabled),\n        });\n      }\n      setJustificaton('');\n      afterFn && afterFn();\n    } catch (error) {\n      notify({\n        variant: 'danger',\n        dismissable: true,\n        title: intl.formatMessage(messages.error),\n        description: `${error}`,\n      });\n    }\n\n    handleModalToggle(false);\n  };\n\n  return (\n    <Modal\n      variant=\"small\"\n      title={intl.formatMessage(messages.disableRule)}\n      isOpen={isModalOpen}\n      onClose={() => {\n        handleModalToggle();\n        setJustificaton('');\n      }}\n      actions={[\n        <Button\n          key=\"confirm\"\n          variant=\"primary\"\n          onClick={() => disableRule()}\n          ouiaId=\"confirm\"\n        >\n          {intl.formatMessage(messages.save)}\n        </Button>,\n        <Button\n          key=\"cancel\"\n          variant=\"link\"\n          onClick={() => {\n            handleModalToggle(false);\n            setJustificaton('');\n          }}\n          ouiaId=\"cancel\"\n        >\n          {intl.formatMessage(messages.cancel)}\n        </Button>,\n      ]}\n      ouiaId=\"recommendation-disable\"\n    >\n      {intl.formatMessage(messages.disableRuleBody)}\n      <Form>\n        <FormGroup fieldId=\"blank-form\" />\n        {(host || hosts.length > 0) && (\n          <FormGroup fieldId=\"disable-rule-one-system\">\n            <Checkbox\n              isChecked={singleHost || multipleHosts}\n              onChange={() => {\n                host\n                  ? setSingleHost(!singleHost)\n                  : setMultipleHosts(!multipleHosts);\n              }}\n              label={\n                host\n                  ? intl.formatMessage(messages.disableRuleSingleCluster)\n                  : intl.formatMessage(messages.disableRuleForClusters)\n              }\n              id=\"disable-rule-one-system\"\n              name=\"disable-rule-one-system\"\n              ouiaId=\"disable-recommendation-one-cluster\"\n            />\n          </FormGroup>\n        )}\n        <FormGroup\n          label={intl.formatMessage(messages.justificationNote)}\n          fieldId=\"disable-rule-justification\"\n        >\n          <TextInput\n            type=\"text\"\n            id=\"disable-rule-justification\"\n            aria-describedby=\"disable-rule-justification\"\n            value={justification}\n            onChange={(text) => setJustificaton(text)}\n            onKeyDown={(e) =>\n              e.key === 'Enter' && (e.preventDefault(), disableRule())\n            }\n          />\n        </FormGroup>\n      </Form>\n    </Modal>\n  );\n};\n\nDisableRule.propTypes = {\n  isModalOpen: PropTypes.bool,\n  rule: PropTypes.object,\n  handleModalToggle: PropTypes.func,\n  afterFn: PropTypes.func,\n  host: PropTypes.object,\n  hosts: PropTypes.array,\n};\n\nDisableRule.defaultProps = {\n  isModalOpen: false,\n  rule: {},\n  handleModalToggle: () => undefined,\n  afterFn: () => undefined,\n  host: undefined,\n  hosts: [],\n};\n\nexport default DisableRule;\n","import _, { isEmpty } from 'lodash';\n\nexport const SEVERITY_OPTIONS = [\n  {\n    value: 'critical',\n    label: 'Critical',\n    iconColor: 'var(--pf-global--danger-color--100)',\n    textColor: 'var(--pf-global--danger-color--100)',\n    hasIcon: true,\n  },\n  {\n    value: 'important',\n    label: 'Important',\n    iconColor: 'var(--pf-global--palette--orange-300)',\n    textColor: 'var(--pf-global--palette--orange-400)',\n    hasIcon: true,\n  },\n  {\n    value: 'moderate',\n    label: 'Moderate',\n    iconColor: 'var(--pf-global--warning-color--100)',\n    textColor: 'var(--pf-global--warning-color--200)',\n    hasIcon: true,\n  },\n  {\n    value: 'low',\n    label: 'Low',\n    iconColor: 'var(--pf-global--Color--200)',\n    textColor: 'var(--pf-global--default-color--300)',\n    hasIcon: true,\n  },\n  {\n    value: 'none',\n    label: 'Unknown',\n  },\n];\n\nexport const remappingSeverity = (obj, mode) => {\n  const mapping = {\n    1: 'low',\n    2: 'moderate',\n    3: 'important',\n    4: 'critical',\n  };\n  let updatedObj = {};\n\n  if (mode === 'general' || mode === 'label') {\n    for (const key in obj) {\n      if (key in mapping) {\n        updatedObj[mapping[key]] = obj[key];\n      }\n    }\n  } else {\n    updatedObj = mapping[obj];\n  }\n\n  return updatedObj;\n};\n\nexport const hasAnyValueGreaterThanZero = (obj, stringsToCheck) => {\n  for (const key of stringsToCheck) {\n    if (obj[key] > 0) {\n      return true; // Return true if any matching string has a value greater than 0\n    }\n  }\n};\n\nexport const severityTypeToText = (value) => {\n  value = parseInt(value);\n  if (value === 1) {\n    return 'Low';\n  } else if (value === 2) {\n    return 'Moderate';\n  } else if (value === 3) {\n    return 'Important';\n  } else {\n    return 'Critical';\n  }\n};\n\nexport const noFiltersApplied = (params) => {\n  const cleanedUpParams = _.cloneDeep(params);\n  delete cleanedUpParams.sortIndex;\n  delete cleanedUpParams.sortDirection;\n  delete cleanedUpParams.offset;\n  delete cleanedUpParams.limit;\n  return Object.values(cleanedUpParams).filter((value) => !isEmpty(value));\n};\n"],"names":["passFilters","rule","filters","Object","entries","every","filterKey","filterValue","description","toLowerCase","includes","FILTER_CATEGORIES","total_risk","urlParam","String","category","tags","find","c","RULE_CATEGORIES","impact","impacting","length","some","v","impacted_clusters_count","likelihood","rule_status","disabled","res_risk","resolution_risk","passFiltersCluster","cluster","cluster_name","cluster_id","CLUSTER_FILTER_CATEGORIES","hits","parseInt","total_hit_count","hits_by_total_risk","toValidSemVer","cluster_version","buildFilterChips","categories","localFilters","cloneDeep","sortIndex","sortDirection","sort","offset","limit","filterCategories","reduce","arr","it","key","item","chips","Array","isArray","map","value","selectedCategoryValue","values","name","text","label","capitalize","title","pruneFilters","paramParser","search","searchParams","URLSearchParams","from","acc","JSON","parse","split","translateSortParams","substring","startsWith","direction","updateSearchParams","index","indexMapping","columnMapping","url","URL","window","location","origin","pathname","set","console","error","forEach","history","replaceState","href","compareSemVer","v1","v2","d","compare","version","coerce","undefined","valid","removeFilterParam","currentFilters","updateFilters","param","addFilterParam","passFilterWorkloads","workloads","generalSeverityRemapped","remappingSeverity","metadata","hits_by_severity","display_name","uuid","namespace","hasAnyValueGreaterThanZero","general_severity","RuleLabels","intl","useIntl","Tooltip","content","formatMessage","messages","ruleIsDisabledTooltip","position","TooltipPosition","right","Label","color","isCompact","propTypes","PropTypes","DisableRule","isModalOpen","handleModalToggle","afterFn","host","hosts","useState","justification","setJustificaton","singleHost","setSingleHost","multipleHosts","setMultipleHosts","useSetAckMutation","setAck","dispatch","useDispatch","notify","data","addNotification","bulkHostActions","requests","h","disableRuleForCluster","id","recId","rule_id","Promise","all","variant","dismissable","timeout","recSuccessfullyDisabledForCluster","disableRule","unwrap","recSuccessfullyDisabled","isOpen","onClose","actions","Button","onClick","ouiaId","save","cancel","disableRuleBody","fieldId","Checkbox","isChecked","onChange","disableRuleSingleCluster","disableRuleForClusters","justificationNote","type","onKeyDown","e","preventDefault","defaultProps","SEVERITY_OPTIONS","iconColor","textColor","hasIcon","obj","mode","mapping","updatedObj","stringsToCheck","noFiltersApplied","params","cleanedUpParams","_","filter","isEmpty"],"sourceRoot":""}