{"version":3,"file":"js/Recommendation.1654093461389.16e516511f28cc4f7479.js","mappings":"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","sources":["webpack:///./src/Components/Breadcrumbs/index.js","webpack:///./src/Components/Loading/Loading.js","webpack:///./src/Components/AffectedClustersTable/AffectedClustersTable.js","webpack:///./src/Components/Modals/ViewHostAcks.js","webpack:///./src/Components/Recommendation/Recommendation.js","webpack:///./src/Components/Recommendation/index.js","webpack:///./src/Utilities/Loaders.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { Link, useLocation } from 'react-router-dom';\n\nimport { Breadcrumb, BreadcrumbItem } from '@patternfly/react-core';\n\nimport messages from '../../Messages';\n\nconst Breadcrumbs = ({ current }) => {\n  const intl = useIntl();\n  const location = useLocation();\n  const splitUrl = location.pathname.split('/');\n\n  return (\n    <div>\n      <Breadcrumb ouiaId=\"detail\">\n        <BreadcrumbItem className=\"breadcrumb-item\">\n          <Link to={`/${splitUrl[1]}`}>\n            {`${intl.formatMessage(messages.insightsHeader)} ${splitUrl[1]}`}\n          </Link>\n        </BreadcrumbItem>\n        <BreadcrumbItem className=\"breadcrumb-item\" isActive>\n          {current}\n        </BreadcrumbItem>\n      </Breadcrumb>\n    </div>\n  );\n};\n\nBreadcrumbs.propTypes = {\n  current: PropTypes.string,\n};\n\nexport default Breadcrumbs;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardBody } from '@patternfly/react-core';\nimport { List } from 'react-content-loader';\n\nconst Loading = ({ id }) => (\n  <Card {...(id ? { id } : {})}>\n    <CardBody>\n      <List />\n    </CardBody>\n  </Card>\n);\n\nLoading.propTypes = {\n  id: PropTypes.string,\n};\n\nexport default Loading;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { valid } from 'semver';\nimport uniqBy from 'lodash/uniqBy';\n\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter/conditionalFilterConstants';\nimport PrimaryToolbar from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport { EmptyTable } from '@redhat-cloud-services/frontend-components/EmptyTable';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components/TableToolbar';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport {\n  Card,\n  CardBody,\n  Tooltip,\n  Bullseye,\n  Pagination,\n} from '@patternfly/react-core';\nimport { PaginationVariant } from '@patternfly/react-core/dist/js/components/Pagination/Pagination';\nimport { Table } from '@patternfly/react-table/dist/js/components/Table/Table';\nimport { TableBody } from '@patternfly/react-table/dist/js/components/Table/Body';\nimport { TableHeader } from '@patternfly/react-table/dist/js/components/Table/Header';\n\nimport {\n  ErrorState,\n  NoAffectedClusters,\n  NoMatchingClusters,\n} from '../MessageState/EmptyStates';\nimport {\n  AFFECTED_CLUSTERS_COLUMNS,\n  AFFECTED_CLUSTERS_LAST_SEEN_CELL,\n  AFFECTED_CLUSTERS_NAME_CELL,\n  AFFECTED_CLUSTERS_VERSION_CELL,\n  FILTER_CATEGORIES,\n} from '../../AppConstants';\nimport Loading from '../Loading/Loading';\nimport {\n  AFFECTED_CLUSTERS_INITIAL_STATE,\n  updateAffectedClustersFilters,\n} from '../../Services/Filters';\nimport messages from '../../Messages';\nimport DisableRule from '../Modals/DisableRule';\nimport {\n  buildFilterChips,\n  compareSemVer,\n  removeFilterParam as _removeFilterParam,\n  addFilterParam as _addFilterParam,\n} from '../Common/Tables';\n\nconst AffectedClustersTable = ({ query, rule, afterDisableFn }) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n\n  const [filteredRows, setFilteredRows] = useState([]);\n  const [displayedRows, setDisplayedRows] = useState([]);\n  const [disableRuleModalOpen, setDisableRuleModalOpen] = useState(false);\n  const [selected, setSelected] = useState([]);\n  const [host, setHost] = useState(undefined);\n\n  const {\n    isError,\n    isUninitialized,\n    isFetching,\n    isSuccess,\n    /* the response contains two lists: `disabled` has clusters\n      for which the rec is disabled (acked), and `enable` contains\n       clusters that are affected by the rec */\n    data = { disabled: [], enabled: [] },\n  } = query;\n  const rows = data.enabled;\n  const filters = useSelector(({ filters }) => filters.affectedClustersState);\n  const perPage = filters.limit;\n  const page = filters.offset / filters.limit + 1;\n  const allSelected =\n    filteredRows.length !== 0 && selected.length === filteredRows.length;\n\n  const updateFilters = (filters) =>\n    dispatch(updateAffectedClustersFilters(filters));\n\n  const removeFilterParam = (param) =>\n    _removeFilterParam(filters, updateFilters, param);\n\n  const addFilterParam = (param, values) =>\n    _addFilterParam(filters, updateFilters, param, values);\n\n  const filterConfig = {\n    items: [\n      {\n        label: intl.formatMessage(messages.name),\n        placeholder: intl.formatMessage(messages.filterByName),\n        type: conditionalFilterType.text,\n        filterValues: {\n          id: 'name-filter',\n          key: 'name-filter',\n          onChange: (event, value) => addFilterParam('text', value),\n          value: filters.text,\n        },\n      },\n      {\n        label: intl.formatMessage(messages.version),\n        placeholder: intl.formatMessage(messages.filterByVersion),\n        type: conditionalFilterType.checkbox,\n        filterValues: {\n          id: 'version-filter',\n          key: 'version-filter',\n          onChange: (event, value) => addFilterParam('version', value),\n          value: filters.version,\n          items: uniqBy(\n            rows\n              .filter((r) => r.meta.cluster_version !== '')\n              .map((r) => ({\n                value: r.meta.cluster_version,\n              }))\n              .sort((a, b) => compareSemVer(a.value, b.value, 1))\n              .reverse(), // should start from the latest version\n            'value'\n          ),\n        },\n      },\n    ],\n    isDisabled: isError || (rows && rows.length === 0),\n  };\n\n  const onSort = (_e, index, direction) => {\n    updateFilters({ ...filters, sortIndex: index, sortDirection: direction });\n  };\n\n  const onSetPage = (_e, pageNumber) => {\n    const newOffset = pageNumber * filters.limit - filters.limit;\n    updateFilters({ ...filters, offset: newOffset });\n  };\n\n  const onSetPerPage = (_e, perPage) => {\n    updateFilters({ ...filters, limit: perPage });\n  };\n\n  // constructs array of rows (from the initial data) checking currently applied filters\n  const buildFilteredRows = (allRows, filters) => {\n    const rows = allRows.map((r) => {\n      if (r.meta.cluster_version !== '' && !valid(r.meta.cluster_version)) {\n        console.error(\n          `Cluster version ${r.meta.cluster_version} has invalid format!`\n        );\n      }\n\n      return {\n        id: r.cluster,\n        cells: [\n          '',\n          r.cluster_name || r.cluster,\n          r.meta.cluster_version,\n          r.last_checked_at,\n        ],\n      };\n    });\n    return rows\n      .filter((row) => {\n        return (\n          row?.cells[AFFECTED_CLUSTERS_NAME_CELL].toLowerCase().includes(\n            filters.text.toLowerCase()\n          ) &&\n          (filters.version.length === 0 ||\n            filters.version.includes(row.cells[AFFECTED_CLUSTERS_VERSION_CELL]))\n        );\n      })\n      .sort((a, b) => {\n        let fst, snd;\n        const d = filters.sortDirection === 'asc' ? 1 : -1;\n        switch (filters.sortIndex) {\n          case AFFECTED_CLUSTERS_NAME_CELL:\n            return (\n              d *\n              a?.cells[AFFECTED_CLUSTERS_NAME_CELL].localeCompare(\n                b?.cells[AFFECTED_CLUSTERS_NAME_CELL]\n              )\n            );\n          case AFFECTED_CLUSTERS_VERSION_CELL:\n            return compareSemVer(\n              a.cells[AFFECTED_CLUSTERS_VERSION_CELL] || '0.0.0',\n              b.cells[AFFECTED_CLUSTERS_VERSION_CELL] || '0.0.0',\n              d\n            );\n          case AFFECTED_CLUSTERS_LAST_SEEN_CELL:\n            fst = new Date(a.cells[AFFECTED_CLUSTERS_LAST_SEEN_CELL] || 0);\n            snd = new Date(b.cells[AFFECTED_CLUSTERS_LAST_SEEN_CELL] || 0);\n            return fst > snd ? d : snd > fst ? -d : 0;\n        }\n      });\n  };\n\n  const buildDisplayedRows = (rows) => {\n    return rows\n      .slice(perPage * (page - 1), perPage * (page - 1) + perPage)\n      .map((r) => ({\n        ...r,\n        cells: [\n          <span key={r.id}>\n            <Link to={`/clusters/${r.id}?first=${rule.rule_id}`}>\n              {r.cells[AFFECTED_CLUSTERS_NAME_CELL]}\n            </Link>\n          </span>,\n          <span key={r.id}>\n            {r.cells[AFFECTED_CLUSTERS_VERSION_CELL] ||\n              intl.formatMessage(messages.notAvailable)}\n          </span>,\n          <span key={r.id}>\n            {r.cells[AFFECTED_CLUSTERS_LAST_SEEN_CELL] ? (\n              <DateFormat\n                extraTitle={`${intl.formatMessage(messages.lastSeen)}: `}\n                date={r.cells[AFFECTED_CLUSTERS_LAST_SEEN_CELL]}\n                variant=\"relative\"\n              />\n            ) : (\n              <Tooltip\n                key={r.id}\n                content={\n                  <span>\n                    {intl.formatMessage(messages.lastSeen) + ': '}\n                    {intl.formatMessage(messages.nA)}\n                  </span>\n                }\n              >\n                <span>{intl.formatMessage(messages.nA)}</span>\n              </Tooltip>\n            )}\n          </span>,\n        ],\n      }));\n  };\n\n  // if rowId === -1, then select all rows\n  const onSelect = (event, isSelected, rowId) => {\n    let rows;\n    rowId === -1\n      ? (rows = filteredRows.map((r) => ({ ...r, selected: isSelected })))\n      : (rows = filteredRows.map((r, i) => ({\n          ...r,\n          selected: i === rowId ? isSelected : r.selected,\n        })));\n    setSelected(rows.filter((r) => r.selected));\n    setFilteredRows(rows);\n    setDisplayedRows(buildDisplayedRows(rows));\n  };\n\n  useEffect(() => {\n    const newFilteredRows = buildFilteredRows(rows, filters);\n    const newDisplayedRows = buildDisplayedRows(newFilteredRows);\n    setFilteredRows(newFilteredRows);\n    setDisplayedRows(newDisplayedRows);\n  }, [query, filters]);\n\n  const handleModalToggle = (disableRuleModalOpen, host = undefined) => {\n    setDisableRuleModalOpen(disableRuleModalOpen);\n    setHost(host);\n  };\n\n  return (\n    <div id=\"affected-list-table\">\n      {disableRuleModalOpen && (\n        <DisableRule\n          handleModalToggle={handleModalToggle}\n          isModalOpen={disableRuleModalOpen}\n          rule={rule}\n          afterFn={afterDisableFn}\n          hosts={selected}\n          host={host}\n        />\n      )}\n      <PrimaryToolbar\n        filterConfig={filterConfig}\n        pagination={{\n          itemCount: filteredRows.length,\n          page,\n          perPage,\n          onSetPage: onSetPage,\n          onPerPageSelect: onSetPerPage,\n          ouiaId: 'pager',\n        }}\n        activeFiltersConfig={\n          isError || (rows && rows.length === 0)\n            ? undefined\n            : {\n                filters: buildFilterChips(filters, FILTER_CATEGORIES),\n                deleteTitle: intl.formatMessage(messages.resetFilters),\n                onDelete: (event, itemsToRemove, isAll) => {\n                  if (isAll) {\n                    updateFilters(AFFECTED_CLUSTERS_INITIAL_STATE);\n                  } else {\n                    itemsToRemove.map((item) => {\n                      const newFilter = {\n                        [item.urlParam]: Array.isArray(filters[item.urlParam])\n                          ? filters[item.urlParam].filter(\n                              (value) =>\n                                String(value) !== String(item.chips[0].value)\n                            )\n                          : '',\n                      };\n                      newFilter[item.urlParam].length > 0\n                        ? updateFilters({ ...filters, ...newFilter })\n                        : removeFilterParam(item.urlParam);\n                    });\n                  }\n                },\n              }\n        }\n        bulkSelect={{\n          count: selected.length,\n          items: [\n            {\n              title: intl.formatMessage(messages.selectNone),\n              onClick: (event) => onSelect(event, false, -1),\n            },\n            {\n              title: intl.formatMessage(messages.selectAll, {\n                items: filteredRows?.length || 0,\n              }),\n              onClick: (event) => onSelect(event, true, -1),\n            },\n          ],\n          checked: allSelected,\n          onSelect: (event) =>\n            allSelected\n              ? onSelect(event, false, -1)\n              : onSelect(event, true, -1),\n          ouiaId: 'clusters-selector',\n        }}\n        actionsConfig={{\n          actions: [\n            '',\n            {\n              label: intl.formatMessage(messages.disableRuleForClusters),\n              props: { isDisabled: selected.length === 0 },\n              onClick: () => handleModalToggle(true),\n            },\n          ],\n        }}\n      />\n      <Table\n        aria-label=\"Table of affected clusters\"\n        ouiaId=\"clusters\"\n        variant=\"compact\"\n        cells={AFFECTED_CLUSTERS_COLUMNS}\n        rows={displayedRows}\n        sortBy={{\n          index: filters.sortIndex,\n          direction: filters.sortDirection,\n        }}\n        onSort={onSort}\n        canSelectAll={false}\n        onSelect={displayedRows?.length > 0 ? onSelect : undefined}\n        actions={[\n          {\n            title: 'Disable recommendation for cluster',\n            onClick: (event, rowIndex) =>\n              handleModalToggle(true, filteredRows[rowIndex].id),\n          },\n        ]}\n      >\n        <TableHeader />\n        {(isUninitialized || isFetching) && <Loading />}\n        {isError && (\n          // TODO: fix crooked message container\n          <Card id=\"error-state-message\" ouiaId=\"error-state\">\n            <CardBody>\n              <ErrorState />\n            </CardBody>\n          </Card>\n        )}\n        {isSuccess && rows.length === 0 && (\n          // TODO: fix crooked message container\n          <Card id=\"empty-state-message\" ouiaId=\"empty-state\">\n            <CardBody>\n              <NoAffectedClusters />\n            </CardBody>\n          </Card>\n        )}\n        {isSuccess &&\n          rows.length > 0 &&\n          (filteredRows.length > 0 ? (\n            <TableBody />\n          ) : (\n            // TODO: fix crooked message container\n            <EmptyTable>\n              <Bullseye>\n                <NoMatchingClusters />\n              </Bullseye>\n            </EmptyTable>\n          ))}\n      </Table>\n      <TableToolbar isFooter className=\"ins-c-inventory__table--toolbar\">\n        <Pagination\n          variant={PaginationVariant.bottom}\n          itemCount={filteredRows.length}\n          page={page}\n          perPage={perPage}\n          onSetPage={onSetPage}\n          onPerPageSelect={onSetPerPage}\n          onPageInput={onSetPage}\n          ouiaId=\"pager\"\n        />\n      </TableToolbar>\n    </div>\n  );\n};\n\nAffectedClustersTable.propTypes = {\n  query: PropTypes.shape({\n    isError: PropTypes.bool.isRequired,\n    isUninitialized: PropTypes.bool.isRequired,\n    isFetching: PropTypes.bool.isRequired,\n    isSuccess: PropTypes.bool.isRequired,\n    data: PropTypes.array,\n  }),\n  rule: PropTypes.object,\n  afterDisableFn: PropTypes.func,\n};\n\nexport { AffectedClustersTable };\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { List } from 'react-content-loader';\nimport { useIntl } from 'react-intl';\nimport { useDispatch } from 'react-redux';\n\nimport {\n  Table,\n  TableBody,\n  TableHeader,\n  cellWidth,\n} from '@patternfly/react-table';\nimport { Button, Modal } from '@patternfly/react-core';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport OutlinedBellIcon from '@patternfly/react-icons/dist/js/icons/outlined-bell-icon';\nimport { addNotification as notification } from '@redhat-cloud-services/frontend-components-notifications/';\n\nimport messages from '../../Messages';\nimport { enableRuleForCluster } from '../../Services/Acks';\n\nconst ViewHostAcks = ({\n  handleModalToggle,\n  isModalOpen,\n  clusters,\n  recId,\n  afterFn,\n}) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const addNotification = (data) => dispatch(notification(data));\n  const { data, isFetching, isLoading, refetch } = clusters;\n  const hostAcks = data?.disabled || [];\n  const [rows, setRows] = useState([]);\n  const [unclean, setUnclean] = useState(false);\n\n  const columns = [\n    {\n      title: intl.formatMessage(messages.clusterName),\n\n      transforms: [cellWidth(50)],\n    },\n    {\n      title: intl.formatMessage(messages.justificationNote),\n\n      transforms: [cellWidth(25)],\n    },\n    {\n      title: intl.formatMessage(messages.dateDisabled),\n\n      transforms: [cellWidth(15)],\n    },\n    '',\n  ];\n\n  const deleteAck = async (host) => {\n    try {\n      await enableRuleForCluster({ uuid: host.cluster_id, recId });\n      refetch();\n      setUnclean(true);\n    } catch (error) {\n      handleModalToggle(false);\n      addNotification({\n        variant: 'danger',\n        dismissable: true,\n        title: intl.formatMessage(messages.error),\n        description: `${error}`,\n      });\n    }\n  };\n\n  useEffect(() => {\n    const rows = hostAcks?.map((item) => ({\n      cells: [\n        item.cluster_name || item.cluster_id,\n        item.justification || intl.formatMessage(messages.none),\n        {\n          title: (\n            <DateFormat date={new Date(item.disabled_at)} type=\"onlyDate\" />\n          ),\n        },\n        {\n          title: (\n            <Button\n              key={item.cluster_id}\n              isInline\n              variant=\"link\"\n              onClick={() => deleteAck(item)}\n            >\n              <OutlinedBellIcon size=\"sm\" />\n              {` ${intl.formatMessage(messages.enable)}`}\n            </Button>\n          ),\n        },\n      ],\n    }));\n\n    if (!isLoading && hostAcks.length === 0) {\n      afterFn();\n      handleModalToggle(false);\n    }\n    setRows(rows);\n  }, [hostAcks]);\n\n  return (\n    <Modal\n      width={'75%'}\n      title={intl.formatMessage(messages.hostAckModalTitle)}\n      isOpen={isModalOpen}\n      onClose={() => {\n        unclean && afterFn();\n        handleModalToggle(false);\n      }}\n    >\n      {!isFetching ? (\n        <Table aria-label=\"host-ack-table\" rows={rows} cells={columns}>\n          <TableHeader />\n          <TableBody />\n        </Table>\n      ) : (\n        <Table\n          aria-label=\"host-ack-table\"\n          rows={[\n            {\n              cells: [{ props: { colSpan: 3 }, title: <List /> }],\n            },\n          ]}\n          cells={columns}\n        >\n          <TableHeader />\n          <TableBody />\n        </Table>\n      )}\n    </Modal>\n  );\n};\n\nViewHostAcks.propTypes = {\n  isModalOpen: PropTypes.bool,\n  handleModalToggle: PropTypes.func,\n  clusters: PropTypes.object,\n  recId: PropTypes.string,\n  afterFn: PropTypes.func,\n};\n\nViewHostAcks.defaultProps = {\n  isModalOpen: false,\n  handleModalToggle: () => undefined,\n  clusters: {},\n  recId: '',\n  afterFn: () => undefined,\n};\n\nexport default ViewHostAcks;\n","import './Recommendation.scss';\n\nimport React, { useMemo, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\n\nimport {\n  Card,\n  CardBody,\n  CardFooter,\n  CardHeader,\n} from '@patternfly/react-core/dist/js/components/Card';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport {\n  Label,\n  Title,\n  LabelGroup,\n  Button,\n  Dropdown,\n  DropdownItem,\n  DropdownToggle,\n  Flex,\n  FlexItem,\n} from '@patternfly/react-core';\nimport BellSlashIcon from '@patternfly/react-icons/dist/js/icons/bell-slash-icon';\nimport CaretDownIcon from '@patternfly/react-icons/dist/js/icons/caret-down-icon';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { ErrorState } from '@redhat-cloud-services/frontend-components/ErrorState';\nimport {\n  AdvisorProduct,\n  RuleDetails,\n  RuleDetailsMessagesKeys,\n} from '@redhat-cloud-services/frontend-components-advisor-components';\n\nimport Breadcrumbs from '../Breadcrumbs';\nimport RuleLabels from '../Labels/RuleLabels';\nimport { FILTER_CATEGORIES, RULE_CATEGORIES } from '../../AppConstants';\nimport messages from '../../Messages';\nimport Loading from '../Loading/Loading';\nimport { adjustOCPRule } from '../../Utilities/Rule';\nimport MessageState from '../MessageState/MessageState';\nimport { AffectedClustersTable } from '../AffectedClustersTable/AffectedClustersTable';\nimport { Delete, Post } from '../../Utilities/Api';\nimport { BASE_URL } from '../../Services/SmartProxy';\nimport DisableRule from '../Modals/DisableRule';\nimport ViewHostAcks from '../Modals/ViewHostAcks';\nimport { OneLineLoader } from '../../Utilities/Loaders';\nimport { enableRuleForCluster } from '../../Services/Acks';\nimport { formatMessages, mapContentToValues } from '../../Utilities/intlHelper';\n\nconst Recommendation = ({ rule, ack, clusters, match }) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const notify = (data) => dispatch(addNotification(data));\n  const recId = match.params.recommendationId;\n  const [disableRuleModalOpen, setDisableRuleModalOpen] = useState(false);\n  const [actionsDropdownOpen, setActionsDropdownOpen] = useState(false);\n  const [viewSystemsModalOpen, setViewSystemsModalOpen] = useState(false);\n\n  // rule's info\n  const {\n    isError,\n    isUninitialized,\n    isLoading,\n    isFetching,\n    isSuccess,\n    data,\n    refetch,\n  } = rule;\n  // justification note, last time acknowledged, etc.\n  const { data: ackData, isFetching: ackIsFetching, refetch: refetchAck } = ack;\n  const ruleDate = new Date(ackData?.updated_at || ackData?.created_at);\n  // affected and acked clusters lists\n  const {\n    data: clustersData,\n    isFetching: clustersIsFetching,\n    refetch: refetchClusters,\n  } = clusters;\n\n  const content =\n    isSuccess && data ? adjustOCPRule(data.content, recId) : undefined;\n  const ackedClusters =\n    !clustersIsFetching && clustersData ? clustersData.disabled : undefined;\n\n  const afterDisableFn = async () => {\n    refetch();\n    refetchAck();\n    refetchClusters();\n  };\n\n  const handleModalToggle = (disableRuleModalOpen) => {\n    setDisableRuleModalOpen(disableRuleModalOpen);\n  };\n\n  const enableRecForHosts = async ({ uuids }) => {\n    try {\n      const requests = uuids.map((uuid) =>\n        enableRuleForCluster({ uuid, recId })\n      );\n      await Promise.all(requests);\n      refetch();\n      refetchAck();\n      refetchClusters();\n      notify({\n        variant: 'success',\n        timeout: true,\n        dismissable: true,\n        title: intl.formatMessage(messages.recSuccessfullyEnabledForCluster),\n      });\n    } catch (error) {\n      notify({\n        variant: 'danger',\n        dismissable: true,\n        title: intl.formatMessage(messages.error),\n        description: `${error}`,\n      });\n    }\n  };\n\n  const enableRule = async (rule) => {\n    try {\n      await Delete(`${BASE_URL}/v2/ack/${rule.data.content.rule_id}/`);\n      notify({\n        variant: 'success',\n        timeout: true,\n        dismissable: true,\n        title: intl.formatMessage(messages.recSuccessfullyEnabled),\n      });\n      refetch();\n    } catch (error) {\n      handleModalToggle(false);\n      notify({\n        variant: 'danger',\n        dismissable: true,\n        title: intl.formatMessage(messages.error),\n        description: `${error}`,\n      });\n    }\n  };\n\n  const messagesValues = useMemo(\n    () => (content ? mapContentToValues(intl, content) : {}),\n    [intl, content]\n  );\n\n  return (\n    <React.Fragment>\n      {viewSystemsModalOpen && (\n        <ViewHostAcks\n          handleModalToggle={(toggleModal) =>\n            setViewSystemsModalOpen(toggleModal)\n          }\n          isModalOpen={viewSystemsModalOpen}\n          clusters={clusters}\n          afterFn={() => refetchClusters()}\n          recId={recId}\n        />\n      )}\n      {disableRuleModalOpen && (\n        <DisableRule\n          handleModalToggle={handleModalToggle}\n          isModalOpen={disableRuleModalOpen}\n          rule={content}\n          afterFn={afterDisableFn}\n        />\n      )}\n      <PageHeader className=\"pageHeaderOverride\">\n        <Breadcrumbs current={content?.description || recId} />\n      </PageHeader>\n      {(isUninitialized || isLoading || isFetching) && (\n        <Main>\n          <Loading />\n        </Main>\n      )}\n      {isError && (\n        <Main>\n          <ErrorState />\n        </Main>\n      )}\n      {!(isUninitialized || isLoading || isFetching) && isSuccess && (\n        <React.Fragment>\n          <Main className=\"pf-m-light pf-u-pt-sm\">\n            <RuleDetails\n              messages={formatMessages(\n                intl,\n                RuleDetailsMessagesKeys,\n                messagesValues\n              )}\n              product={AdvisorProduct.ocp}\n              rule={content}\n              isDetailsPage\n              header={\n                <React.Fragment>\n                  <PageHeaderTitle\n                    title={\n                      <React.Fragment>\n                        {content.description} <RuleLabels rule={content} />\n                      </React.Fragment>\n                    }\n                  />\n                  <p>\n                    {intl.formatMessage(messages.rulesDetailsPubishdate, {\n                      date: (\n                        <DateFormat\n                          date={new Date(content.publish_date)}\n                          type=\"onlyDate\"\n                        />\n                      ),\n                    })}\n                    {content.tags &&\n                      (Array.isArray(content.tags) ? (\n                        <LabelGroup\n                          className=\"categoryLabels\"\n                          numLabels={1}\n                          isCompact\n                        >\n                          {content.tags.reduce((labels, tag) => {\n                            if (RULE_CATEGORIES[tag]) {\n                              labels.push(\n                                <Label\n                                  key={`label-${tag}`}\n                                  color=\"blue\"\n                                  isCompact\n                                >\n                                  {\n                                    FILTER_CATEGORIES.category.values[\n                                      RULE_CATEGORIES[tag] - 1\n                                    ].label\n                                  }\n                                </Label>\n                              );\n                            }\n                            return labels;\n                          }, [])}\n                        </LabelGroup>\n                      ) : (\n                        <Label isCompact>{content.tags}</Label>\n                      ))}\n                  </p>\n                </React.Fragment>\n              }\n              onVoteClick={async (rule, rating) =>\n                await Post(`${BASE_URL}/v2/rating`, {}, { rule, rating })\n              }\n            >\n              <Flex>\n                <FlexItem align={{ default: 'alignRight' }}>\n                  <Dropdown\n                    className=\"ins-c-rec-details__actions_dropdown\"\n                    onSelect={() =>\n                      setActionsDropdownOpen(!actionsDropdownOpen)\n                    }\n                    position=\"right\"\n                    ouiaId=\"actions\"\n                    toggle={\n                      <DropdownToggle\n                        onToggle={(actionsDropdownOpen) =>\n                          setActionsDropdownOpen(actionsDropdownOpen)\n                        }\n                        toggleIndicator={CaretDownIcon}\n                      >\n                        {intl.formatMessage(messages.actions)}\n                      </DropdownToggle>\n                    }\n                    isOpen={actionsDropdownOpen}\n                    dropdownItems={\n                      content?.disabled\n                        ? [\n                            <DropdownItem\n                              key=\"link\"\n                              ouiaId=\"enable\"\n                              onClick={() => {\n                                enableRule(rule);\n                              }}\n                            >\n                              {intl.formatMessage(messages.enableRule)}\n                            </DropdownItem>,\n                          ]\n                        : [\n                            <DropdownItem\n                              key=\"link\"\n                              ouiaId=\"disable\"\n                              onClick={() => {\n                                handleModalToggle(true);\n                              }}\n                            >\n                              {intl.formatMessage(messages.disableRule)}\n                            </DropdownItem>,\n                          ]\n                    }\n                  />\n                </FlexItem>\n              </Flex>\n            </RuleDetails>\n          </Main>\n          <Main>\n            <React.Fragment>\n              {(content?.hosts_acked_count ||\n                ackedClusters?.length > 0 ||\n                content?.disabled) && (\n                <Card className=\"cardOverride\">\n                  <CardHeader>\n                    <Title headingLevel=\"h4\" size=\"xl\">\n                      <BellSlashIcon size=\"sm\" />\n                      &nbsp;\n                      {intl.formatMessage(\n                        (content?.hosts_acked_count ||\n                          ackedClusters?.length > 0) &&\n                          !content?.disabled\n                          ? messages.ruleIsDisabledForClusters\n                          : messages.ruleIsDisabled\n                      )}\n                    </Title>\n                  </CardHeader>\n                  <CardBody>\n                    {(content?.hosts_acked_count ||\n                      ackedClusters?.length > 0) &&\n                    !content?.disabled ? (\n                      <React.Fragment>\n                        {intl.formatMessage(\n                          messages.ruleIsDisabledForClustersBody,\n                          {\n                            clusters: ackedClusters?.length,\n                          }\n                        )}\n                        {!clustersIsFetching && ackedClusters?.length > 0 ? (\n                          <React.Fragment>\n                            &nbsp;\n                            <Button\n                              isInline\n                              variant=\"link\"\n                              onClick={() => setViewSystemsModalOpen(true)}\n                              ouiaId=\"view-clusters\"\n                            >\n                              {intl.formatMessage(messages.viewClusters)}\n                            </Button>\n                          </React.Fragment>\n                        ) : (\n                          <OneLineLoader />\n                        )}\n                      </React.Fragment>\n                    ) : (\n                      !ackIsFetching &&\n                      ackData && (\n                        <React.Fragment>\n                          {ackData?.justification\n                            ? intl.formatMessage(\n                                messages.ruleIsDisabledWithJustificaiton,\n                                {\n                                  date: (\n                                    <span>\n                                      <DateFormat\n                                        date={ruleDate}\n                                        type=\"onlyDate\"\n                                      />\n                                    </span>\n                                  ),\n                                  reason: ackData.justification,\n                                }\n                              )\n                            : intl.formatMessage(\n                                messages.ruleIsDisabledWithoutJustificaiton,\n                                {\n                                  date: (\n                                    <span>\n                                      <DateFormat\n                                        date={ruleDate}\n                                        type=\"onlyDate\"\n                                      />\n                                    </span>\n                                  ),\n                                }\n                              )}\n                        </React.Fragment>\n                      )\n                    )}\n                  </CardBody>\n                  <CardFooter>\n                    {(content?.hosts_acked_count ||\n                      ackedClusters?.length > 0) &&\n                    !content?.disabled ? (\n                      !clustersIsFetching && ackedClusters ? (\n                        <Button\n                          isInline\n                          variant=\"link\"\n                          onClick={() =>\n                            enableRecForHosts({\n                              uuids: ackedClusters.map((c) => c.cluster_id),\n                            })\n                          }\n                          ouiaId=\"enable-all\"\n                        >\n                          {intl.formatMessage(messages.enableRuleForClusters)}\n                        </Button>\n                      ) : (\n                        <OneLineLoader />\n                      )\n                    ) : (\n                      <Button\n                        isInline\n                        variant=\"link\"\n                        onClick={() => enableRule(rule)}\n                        ouiaId=\"rule\"\n                      >\n                        {intl.formatMessage(messages.enableRule)}\n                      </Button>\n                    )}\n                  </CardFooter>\n                </Card>\n              )}\n              {!content?.disabled && (\n                <React.Fragment>\n                  <Title className=\"titleOverride\" headingLevel=\"h3\" size=\"2xl\">\n                    {intl.formatMessage(messages.affectedClusters)}\n                  </Title>\n                  <AffectedClustersTable\n                    query={clusters}\n                    rule={content}\n                    afterDisableFn={afterDisableFn}\n                  />\n                </React.Fragment>\n              )}\n              {content?.disabled && (\n                <MessageState\n                  icon={BellSlashIcon}\n                  title={intl.formatMessage(messages.ruleIsDisabled)}\n                  text={intl.formatMessage(messages.ruleIsDisabledBody)}\n                />\n              )}\n            </React.Fragment>\n          </Main>\n        </React.Fragment>\n      )}\n    </React.Fragment>\n  );\n};\n\nRecommendation.propTypes = {\n  rule: PropTypes.object.isRequired,\n  ack: PropTypes.object.isRequired,\n  clusters: PropTypes.object.isRequired,\n  match: PropTypes.object.isRequired,\n};\n\nexport { Recommendation };\n","import React, { useEffect } from 'react';\nimport { useParams, useRouteMatch } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\n\nimport { Recommendation } from './Recommendation';\nimport {\n  useGetAffectedClustersQuery,\n  useGetRuleByIdQuery,\n} from '../../Services/SmartProxy';\nimport { useGetRecAcksQuery } from '../../Services/Acks';\nimport messages from '../../Messages';\n\nconst RecommendationWrapper = () => {\n  const intl = useIntl();\n  const rule = useGetRuleByIdQuery(useParams().recommendationId);\n  const ack = useGetRecAcksQuery({ ruleId: useParams().recommendationId });\n  if (rule.isSuccess && rule.data?.content?.description) {\n    const subnav = `${rule.data.content.description} - Recommendations`;\n    insights.chrome.updateDocumentTitle(\n      intl.formatMessage(messages.documentTitle, { subnav })\n    );\n  }\n  const clusters = useGetAffectedClustersQuery(useParams().recommendationId);\n\n  useEffect(() => {\n    rule.refetch();\n  }, [useParams().recommendationId]);\n\n  return (\n    <Recommendation\n      rule={rule}\n      ack={ack}\n      clusters={clusters}\n      match={useRouteMatch()}\n    />\n  );\n};\n\nexport default RecommendationWrapper;\n","import React from 'react';\nimport ContentLoader from 'react-content-loader';\n\nconst OneLineLoader = () => (\n  <ContentLoader height={20}>\n    <rect x=\"0\" y=\"0\" rx=\"4\" ry=\"4\" width=\"300\" height=\"20\" />\n  </ContentLoader>\n);\n\nexport { OneLineLoader };\n"],"names":["Breadcrumbs","current","intl","useIntl","location","useLocation","splitUrl","pathname","split","ouiaId","className","Link","to","formatMessage","messages","isActive","propTypes","PropTypes","Loading","id","Card","CardBody","AffectedClustersTable","query","rule","afterDisableFn","dispatch","useDispatch","useState","filteredRows","setFilteredRows","displayedRows","setDisplayedRows","disableRuleModalOpen","setDisableRuleModalOpen","selected","setSelected","undefined","host","setHost","isError","isUninitialized","isFetching","isSuccess","data","disabled","enabled","rows","filters","useSelector","f","affectedClustersState","perPage","limit","page","offset","allSelected","length","updateFilters","updateAffectedClustersFilters","addFilterParam","param","values","_addFilterParam","filterConfig","items","label","placeholder","type","conditionalFilterType","filterValues","key","onChange","event","value","text","version","uniqBy","filter","r","meta","cluster_version","map","sort","a","b","compareSemVer","reverse","isDisabled","onSetPage","_e","pageNumber","newOffset","onSetPerPage","buildDisplayedRows","slice","cells","rule_id","AFFECTED_CLUSTERS_NAME_CELL","AFFECTED_CLUSTERS_VERSION_CELL","AFFECTED_CLUSTERS_LAST_SEEN_CELL","DateFormat","extraTitle","date","variant","Tooltip","content","onSelect","isSelected","rowId","i","useEffect","newFilteredRows","allRows","valid","console","error","cluster","cluster_name","last_checked_at","row","toLowerCase","includes","fst","snd","d","sortDirection","sortIndex","localeCompare","Date","buildFilteredRows","newDisplayedRows","handleModalToggle","DisableRule","isModalOpen","afterFn","hosts","PrimaryToolbar","pagination","itemCount","onPerPageSelect","activeFiltersConfig","buildFilterChips","FILTER_CATEGORIES","deleteTitle","onDelete","itemsToRemove","isAll","AFFECTED_CLUSTERS_INITIAL_STATE","item","newFilter","urlParam","Array","isArray","String","chips","_removeFilterParam","bulkSelect","count","title","onClick","checked","actionsConfig","actions","props","Table","AFFECTED_CLUSTERS_COLUMNS","sortBy","index","direction","onSort","canSelectAll","rowIndex","EmptyTable","Bullseye","TableToolbar","isFooter","Pagination","PaginationVariant","onPageInput","ViewHostAcks","clusters","recId","addNotification","notification","isLoading","refetch","hostAcks","setRows","unclean","setUnclean","columns","transforms","cellWidth","deleteAck","enableRuleForCluster","uuid","cluster_id","dismissable","description","justification","disabled_at","Button","isInline","size","Modal","width","isOpen","onClose","colSpan","TableHeader","TableBody","defaultProps","Recommendation","ack","match","notify","params","recommendationId","actionsDropdownOpen","setActionsDropdownOpen","viewSystemsModalOpen","setViewSystemsModalOpen","ackData","ackIsFetching","refetchAck","ruleDate","updated_at","created_at","clustersData","clustersIsFetching","refetchClusters","adjustOCPRule","ackedClusters","enableRecForHosts","uuids","requests","Promise","all","timeout","enableRule","Delete","BASE_URL","messagesValues","useMemo","mapContentToValues","toggleModal","s","PageHeader","Main","ErrorState","formatMessages","RuleDetailsMessagesKeys","product","AdvisorProduct","isDetailsPage","header","PageHeaderTitle","RuleLabels","publish_date","tags","LabelGroup","numLabels","isCompact","reduce","labels","tag","RULE_CATEGORIES","push","Label","color","onVoteClick","rating","Post","Flex","FlexItem","align","default","Dropdown","position","toggle","DropdownToggle","onToggle","toggleIndicator","CaretDownIcon","dropdownItems","DropdownItem","hosts_acked_count","CardHeader","Title","headingLevel","reason","CardFooter","c","MessageState","icon","BellSlashIcon","useGetRuleByIdQuery","useParams","useGetRecAcksQuery","ruleId","subnav","insights","chrome","updateDocumentTitle","useGetAffectedClustersQuery","useRouteMatch","OneLineLoader","height","x","y","rx","ry"],"sourceRoot":""}