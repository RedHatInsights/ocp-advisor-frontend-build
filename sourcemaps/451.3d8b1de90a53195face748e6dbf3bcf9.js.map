{"version":3,"file":"js/451.ce72cb6b5060fabb8dc5.js","mappings":"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","sources":["webpack:///./src/Components/Modals/DisableRule.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\n\nimport { Button } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport { Checkbox } from '@patternfly/react-core/dist/js/components/Checkbox/Checkbox';\nimport { Form } from '@patternfly/react-core/dist/js/components/Form/Form';\nimport { FormGroup } from '@patternfly/react-core/dist/js/components/Form/FormGroup';\nimport { Modal } from '@patternfly/react-core/dist/js/components/Modal/Modal';\nimport { TextInput } from '@patternfly/react-core/dist/js/components/TextInput/TextInput';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\n\nimport messages from '../../Messages';\nimport { disableRuleForCluster, useSetAckMutation } from '../../Services/Acks';\n\nconst DisableRule = ({\n  isModalOpen,\n  handleModalToggle,\n  rule,\n  afterFn,\n  host,\n  hosts,\n}) => {\n  const intl = useIntl();\n  const [justification, setJustificaton] = useState('');\n  const [singleHost, setSingleHost] = useState(!!host);\n  const [multipleHosts, setMultipleHosts] = useState(hosts.length > 0);\n  const [setAck] = useSetAckMutation();\n  const dispatch = useDispatch();\n  const notify = (data) => dispatch(addNotification(data));\n\n  const bulkHostActions = async () => {\n    // disable for a group of hosts (clusters)\n    try {\n      const requests = hosts.map((h) =>\n        disableRuleForCluster({\n          uuid: h.id,\n          recId: rule.rule_id,\n          justification,\n        })\n      );\n      await Promise.all(requests);\n      notify({\n        variant: 'success',\n        dismissable: true,\n        timeout: true,\n        title: intl.formatMessage(messages.recSuccessfullyDisabledForCluster),\n      });\n      afterFn && afterFn();\n    } catch (error) {\n      notify({\n        variant: 'danger',\n        dismissable: true,\n        title: intl.formatMessage(messages.error),\n        description: `${error}`,\n      });\n    }\n  };\n\n  const disableRule = async () => {\n    try {\n      if (singleHost) {\n        // disable the rec for this single cluster\n        await disableRuleForCluster({\n          uuid: host,\n          recId: rule.rule_id,\n          justification,\n        });\n        notify({\n          variant: 'success',\n          timeout: true,\n          dismissable: true,\n          title: intl.formatMessage(messages.recSuccessfullyDisabledForCluster),\n        });\n      } else if (multipleHosts) {\n        bulkHostActions();\n      } else {\n        // disable the whole rec\n        await setAck({\n          rule_id: rule.rule_id,\n          justification,\n        }).unwrap();\n        notify({\n          variant: 'success',\n          timeout: true,\n          dismissable: true,\n          title: intl.formatMessage(messages.recSuccessfullyDisabled),\n        });\n      }\n      setJustificaton('');\n      afterFn && afterFn();\n    } catch (error) {\n      notify({\n        variant: 'danger',\n        dismissable: true,\n        title: intl.formatMessage(messages.error),\n        description: `${error}`,\n      });\n    }\n\n    handleModalToggle(false);\n  };\n\n  return (\n    <Modal\n      variant=\"small\"\n      title={intl.formatMessage(messages.disableRule)}\n      isOpen={isModalOpen}\n      onClose={() => {\n        handleModalToggle();\n        setJustificaton('');\n      }}\n      actions={[\n        <Button\n          key=\"confirm\"\n          variant=\"primary\"\n          onClick={() => disableRule()}\n          ouiaId=\"confirm\"\n        >\n          {intl.formatMessage(messages.save)}\n        </Button>,\n        <Button\n          key=\"cancel\"\n          variant=\"link\"\n          onClick={() => {\n            handleModalToggle(false);\n            setJustificaton('');\n          }}\n          ouiaId=\"cancel\"\n        >\n          {intl.formatMessage(messages.cancel)}\n        </Button>,\n      ]}\n      ouiaId=\"recommendation-disable\"\n    >\n      {intl.formatMessage(messages.disableRuleBody)}\n      <Form>\n        <FormGroup fieldId=\"blank-form\" />\n        {(host || hosts.length > 0) && (\n          <FormGroup fieldId=\"disable-rule-one-system\">\n            <Checkbox\n              isChecked={singleHost || multipleHosts}\n              onChange={() => {\n                host\n                  ? setSingleHost(!singleHost)\n                  : setMultipleHosts(!multipleHosts);\n              }}\n              label={\n                host\n                  ? intl.formatMessage(messages.disableRuleSingleCluster)\n                  : intl.formatMessage(messages.disableRuleForClusters)\n              }\n              id=\"disable-rule-one-system\"\n              name=\"disable-rule-one-system\"\n              ouiaId=\"disable-recommendation-one-cluster\"\n            />\n          </FormGroup>\n        )}\n        <FormGroup\n          label={intl.formatMessage(messages.justificationNote)}\n          fieldId=\"disable-rule-justification\"\n        >\n          <TextInput\n            type=\"text\"\n            id=\"disable-rule-justification\"\n            aria-describedby=\"disable-rule-justification\"\n            value={justification}\n            onChange={(text) => setJustificaton(text)}\n            onKeyDown={(e) =>\n              e.key === 'Enter' && (e.preventDefault(), disableRule())\n            }\n          />\n        </FormGroup>\n      </Form>\n    </Modal>\n  );\n};\n\nDisableRule.propTypes = {\n  isModalOpen: PropTypes.bool,\n  rule: PropTypes.object,\n  handleModalToggle: PropTypes.func,\n  afterFn: PropTypes.func,\n  host: PropTypes.object,\n  hosts: PropTypes.array,\n};\n\nDisableRule.defaultProps = {\n  isModalOpen: false,\n  rule: {},\n  handleModalToggle: () => undefined,\n  afterFn: () => undefined,\n  host: undefined,\n  hosts: [],\n};\n\nexport default DisableRule;\n"],"names":["DisableRule","isModalOpen","handleModalToggle","rule","afterFn","host","hosts","intl","useIntl","useState","justification","setJustificaton","singleHost","setSingleHost","length","multipleHosts","setMultipleHosts","useSetAckMutation","setAck","dispatch","useDispatch","notify","data","addNotification","bulkHostActions","requests","map","h","disableRuleForCluster","uuid","id","recId","rule_id","Promise","all","variant","dismissable","timeout","title","formatMessage","messages","description","disableRule","unwrap","isOpen","onClose","actions","Button","key","onClick","ouiaId","fieldId","isChecked","onChange","label","name","type","value","text","s","onKeyDown","e","preventDefault","propTypes","PropTypes","defaultProps","undefined"],"sourceRoot":""}