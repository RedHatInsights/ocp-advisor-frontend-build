{"version":3,"file":"js/427.1669295155842.bfc3baa2744e064e1ad9.js","mappings":"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","sources":["webpack:///./src/Components/Common/Tables.js"],"sourcesContent":["import capitalize from 'lodash/capitalize';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { useEffect, useState } from 'react';\nimport { coerce, compare, valid } from 'semver';\nimport {\n  CLUSTER_FILTER_CATEGORIES,\n  FILTER_CATEGORIES,\n  RULE_CATEGORIES,\n} from '../../AppConstants';\n\nexport const passFilters = (rule, filters) =>\n  Object.entries(filters).every(([filterKey, filterValue]) => {\n    switch (filterKey) {\n      case 'text':\n        return rule.description\n          .toLowerCase()\n          .includes(filterValue.toLowerCase());\n      case FILTER_CATEGORIES.total_risk.urlParam:\n        return filterValue.includes(String(rule.total_risk));\n      case FILTER_CATEGORIES.category.urlParam:\n        return rule.tags.find((c) =>\n          filterValue.includes(String(RULE_CATEGORIES[c]))\n        );\n      case FILTER_CATEGORIES.impact.urlParam:\n        return filterValue.includes(String(rule.impact));\n      case FILTER_CATEGORIES.impacting.urlParam:\n        return filterValue.length > 0\n          ? filterValue.some((v) => {\n              if (v === 'true') {\n                return rule.impacted_clusters_count > 0;\n              }\n              if (v === 'false') {\n                return rule.impacted_clusters_count === 0;\n              }\n            })\n          : true;\n      case FILTER_CATEGORIES.likelihood.urlParam:\n        return filterValue.includes(String(rule.likelihood));\n      case FILTER_CATEGORIES.rule_status.urlParam:\n        return (\n          filterValue === 'all' ||\n          (filterValue === 'disabled' && rule.disabled) ||\n          (filterValue === 'enabled' && !rule.disabled)\n        );\n      default:\n        return true;\n    }\n  });\n\nexport const passFiltersCluster = (cluster, filters) =>\n  Object.entries(filters).every(([filterKey, filterValue]) => {\n    switch (filterKey) {\n      case 'text':\n        return (cluster.cluster_name || cluster.cluster_id)\n          .toLowerCase()\n          .includes(filterValue.toLowerCase());\n      case CLUSTER_FILTER_CATEGORIES.hits.urlParam:\n        return (\n          // clusters with at least one rule hit\n          (filterValue.length === 0 && parseInt(cluster.total_hit_count) > 0) ||\n          // all clusters\n          filterValue.includes('all') ||\n          // clusters with at least one rule hit for any of the active risk filters\n          filterValue.some((v) => cluster.hits_by_total_risk[v] > 0)\n        );\n      case 'version':\n        return (\n          filterValue.length === 0 ||\n          filterValue.includes(toValidSemVer(cluster.cluster_version))\n        );\n      default:\n        return true;\n    }\n  });\n\nconst pruneFilters = (localFilters, filterCategories) => {\n  const prunedFilters = Object.entries(localFilters || {});\n  return prunedFilters.reduce((arr, it) => {\n    const [key, item] = it;\n    if (filterCategories[key]) {\n      const category = filterCategories[key];\n      const chips = Array.isArray(item)\n        ? item.map((value) => {\n            const selectedCategoryValue = category.values.find(\n              (values) => values.value === String(value)\n            );\n            return selectedCategoryValue\n              ? {\n                  name:\n                    selectedCategoryValue.text || selectedCategoryValue.label,\n                  value,\n                }\n              : { name: value, value };\n          })\n        : [\n            {\n              name: category.values.find(\n                (values) => values.value === String(item)\n              ).label,\n              value: item,\n            },\n          ];\n      return [\n        ...arr,\n        {\n          category: capitalize(category.title),\n          chips,\n          urlParam: category.urlParam,\n        },\n      ];\n    } else if (key === 'text') {\n      return [\n        ...arr,\n        ...(item.length > 0\n          ? [\n              {\n                category: 'Name',\n                chips: [{ name: item, value: item }],\n                urlParam: key,\n              },\n            ]\n          : []),\n      ];\n    } else if (key === 'version') {\n      return [\n        ...arr,\n        ...(item.length > 0\n          ? [\n              {\n                category: 'Version',\n                chips: item.map((it) => ({\n                  name: it,\n                  value: it,\n                })),\n                urlParam: key,\n              },\n            ]\n          : []),\n      ];\n    }\n  }, []);\n};\n\nexport const buildFilterChips = (filters, categories) => {\n  const localFilters = cloneDeep(filters);\n  delete localFilters.sortIndex;\n  delete localFilters.sortDirection;\n  delete localFilters.sort;\n  delete localFilters.offset;\n  delete localFilters.limit;\n  localFilters?.hits &&\n    localFilters.hits.length === 0 &&\n    delete localFilters.hits;\n  return pruneFilters(localFilters, categories);\n};\n\n// parses url params for use in table/filter chips\nexport const paramParser = (search) => {\n  const searchParams = new URLSearchParams(search);\n  return Array.from(searchParams).reduce(\n    (acc, [key, value]) => ({\n      ...acc,\n      [key]: ['text', 'first', 'rule_status', 'sort'].includes(key)\n        ? value // just copy the full value\n        : value === 'true' || value === 'false'\n        ? JSON.parse(value) // parse boolean\n        : // parse array of values\n          value.split(','),\n    }),\n    {}\n  );\n};\n\nexport const translateSortParams = (value) => ({\n  name: value.substring(value.startsWith('-') ? 1 : 0),\n  direction: value.startsWith('-') ? 'desc' : 'asc',\n});\n\nexport const translateSortValue = (index, indexMapping, direction) => {\n  if (!['desc', 'asc'].includes(direction)) {\n    console.error('Invalid sort parameters (is not asc nor desc)');\n  }\n  return `${direction === 'asc' ? '' : '-'}${indexMapping[index]}`;\n};\n\n// TODO: remove since unused\nexport const debounce = (value, delay) => {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [delay, value]);\n\n  return debouncedValue;\n};\n\nexport const updateSearchParams = (filters = {}, columnMapping) => {\n  const url = new URL(window.location.origin + window.location.pathname);\n  // separately check the sort param\n  url.searchParams.set(\n    'sort',\n    translateSortValue(filters.sortIndex, columnMapping, filters.sortDirection)\n  );\n  // check the rest of filters\n  Object.entries(filters).forEach(([key, value]) => {\n    return (\n      key !== 'sortIndex' &&\n      key !== 'sortDirection' &&\n      key !== 'sort' &&\n      value !== '' &&\n      !(Array.isArray(value) && value.length === 0) &&\n      url.searchParams.set(key, value)\n    );\n  });\n  window.history.replaceState(null, null, url.href);\n};\n\n// TODO: move to Utils.js\nexport const compareSemVer = (v1, v2, d) => d * compare(v1, v2);\nexport const toValidSemVer = (version) =>\n  coerce(version === undefined || !valid(coerce(version)) ? '0.0.0' : version)\n    .version;\n\nexport const removeFilterParam = (currentFilters, updateFilters, param) => {\n  const { [param]: omitted, ...newFilters } = { ...currentFilters, offset: 0 };\n  updateFilters({\n    ...newFilters,\n    ...(param === 'text'\n      ? { text: '' }\n      : param === 'hits'\n      ? { hits: [] }\n      : param === 'version'\n      ? { version: [] }\n      : {}),\n  });\n};\n\nexport const addFilterParam = (currentFilters, updateFilters, param, values) =>\n  values.length > 0\n    ? updateFilters({\n        ...currentFilters,\n        offset: 0,\n        ...{ [param]: values },\n      })\n    : removeFilterParam(currentFilters, updateFilters, param);\n"],"names":["passFilters","rule","filters","Object","entries","every","filterKey","filterValue","description","toLowerCase","includes","FILTER_CATEGORIES","String","total_risk","tags","find","c","f","RULE_CATEGORIES","impact","length","some","v","impacted_clusters_count","likelihood","disabled","passFiltersCluster","cluster","cluster_name","cluster_id","CLUSTER_FILTER_CATEGORIES","parseInt","total_hit_count","hits_by_total_risk","toValidSemVer","cluster_version","buildFilterChips","categories","localFilters","cloneDeep","sortIndex","sortDirection","sort","offset","limit","hits","filterCategories","prunedFilters","reduce","arr","it","key","item","category","chips","Array","isArray","map","value","selectedCategoryValue","values","name","text","label","capitalize","title","urlParam","pruneFilters","paramParser","search","searchParams","URLSearchParams","from","acc","JSON","parse","split","translateSortParams","substring","startsWith","direction","translateSortValue","index","indexMapping","console","error","updateSearchParams","columnMapping","url","URL","window","location","origin","pathname","set","forEach","history","replaceState","href","compareSemVer","v1","v2","d","compare","version","coerce","undefined","valid","removeFilterParam","currentFilters","updateFilters","param","newFilters","addFilterParam"],"sourceRoot":""}