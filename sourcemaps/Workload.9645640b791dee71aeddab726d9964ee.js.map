{"version":3,"file":"js/Workload.00e5f359b83813b81907.js","mappings":"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","sources":["webpack:///./src/Components/Breadcrumbs/index.js","webpack:///./src/Components/Loading/Loading.js","webpack:///./src/Components/WorkloadHeader/WorkloadHeader.js","webpack:///./src/Components/WorkloadHeader/index.js","webpack:///./src/Components/ObjectsModalTable/ObjectsModalTable.js","webpack:///./src/Components/ObjectsModal/ObjectsModal.js","webpack:///./src/Components/ExpandedRulesDetails.js/ExpandedRulesDetails.js","webpack:///./src/Components/WorkloadRules/WorkloadRules.js","webpack:///./src/Components/Workload/Workload.js","webpack:///./src/Components/Workload/index.js","webpack:///./src/Utilities/Loaders.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { Link, useLocation } from 'react-router-dom';\n\nimport { Breadcrumb, BreadcrumbItem } from '@patternfly/react-core';\n\nimport messages from '../../Messages';\n\nconst Breadcrumbs = ({ current, workloads }) => {\n  const intl = useIntl();\n  const location = useLocation();\n  const splitUrl = location.pathname.split('/');\n\n  return (\n    <div>\n      <Breadcrumb ouiaId=\"detail\">\n        <BreadcrumbItem className=\"breadcrumb-item\">\n          <Link to={workloads ? `../..` : `..`} relative=\"path\">\n            {`${intl.formatMessage(messages.insightsHeader)} ${splitUrl[4]}`}\n          </Link>\n        </BreadcrumbItem>\n        <BreadcrumbItem className=\"breadcrumb-item\" isActive>\n          {current}\n        </BreadcrumbItem>\n      </Breadcrumb>\n    </div>\n  );\n};\n\nBreadcrumbs.propTypes = {\n  current: PropTypes.string,\n  workloads: PropTypes.boolean,\n};\n\nexport default Breadcrumbs;\n","import React from 'react';\nimport { Card, CardBody } from '@patternfly/react-core';\nimport { List } from 'react-content-loader';\n\nconst Loading = () => (\n  <Card ouiaId=\"loading-skeleton\">\n    <CardBody>\n      <List />\n    </CardBody>\n  </Card>\n);\n\nexport default Loading;\n","import React from 'react';\n\nimport {\n  Grid,\n  GridItem,\n  Stack,\n  StackItem,\n  Title,\n} from '@patternfly/react-core';\nimport Skeleton from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { OneLineLoader } from '../../Utilities/Loaders';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport PropTypes from 'prop-types';\n\nexport const WorkloadHeader = ({ workloadData, namespaceId, clusterId }) => {\n  const { isUninitialized, isFetching, data: workload } = workloadData;\n  return (\n    <Grid id=\"workload-header\" md={12} hasGutter>\n      <GridItem span={8}>\n        <Title\n          size=\"2xl\"\n          headingLevel=\"h1\"\n          id=\"cluster-header-title\"\n          ouiaId=\"cluster-name\"\n        >\n          {isUninitialized || isFetching ? (\n            <>\n              <Skeleton size=\"sm\" />\n              <Skeleton size=\"sm\" />\n            </>\n          ) : (\n            <>\n              <p>{workload.cluster.display_name}</p>\n              <p>{workload.namespace.name}</p>\n            </>\n          )}\n        </Title>\n      </GridItem>\n      <GridItem>\n        <Stack>\n          <StackItem id=\"workload-header-uuid\">\n            <span>Cluster UUID:</span> <span>{clusterId}</span>{' '}\n            <span>Namespace UUID:</span> <span>{namespaceId}</span>\n          </StackItem>\n          <StackItem id=\"workload-header-last-seen\">\n            <span>Last seen: </span>\n            <span>\n              {isUninitialized || isFetching ? (\n                <OneLineLoader />\n              ) : workload?.metadata?.last_checked_at ? (\n                <DateFormat\n                  date={workload.metadata.last_checked_at}\n                  type=\"exact\"\n                />\n              ) : (\n                <>Unknown</>\n              )}\n            </span>\n          </StackItem>\n        </Stack>\n      </GridItem>\n    </Grid>\n  );\n};\n\nWorkloadHeader.propTypes = {\n  clusterId: PropTypes.string.isRequired,\n  namespaceId: PropTypes.string.isRequired,\n  workloadData: PropTypes.shape({\n    isUninitialized: PropTypes.bool.isRequired,\n    isFetching: PropTypes.bool.isRequired,\n    data: PropTypes.shape({\n      namespace: PropTypes.shape({\n        uuid: PropTypes.string,\n        name: PropTypes.string,\n      }),\n      cluster: PropTypes.shape({\n        uuid: PropTypes.string,\n        display_name: PropTypes.string,\n      }),\n      status: PropTypes.string,\n    }),\n  }),\n};\n","import React from 'react';\nimport { WorkloadHeader } from './WorkloadHeader';\nimport { useParams } from 'react-router-dom';\n// import { useGetWorkloadByIdQuery } from '../../Services/SmartProxy';\nimport mockdata from '../../../cypress/fixtures/api/insights-results-aggregator/v2/workload/00000001-0001-0001-0001-000000000005-fad82c1f-96db-430f-b3ec-503fb9eeb7bb/info.json';\nimport mockList from '../../../cypress/fixtures/api/insights-results-aggregator/v2/workload/list.json';\n\nconst WorkloadsHeaderWrapper = () => {\n  const { namespaceId, clusterId } = useParams();\n  // const workloadData = useGetWorkloadByIdQuery({\n  //   namespaceId,\n  //   clusterId,\n  // });\n\n  const uuid = `${clusterId}/${namespaceId}`;\n  let workloadData = {\n    isError: false,\n    isFetching: true,\n    isUninitialized: true,\n    isLoading: true,\n    isSuccess: false,\n    data: {},\n    refetch: () => null,\n  };\n\n  if (mockList.includes(uuid)) {\n    const customData = {\n      ...mockdata,\n      cluster: {\n        display_name: `Cluster name ${clusterId}`,\n        uuid: clusterId,\n      },\n      namespace: {\n        name: `Namespace name ${namespaceId}`,\n        uuid: namespaceId,\n      },\n    };\n    workloadData = {\n      isError: false,\n      isFetching: false,\n      isUninitialized: false,\n      isLoading: false,\n      isSuccess: true,\n      data: { ...customData },\n      refetch: () => null,\n    };\n  } else {\n    workloadData = {\n      isError: true,\n      isFetching: false,\n      isUninitialized: false,\n      isLoading: false,\n      isSuccess: false,\n      data: { status: 'error' },\n      refetch: () => null,\n    };\n  }\n\n  return (\n    <WorkloadHeader\n      workloadData={workloadData}\n      namespaceId={namespaceId}\n      clusterId={clusterId}\n    />\n  );\n};\n\nexport default WorkloadsHeaderWrapper;\n","import React, { useEffect, useState } from 'react';\nimport { Table, Thead, Tr, Th, Tbody, Td } from '@patternfly/react-table';\nimport PrimaryToolbar from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport { ObjectsTableColumns } from '../../AppConstants';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  WORKLOADS_OBJECTS_TABLE_INITIAL_STATE,\n  resetFilters,\n  updateWorkloadsObjectsListFilters,\n} from '../../Services/Filters';\nimport { removeFilterParam as _removeFilterParam } from '../Common/Tables';\nimport { Pagination } from '@patternfly/react-core';\nimport {\n  filtersAreApplied,\n  passObjectsFilters,\n  pruneWorkloadsRulesFilters,\n} from '../../Utilities/Workloads';\nimport { NoMatchingWorkloadsObjects } from '../MessageState/EmptyStates';\nimport Loading from '../Loading/Loading';\nimport { PaginationVariant } from '@patternfly/react-core/dist/js/components/Pagination/Pagination';\n\nexport const ObjectsModalTable = ({ objects }) => {\n  const objectsData = objects || [];\n  const dispatch = useDispatch();\n  const [filtersApplied, setFiltersApplied] = useState(false);\n  const [filteredRows, setFilteredRows] = useState([]);\n  const [displayedRows, setDisplayedRows] = useState([]);\n  const [rowsFiltered, setRowsFiltered] = useState(false);\n  const filters = useSelector(\n    ({ filters }) => filters.workloadsObjectsListState\n  );\n  const page = Math.floor(filters.offset / filters.limit) + 1;\n  const perPage = filters.limit;\n\n  const removeFilterParam = (param) =>\n    _removeFilterParam(filters, updateFilters, param);\n\n  const updateFilters = (payload) =>\n    dispatch(updateWorkloadsObjectsListFilters(payload));\n  const preparedRows = displayedRows.length > 0 ? true : false;\n  const loadingState = !rowsFiltered;\n\n  const filterConfigItems = [\n    {\n      label: 'Object ID',\n      filterValues: {\n        key: 'object_id',\n        onChange: (_event, value) =>\n          updateFilters({ ...filters, offset: 0, object_id: value }),\n        value: filters.object_id,\n        placeholder: 'Filter by Object ID',\n      },\n    },\n  ];\n\n  const buildFilterChips = () => {\n    const localFilters = { ...filters };\n    delete localFilters.sortIndex;\n    delete localFilters.sortDirection;\n    return pruneWorkloadsRulesFilters(localFilters, {\n      label: 'Object ID',\n      type: 'text',\n      title: 'object ID',\n      urlParam: 'object_id',\n    });\n  };\n\n  const activeFiltersConfig = {\n    showDeleteButton: filtersApplied,\n    deleteTitle: 'Reset filters',\n    filters: buildFilterChips(),\n    onDelete: (_event, itemsToRemove, isAll) => {\n      if (isAll) {\n        resetFilters(\n          filters,\n          WORKLOADS_OBJECTS_TABLE_INITIAL_STATE,\n          updateFilters\n        );\n      } else {\n        itemsToRemove.map((item) => {\n          const newFilter = {\n            [item.urlParam]: Array.isArray(filters[item.urlParam])\n              ? filters[item.urlParam].filter(\n                  (value) => String(value) !== String(item.chips[0].value)\n                )\n              : '',\n          };\n          newFilter[item.urlParam].length > 0\n            ? updateFilters({ ...filters, ...newFilter })\n            : removeFilterParam(item.urlParam);\n        });\n      }\n    },\n  };\n\n  //This is where we apply filters and map rows agains the filters\n  const buildFilteredRows = (allrows, filters) => {\n    return allrows.filter((object) => passObjectsFilters(object, filters));\n  };\n\n  //building displayed rows applying limits and per page values\n  const buildDisplayedRows = (rows) => {\n    return rows.slice(perPage * (page - 1), perPage * (page - 1) + perPage);\n  };\n\n  //After objectsData is present or in case of object id filter change we setFiltered rows using buildiflterRows\n  useEffect(() => {\n    setFilteredRows(buildFilteredRows(objectsData, filters));\n  }, [objectsData, filters]);\n\n  //after objects data is present we set filtered rows and this useEffect is triggered to update displayed rows\n  //with new array of rows that have filters applied\n  useEffect(() => {\n    setDisplayedRows(buildDisplayedRows(filteredRows));\n    setFiltersApplied(filtersAreApplied(filters));\n    setRowsFiltered(true);\n  }, [filteredRows, filters.limit, filters.offset]);\n\n  const onSetPage = (_e, pageNumber) => {\n    const newOffset = pageNumber * filters.limit - filters.limit;\n    updateFilters({ ...filters, offset: newOffset });\n  };\n\n  const onPerPageSelect = (_e, perPage) => {\n    if (perPage !== filters.limit) {\n      updateFilters({ ...filters, limit: perPage, offset: 0 });\n    }\n  };\n\n  return (\n    <div id=\"objects-list-table\">\n      <PrimaryToolbar\n        pagination={{\n          page,\n          perPage,\n          onSetPage,\n          onPerPageSelect,\n          isCompact: true,\n          ouiaId: 'pager',\n          itemCount: filteredRows.length,\n        }}\n        filterConfig={{ items: filterConfigItems }}\n        activeFiltersConfig={activeFiltersConfig}\n      />\n      {loadingState ? (\n        <Loading />\n      ) : preparedRows ? (\n        <div>\n          <Table aria-label=\"Cell widths\">\n            <Thead>\n              <Tr>\n                <Th width={60}>{ObjectsTableColumns.object}</Th>\n                <Th width={30}>{ObjectsTableColumns.kind}</Th>\n              </Tr>\n            </Thead>\n            <Tbody>\n              {displayedRows?.map((object, index) => (\n                <Tr key={index}>\n                  <Td dataLabel={ObjectsTableColumns.object}>{object.uid}</Td>\n                  <Td dataLabel={ObjectsTableColumns.kind}>{object.kind}</Td>\n                </Tr>\n              ))}\n            </Tbody>\n          </Table>\n          {displayedRows.length > 0 ? (\n            <Pagination\n              ouiaId=\"pager\"\n              itemCount={filteredRows.length}\n              page={page}\n              perPage={perPage}\n              onSetPage={onSetPage}\n              onPerPageSelect={onPerPageSelect}\n              onPageInput={onSetPage}\n              widgetId={`pagination-options-menu-bottom`}\n              variant={PaginationVariant.bottom}\n            />\n          ) : (\n            <Pagination\n              itemCount={0}\n              perPage\n              page\n              onSetPage\n              onPerPageSelect\n              isDisabled\n            />\n          )}\n        </div>\n      ) : (\n        <NoMatchingWorkloadsObjects />\n      )}\n    </div>\n  );\n};\n\nObjectsModalTable.propTypes = {\n  objects: PropTypes.arrayOf(\n    PropTypes.shape({\n      kind: PropTypes.string,\n      uid: PropTypes.string,\n    })\n  ),\n};\n","import React from 'react';\nimport { Modal as PfModal } from '@patternfly/react-core';\nimport { ObjectsModalTable } from '../ObjectsModalTable/ObjectsModalTable';\nimport PropTypes from 'prop-types';\nimport mockObjects from '../../../cypress/fixtures/api/insights-results-aggregator/objects.json';\n\nconst ObjectsModal = ({ isModalOpen, setIsModalOpen }) => {\n  return (\n    <PfModal\n      isOpen={isModalOpen}\n      onClose={() => setIsModalOpen(false)}\n      variant={'medium'}\n      title=\"Objects\"\n    >\n      <ObjectsModalTable\n        //objects={objects}\n        //replace with the real objects when API is implemented\n        objects={mockObjects}\n      />\n    </PfModal>\n  );\n};\n\nexport default ObjectsModal;\n\nObjectsModal.propTypes = {\n  isModalOpen: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  objects: PropTypes.arrayOf(\n    PropTypes.shape({\n      kind: PropTypes.string,\n      uid: PropTypes.string,\n    })\n  ),\n};\n","import React, { useState } from 'react';\nimport {\n  BullseyeIcon,\n  InfoCircleIcon,\n  ThumbsUpIcon,\n} from '@patternfly/react-icons';\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  CodeBlock,\n  Divider,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\nimport { Table, Tbody, Td, Th, Thead, Tr } from '@patternfly/react-table';\nimport PropTypes from 'prop-types';\nimport TemplateProcessor from '@redhat-cloud-services/frontend-components-advisor-components/TemplateProcessor/TemplateProcessor';\nimport ObjectsModal from '../ObjectsModal/ObjectsModal';\nimport { ObjectsTableColumns } from '../../AppConstants';\n\nconst code = `oc get namespace -o jsonpath={range .items[*]}{.metadata.name}{\"\\t\"}{.metadata.uid}{\"\\n\"}{end}\n  oc -n <namespace> get <resourceKind> -o jsonpath={range .items[*]}{.metadata.name}{\"\\t\"}{.metadata.uid}{\"\\n\"}{end}`;\n\nconst ExpandedRulesDetails = ({ more_info, resolution, objects }) => {\n  const [objectsModalOpen, setObjectsModalOpen] = useState(false);\n  return (\n    <Card className=\"ins-c-report-details\" style={{ boxShadow: 'none' }}>\n      <CardBody>\n        <ObjectsModal\n          isModalOpen={objectsModalOpen}\n          setIsModalOpen={setObjectsModalOpen}\n          objects={objects}\n        />\n        <Stack\n          className=\"ins-c-report-details__cards-stack\"\n          widget-type=\"InsightsRulesCard\"\n          hasGutter\n        >\n          <StackItem>\n            <Card isCompact isPlain>\n              <CardHeader>\n                <BullseyeIcon className=\"ins-c-report-details__icon\" />\n                <strong>Detected issues</strong>\n              </CardHeader>\n              <CardBody>\n                This should be a reason field and extradata should provide us an\n                array of reasons to list here\n              </CardBody>\n            </Card>\n          </StackItem>\n          <Divider />\n          <StackItem>\n            <Card isCompact isPlain>\n              <CardHeader>\n                <ThumbsUpIcon className=\"ins-c-report-details__icon\" />\n                <strong>Steps to resolve</strong>\n              </CardHeader>\n              <CardBody>\n                <TemplateProcessor template={resolution} />\n              </CardBody>\n            </Card>\n          </StackItem>\n          <Table borders={'compactBorderless'} aria-label=\"Objects table\">\n            <Thead>\n              <Tr>\n                <Th modifier=\"fitContent\">{ObjectsTableColumns.object}</Th>\n                <Th modifier=\"fitContent\">{ObjectsTableColumns.kind}</Th>\n              </Tr>\n            </Thead>\n            <Tbody>\n              {objects.slice(0, 3).map((object, key) => (\n                <Tr key={key}>\n                  <Td dataLabel={ObjectsTableColumns.object}>{object.uid}</Td>\n                  <Td dataLabel={ObjectsTableColumns.kind}>{object.kind}</Td>\n                </Tr>\n              ))}\n            </Tbody>\n          </Table>\n          <StackItem>\n            <Button\n              variant=\"link\"\n              isInline\n              onClick={() => setObjectsModalOpen(true)}\n            >\n              View all objects\n            </Button>\n          </StackItem>\n\n          <br />\n          <CardHeader>\n            <strong>Note:</strong>\n          </CardHeader>\n          <CardBody>\n            Red Hat avoids gathering and processing namespace and resource names\n            as these may reveal confidential information. Namespaces and\n            resources are identified by their UIDs instead. You can use\n            in-cluster commands like the ones below to translate UIDs of\n            affected resources to their names.\n            <CodeBlock>{code}</CodeBlock>\n          </CardBody>\n          <React.Fragment>\n            <Divider />\n            <StackItem>\n              <Card isCompact isPlain>\n                <CardHeader>\n                  <InfoCircleIcon className=\"ins-c-report-details__icon\" />\n                  <strong>Additional info</strong>\n                </CardHeader>\n                <CardBody>{more_info}</CardBody>\n              </Card>\n            </StackItem>\n          </React.Fragment>\n        </Stack>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default ExpandedRulesDetails;\n\nExpandedRulesDetails.propTypes = {\n  more_info: PropTypes.string.isRequired,\n  resolution: PropTypes.string.isRequired,\n  objects: PropTypes.arrayOf({\n    kind: PropTypes.string,\n    uid: PropTypes.string,\n  }),\n};\n","import React, { useEffect, useState } from 'react';\nimport {\n  Table,\n  TableBody,\n  TableHeader,\n  TableVariant,\n} from '@patternfly/react-table';\nimport PrimaryToolbar from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport {\n  WORKLOADS_RULES_COLUMNS_KEYS,\n  WORKLOADS_RULES_FILTER_CONFIG,\n  WORKLOAD_RULES_COLUMNS,\n  WORKLOAD_RULES_FILTER_CATEGORIES,\n} from '../../AppConstants';\nimport PropTypes from 'prop-types';\nimport Loading from '../Loading/Loading';\nimport {\n  ErrorState,\n  NoMatchingRecsForWorkloads,\n  NoRecsForWorkloadsDetails,\n  NoWorkloadsRecsAvailable,\n} from '../MessageState/EmptyStates';\nimport InsightsLabel from '@redhat-cloud-services/frontend-components/InsightsLabel';\nimport ExpandedRulesDetails from '../ExpandedRulesDetails.js/ExpandedRulesDetails';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  WORKLOADS_RECS_TABLE_INITIAL_STATE,\n  resetFilters,\n  updateWorkloadsRecsListFilters,\n} from '../../Services/Filters';\nimport {\n  passFilterWorkloadsRecs,\n  translateSortParams,\n  paramParser,\n  updateSearchParams,\n} from '../Common/Tables';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport {\n  filtersAreApplied,\n  flatMapRows,\n  pruneWorkloadsRulesFilters,\n  sortWithSwitch,\n  workloadsRulesAddFilterParam,\n  workloadsRulesRemoveFilterParam,\n} from '../../Utilities/Workloads';\nimport { useLocation } from 'react-router-dom';\nimport './WorkloadRules.scss';\n\nconst WorkloadRules = ({ workload }) => {\n  const dispatch = useDispatch();\n  const { isError, isUninitialized, isFetching, isSuccess, data } = workload;\n  const recommendations = data?.recommendations || [];\n  const errorState = isError;\n  const successState = isSuccess;\n  const noInput = successState && recommendations.length === 0;\n  const [isAllExpanded, setIsAllExpanded] = useState(false);\n  const [filteredRows, setFilteredRows] = useState([]);\n  const [filterBuilding, setFilterBuilding] = useState(true);\n  const [displayedRows, setDisplayedRows] = useState([]);\n  const [rowsFiltered, setRowsFiltered] = useState(false);\n  const [filtersApplied, setFiltersApplied] = useState(false);\n  const [expandFirst, setExpandFirst] = useState(true);\n  const loadingState = isUninitialized || isFetching || !rowsFiltered;\n  const { search } = useLocation();\n  //FILTERS\n  const filters = useSelector(({ filters }) => filters.workloadsRecsListState);\n  const noMatchingRecs = filteredRows.length === 0 ? true : false;\n\n  const updateFilters = (payload) =>\n    dispatch(updateWorkloadsRecsListFilters(payload));\n\n  const addFilterParam = (param, values) => {\n    setExpandFirst(false);\n    workloadsRulesAddFilterParam(filters, updateFilters, param, values);\n  };\n  const removeFilterParam = (param) =>\n    workloadsRulesRemoveFilterParam(filters, updateFilters, param);\n\n  useEffect(() => {\n    setFilteredRows(buildFilteredRows(recommendations, filters));\n  }, [data, filters]);\n\n  useEffect(() => {\n    setDisplayedRows(\n      buildDisplayedRows(filteredRows, filters.sortIndex, filters.sortDirection)\n    );\n    setFiltersApplied(filtersAreApplied(filters));\n    setRowsFiltered(true);\n  }, [filteredRows]);\n\n  const filterConfigItems = WORKLOADS_RULES_FILTER_CONFIG(\n    filters,\n    addFilterParam\n  );\n\n  useEffect(() => {\n    if (search && filterBuilding) {\n      const paramsObject = paramParser(search);\n      if (paramsObject.sort) {\n        const sortObj = translateSortParams(paramsObject.sort);\n        paramsObject.sortIndex = WORKLOADS_RULES_COLUMNS_KEYS.indexOf(\n          sortObj.description\n        );\n        paramsObject.sortDirection = sortObj.direction;\n      }\n      paramsObject.total_risk &&\n        !Array.isArray(paramsObject.total_risk) &&\n        (paramsObject.total_risk = [`${paramsObject.total_risk}`]);\n      updateFilters({ ...filters, ...paramsObject });\n    }\n    setFilterBuilding(false);\n  }, []);\n\n  useEffect(() => {\n    if (!filterBuilding) {\n      updateSearchParams(filters, WORKLOADS_RULES_COLUMNS_KEYS);\n    }\n  }, [filters, filterBuilding]);\n\n  const buildDisplayedRows = (filteredRows, sortIndex, sortDirection) => {\n    const sortingRows = sortWithSwitch(sortIndex, sortDirection, filteredRows);\n    return flatMapRows(sortingRows, expandFirst);\n  };\n\n  const handleOnCollapse = (_e, rowId, isOpen) => {\n    if (rowId === undefined) {\n      // if undefined, all rows are affected\n      setIsAllExpanded(isOpen);\n      setDisplayedRows(\n        displayedRows.map((row) => ({\n          ...row,\n          // Don't show expand button for expanded content\n          ...(Object.hasOwn(row, 'parent') ? null : { isOpen }),\n        }))\n      );\n    } else {\n      setDisplayedRows(\n        displayedRows.map((row, index) =>\n          index === rowId ? { ...row, isOpen } : row\n        )\n      );\n    }\n  };\n\n  const buildFilteredRows = (allRows, filters) => {\n    setRowsFiltered(false);\n    const filtersArePresent = filtersAreApplied(filters);\n    return allRows\n      .filter((recs) =>\n        filtersArePresent ? passFilterWorkloadsRecs(recs, filters) : true\n      )\n      .map((value, key) => [\n        {\n          rule: value,\n          isOpen: isAllExpanded,\n          cells: [\n            {\n              title: value.details,\n            },\n            {\n              title: (\n                <div key={key}>\n                  <InsightsLabel\n                    value={value.total_risk}\n                    rest={{ isCompact: true }}\n                  />\n                </div>\n              ),\n            },\n            {\n              title: value.objects.length,\n            },\n            {\n              title: (\n                <div key={key}>\n                  <DateFormat date={value.modified} type=\"relative\" />\n                </div>\n              ),\n            },\n          ],\n        },\n        {\n          cells: [\n            {\n              title: (\n                <ExpandedRulesDetails\n                  extra_data={value.extra_data}\n                  more_info={value.more_info}\n                  resolution={value.resolution}\n                  objects={value.objects}\n                />\n              ),\n            },\n          ],\n          fullWidth: true,\n        },\n      ]);\n  };\n\n  const buildFilterChips = () => {\n    const localFilters = { ...filters };\n    delete localFilters.sortIndex;\n    delete localFilters.sortDirection;\n    return pruneWorkloadsRulesFilters(\n      localFilters,\n      WORKLOAD_RULES_FILTER_CATEGORIES\n    );\n  };\n\n  const activeFiltersConfig = {\n    showDeleteButton: filtersApplied,\n    deleteTitle: 'Reset filters',\n    filters: buildFilterChips(),\n    onDelete: (_event, itemsToRemove, isAll) => {\n      if (isAll) {\n        resetFilters(\n          filters,\n          WORKLOADS_RECS_TABLE_INITIAL_STATE,\n          updateFilters\n        );\n      } else {\n        itemsToRemove.map((item) => {\n          const newFilter = {\n            [item.urlParam]: Array.isArray(filters[item.urlParam])\n              ? filters[item.urlParam].filter(\n                  (value) => String(value) !== String(item.chips[0].value)\n                )\n              : '',\n          };\n          newFilter[item.urlParam].length > 0\n            ? updateFilters({ ...filters, ...newFilter })\n            : removeFilterParam(item.urlParam);\n        });\n      }\n    },\n  };\n\n  const onSort = (_e, index, direction) => {\n    setRowsFiltered(false);\n    setExpandFirst(false);\n    updateFilters({\n      ...filters,\n      sortIndex: index,\n      sortDirection: direction,\n    });\n  };\n\n  return (\n    <div id=\"workload-recs-list-table\">\n      <PrimaryToolbar\n        filterConfig={{\n          items: filterConfigItems,\n          isDisabled:\n            loadingState ||\n            errorState ||\n            noInput ||\n            recommendations.length === 0,\n        }}\n        pagination={\n          <span className=\"pf-u-font-weight-bold\">\n            {filteredRows?.length === 1\n              ? `${filteredRows.length} Recommendation`\n              : `${filteredRows.length} Recommendations`}\n          </span>\n        }\n        activeFiltersConfig={\n          loadingState || errorState || noInput || recommendations.length === 0\n            ? undefined\n            : activeFiltersConfig\n        }\n      />\n      <Table\n        aria-label={'Workload recommendations table'}\n        ouiaId=\"workload-recommendations\"\n        cells={WORKLOAD_RULES_COLUMNS}\n        ouiaSafe={!loadingState}\n        onCollapse={handleOnCollapse} // TODO: set undefined when there is an empty state\n        rows={\n          errorState || loadingState || noInput || noMatchingRecs ? (\n            [\n              {\n                fullWidth: true,\n                cells: [\n                  {\n                    props: {\n                      colSpan: WORKLOAD_RULES_COLUMNS.length + 1,\n                    },\n                    title: errorState ? (\n                      <NoWorkloadsRecsAvailable />\n                    ) : loadingState ? (\n                      <Loading />\n                    ) : noMatchingRecs ? (\n                      <NoMatchingRecsForWorkloads />\n                    ) : (\n                      <NoRecsForWorkloadsDetails />\n                    ),\n                  },\n                ],\n              },\n            ]\n          ) : successState ? (\n            displayedRows\n          ) : (\n            <ErrorState />\n          )\n        }\n        variant={TableVariant.compact}\n        isStickyHeader\n        canCollapseAll\n        sortBy={{\n          index: filters.sortIndex,\n          direction: filters.sortDirection,\n        }}\n        onSort={onSort}\n      >\n        <TableHeader />\n        <TableBody />\n      </Table>\n    </div>\n  );\n};\n\nexport default WorkloadRules;\n\nWorkloadRules.propTypes = {\n  workload: PropTypes.shape({\n    isUninitialized: PropTypes.bool.isRequired,\n    isFetching: PropTypes.bool.isRequired,\n    isError: PropTypes.bool.isRequired,\n    isSuccess: PropTypes.bool.isRequired,\n    error: PropTypes.object,\n    data: PropTypes.shape({\n      namespace: PropTypes.shape({\n        uuid: PropTypes.string,\n        name: PropTypes.string,\n      }),\n      cluster: PropTypes.shape({\n        uuid: PropTypes.string,\n        display_name: PropTypes.string,\n      }),\n      status: PropTypes.string,\n      recommendations: PropTypes.arrayOf(\n        PropTypes.shape({\n          check: PropTypes.string,\n          description: PropTypes.string,\n          objects: PropTypes.arrayOf(\n            PropTypes.shape({\n              kind: PropTypes.string,\n              uid: PropTypes.string,\n            })\n          ),\n          remediation: PropTypes.string,\n        })\n      ),\n    }),\n  }),\n};\n","import React from 'react';\nimport PageHeader from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Flex, FlexItem, PageSection, Title } from '@patternfly/react-core';\nimport Breadcrumbs from '../Breadcrumbs';\nimport WorkloadsHeader from '../WorkloadHeader';\nimport PropTypes from 'prop-types';\nimport WorkloadRules from '../WorkloadRules/WorkloadRules';\n\nexport const Workload = ({ workload, namespaceId, clusterId }) => {\n  return (\n    <React.Fragment>\n      <PageHeader className=\"pf-m-light ins-inventory-detail\">\n        <Flex direction={{ default: 'column' }}>\n          <FlexItem>\n            <Breadcrumbs\n              current={\n                workload?.data?.status === 'ok'\n                  ? `${workload.data.cluster.display_name} | ${workload.data.namespace.name}`\n                  : `${clusterId} | ${namespaceId}`\n              }\n              workloads=\"true\"\n            />\n            <WorkloadsHeader />\n          </FlexItem>\n        </Flex>\n      </PageHeader>\n      <PageSection>\n        <Title className=\"pf-u-mb-lg\" headingLevel=\"h3\" size=\"2xl\">\n          Recommendations\n        </Title>\n        <WorkloadRules workload={workload} />\n      </PageSection>\n    </React.Fragment>\n  );\n};\n\nWorkload.propTypes = {\n  clusterId: PropTypes.string.isRequired,\n  namespaceId: PropTypes.string.isRequired,\n  workload: PropTypes.shape({\n    isUninitialized: PropTypes.bool.isRequired,\n    isFetching: PropTypes.bool.isRequired,\n    data: PropTypes.shape({\n      namespace: PropTypes.shape({\n        uuid: PropTypes.string,\n        name: PropTypes.string,\n      }),\n      cluster: PropTypes.shape({\n        uuid: PropTypes.string,\n        display_name: PropTypes.string,\n      }),\n      status: PropTypes.string,\n    }),\n  }),\n};\n","import React, { useEffect } from 'react';\nimport { Workload } from './Workload';\nimport { useParams } from 'react-router-dom';\n// import { useGetWorkloadByIdQuery } from '../../Services/SmartProxy';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport mockdata from '../../../cypress/fixtures/api/insights-results-aggregator/v2/workload/00000001-0001-0001-0001-000000000005-fad82c1f-96db-430f-b3ec-503fb9eeb7bb/info.json';\nimport mockList from '../../../cypress/fixtures/api/insights-results-aggregator/v2/workload/list.json';\n\nconst WorkloadWrapper = () => {\n  const chrome = useChrome();\n  const { namespaceId, clusterId } = useParams();\n  // const workload = useGetWorkloadByIdQuery({\n  //   namespaceId,\n  //   clusterId,\n  // });\n\n  // Temporary hardcoded data RHINENG-7723\n  const uuid = `${clusterId}/${namespaceId}`;\n  let workload = {\n    isError: false,\n    isFetching: true,\n    isUninitialized: true,\n    isLoading: true,\n    isSuccess: false,\n    data: {},\n    refetch: () => null,\n  };\n\n  if (mockList.includes(uuid)) {\n    const customData = {\n      ...mockdata,\n      cluster: {\n        display_name: `Cluster name ${clusterId}`,\n        uuid: clusterId,\n      },\n      namespace: {\n        name: `Namespace name ${namespaceId}`,\n        uuid: namespaceId,\n      },\n    };\n    workload = {\n      isError: false,\n      isFetching: false,\n      isUninitialized: false,\n      isLoading: false,\n      isSuccess: true,\n      data: { ...customData },\n      refetch: () => null,\n    };\n  } else {\n    workload = {\n      isError: true,\n      isFetching: false,\n      isUninitialized: false,\n      isLoading: false,\n      isSuccess: false,\n      data: { status: 'error' },\n      refetch: () => null,\n    };\n  }\n\n  useEffect(() => {\n    workload.refetch();\n  }, [namespaceId, clusterId]);\n\n  useEffect(() => {\n    const subnav = `${\n      workload?.data?.status === 'ok'\n        ? `${workload?.data?.cluster.display_name} | ${workload?.data?.namespace.name} - Workloads`\n        : `${clusterId} | ${namespaceId} - Workloads`\n    }`;\n    chrome.updateDocumentTitle(`${subnav} - OCP Advisor | Red Hat Insights`);\n  }, [workload, namespaceId, clusterId]);\n\n  return (\n    <Workload\n      workload={workload}\n      namespaceId={namespaceId}\n      clusterId={clusterId}\n    />\n  );\n};\n\nexport default WorkloadWrapper;\n","import React from 'react';\nimport ContentLoader from 'react-content-loader';\n\nconst OneLineLoader = () => (\n  <ContentLoader height={20}>\n    <rect x=\"0\" y=\"0\" rx=\"4\" ry=\"4\" width=\"300\" height=\"20\" />\n  </ContentLoader>\n);\n\nexport { OneLineLoader };\n"],"names":["Breadcrumbs","current","workloads","intl","useIntl","splitUrl","useLocation","pathname","split","ouiaId","className","Link","to","relative","formatMessage","messages","insightsHeader","isActive","propTypes","PropTypes","Card","CardBody","WorkloadHeader","workloadData","namespaceId","clusterId","isUninitialized","isFetching","workload","data","Grid","id","md","hasGutter","GridItem","span","Title","size","headingLevel","Skeleton","cluster","display_name","namespace","name","Stack","StackItem","metadata","last_checked_at","DateFormat","date","type","isRequired","uuid","status","useParams","isError","isLoading","isSuccess","refetch","mockList","includes","customData","mockdata","ObjectsModalTable","localFilters","objectsData","objects","dispatch","useDispatch","useState","filtersApplied","setFiltersApplied","filteredRows","setFilteredRows","displayedRows","setDisplayedRows","rowsFiltered","setRowsFiltered","filters","useSelector","workloadsObjectsListState","page","Math","floor","offset","limit","perPage","updateFilters","payload","updateWorkloadsObjectsListFilters","preparedRows","length","loadingState","filterConfigItems","label","filterValues","key","onChange","_event","value","object_id","placeholder","activeFiltersConfig","showDeleteButton","deleteTitle","sortIndex","sortDirection","pruneWorkloadsRulesFilters","title","urlParam","onDelete","itemsToRemove","isAll","resetFilters","WORKLOADS_OBJECTS_TABLE_INITIAL_STATE","map","item","param","newFilter","Array","isArray","filter","String","chips","_removeFilterParam","useEffect","allrows","object","passObjectsFilters","buildFilteredRows","slice","filtersAreApplied","onSetPage","_e","pageNumber","newOffset","onPerPageSelect","PrimaryToolbar","pagination","isCompact","itemCount","filterConfig","items","Loading","Table","Thead","Tr","Th","width","ObjectsTableColumns","kind","Tbody","index","Td","dataLabel","uid","Pagination","onPageInput","widgetId","variant","PaginationVariant","bottom","isDisabled","ObjectsModal","isModalOpen","setIsModalOpen","isOpen","onClose","mockObjects","ExpandedRulesDetails","more_info","resolution","objectsModalOpen","setObjectsModalOpen","style","boxShadow","isPlain","CardHeader","Divider","template","borders","modifier","Button","isInline","onClick","CodeBlock","WorkloadRules","recommendations","errorState","successState","noInput","isAllExpanded","setIsAllExpanded","filterBuilding","setFilterBuilding","expandFirst","setExpandFirst","search","workloadsRecsListState","noMatchingRecs","updateWorkloadsRecsListFilters","buildDisplayedRows","WORKLOADS_RULES_FILTER_CONFIG","values","workloadsRulesAddFilterParam","paramsObject","paramParser","sort","sortObj","translateSortParams","WORKLOADS_RULES_COLUMNS_KEYS","indexOf","description","direction","total_risk","updateSearchParams","sortingRows","sortWithSwitch","flatMapRows","allRows","filtersArePresent","recs","passFilterWorkloadsRecs","rule","cells","details","InsightsLabel","rest","modified","extra_data","fullWidth","WORKLOAD_RULES_FILTER_CATEGORIES","WORKLOADS_RECS_TABLE_INITIAL_STATE","workloadsRulesRemoveFilterParam","undefined","WORKLOAD_RULES_COLUMNS","ouiaSafe","onCollapse","rowId","row","Object","hasOwn","rows","props","colSpan","TableVariant","compact","isStickyHeader","canCollapseAll","sortBy","onSort","TableHeader","TableBody","error","check","remediation","Workload","PageHeader","Flex","default","FlexItem","PageSection","chrome","useChrome","subnav","updateDocumentTitle","OneLineLoader","height","x","y","rx","ry"],"sourceRoot":""}