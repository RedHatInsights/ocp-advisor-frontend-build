{"version":3,"file":"js/913.1981231e3c61b697c1e5.js","mappings":"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","sources":["webpack:///./src/Components/Common/Tables.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport capitalize from 'lodash/capitalize';\nimport cloneDeep from 'lodash/cloneDeep';\n\nimport { Tooltip } from '@patternfly/react-core/dist/js/components/Tooltip';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\n\nimport {\n  CLUSTER_FILTER_CATEGORIES,\n  FILTER_CATEGORIES,\n  intl,\n  RULE_CATEGORIES,\n} from '../../AppConstants';\nimport messages from '../../Messages';\n\nexport const passFilters = (rule, filters) =>\n  Object.entries(filters).every(([filterKey, filterValue]) => {\n    switch (filterKey) {\n      case 'text':\n        return rule.description\n          .toLowerCase()\n          .includes(filterValue.toLowerCase());\n      case FILTER_CATEGORIES.total_risk.urlParam:\n        return filterValue.includes(String(rule.total_risk));\n      case FILTER_CATEGORIES.category.urlParam:\n        return rule.tags.find((c) =>\n          filterValue.includes(String(RULE_CATEGORIES[c]))\n        );\n      case FILTER_CATEGORIES.impact.urlParam:\n        return filterValue.includes(String(rule.impact));\n      case FILTER_CATEGORIES.impacting.urlParam:\n        return filterValue.length > 0\n          ? filterValue.some((v) => {\n              if (v === 'true') {\n                return rule.impacted_clusters_count > 0;\n              }\n              if (v === 'false') {\n                return rule.impacted_clusters_count === 0;\n              }\n            })\n          : true;\n      case FILTER_CATEGORIES.likelihood.urlParam:\n        return filterValue.includes(String(rule.likelihood));\n      case FILTER_CATEGORIES.rule_status.urlParam:\n        return (\n          filterValue === 'all' ||\n          (filterValue === 'disabled' && rule.disabled) ||\n          (filterValue === 'enabled' && !rule.disabled)\n        );\n      default:\n        return true;\n    }\n  });\n\nexport const passFiltersCluster = (cluster, filters) =>\n  Object.entries(filters).every(([filterKey, filterValue]) => {\n    switch (filterKey) {\n      case 'text':\n        return (cluster.cluster_name || cluster.cluster_id)\n          .toLowerCase()\n          .includes(filterValue.toLowerCase());\n      case CLUSTER_FILTER_CATEGORIES.hits.urlParam:\n        return (\n          // clusters with at least one rule hit\n          (filterValue.length === 0 && parseInt(cluster.total_hit_count) > 0) ||\n          // all clusters\n          filterValue.includes('all') ||\n          // clusters with at least one rule hit for any of the active risk filters\n          filterValue.some((v) => cluster.hits_by_total_risk[v] > 0)\n        );\n      default:\n        return true;\n    }\n  });\n\nexport const mapClustersToRows = (clusters) =>\n  clusters.map((cluster, index) => ({\n    cluster,\n    cells: [\n      <span key={index}>\n        <Link to={`clusters/${cluster.cluster_id}`}>\n          {cluster.cluster_name || cluster.cluster_id}\n        </Link>\n      </span>,\n      cluster.total_hit_count,\n      cluster.hits_by_total_risk?.[4] || 0,\n      cluster.hits_by_total_risk?.[3] || 0,\n      cluster.hits_by_total_risk?.[2] || 0,\n      cluster.hits_by_total_risk?.[1] || 0,\n      <span key={index}>\n        {cluster.last_checked_at ? (\n          <DateFormat\n            extraTitle={`${intl.formatMessage(messages.lastSeen)}: `}\n            date={cluster.last_checked_at}\n            variant=\"relative\"\n          />\n        ) : (\n          <Tooltip\n            key={index}\n            content={\n              <span>\n                {intl.formatMessage(messages.lastSeen) + ': '}\n                {intl.formatMessage(messages.nA)}\n              </span>\n            }\n          >\n            <span>{intl.formatMessage(messages.nA)}</span>\n          </Tooltip>\n        )}\n      </span>,\n    ],\n  }));\n\nconst pruneFilters = (localFilters, filterCategories) => {\n  const prunedFilters = Object.entries(localFilters || {});\n  return prunedFilters.reduce((arr, it) => {\n    const [key, item] = it;\n    if (filterCategories[key]) {\n      const category = filterCategories[key];\n      const chips = Array.isArray(item)\n        ? item.map((value) => {\n            const selectedCategoryValue = category.values.find(\n              (values) => values.value === String(value)\n            );\n            return selectedCategoryValue\n              ? {\n                  name:\n                    selectedCategoryValue.text || selectedCategoryValue.label,\n                  value,\n                }\n              : { name: value, value };\n          })\n        : [\n            {\n              name: category.values.find(\n                (values) => values.value === String(item)\n              ).label,\n              value: item,\n            },\n          ];\n      return [\n        ...arr,\n        {\n          category: capitalize(category.title),\n          chips,\n          urlParam: category.urlParam,\n        },\n      ];\n    } else if (key === 'text') {\n      return [\n        ...arr,\n        ...(item.length > 0\n          ? [\n              {\n                category: 'Name',\n                chips: [{ name: item, value: item }],\n                urlParam: key,\n              },\n            ]\n          : []),\n      ];\n    }\n  }, []);\n};\n\nexport const buildFilterChips = (filters, categories) => {\n  const localFilters = cloneDeep(filters);\n  delete localFilters.sortIndex;\n  delete localFilters.sortDirection;\n  delete localFilters.offset;\n  delete localFilters.limit;\n  localFilters?.hits &&\n    localFilters.hits.length === 0 &&\n    delete localFilters.hits;\n  return pruneFilters(localFilters, categories);\n};\n\n// parses url params for use in table/filter chips\nexport const paramParser = (search) => {\n  const searchParams = new URLSearchParams(search);\n  return Array.from(searchParams).reduce(\n    (acc, [key, value]) => ({\n      ...acc,\n      [key]: ['text', 'first'].includes(key)\n        ? value // just copy the full value\n        : value === 'true' || value === 'false'\n        ? JSON.parse(value) // parse boolean\n        : // parse array of values\n          value.split(','),\n    }),\n    {}\n  );\n};\n\nexport const translateSortParams = (value) => ({\n  name: value.substring(value.startsWith('-') ? 1 : 0),\n  direction: value.startsWith('-') ? 'desc' : 'asc',\n});\n\nexport const debounce = (value, delay) => {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [delay, value]);\n\n  return debouncedValue;\n};\n"],"names":["passFilters","rule","filters","Object","entries","every","filterKey","filterValue","description","toLowerCase","includes","FILTER_CATEGORIES","String","total_risk","tags","find","c","f","RULE_CATEGORIES","impact","length","some","v","impacted_clusters_count","likelihood","disabled","passFiltersCluster","cluster","cluster_name","cluster_id","CLUSTER_FILTER_CATEGORIES","parseInt","total_hit_count","hits_by_total_risk","mapClustersToRows","clusters","map","index","cells","key","Link","to","last_checked_at","extraTitle","intl","messages","date","variant","Tooltip","content","buildFilterChips","categories","localFilters","cloneDeep","sortIndex","sortDirection","offset","limit","hits","filterCategories","prunedFilters","reduce","arr","it","item","category","chips","Array","isArray","value","selectedCategoryValue","values","name","text","label","capitalize","title","urlParam","pruneFilters","paramParser","search","searchParams","URLSearchParams","from","acc","JSON","parse","split","translateSortParams","substring","startsWith","direction"],"sourceRoot":""}