{"version":3,"file":"js/5366.5cc4c0948bb87adfaed6.js","mappings":"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","sources":["webpack:///./src/Components/Common/Tables.js","webpack:///./src/Utilities/Workloads.js"],"sourcesContent":["import capitalize from 'lodash/capitalize';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { useEffect, useState } from 'react';\nimport { coerce, compare, valid } from 'semver';\nimport {\n  CLUSTER_FILTER_CATEGORIES,\n  FILTER_CATEGORIES,\n  RULE_CATEGORIES,\n} from '../../AppConstants';\nimport {\n  hasAnyValueGreaterThanZero,\n  remappingSeverity,\n} from '../../Utilities/Workloads';\n\nexport const passFilters = (rule, filters) =>\n  Object.entries(filters).every(([filterKey, filterValue]) => {\n    switch (filterKey) {\n      case 'text':\n        return rule.description\n          .toLowerCase()\n          .includes(filterValue.toLowerCase());\n      case FILTER_CATEGORIES.total_risk.urlParam:\n        return filterValue.includes(String(rule.total_risk));\n      case FILTER_CATEGORIES.category.urlParam:\n        return rule.tags.find((c) =>\n          filterValue.includes(String(RULE_CATEGORIES[c]))\n        );\n      case FILTER_CATEGORIES.impact.urlParam:\n        return filterValue.includes(String(rule.impact));\n      case FILTER_CATEGORIES.impacting.urlParam:\n        return filterValue.length > 0\n          ? filterValue.some((v) => {\n              if (v === 'true') {\n                return rule.impacted_clusters_count > 0;\n              }\n              if (v === 'false') {\n                return rule.impacted_clusters_count === 0;\n              }\n            })\n          : true;\n      case FILTER_CATEGORIES.likelihood.urlParam:\n        return filterValue.includes(String(rule.likelihood));\n      case FILTER_CATEGORIES.rule_status.urlParam:\n        return (\n          filterValue === 'all' ||\n          (filterValue === 'disabled' && rule.disabled) ||\n          (filterValue === 'enabled' && !rule.disabled)\n        );\n      case FILTER_CATEGORIES.res_risk.urlParam:\n        return filterValue.includes(String(rule.resolution_risk));\n      default:\n        return true;\n    }\n  });\n\nexport const passFiltersCluster = (cluster, filters) =>\n  Object.entries(filters).every(([filterKey, filterValue]) => {\n    switch (filterKey) {\n      case 'text':\n        return (cluster.cluster_name || cluster.cluster_id)\n          .toLowerCase()\n          .includes(filterValue.toLowerCase());\n      case CLUSTER_FILTER_CATEGORIES.hits.urlParam:\n        return (\n          // clusters with at least one rule hit\n          (filterValue.length === 0 && parseInt(cluster.total_hit_count) > 0) ||\n          // all clusters\n          filterValue.includes('all') ||\n          // clusters with at least one rule hit for any of the active risk filters\n          filterValue.some((v) => cluster.hits_by_total_risk[v] > 0)\n        );\n      case 'version':\n        return (\n          filterValue.length === 0 ||\n          filterValue.includes(toValidSemVer(cluster.cluster_version))\n        );\n      default:\n        return true;\n    }\n  });\n\nconst pruneFilters = (localFilters, filterCategories) => {\n  const prunedFilters = Object.entries(localFilters || {});\n  return prunedFilters.reduce((arr, it) => {\n    const [key, item] = it;\n    if (filterCategories[key]) {\n      const category = filterCategories[key];\n      const chips = Array.isArray(item)\n        ? item.map((value) => {\n            const selectedCategoryValue = category.values.find(\n              (values) => values.value === String(value)\n            );\n            return selectedCategoryValue\n              ? {\n                  name:\n                    selectedCategoryValue.text || selectedCategoryValue.label,\n                  value,\n                }\n              : { name: value, value };\n          })\n        : [\n            {\n              name: category.values.find(\n                (values) => values.value === String(item)\n              ).label,\n              value: item,\n            },\n          ];\n      return [\n        ...arr,\n        {\n          category: capitalize(category.title),\n          chips,\n          urlParam: category.urlParam,\n        },\n      ];\n    } else if (key === 'text') {\n      return [\n        ...arr,\n        ...(item.length > 0\n          ? [\n              {\n                category: 'Name',\n                chips: [{ name: item, value: item }],\n                urlParam: key,\n              },\n            ]\n          : []),\n      ];\n    } else if (key === 'version') {\n      return [\n        ...arr,\n        ...(item.length > 0\n          ? [\n              {\n                category: 'Version',\n                chips: item.map((it) => ({\n                  name: it,\n                  value: it,\n                })),\n                urlParam: key,\n              },\n            ]\n          : []),\n      ];\n    } else if (key === 'namespace_name') {\n      return [\n        ...arr,\n        ...(item.length > 0\n          ? [\n              {\n                category: 'Namespace name',\n                chips: [{ name: item, value: item }],\n                urlParam: key,\n              },\n            ]\n          : []),\n      ];\n    } else if (key === 'cluster_name') {\n      return [\n        ...arr,\n        ...(item.length > 0\n          ? [\n              {\n                category: 'Cluster name',\n                chips: [{ name: item, value: item }],\n                urlParam: key,\n              },\n            ]\n          : []),\n      ];\n    }\n  }, []);\n};\n\nexport const buildFilterChips = (filters, categories) => {\n  const localFilters = cloneDeep(filters);\n  delete localFilters.sortIndex;\n  delete localFilters.sortDirection;\n  delete localFilters.sort;\n  delete localFilters.offset;\n  delete localFilters.limit;\n  localFilters?.hits &&\n    localFilters.hits.length === 0 &&\n    delete localFilters.hits;\n  return pruneFilters(localFilters, categories);\n};\n\n// parses url params for use in table/filter chips\nexport const paramParser = (search) => {\n  const searchParams = new URLSearchParams(search);\n  return Array.from(searchParams).reduce(\n    (acc, [key, value]) => ({\n      ...acc,\n      [key]: [\n        'text',\n        'first',\n        'rule_status',\n        'sort',\n        'cluster_name',\n        'namespace_name',\n        'description',\n        'object_id',\n      ].includes(key)\n        ? value // just copy the full value\n        : value === 'true' || value === 'false'\n        ? JSON.parse(value) // parse boolean\n        : // parse array of values\n          value.split(','),\n    }),\n    {}\n  );\n};\n\nexport const translateSortParams = (value) => ({\n  name: value.substring(value.startsWith('-') ? 1 : 0),\n  direction: value.startsWith('-') ? 'desc' : 'asc',\n  description: value.substring(value.startsWith('-') ? 1 : 0),\n  object_id: value.substring(value.startsWith('-') ? 1 : 0),\n});\n\nexport const translateSortValue = (index, indexMapping, direction) => {\n  if (!['desc', 'asc'].includes(direction)) {\n    console.error('Invalid sort parameters (is not asc nor desc)');\n  }\n  return `${direction === 'asc' ? '' : '-'}${indexMapping[index]}`;\n};\n\n// TODO: remove since unused\nexport const debounce = (value, delay) => {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [delay, value]);\n\n  return debouncedValue;\n};\n\nexport const updateSearchParams = (filters = {}, columnMapping) => {\n  const url = new URL(window.location.origin + window.location.pathname);\n  // separately check the sort param\n  url.searchParams.set(\n    'sort',\n    translateSortValue(filters.sortIndex, columnMapping, filters.sortDirection)\n  );\n  // check the rest of filters\n  Object.entries(filters).forEach(([key, value]) => {\n    return (\n      key !== 'sortIndex' &&\n      key !== 'sortDirection' &&\n      key !== 'sort' &&\n      value !== '' &&\n      !(Array.isArray(value) && value.length === 0) &&\n      url.searchParams.set(key, value)\n    );\n  });\n  window.history.replaceState(null, null, url.href);\n};\n\n// TODO: move to Utils.js\nexport const compareSemVer = (v1, v2, d) => d * compare(v1, v2);\nexport const toValidSemVer = (version) =>\n  coerce(version === undefined || !valid(coerce(version)) ? '0.0.0' : version)\n    .version;\n\nexport const removeFilterParam = (currentFilters, updateFilters, param) => {\n  const { [param]: omitted, ...newFilters } = { ...currentFilters, offset: 0 };\n  updateFilters({\n    ...newFilters,\n    ...(param === 'text'\n      ? { text: '' }\n      : param === 'hits'\n      ? { hits: [] }\n      : param === 'version'\n      ? { version: [] }\n      : param === 'object_id'\n      ? { object_id: '' }\n      : {}),\n  });\n};\n\nexport const addFilterParam = (currentFilters, updateFilters, param, values) =>\n  values.length > 0\n    ? updateFilters({\n        ...currentFilters,\n        offset: 0,\n        ...{ [param]: values },\n      })\n    : removeFilterParam(currentFilters, updateFilters, param);\n\nexport const passFilterWorkloads = (workloads, filters) => {\n  const generalSeverityRemapped = remappingSeverity(\n    workloads.metadata.hits_by_severity,\n    'general'\n  );\n  return Object.entries(filters).every(([filterKey, filterValue]) => {\n    switch (filterKey) {\n      case 'cluster_name':\n        return (workloads.cluster.display_name || workloads.cluster.uuid)\n          .toLowerCase()\n          .includes(filterValue.toLowerCase());\n      case 'namespace_name':\n        return (workloads.namespace.name || workloads.namespace.uuid)\n          .toLowerCase()\n          .includes(filterValue.toLowerCase());\n      case 'severity':\n        return (\n          filterValue.length === 0 ||\n          hasAnyValueGreaterThanZero(generalSeverityRemapped, filters.severity)\n        );\n      default:\n        return true;\n    }\n  });\n};\n\nexport const passFilterWorkloadsRecs = (recommendation, filters) => {\n  return Object.entries(filters).some(([filterKey, filterValue]) => {\n    if (filterValue.length === 0) {\n      return false;\n    } else {\n      switch (filterKey) {\n        case 'description':\n          return recommendation.details\n            .toLowerCase()\n            .includes(filterValue.toLowerCase());\n        case 'object_id':\n          return recommendation.objects.some((obj) =>\n            obj.uid.toLowerCase().includes(filterValue.toLowerCase())\n          );\n        //NOTE IS NOT AVAILABLE IN THE API YET\n        /* case 'total_risk':\n        return filterValue.includes(String(recs.total_risk)); */\n        default:\n          return false;\n      }\n    }\n  });\n};\n","import { SortByDirection } from '@patternfly/react-table';\nimport _, { isEmpty } from 'lodash';\n\nexport const SEVERITY_OPTIONS = [\n  {\n    value: 'critical',\n    label: 'Critical',\n    iconColor: 'var(--pf-global--danger-color--100)',\n    textColor: 'var(--pf-global--danger-color--100)',\n    hasIcon: true,\n  },\n  {\n    value: 'important',\n    label: 'Important',\n    iconColor: 'var(--pf-global--palette--orange-300)',\n    textColor: 'var(--pf-global--palette--orange-400)',\n    hasIcon: true,\n  },\n  {\n    value: 'moderate',\n    label: 'Moderate',\n    iconColor: 'var(--pf-global--warning-color--100)',\n    textColor: 'var(--pf-global--warning-color--200)',\n    hasIcon: true,\n  },\n  {\n    value: 'low',\n    label: 'Low',\n    iconColor: 'var(--pf-global--Color--200)',\n    textColor: 'var(--pf-global--default-color--300)',\n    hasIcon: true,\n  },\n  {\n    value: 'none',\n    label: 'Unknown',\n  },\n];\n\nexport const remappingSeverity = (obj, mode) => {\n  const mapping = {\n    1: 'low',\n    2: 'moderate',\n    3: 'important',\n    4: 'critical',\n  };\n  let updatedObj = {};\n\n  if (mode === 'general' || mode === 'label') {\n    for (const key in obj) {\n      if (key in mapping) {\n        updatedObj[mapping[key]] = obj[key];\n      }\n    }\n  } else {\n    updatedObj = mapping[obj];\n  }\n\n  return updatedObj;\n};\n\nexport const hasAnyValueGreaterThanZero = (obj, stringsToCheck) => {\n  for (const key of stringsToCheck) {\n    if (obj[key] > 0) {\n      return true; // Return true if any matching string has a value greater than 0\n    }\n  }\n};\n\nexport const severityTypeToText = (value) => {\n  value = parseInt(value);\n  if (value === 1) {\n    return 'Low';\n  } else if (value === 2) {\n    return 'Moderate';\n  } else if (value === 3) {\n    return 'Important';\n  } else {\n    return 'Critical';\n  }\n};\n\nexport const filtersAreApplied = (params) => {\n  const cleanedUpParams = _.cloneDeep(params);\n  delete cleanedUpParams.sortIndex;\n  delete cleanedUpParams.sortDirection;\n  delete cleanedUpParams.offset;\n  delete cleanedUpParams.limit;\n  delete cleanedUpParams.sort;\n  return Object.values(cleanedUpParams).filter((value) => !isEmpty(value))\n    .length\n    ? true\n    : false;\n};\n\nexport const capitalize = (str) => {\n  return str?.charAt(0).toUpperCase() + str?.slice(1);\n};\n\nexport const createChips = (category, value) => {\n  if (category.values) {\n    const selectedCategoryValue = category.values.find(\n      (values) => values.value === String(value)\n    );\n\n    return selectedCategoryValue\n      ? {\n          name: selectedCategoryValue.label || selectedCategoryValue.text,\n          value,\n        }\n      : { name: value, value };\n  }\n\n  return { name: value, value };\n};\n\nexport const pruneWorkloadsRulesFilters = (localFilters, filterCategories) => {\n  const prunedFilters = Object.entries(localFilters);\n  return prunedFilters.reduce((arr, [name, value]) => {\n    if (filterCategories[name]) {\n      const category = filterCategories[name];\n      if (\n        (Array.isArray(value) && value.length > 0) ||\n        (typeof value === 'string' && value.trim() !== '')\n      ) {\n        const chips = Array.isArray(value)\n          ? value.map((v) => createChips(category, v))\n          : [createChips(category, value)];\n\n        arr.push({\n          category: capitalize(category.label),\n          chips,\n          urlParam: category.urlParam,\n        });\n      }\n    } else if (\n      (name === 'description' || name === 'object_id') &&\n      value.trim() !== ''\n    ) {\n      arr.push({\n        category: capitalize(name.replace('_', ' ')),\n        chips: [{ name: value, value }],\n        urlParam: name,\n      });\n    }\n\n    return arr;\n  }, []);\n};\n\nexport const switchSort = (sortIndex, item) => {\n  const rule = item[0].rule;\n  switch (sortIndex) {\n    case 1:\n      return rule.details;\n    case 2:\n      return rule.total_risk;\n    case 3:\n      return rule.objects.length;\n    case 4:\n      return rule.modified;\n  }\n};\n\nexport const sortWithSwitch = (sortIndex, sortDirection, filteredRows) => {\n  return sortIndex >= 1\n    ? [...filteredRows]?.sort((a, b) => {\n        const d = sortDirection === SortByDirection.asc ? 1 : -1;\n        return switchSort(sortIndex, a) > switchSort(sortIndex, b)\n          ? d\n          : switchSort(sortIndex, b) > switchSort(sortIndex, a)\n          ? -d\n          : 0;\n      })\n    : [...filteredRows];\n};\n\nexport const flatMapRows = (filteredRows, expandFirst) => {\n  return filteredRows.flatMap((row, index) => {\n    const updatedRow = [...row];\n    if (expandFirst && index === 0) {\n      row[0].isOpen = true;\n    }\n    row[1].parent = index * 2;\n    return updatedRow;\n  });\n};\n\nexport const passObjectsFilters = (objects, filters) => {\n  return Object.entries(filters).some(([filterKey, filterValue]) => {\n    switch (filterKey) {\n      case 'object_id':\n        return objects.uid.toLowerCase().includes(filterValue.toLowerCase());\n      default:\n        return false;\n    }\n  });\n};\n\nexport const workloadsRulesRemoveFilterParam = (\n  currentFilters,\n  updateFilters,\n  param\n) => {\n  const { [param]: omitted, ...newFilters } = { ...currentFilters };\n  updateFilters({\n    ...newFilters,\n    ...(param === 'description'\n      ? { description: '' }\n      : param === 'total_risk'\n      ? { total_risk: [] }\n      : param === 'object_id'\n      ? { object_id: '' }\n      : {}),\n  });\n};\n\nexport const workloadsRulesAddFilterParam = (\n  currentFilters,\n  updateFilters,\n  param,\n  values\n) =>\n  values.length > 0\n    ? updateFilters({\n        ...currentFilters,\n        ...{ [param]: values },\n      })\n    : workloadsRulesRemoveFilterParam(currentFilters, updateFilters, param);\n"],"names":["passFilters","rule","filters","Object","entries","every","filterKey","filterValue","description","toLowerCase","includes","FILTER_CATEGORIES","total_risk","urlParam","String","category","tags","find","c","RULE_CATEGORIES","impact","impacting","length","some","v","impacted_clusters_count","likelihood","rule_status","disabled","res_risk","resolution_risk","passFiltersCluster","cluster","cluster_name","cluster_id","CLUSTER_FILTER_CATEGORIES","hits","parseInt","total_hit_count","hits_by_total_risk","toValidSemVer","cluster_version","buildFilterChips","categories","localFilters","cloneDeep","sortIndex","sortDirection","sort","offset","limit","filterCategories","reduce","arr","it","key","item","chips","Array","isArray","map","value","selectedCategoryValue","values","name","text","label","capitalize","title","pruneFilters","paramParser","search","searchParams","URLSearchParams","from","acc","JSON","parse","split","translateSortParams","substring","startsWith","direction","object_id","updateSearchParams","index","indexMapping","columnMapping","url","URL","window","location","origin","pathname","set","console","error","forEach","history","replaceState","href","compareSemVer","v1","v2","d","compare","version","coerce","undefined","valid","removeFilterParam","currentFilters","updateFilters","param","addFilterParam","passFilterWorkloads","workloads","generalSeverityRemapped","remappingSeverity","metadata","hits_by_severity","display_name","uuid","namespace","hasAnyValueGreaterThanZero","severity","passFilterWorkloadsRecs","recommendation","details","objects","obj","uid","SEVERITY_OPTIONS","iconColor","textColor","hasIcon","mode","mapping","updatedObj","stringsToCheck","filtersAreApplied","params","cleanedUpParams","_","filter","isEmpty","str","charAt","toUpperCase","slice","createChips","pruneWorkloadsRulesFilters","trim","push","replace","switchSort","modified","sortWithSwitch","filteredRows","a","b","SortByDirection","asc","flatMapRows","expandFirst","flatMap","row","updatedRow","isOpen","parent","passObjectsFilters","workloadsRulesRemoveFilterParam","workloadsRulesAddFilterParam"],"sourceRoot":""}