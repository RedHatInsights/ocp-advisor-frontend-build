{"version":3,"file":"js/Workload.10e35020b931095c7288.js","mappings":"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","sources":["webpack:///./src/Components/Breadcrumbs/index.js","webpack:///./src/Components/Loading/Loading.js","webpack:///./src/Components/WorkloadHeader/WorkloadHeader.js","webpack:///./src/Components/WorkloadHeader/index.js","webpack:///./src/Components/ObjectsModalTable/ObjectsModalTable.js","webpack:///./src/Components/ObjectsModal/ObjectsModal.js","webpack:///./src/Components/ExpandedRulesDetails.js/ExpandedRulesDetails.js","webpack:///./src/Components/WorkloadRules/WorkloadRules.js","webpack:///./src/Components/Workload/Workload.js","webpack:///./src/Components/Workload/index.js","webpack:///./src/Utilities/Loaders.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { Link, useLocation } from 'react-router-dom';\n\nimport { Breadcrumb, BreadcrumbItem } from '@patternfly/react-core';\n\nimport messages from '../../Messages';\n\nconst Breadcrumbs = ({ current, workloads }) => {\n  const intl = useIntl();\n  const location = useLocation();\n  const splitUrl = location.pathname.split('/');\n\n  return (\n    <div>\n      <Breadcrumb ouiaId=\"detail\" data-testid=\"breadcrumb-item\">\n        <BreadcrumbItem className=\"breadcrumb-item\">\n          <Link to={workloads ? `../..` : `..`} relative=\"path\">\n            {`${intl.formatMessage(messages.insightsHeader)} ${splitUrl[4]}`}\n          </Link>\n        </BreadcrumbItem>\n        <BreadcrumbItem className=\"breadcrumb-item\" isActive>\n          {current}\n        </BreadcrumbItem>\n      </Breadcrumb>\n    </div>\n  );\n};\n\nBreadcrumbs.propTypes = {\n  current: PropTypes.string,\n  workloads: PropTypes.boolean,\n};\n\nexport default Breadcrumbs;\n","import React from 'react';\nimport { Card, CardBody } from '@patternfly/react-core';\nimport { List } from 'react-content-loader';\n\nconst Loading = () => (\n  <Card ouiaId=\"loading-skeleton\">\n    <CardBody>\n      <List />\n    </CardBody>\n  </Card>\n);\n\nexport default Loading;\n","import React from 'react';\n\nimport {\n  Grid,\n  GridItem,\n  Stack,\n  StackItem,\n  Title,\n} from '@patternfly/react-core';\nimport Skeleton from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { OneLineLoader } from '../../Utilities/Loaders';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport PropTypes from 'prop-types';\n\nexport const WorkloadHeader = ({ workloadData, namespaceId, clusterId }) => {\n  const { isUninitialized, isFetching, data: workload } = workloadData;\n  return (\n    <Grid id=\"workload-header\" md={12} hasGutter>\n      <GridItem span={8}>\n        <Title\n          size=\"2xl\"\n          headingLevel=\"h1\"\n          id=\"cluster-header-title\"\n          ouiaId=\"cluster-name\"\n        >\n          {isUninitialized || isFetching ? (\n            <>\n              <Skeleton size=\"sm\" />\n              <Skeleton size=\"sm\" />\n            </>\n          ) : (\n            <>\n              <p>{workload.cluster.display_name}</p>\n              <p>{workload.namespace.name}</p>\n            </>\n          )}\n        </Title>\n      </GridItem>\n      <GridItem>\n        <Stack>\n          <StackItem id=\"workload-header-uuid\">\n            <span>Cluster UUID:</span> <span>{clusterId}</span>{' '}\n            <span>Namespace UUID:</span> <span>{namespaceId}</span>\n          </StackItem>\n          <StackItem id=\"workload-header-last-seen\">\n            <span>Last seen: </span>\n            <span>\n              {isUninitialized || isFetching ? (\n                <OneLineLoader />\n              ) : workload?.metadata?.last_checked_at ? (\n                <DateFormat\n                  date={workload.metadata.last_checked_at}\n                  type=\"exact\"\n                />\n              ) : (\n                <>Unknown</>\n              )}\n            </span>\n          </StackItem>\n        </Stack>\n      </GridItem>\n    </Grid>\n  );\n};\n\nWorkloadHeader.propTypes = {\n  clusterId: PropTypes.string.isRequired,\n  namespaceId: PropTypes.string.isRequired,\n  workloadData: PropTypes.shape({\n    isUninitialized: PropTypes.bool.isRequired,\n    isFetching: PropTypes.bool.isRequired,\n    data: PropTypes.shape({\n      metadata: PropTypes.shape({\n        last_checked_at: PropTypes.string,\n      }),\n      namespace: PropTypes.shape({\n        uuid: PropTypes.string,\n        name: PropTypes.string,\n      }),\n      cluster: PropTypes.shape({\n        uuid: PropTypes.string,\n        display_name: PropTypes.string,\n      }),\n      status: PropTypes.string,\n    }),\n  }),\n};\n","import React from 'react';\nimport { WorkloadHeader } from './WorkloadHeader';\nimport { useParams } from 'react-router-dom';\n// import { useGetWorkloadByIdQuery } from '../../Services/SmartProxy';\nimport mockdata from '../../../cypress/fixtures/api/insights-results-aggregator/v2/workload/00000001-0001-0001-0001-000000000005-fad82c1f-96db-430f-b3ec-503fb9eeb7bb/info.json';\nimport mockList from '../../../cypress/fixtures/api/insights-results-aggregator/v2/workload/list.json';\n\nconst WorkloadsHeaderWrapper = () => {\n  const { namespaceId, clusterId } = useParams();\n  // const workloadData = useGetWorkloadByIdQuery({\n  //   namespaceId,\n  //   clusterId,\n  // });\n\n  const uuid = `${clusterId}/${namespaceId}`;\n  let workloadData = {\n    isError: false,\n    isFetching: true,\n    isUninitialized: true,\n    isLoading: true,\n    isSuccess: false,\n    data: {},\n    refetch: () => null,\n  };\n\n  if (mockList.includes(uuid)) {\n    const customData = {\n      ...mockdata,\n      cluster: {\n        display_name: `Cluster name ${clusterId}`,\n        uuid: clusterId,\n      },\n      namespace: {\n        name: `Namespace name ${namespaceId}`,\n        uuid: namespaceId,\n      },\n    };\n    workloadData = {\n      isError: false,\n      isFetching: false,\n      isUninitialized: false,\n      isLoading: false,\n      isSuccess: true,\n      data: { ...customData },\n      refetch: () => null,\n    };\n  } else {\n    workloadData = {\n      isError: true,\n      isFetching: false,\n      isUninitialized: false,\n      isLoading: false,\n      isSuccess: false,\n      data: { status: 'error' },\n      refetch: () => null,\n    };\n  }\n\n  return (\n    <WorkloadHeader\n      workloadData={workloadData}\n      namespaceId={namespaceId}\n      clusterId={clusterId}\n    />\n  );\n};\n\nexport default WorkloadsHeaderWrapper;\n","import React, { useEffect, useState } from 'react';\nimport { Table, Thead, Tr, Th, Tbody, Td } from '@patternfly/react-table';\nimport PrimaryToolbar from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport { ObjectsTableColumns } from '../../AppConstants';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  WORKLOADS_OBJECTS_TABLE_INITIAL_STATE,\n  resetFilters,\n  updateWorkloadsObjectsListFilters,\n} from '../../Services/Filters';\nimport { removeFilterParam as _removeFilterParam } from '../Common/Tables';\nimport { Pagination } from '@patternfly/react-core';\nimport {\n  filtersAreApplied,\n  passObjectsFilters,\n  pruneWorkloadsRulesFilters,\n} from '../../Utilities/Workloads';\nimport { NoMatchingWorkloadsObjects } from '../MessageState/EmptyStates';\nimport Loading from '../Loading/Loading';\nimport { PaginationVariant } from '@patternfly/react-core/dist/js/components/Pagination/Pagination';\n\nexport const ObjectsModalTable = ({ objects }) => {\n  const objectsData = objects || [];\n  const dispatch = useDispatch();\n  const [filtersApplied, setFiltersApplied] = useState(false);\n  const [filteredRows, setFilteredRows] = useState([]);\n  const [displayedRows, setDisplayedRows] = useState([]);\n  const [rowsFiltered, setRowsFiltered] = useState(false);\n  const filters = useSelector(\n    ({ filters }) => filters.workloadsObjectsListState\n  );\n  const page = Math.floor(filters.offset / filters.limit) + 1;\n  const perPage = filters.limit;\n\n  const removeFilterParam = (param) =>\n    _removeFilterParam(filters, updateFilters, param);\n\n  const updateFilters = (payload) =>\n    dispatch(updateWorkloadsObjectsListFilters(payload));\n  const preparedRows = displayedRows.length > 0 ? true : false;\n  const loadingState = !rowsFiltered;\n\n  const filterConfigItems = [\n    {\n      label: 'Object ID',\n      type: 'text',\n      filterValues: {\n        key: 'object_id',\n        onChange: (_event, value) =>\n          updateFilters({ ...filters, offset: 0, object_id: value }),\n        value: filters.object_id,\n        placeholder: 'Filter by Object ID',\n      },\n    },\n  ];\n\n  const buildFilterChips = () => {\n    const localFilters = { ...filters };\n    delete localFilters.sortIndex;\n    delete localFilters.sortDirection;\n    return pruneWorkloadsRulesFilters(localFilters, {\n      label: 'Object ID',\n      type: 'text',\n      title: 'object ID',\n      urlParam: 'object_id',\n    });\n  };\n\n  const activeFiltersConfig = {\n    showDeleteButton: filtersApplied,\n    deleteTitle: 'Reset filters',\n    filters: buildFilterChips(),\n    onDelete: (_event, itemsToRemove, isAll) => {\n      if (isAll) {\n        resetFilters(\n          filters,\n          WORKLOADS_OBJECTS_TABLE_INITIAL_STATE,\n          updateFilters\n        );\n      } else {\n        itemsToRemove.map((item) => {\n          const newFilter = {\n            [item.urlParam]: Array.isArray(filters[item.urlParam])\n              ? filters[item.urlParam].filter(\n                  (value) => String(value) !== String(item.chips[0].value)\n                )\n              : '',\n          };\n          newFilter[item.urlParam].length > 0\n            ? updateFilters({ ...filters, ...newFilter })\n            : removeFilterParam(item.urlParam);\n        });\n      }\n    },\n  };\n\n  //This is where we apply filters and map rows agains the filters\n  const buildFilteredRows = (allrows, filters) => {\n    return allrows.filter((object) => passObjectsFilters(object, filters));\n  };\n\n  //building displayed rows applying limits and per page values\n  const buildDisplayedRows = (rows) => {\n    return rows.slice(perPage * (page - 1), perPage * (page - 1) + perPage);\n  };\n\n  //After objectsData is present or in case of object id filter change we setFiltered rows using buildiflterRows\n  useEffect(() => {\n    setFilteredRows(buildFilteredRows(objectsData, filters));\n  }, [objectsData, filters]);\n\n  //after objects data is present we set filtered rows and this useEffect is triggered to update displayed rows\n  //with new array of rows that have filters applied\n  useEffect(() => {\n    setDisplayedRows(buildDisplayedRows(filteredRows));\n    setFiltersApplied(filtersAreApplied(filters));\n    setRowsFiltered(true);\n  }, [filteredRows, filters.limit, filters.offset]);\n\n  const onSetPage = (_e, pageNumber) => {\n    const newOffset = pageNumber * filters.limit - filters.limit;\n    updateFilters({ ...filters, offset: newOffset });\n  };\n\n  const onPerPageSelect = (_e, perPage) => {\n    if (perPage !== filters.limit) {\n      updateFilters({ ...filters, limit: perPage, offset: 0 });\n    }\n  };\n\n  return (\n    <div id=\"objects-list-table\">\n      <PrimaryToolbar\n        pagination={{\n          page,\n          perPage,\n          onSetPage,\n          onPerPageSelect,\n          isCompact: true,\n          ouiaId: 'pager',\n          itemCount: filteredRows.length,\n        }}\n        filterConfig={{ items: filterConfigItems }}\n        activeFiltersConfig={activeFiltersConfig}\n      />\n      {loadingState ? (\n        <Loading />\n      ) : preparedRows ? (\n        <div>\n          <Table aria-label=\"Cell widths\" variant=\"compact\">\n            <Thead>\n              <Tr>\n                <Th width={60}>{ObjectsTableColumns.object}</Th>\n                <Th width={30}>{ObjectsTableColumns.kind}</Th>\n              </Tr>\n            </Thead>\n            <Tbody>\n              {displayedRows?.map((object, index) => (\n                <Tr key={index}>\n                  <Td dataLabel={ObjectsTableColumns.object}>{object.uid}</Td>\n                  <Td dataLabel={ObjectsTableColumns.kind}>{object.kind}</Td>\n                </Tr>\n              ))}\n            </Tbody>\n          </Table>\n          {displayedRows.length > 0 ? (\n            <Pagination\n              ouiaId=\"pager\"\n              itemCount={filteredRows.length}\n              page={page}\n              perPage={perPage}\n              onSetPage={onSetPage}\n              onPerPageSelect={onPerPageSelect}\n              onPageInput={onSetPage}\n              widgetId={`pagination-options-menu-bottom`}\n              variant={PaginationVariant.bottom}\n            />\n          ) : (\n            <Pagination\n              itemCount={0}\n              perPage\n              page\n              onSetPage\n              onPerPageSelect\n              isDisabled\n            />\n          )}\n        </div>\n      ) : (\n        <NoMatchingWorkloadsObjects />\n      )}\n    </div>\n  );\n};\n\nObjectsModalTable.propTypes = {\n  objects: PropTypes.arrayOf(\n    PropTypes.shape({\n      kind: PropTypes.string,\n      uid: PropTypes.string,\n    })\n  ),\n};\n","import React from 'react';\nimport { Modal as PfModal } from '@patternfly/react-core';\nimport { ObjectsModalTable } from '../ObjectsModalTable/ObjectsModalTable';\nimport PropTypes from 'prop-types';\nimport mockObjects from '../../../cypress/fixtures/api/insights-results-aggregator/objects.json';\n\nconst ObjectsModal = ({ isModalOpen, setIsModalOpen }) => {\n  return (\n    <PfModal\n      isOpen={isModalOpen}\n      onClose={() => setIsModalOpen(false)}\n      variant={'medium'}\n      title=\"Objects\"\n    >\n      <ObjectsModalTable\n        //objects={objects}\n        //replace with the real objects when API is implemented\n        objects={mockObjects}\n      />\n    </PfModal>\n  );\n};\n\nexport default ObjectsModal;\n\nObjectsModal.propTypes = {\n  isModalOpen: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  objects: PropTypes.arrayOf(\n    PropTypes.shape({\n      kind: PropTypes.string,\n      uid: PropTypes.string,\n    })\n  ),\n};\n","import React, { useState } from 'react';\nimport {\n  BullseyeIcon,\n  InfoCircleIcon,\n  ThumbsUpIcon,\n} from '@patternfly/react-icons';\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  CodeBlock,\n  Divider,\n  Icon,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\nimport { Table, Tbody, Td, Th, Thead, Tr } from '@patternfly/react-table';\nimport PropTypes from 'prop-types';\nimport TemplateProcessor from '@redhat-cloud-services/frontend-components-advisor-components/TemplateProcessor/TemplateProcessor';\nimport ObjectsModal from '../ObjectsModal/ObjectsModal';\nimport { ObjectsTableColumns } from '../../AppConstants';\n\nconst code = `oc get namespace -o jsonpath={range .items[*]}{.metadata.name}{\"\\t\"}{.metadata.uid}{\"\\n\"}{end}\n  oc -n <namespace> get <resourceKind> -o jsonpath={range .items[*]}{.metadata.name}{\"\\t\"}{.metadata.uid}{\"\\n\"}{end}`;\n\nconst ExpandedRulesDetails = ({ more_info, resolution, objects }) => {\n  const [objectsModalOpen, setObjectsModalOpen] = useState(false);\n  return (\n    <Card className=\"ins-c-report-details\" style={{ boxShadow: 'none' }}>\n      <CardBody>\n        <ObjectsModal\n          isModalOpen={objectsModalOpen}\n          setIsModalOpen={setObjectsModalOpen}\n          objects={objects}\n        />\n        <Stack\n          className=\"ins-c-report-details__cards-stack\"\n          widget-type=\"InsightsRulesCard\"\n          hasGutter\n        >\n          <StackItem>\n            <Card isCompact isPlain>\n              <CardHeader>\n                <Icon>\n                  <BullseyeIcon className=\"ins-c-report-details__icon\" />\n                </Icon>\n                <strong>Detected issues</strong>\n              </CardHeader>\n              <CardBody>\n                This should be a reason field and extradata should provide us an\n                array of reasons to list here\n              </CardBody>\n            </Card>\n          </StackItem>\n          <Divider />\n          <StackItem>\n            <Card isCompact isPlain>\n              <CardHeader>\n                <Icon>\n                  <ThumbsUpIcon className=\"ins-c-report-details__icon\" />\n                </Icon>\n                <strong>Steps to resolve</strong>\n              </CardHeader>\n              <CardBody>\n                <TemplateProcessor template={resolution} />\n              </CardBody>\n            </Card>\n          </StackItem>\n          <Table borders={'compactBorderless'} aria-label=\"Objects table\">\n            <Thead>\n              <Tr>\n                <Th modifier=\"fitContent\">{ObjectsTableColumns.object}</Th>\n                <Th modifier=\"fitContent\">{ObjectsTableColumns.kind}</Th>\n              </Tr>\n            </Thead>\n            <Tbody>\n              {objects.slice(0, 3).map((object, key) => (\n                <Tr key={key}>\n                  <Td dataLabel={ObjectsTableColumns.object}>{object.uid}</Td>\n                  <Td dataLabel={ObjectsTableColumns.kind}>{object.kind}</Td>\n                </Tr>\n              ))}\n            </Tbody>\n          </Table>\n          <StackItem>\n            <Button\n              variant=\"link\"\n              isInline\n              onClick={() => setObjectsModalOpen(true)}\n            >\n              View all objects\n            </Button>\n          </StackItem>\n\n          <br />\n          <CardHeader>\n            <strong>Note:</strong>\n          </CardHeader>\n          <CardBody>\n            Red Hat avoids gathering and processing namespace and resource names\n            as these may reveal confidential information. Namespaces and\n            resources are identified by their UIDs instead. You can use\n            in-cluster commands like the ones below to translate UIDs of\n            affected resources to their names.\n            <CodeBlock>{code}</CodeBlock>\n          </CardBody>\n          <React.Fragment>\n            <Divider />\n            <StackItem>\n              <Card isCompact isPlain>\n                <CardHeader>\n                  <Icon>\n                    <InfoCircleIcon className=\"ins-c-report-details__icon\" />\n                  </Icon>\n                  <strong>Additional info</strong>\n                </CardHeader>\n                <CardBody>{more_info}</CardBody>\n              </Card>\n            </StackItem>\n          </React.Fragment>\n        </Stack>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default ExpandedRulesDetails;\n\nExpandedRulesDetails.propTypes = {\n  more_info: PropTypes.string.isRequired,\n  resolution: PropTypes.string.isRequired,\n  objects: PropTypes.arrayOf({\n    kind: PropTypes.string,\n    uid: PropTypes.string,\n  }),\n};\n","import React, { useEffect, useState } from 'react';\nimport { TableVariant } from '@patternfly/react-table';\nimport {\n  Table,\n  TableBody,\n  TableHeader,\n} from '@patternfly/react-table/deprecated';\nimport PrimaryToolbar from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport {\n  WORKLOADS_RULES_COLUMNS_KEYS,\n  WORKLOADS_RULES_FILTER_CONFIG,\n  WORKLOAD_RULES_COLUMNS,\n  WORKLOAD_RULES_FILTER_CATEGORIES,\n} from '../../AppConstants';\nimport PropTypes from 'prop-types';\nimport Loading from '../Loading/Loading';\nimport {\n  ErrorState,\n  NoMatchingRecsForWorkloads,\n  NoRecsForWorkloadsDetails,\n  NoWorkloadsRecsAvailable,\n} from '../MessageState/EmptyStates';\nimport InsightsLabel from '@redhat-cloud-services/frontend-components/InsightsLabel';\nimport ExpandedRulesDetails from '../ExpandedRulesDetails.js/ExpandedRulesDetails';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  WORKLOADS_RECS_TABLE_INITIAL_STATE,\n  resetFilters,\n  updateWorkloadsRecsListFilters,\n} from '../../Services/Filters';\nimport {\n  translateSortParams,\n  paramParser,\n  updateSearchParams,\n} from '../Common/Tables';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport {\n  filtersAreApplied,\n  flatMapRows,\n  passFilterWorkloadsRecs,\n  pruneWorkloadsRulesFilters,\n  sortWithSwitch,\n  workloadsRulesAddFilterParam,\n  workloadsRulesRemoveFilterParam,\n} from '../../Utilities/Workloads';\nimport { useLocation } from 'react-router-dom';\nimport './WorkloadRules.scss';\n\nconst WorkloadRules = ({ workload }) => {\n  const dispatch = useDispatch();\n  const { isError, isUninitialized, isFetching, isSuccess, data } = workload;\n  const recommendations = data?.recommendations || [];\n  const errorState = isError;\n  const successState = isSuccess;\n  const noInput = successState && recommendations.length === 0;\n  const [isAllExpanded, setIsAllExpanded] = useState(false);\n  const [filteredRows, setFilteredRows] = useState([]);\n  const [filterBuilding, setFilterBuilding] = useState(true);\n  const [displayedRows, setDisplayedRows] = useState([]);\n  const [rowsFiltered, setRowsFiltered] = useState(false);\n  const [filtersApplied, setFiltersApplied] = useState(false);\n  const [expandFirst, setExpandFirst] = useState(true);\n  const loadingState = isUninitialized || isFetching || !rowsFiltered;\n  const { search } = useLocation();\n  //FILTERS\n  const filters = useSelector(({ filters }) => filters.workloadsRecsListState);\n  const noMatchingRecs = filteredRows.length === 0 ? true : false;\n\n  const updateFilters = (payload) =>\n    dispatch(updateWorkloadsRecsListFilters(payload));\n\n  const addFilterParam = (param, values) => {\n    setExpandFirst(false);\n    workloadsRulesAddFilterParam(filters, updateFilters, param, values);\n  };\n  const removeFilterParam = (param) =>\n    workloadsRulesRemoveFilterParam(filters, updateFilters, param);\n\n  useEffect(() => {\n    setFilteredRows(buildFilteredRows(recommendations, filters));\n  }, [data, filters]);\n\n  useEffect(() => {\n    setDisplayedRows(\n      buildDisplayedRows(filteredRows, filters.sortIndex, filters.sortDirection)\n    );\n    setFiltersApplied(filtersAreApplied(filters));\n    setRowsFiltered(true);\n  }, [filteredRows]);\n\n  const filterConfigItems = WORKLOADS_RULES_FILTER_CONFIG(\n    filters,\n    addFilterParam\n  );\n\n  useEffect(() => {\n    if (search && filterBuilding) {\n      const paramsObject = paramParser(search);\n      if (paramsObject.sort) {\n        const sortObj = translateSortParams(paramsObject.sort);\n        paramsObject.sortIndex = WORKLOADS_RULES_COLUMNS_KEYS.indexOf(\n          sortObj.description\n        );\n        paramsObject.sortDirection = sortObj.direction;\n      }\n      paramsObject.total_risk &&\n        !Array.isArray(paramsObject.total_risk) &&\n        (paramsObject.total_risk = [`${paramsObject.total_risk}`]);\n      updateFilters({ ...filters, ...paramsObject });\n    }\n    setFilterBuilding(false);\n  }, []);\n\n  useEffect(() => {\n    if (!filterBuilding) {\n      updateSearchParams(filters, WORKLOADS_RULES_COLUMNS_KEYS);\n    }\n  }, [filters, filterBuilding]);\n\n  const buildDisplayedRows = (filteredRows, sortIndex, sortDirection) => {\n    const sortingRows = sortWithSwitch(sortIndex, sortDirection, filteredRows);\n    return flatMapRows(sortingRows, expandFirst);\n  };\n\n  const handleOnCollapse = (_e, rowId, isOpen) => {\n    if (rowId === undefined) {\n      // if undefined, all rows are affected\n      setIsAllExpanded(isOpen);\n      setDisplayedRows(\n        displayedRows.map((row) => ({\n          ...row,\n          // Don't show expand button for expanded content\n          ...(Object.hasOwn(row, 'parent') ? null : { isOpen }),\n        }))\n      );\n    } else {\n      setDisplayedRows(\n        displayedRows.map((row, index) =>\n          index === rowId ? { ...row, isOpen } : row\n        )\n      );\n    }\n  };\n\n  const buildFilteredRows = (allRows, filters) => {\n    setRowsFiltered(false);\n    const filtersArePresent = filtersAreApplied(filters);\n    const expandedRowsSet = new Set(\n      displayedRows\n        .filter((ruleExpanded) => ruleExpanded?.isOpen)\n        .map((object) => object?.rule?.details)\n    );\n    return allRows\n      .filter((recs) =>\n        filtersArePresent ? passFilterWorkloadsRecs(recs, filters) : true\n      )\n      .map((value, key) => [\n        {\n          rule: value,\n          isOpen: isAllExpanded || expandedRowsSet?.has(value?.details),\n          cells: [\n            {\n              title: value.details,\n            },\n            {\n              title: (\n                <div key={key}>\n                  <InsightsLabel\n                    value={value.total_risk}\n                    rest={{ isCompact: true }}\n                  />\n                </div>\n              ),\n            },\n            {\n              title: value.objects.length,\n            },\n            {\n              title: (\n                <div key={key}>\n                  <DateFormat date={value.modified} type=\"relative\" />\n                </div>\n              ),\n            },\n          ],\n        },\n        {\n          cells: [\n            {\n              title: (\n                <ExpandedRulesDetails\n                  extra_data={value.extra_data}\n                  more_info={value.more_info}\n                  resolution={value.resolution}\n                  objects={value.objects}\n                />\n              ),\n            },\n          ],\n          fullWidth: true,\n        },\n      ]);\n  };\n\n  const buildFilterChips = () => {\n    const localFilters = { ...filters };\n    delete localFilters.sortIndex;\n    delete localFilters.sortDirection;\n    return pruneWorkloadsRulesFilters(\n      localFilters,\n      WORKLOAD_RULES_FILTER_CATEGORIES\n    );\n  };\n\n  const activeFiltersConfig = {\n    showDeleteButton: filtersApplied,\n    deleteTitle: 'Reset filters',\n    filters: buildFilterChips(),\n    onDelete: (_event, itemsToRemove, isAll) => {\n      if (isAll) {\n        resetFilters(\n          filters,\n          WORKLOADS_RECS_TABLE_INITIAL_STATE,\n          updateFilters\n        );\n      } else {\n        itemsToRemove.map((item) => {\n          const newFilter = {\n            [item.urlParam]: Array.isArray(filters[item.urlParam])\n              ? filters[item.urlParam].filter(\n                  (value) => String(value) !== String(item.chips[0].value)\n                )\n              : '',\n          };\n          newFilter[item.urlParam].length > 0\n            ? updateFilters({ ...filters, ...newFilter })\n            : removeFilterParam(item.urlParam);\n        });\n      }\n    },\n  };\n\n  const onSort = (_e, index, direction) => {\n    setRowsFiltered(false);\n    setExpandFirst(false);\n    updateFilters({\n      ...filters,\n      sortIndex: index,\n      sortDirection: direction,\n    });\n  };\n\n  return (\n    <div id=\"workload-recs-list-table\">\n      <PrimaryToolbar\n        filterConfig={{\n          items: filterConfigItems,\n          isDisabled:\n            loadingState ||\n            errorState ||\n            noInput ||\n            recommendations.length === 0,\n        }}\n        pagination={\n          <span className=\"pf-u-font-weight-bold\">\n            {filteredRows?.length === 1\n              ? `${filteredRows.length} Recommendation`\n              : `${filteredRows.length} Recommendations`}\n          </span>\n        }\n        activeFiltersConfig={\n          loadingState || errorState || noInput || recommendations.length === 0\n            ? undefined\n            : activeFiltersConfig\n        }\n      />\n      <Table\n        aria-label={'Workload recommendations table'}\n        ouiaId=\"workload-recommendations\"\n        cells={WORKLOAD_RULES_COLUMNS}\n        ouiaSafe={!loadingState}\n        onCollapse={handleOnCollapse} // TODO: set undefined when there is an empty state\n        rows={\n          errorState || loadingState || noInput || noMatchingRecs ? (\n            [\n              {\n                fullWidth: true,\n                cells: [\n                  {\n                    props: {\n                      colSpan: WORKLOAD_RULES_COLUMNS.length + 1,\n                    },\n                    title: errorState ? (\n                      <NoWorkloadsRecsAvailable />\n                    ) : loadingState ? (\n                      <Loading />\n                    ) : noMatchingRecs ? (\n                      <NoMatchingRecsForWorkloads />\n                    ) : (\n                      <NoRecsForWorkloadsDetails />\n                    ),\n                  },\n                ],\n              },\n            ]\n          ) : successState ? (\n            displayedRows\n          ) : (\n            <ErrorState />\n          )\n        }\n        variant={TableVariant.compact}\n        isStickyHeader\n        canCollapseAll\n        sortBy={{\n          index: filters.sortIndex,\n          direction: filters.sortDirection,\n        }}\n        onSort={onSort}\n      >\n        <TableHeader />\n        <TableBody />\n      </Table>\n    </div>\n  );\n};\n\nexport default WorkloadRules;\n\nWorkloadRules.propTypes = {\n  workload: PropTypes.shape({\n    isUninitialized: PropTypes.bool.isRequired,\n    isFetching: PropTypes.bool.isRequired,\n    isError: PropTypes.bool.isRequired,\n    isSuccess: PropTypes.bool.isRequired,\n    error: PropTypes.object,\n    data: PropTypes.shape({\n      namespace: PropTypes.shape({\n        uuid: PropTypes.string,\n        name: PropTypes.string,\n      }),\n      cluster: PropTypes.shape({\n        uuid: PropTypes.string,\n        display_name: PropTypes.string,\n      }),\n      status: PropTypes.string,\n      recommendations: PropTypes.arrayOf(\n        PropTypes.shape({\n          check: PropTypes.string,\n          description: PropTypes.string,\n          objects: PropTypes.arrayOf(\n            PropTypes.shape({\n              kind: PropTypes.string,\n              uid: PropTypes.string,\n            })\n          ),\n          remediation: PropTypes.string,\n        })\n      ),\n    }),\n  }),\n};\n","import React from 'react';\nimport PageHeader from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Flex, FlexItem, PageSection, Title } from '@patternfly/react-core';\nimport Breadcrumbs from '../Breadcrumbs';\nimport WorkloadsHeader from '../WorkloadHeader';\nimport PropTypes from 'prop-types';\nimport WorkloadRules from '../WorkloadRules/WorkloadRules';\n\nexport const Workload = ({ workload, namespaceId, clusterId }) => {\n  return (\n    <React.Fragment>\n      <PageHeader className=\"pf-m-light ins-inventory-detail\">\n        <Flex direction={{ default: 'column' }}>\n          <FlexItem>\n            <Breadcrumbs\n              current={\n                workload?.data?.status === 'ok'\n                  ? `${workload.data.cluster.display_name} | ${workload.data.namespace.name}`\n                  : `${clusterId} | ${namespaceId}`\n              }\n              workloads=\"true\"\n            />\n            <WorkloadsHeader />\n          </FlexItem>\n        </Flex>\n      </PageHeader>\n      <PageSection>\n        <Title className=\"pf-u-mb-lg\" headingLevel=\"h3\" size=\"2xl\">\n          Recommendations\n        </Title>\n        <WorkloadRules workload={workload} />\n      </PageSection>\n    </React.Fragment>\n  );\n};\n\nWorkload.propTypes = {\n  clusterId: PropTypes.string.isRequired,\n  namespaceId: PropTypes.string.isRequired,\n  workload: PropTypes.shape({\n    isUninitialized: PropTypes.bool.isRequired,\n    isFetching: PropTypes.bool.isRequired,\n    data: PropTypes.shape({\n      namespace: PropTypes.shape({\n        uuid: PropTypes.string,\n        name: PropTypes.string,\n      }),\n      cluster: PropTypes.shape({\n        uuid: PropTypes.string,\n        display_name: PropTypes.string,\n      }),\n      status: PropTypes.string,\n    }),\n  }),\n};\n","import React, { useEffect } from 'react';\nimport { Workload } from './Workload';\nimport { useParams } from 'react-router-dom';\n// import { useGetWorkloadByIdQuery } from '../../Services/SmartProxy';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport mockdata from '../../../cypress/fixtures/api/insights-results-aggregator/v2/workload/00000001-0001-0001-0001-000000000005-fad82c1f-96db-430f-b3ec-503fb9eeb7bb/info.json';\nimport mockList from '../../../cypress/fixtures/api/insights-results-aggregator/v2/workload/list.json';\n\nconst WorkloadWrapper = () => {\n  const chrome = useChrome();\n  const { namespaceId, clusterId } = useParams();\n  // const workload = useGetWorkloadByIdQuery({\n  //   namespaceId,\n  //   clusterId,\n  // });\n\n  // Temporary hardcoded data RHINENG-7723\n  const uuid = `${clusterId}/${namespaceId}`;\n  let workload = {\n    isError: false,\n    isFetching: true,\n    isUninitialized: true,\n    isLoading: true,\n    isSuccess: false,\n    data: {},\n    refetch: () => null,\n  };\n\n  if (mockList.includes(uuid)) {\n    const customData = {\n      ...mockdata,\n      cluster: {\n        display_name: `Cluster name ${clusterId}`,\n        uuid: clusterId,\n      },\n      namespace: {\n        name: `Namespace name ${namespaceId}`,\n        uuid: namespaceId,\n      },\n    };\n    workload = {\n      isError: false,\n      isFetching: false,\n      isUninitialized: false,\n      isLoading: false,\n      isSuccess: true,\n      data: { ...customData },\n      refetch: () => null,\n    };\n  } else {\n    workload = {\n      isError: true,\n      isFetching: false,\n      isUninitialized: false,\n      isLoading: false,\n      isSuccess: false,\n      data: { status: 'error' },\n      refetch: () => null,\n    };\n  }\n\n  useEffect(() => {\n    workload.refetch();\n  }, [namespaceId, clusterId]);\n\n  useEffect(() => {\n    const subnav = `${\n      workload?.data?.status === 'ok'\n        ? `${workload?.data?.cluster.display_name} | ${workload?.data?.namespace.name} - Workloads`\n        : `${clusterId} | ${namespaceId} - Workloads`\n    }`;\n    chrome.updateDocumentTitle(`${subnav} - OCP Advisor | Red Hat Insights`);\n  }, [workload, namespaceId, clusterId]);\n\n  return (\n    <Workload\n      workload={workload}\n      namespaceId={namespaceId}\n      clusterId={clusterId}\n    />\n  );\n};\n\nexport default WorkloadWrapper;\n","import React from 'react';\nimport ContentLoader from 'react-content-loader';\n\nconst OneLineLoader = () => (\n  <ContentLoader height={20}>\n    <rect x=\"0\" y=\"0\" rx=\"4\" ry=\"4\" width=\"300\" height=\"20\" />\n  </ContentLoader>\n);\n\nexport { OneLineLoader };\n"],"names":["Breadcrumbs","_ref","current","workloads","intl","useIntl","splitUrl","useLocation","pathname","split","React","Breadcrumb","ouiaId","BreadcrumbItem","className","Link","to","relative","concat","formatMessage","messages","insightsHeader","isActive","propTypes","PropTypes","Card","CardBody","List","WorkloadHeader","_workload$metadata","workloadData","namespaceId","clusterId","isUninitialized","isFetching","workload","data","Grid","id","md","hasGutter","GridItem","span","Title","size","headingLevel","Skeleton","cluster","display_name","namespace","name","Stack","StackItem","OneLineLoader","metadata","last_checked_at","DateFormat","date","type","isRequired","uuid","status","_useParams","useParams","isError","isLoading","isSuccess","refetch","mockList","includes","customData","_objectSpread","mockdata","ObjectsModalTable","localFilters","objectsData","objects","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","filtersApplied","setFiltersApplied","_useState3","_useState4","filteredRows","setFilteredRows","_useState5","_useState6","displayedRows","setDisplayedRows","_useState7","_useState8","rowsFiltered","setRowsFiltered","filters","useSelector","_ref2","workloadsObjectsListState","page","Math","floor","offset","limit","perPage","updateFilters","payload","updateWorkloadsObjectsListFilters","preparedRows","length","loadingState","filterConfigItems","label","filterValues","key","onChange","_event","value","object_id","placeholder","activeFiltersConfig","showDeleteButton","deleteTitle","sortIndex","sortDirection","pruneWorkloadsRulesFilters","title","urlParam","onDelete","itemsToRemove","isAll","resetFilters","WORKLOADS_OBJECTS_TABLE_INITIAL_STATE","map","item","param","newFilter","_defineProperty","Array","isArray","filter","String","chips","_removeFilterParam","useEffect","allrows","object","passObjectsFilters","buildFilteredRows","slice","filtersAreApplied","onSetPage","_e","pageNumber","newOffset","onPerPageSelect","PrimaryToolbar","pagination","isCompact","itemCount","filterConfig","items","Loading","Table","variant","Thead","Tr","Th","width","ObjectsTableColumns","kind","Tbody","index","Td","dataLabel","uid","Pagination","onPageInput","widgetId","PaginationVariant","bottom","isDisabled","NoMatchingWorkloadsObjects","ObjectsModal","isModalOpen","setIsModalOpen","PfModal","isOpen","onClose","mockObjects","ExpandedRulesDetails","more_info","resolution","objectsModalOpen","setObjectsModalOpen","style","boxShadow","isPlain","CardHeader","Icon","BullseyeIcon","Divider","ThumbsUpIcon","TemplateProcessor","template","borders","modifier","Button","isInline","onClick","CodeBlock","InfoCircleIcon","WorkloadRules","recommendations","errorState","successState","noInput","isAllExpanded","setIsAllExpanded","filterBuilding","setFilterBuilding","_useState9","_useState10","_useState11","_useState12","_useState13","_useState14","expandFirst","setExpandFirst","search","workloadsRecsListState","noMatchingRecs","updateWorkloadsRecsListFilters","buildDisplayedRows","WORKLOADS_RULES_FILTER_CONFIG","values","workloadsRulesAddFilterParam","paramsObject","paramParser","sort","sortObj","translateSortParams","WORKLOADS_RULES_COLUMNS_KEYS","indexOf","description","direction","total_risk","updateSearchParams","sortingRows","sortWithSwitch","flatMapRows","allRows","filtersArePresent","expandedRowsSet","Set","ruleExpanded","_object$rule","rule","details","recs","passFilterWorkloadsRecs","has","cells","InsightsLabel","rest","modified","extra_data","fullWidth","WORKLOAD_RULES_FILTER_CATEGORIES","WORKLOADS_RECS_TABLE_INITIAL_STATE","workloadsRulesRemoveFilterParam","undefined","WORKLOAD_RULES_COLUMNS","ouiaSafe","onCollapse","rowId","row","Object","hasOwn","rows","props","colSpan","NoWorkloadsRecsAvailable","NoMatchingRecsForWorkloads","NoRecsForWorkloadsDetails","ErrorState","TableVariant","compact","isStickyHeader","canCollapseAll","sortBy","onSort","TableHeader","TableBody","error","check","remediation","Workload","_workload$data","PageHeader","Flex","default","FlexItem","WorkloadsHeader","PageSection","chrome","useChrome","_workload","_workload2","_workload3","subnav","updateDocumentTitle","ContentLoader","height","x","y","rx","ry"],"sourceRoot":""}