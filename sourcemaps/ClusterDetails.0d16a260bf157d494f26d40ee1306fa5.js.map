{"version":3,"file":"js/ClusterDetails.d9de35d8c534aae05bbb.js","mappings":"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","sources":["webpack:///./src/Components/ClusterHeader/ClusterHeader.js","webpack:///./src/Components/ClusterHeader/index.js","webpack:///./src/Components/ReportDetails/ReportDetails.js","webpack:///./src/Components/ClusterRules/ClusterRules.js","webpack:///./src/Components/Cluster/Cluster.js","webpack:///./src/Components/Cluster/index.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport { Grid, GridItem } from '@patternfly/react-core/dist/js/layouts/Grid';\nimport { Stack, StackItem } from '@patternfly/react-core/dist/js/layouts/Stack';\nimport { Title } from '@patternfly/react-core/dist/js/components/Title';\nimport Skeleton from '@redhat-cloud-services/frontend-components/Skeleton';\n\nimport messages from '../../Messages';\n\nexport const ClusterHeader = ({ clusterId, lastSeen, displayName }) => {\n  const intl = useIntl();\n  const {\n    isUninitialized,\n    isLoading,\n    isFetching,\n    data: clusterName,\n  } = displayName;\n\n  return (\n    <Grid id=\"cluster-header\" md={12} hasGutter>\n      <GridItem>\n        {isUninitialized || isLoading || isFetching ? (\n          <Skeleton size=\"sm\" />\n        ) : (\n          <Title size=\"2xl\" headingLevel=\"h1\" id=\"cluster-header-title\">\n            {clusterName || clusterId}\n          </Title>\n        )}\n      </GridItem>\n      <GridItem>\n        <Stack>\n          <StackItem id=\"cluster-header-uuid\">\n            <span>UUID: </span>\n            <span>{clusterId || intl.formatMessage(messages.unknown)}</span>\n          </StackItem>\n          {lastSeen && (\n            <StackItem id=\"cluster-header-last-seen\">\n              <span>{intl.formatMessage(messages.lastSeen)}: </span>\n              <span>{lastSeen || intl.formatMessage(messages.unknown)}</span>\n            </StackItem>\n          )}\n        </Stack>\n      </GridItem>\n    </Grid>\n  );\n};\n\nClusterHeader.propTypes = {\n  clusterId: PropTypes.string.isRequired,\n  displayName: PropTypes.object.isRequired,\n  lastSeen: PropTypes.string,\n};\n","import React from 'react';\nimport { routerParams } from '@redhat-cloud-services/frontend-components-utilities/RouterParams/RouterParams';\n\nimport { useGetClusterDisplayNameByIdQuery } from '../../Services/AccountManagementService';\nimport { useLazyGetClusterByIdQuery } from '../../Services/SmartProxy';\nimport { ClusterHeader } from './ClusterHeader';\n\nexport default routerParams(({ match }) => {\n  const clusterId = match.params.clusterId;\n  const displayName = useGetClusterDisplayNameByIdQuery(clusterId);\n  const { data } = useLazyGetClusterByIdQuery(clusterId);\n\n  return (\n    <ClusterHeader\n      clusterId={clusterId}\n      displayName={displayName}\n      lastSeen={data?.report?.lastSeen}\n    />\n  );\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\n\nimport Loading from '../Loading/Loading';\n\n// Rule fields processing: https://docs.google.com/document/d/1D0ZLD6-2DZqBX1cUHJY2vL2QAD0dIAzY3O3xFNlEsVg/edit?usp=sharing\n\nconst ReportDetails = ({ report }) => {\n  return (\n    <div className=\"advisor\">\n      <AsyncComponent\n        appName=\"advisor\"\n        module=\"./AdvisorReportDetails\"\n        fallback={<Loading />}\n        // TODO: make API rename `extra_data` to `details` or modify AdvisorReportDetails property\n        report={{\n          ...report,\n          details: report.extra_data,\n          resolution: {\n            resolution: report.resolution,\n          },\n        }}\n      />\n    </div>\n  );\n};\n\nReportDetails.propTypes = {\n  report: PropTypes.object.isRequired,\n};\n\nexport default ReportDetails;\n","import './_ClusterRules.scss';\n\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport CheckIcon from '@patternfly/react-icons/dist/js/icons/check-icon';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat/DateFormat';\nimport InsightsLabel from '@redhat-cloud-services/frontend-components/InsightsLabel';\nimport {\n  SortByDirection,\n  Table,\n  TableBody,\n  TableHeader,\n  TableVariant,\n  cellWidth,\n  sortable,\n} from '@patternfly/react-table';\nimport { capitalize } from '@patternfly/react-core/dist/js/helpers/util';\nimport { Card, CardBody } from '@patternfly/react-core/dist/js/components/Card';\nimport {\n  Tooltip,\n  TooltipPosition,\n} from '@patternfly/react-core/dist/js/components/Tooltip';\nimport PrimaryToolbar from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\n\nimport messages from '../../Messages';\nimport MessageState from '../MessageState/MessageState';\nimport {\n  IMPACT_LABEL,\n  LIKELIHOOD_LABEL,\n  FILTER_CATEGORIES as FC,\n  RULE_CATEGORIES,\n  DEFAULT_CLUSTER_RULES_FILTERS,\n} from '../../AppConstants';\nimport ReportDetails from '../ReportDetails/ReportDetails';\nimport RuleLabels from '../RuleLabels/RuleLabels';\nimport { NoMatchingRecs } from '../MessageState/EmptyStates';\n\nconst ClusterRules = ({ reports }) => {\n  const intl = useIntl();\n  const [activeReports, setActiveReports] = useState([]);\n  const [sortBy, setSortBy] = useState({});\n  const [filters, setFilters] = useState(DEFAULT_CLUSTER_RULES_FILTERS);\n  const [searchValue, setSearchValue] = useState('');\n  const [rows, setRows] = useState([]);\n  const results = rows ? rows.length / 2 : 0;\n\n  const cols = [\n    {\n      title: intl.formatMessage(messages.description),\n      transforms: [sortable],\n    },\n    {\n      title: intl.formatMessage(messages.added),\n      transforms: [sortable, cellWidth(15)],\n    },\n    {\n      title: intl.formatMessage(messages.totalRisk),\n      transforms: [sortable, cellWidth(15)],\n    },\n  ];\n\n  const handleOnCollapse = (_e, rowId, isOpen) => {\n    const collapseRows = [...rows];\n    collapseRows[rowId] = { ...collapseRows[rowId], isOpen };\n    setRows(collapseRows);\n  };\n\n  const onKebabClick = (action) => {\n    const isOpen = action === 'insights-expand-all';\n    const allRows = [...rows];\n\n    allRows.map((row, key) => {\n      if (Object.prototype.hasOwnProperty.call(row, 'isOpen')) {\n        row.isOpen = isOpen;\n        isOpen && handleOnCollapse(null, key, isOpen);\n      }\n    });\n\n    setRows(allRows);\n  };\n\n  const actions = [\n    {\n      label: 'Collapse all',\n      onClick: () => onKebabClick('insights-collapse-all'),\n    },\n    {\n      label: 'Expand all',\n      onClick: () => onKebabClick('insights-expand-all'),\n    },\n  ];\n\n  const buildRows = (activeReports, filters, rows, searchValue = '') => {\n    const builtRows = activeReports.flatMap((value, key) => {\n      const rule = value;\n      const resolution = value.resolution;\n      const entity = rows.filter(\n        (rowVal, rowKey) =>\n          rowKey % 2 === 0 && rowVal.rule.rule_id === rule.rule_id && rowVal\n      );\n      const isOpen = rows.length\n        ? entity.length\n          ? entity[0].isOpen\n          : false\n        : key === 0\n        ? true\n        : false;\n\n      const reportRow = [\n        {\n          rule,\n          resolution,\n          isOpen,\n          cells: [\n            {\n              title: (\n                <div>\n                  {rule.description} <RuleLabels rule={value} />\n                </div>\n              ),\n            },\n            {\n              title: (\n                <div key={key}>\n                  <DateFormat\n                    date={rule.created_at}\n                    type=\"relative\"\n                    tooltipProps={{ position: TooltipPosition.bottom }}\n                  />\n                </div>\n              ),\n            },\n            {\n              title: (\n                <div key={key} style={{ verticalAlign: 'top' }}>\n                  {rule?.likelihood && rule?.impact ? (\n                    <Tooltip\n                      key={key}\n                      position={TooltipPosition.bottom}\n                      content={\n                        // TODO: refine fields lookup\n                        <span>\n                          The <strong>likelihood</strong> that this will be a\n                          problem is{' '}\n                          {rule.likelihood\n                            ? LIKELIHOOD_LABEL[rule.likelihood]\n                            : 'unknown'}\n                          . The <strong>impact</strong> of the problem would be{' '}\n                          {rule.impact ? IMPACT_LABEL[rule.impact] : 'unknown'}{' '}\n                          if it occurred.\n                        </span>\n                      }\n                    >\n                      <InsightsLabel value={rule.total_risk} />\n                    </Tooltip>\n                  ) : (\n                    <InsightsLabel value={rule.total_risk} />\n                  )}\n                </div>\n              ),\n            },\n          ],\n        },\n        {\n          parent: key,\n          fullWidth: true,\n          cells: [\n            {\n              title: <ReportDetails key={`child-${key}`} report={value} />,\n            },\n          ],\n        },\n      ];\n      const isValidSearchValue =\n        searchValue.length === 0 ||\n        rule.description.toLowerCase().includes(searchValue.toLowerCase());\n      const isValidFilterValue =\n        Object.keys(filters).length === 0 ||\n        Object.keys(filters)\n          .map((key) => {\n            const filterValues = filters[key];\n            const rowValue = {\n              created_at: rule.created_at,\n              total_risk: rule.total_risk,\n              category: rule.tags,\n              rule_status: rule.disabled ? 'disabled' : 'enabled',\n            };\n            if (key === 'category') {\n              // in that case, rowValue['category'] is an array of categories (or \"tags\" in the back-end implementation)\n              // e.g. ['security', 'fault_tolerance']\n              return rowValue[key].find((categoryName) =>\n                filterValues.includes(String(RULE_CATEGORIES[categoryName]))\n              );\n            }\n            if (key === 'rule_status') {\n              return filterValues === 'all' || rowValue[key] === filterValues;\n            }\n            return filterValues.find(\n              (value) => String(value) === String(rowValue[key])\n            );\n          })\n          .every((x) => x);\n\n      return isValidSearchValue && isValidFilterValue ? reportRow : [];\n    });\n    // must recalculate parent for expandable table content whenever the array size changes\n    builtRows.forEach((row, index) =>\n      row.parent ? (row.parent = index - 1) : null\n    );\n\n    return builtRows;\n  };\n\n  const onSort = (_e, index, direction) => {\n    const sortedReports = {\n      1: 'description',\n      2: 'created_at',\n      3: 'total_risk',\n    };\n    const sort = () =>\n      activeReports\n        .concat()\n        .sort((firstItem, secondItem) =>\n          firstItem[sortedReports[index]] > secondItem[sortedReports[index]]\n            ? 1\n            : secondItem[sortedReports[index]] > firstItem[sortedReports[index]]\n            ? -1\n            : 0\n        );\n    const sortedReportsDirectional =\n      direction === SortByDirection.asc ? sort() : sort().reverse();\n\n    setActiveReports(sortedReportsDirectional);\n    setSortBy({\n      index,\n      direction,\n    });\n    setRows(buildRows(sortedReportsDirectional, filters, rows, searchValue));\n  };\n\n  const onInputChange = (value) => {\n    const builtRows = buildRows(activeReports, filters, rows, value);\n    setSearchValue(value);\n    setRows(builtRows);\n  };\n\n  const onFilterChange = (param, values) => {\n    const removeFilterParam = (param) => {\n      const filter = { ...filters };\n      delete filter[param];\n      return filter;\n    };\n\n    const newFilters =\n      values.length > 0\n        ? { ...filters, ...{ [param]: values } }\n        : removeFilterParam(param);\n    setRows(buildRows(activeReports, newFilters, rows, searchValue));\n    setFilters(newFilters);\n  };\n\n  const toggleRulesDisabled = (rule_status) => {\n    const newFilters = { ...filters, rule_status };\n    setRows(buildRows(activeReports, newFilters, rows, searchValue));\n    setFilters(newFilters);\n  };\n\n  const filterConfigItems = [\n    {\n      label: 'description',\n      filterValues: {\n        key: 'text-filter',\n        onChange: (_e, value) => onInputChange(value),\n        value: searchValue,\n      },\n    },\n    {\n      label: FC.total_risk.title,\n      type: FC.total_risk.type,\n      id: FC.total_risk.urlParam,\n      value: `checkbox-${FC.total_risk.urlParam}`,\n      filterValues: {\n        key: `${FC.total_risk.urlParam}-filter`,\n        onChange: (_e, values) =>\n          onFilterChange(FC.total_risk.urlParam, values),\n        value: filters.total_risk,\n        items: FC.total_risk.values,\n      },\n    },\n    {\n      label: FC.category.title,\n      type: FC.category.type,\n      id: FC.category.urlParam,\n      value: `checkbox-${FC.category.urlParam}`,\n      filterValues: {\n        key: `${FC.category.urlParam}-filter`,\n        onChange: (_e, values) => onFilterChange(FC.category.urlParam, values),\n        value: filters.category,\n        items: FC.category.values,\n      },\n    },\n    {\n      label: FC.rule_status.title,\n      type: FC.rule_status.type,\n      id: FC.rule_status.urlParam,\n      value: `radio-${FC.rule_status.urlParam}`,\n      filterValues: {\n        key: `${FC.rule_status.urlParam}-filter`,\n        onChange: (_e, value) => toggleRulesDisabled(value),\n        value: filters.rule_status,\n        items: FC.rule_status.values,\n      },\n    },\n  ];\n\n  const buildFilterChips = () => {\n    const prunedFilters = Object.entries(filters);\n    let chips =\n      filters && prunedFilters.length > 0\n        ? prunedFilters.map((item) => {\n            const category = FC[item[0]];\n            const chips = Array.isArray(item[1])\n              ? item[1].map((value) => ({\n                  name: category.values.find(\n                    (values) => values.value === String(value)\n                  ).label,\n                  value,\n                }))\n              : [\n                  {\n                    name: category.values.find(\n                      (values) => values.value === String(item[1])\n                    ).label,\n                    value: item[1],\n                  },\n                ];\n            return {\n              category: capitalize(category.title),\n              chips,\n              urlParam: category.urlParam,\n            };\n          })\n        : [];\n    searchValue.length > 0 &&\n      chips.push({\n        category: 'Description',\n        chips: [{ name: searchValue, value: searchValue }],\n      });\n    return chips;\n  };\n\n  const onChipDelete = (_e, itemsToRemove, isAll) => {\n    if (isAll) {\n      setRows(\n        buildRows(activeReports, DEFAULT_CLUSTER_RULES_FILTERS, rows, '')\n      );\n      setFilters(DEFAULT_CLUSTER_RULES_FILTERS);\n      setSearchValue('');\n    } else {\n      itemsToRemove.map((item) => {\n        switch (item.category) {\n          case 'Description':\n            setRows(buildRows(activeReports, filters, rows, ''));\n            setSearchValue('');\n            break;\n          case 'Status':\n            onFilterChange(item.urlParam, []);\n            break;\n          default:\n            onFilterChange(\n              item.urlParam,\n              filters[item.urlParam].filter(\n                (value) => String(value) !== String(item.chips[0].value)\n              )\n            );\n        }\n      });\n    }\n  };\n\n  const activeFiltersConfig = {\n    deleteTitle: intl.formatMessage(messages.resetFilters),\n    filters: buildFilterChips(),\n    onDelete: onChipDelete,\n  };\n\n  useEffect(() => {\n    const activeReportsData = reports;\n    setActiveReports(activeReportsData);\n    setRows(buildRows(activeReportsData, filters, rows, searchValue));\n  }, []);\n\n  return (\n    <div id=\"cluster-recs-list-table\">\n      <PrimaryToolbar\n        actionsConfig={{ actions }}\n        filterConfig={{\n          items: filterConfigItems,\n          isDisabled: activeReports.length === 0,\n        }}\n        pagination={\n          <React.Fragment>\n            {results === 1\n              ? `${results} ${intl.formatMessage(messages.recommendation)}`\n              : `${results} ${intl.formatMessage(messages.recommendations)}`}\n          </React.Fragment>\n        }\n        activeFiltersConfig={\n          activeReports.length === 0 ? undefined : activeFiltersConfig\n        }\n      />\n      {activeReports.length > 0 ? (\n        <React.Fragment>\n          <Table\n            aria-label={'Cluster recommendations table'}\n            ouiaId={'cluster-recommendations'}\n            onCollapse={handleOnCollapse}\n            rows={rows}\n            cells={cols}\n            sortBy={sortBy}\n            onSort={onSort}\n            variant={TableVariant.compact}\n            isStickyHeader\n          >\n            <TableHeader />\n            <TableBody />\n          </Table>\n          {results === 0 && (\n            <Card ouiaId={'empty-recommendations'}>\n              <CardBody>\n                <NoMatchingRecs />\n              </CardBody>\n            </Card>\n          )}\n        </React.Fragment>\n      ) : (\n        // ? Welcome to Insights feature for novice clusters with disabled Insights?\n        <Card>\n          <CardBody>\n            <MessageState\n              icon={CheckIcon}\n              iconClass=\"ins-c-insights__check\"\n              title={intl.formatMessage(messages.noRecommendations)}\n              text={intl.formatMessage(messages.noRecommendationsDesc)}\n            />\n          </CardBody>\n        </Card>\n      )}\n    </div>\n  );\n};\n\nClusterRules.propTypes = {\n  reports: PropTypes.array.isRequired,\n};\n\nClusterRules.defaultProps = {\n  reports: [],\n};\n\nexport default ClusterRules;\n","import './_Cluster.scss';\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport { Grid, GridItem } from '@patternfly/react-core/dist/js/layouts/Grid';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\nimport InfoCircleIcon from '@patternfly/react-icons/dist/js/icons/info-circle-icon';\nimport PageHeader from '@redhat-cloud-services/frontend-components/PageHeader';\nimport Main from '@redhat-cloud-services/frontend-components/Main';\nimport { global_danger_color_100 as globalDangerColor100 } from '@patternfly/react-tokens/dist/js/global_danger_color_100';\nimport { global_info_color_100 as globalInfoColor100 } from '@patternfly/react-tokens/dist/js/global_info_color_100.js';\n\nimport ClusterHeader from '../ClusterHeader';\nimport ClusterRules from '../ClusterRules/ClusterRules';\nimport Breadcrumbs from '../Breadcrumbs';\nimport MessageState from '../MessageState/MessageState';\nimport Loading from '../Loading/Loading';\nimport messages from '../../Messages';\n\nexport const Cluster = ({ cluster, displayName, match }) => {\n  const intl = useIntl();\n  const {\n    isError,\n    isUninitialized,\n    isLoading,\n    isFetching,\n    isSuccess,\n    data,\n    error,\n  } = cluster;\n  const { data: clusterDisplayName } = displayName;\n\n  return (\n    <React.Fragment>\n      <PageHeader className=\"pf-m-light ins-inventory-detail\">\n        <Breadcrumbs\n          current={clusterDisplayName || match.params.clusterId}\n          match={match}\n        />\n        <ClusterHeader />\n      </PageHeader>\n      {(isUninitialized || isLoading || isFetching) && (\n        <Main id=\"loading-skeleton\">\n          <Loading />\n        </Main>\n      )}\n      {isError &&\n        (error?.status === 404 ? (\n          <Main>\n            <MessageState\n              title={intl.formatMessage(messages.noRecsFoundError)}\n              text={\n                <React.Fragment>\n                  {intl.formatMessage(messages.noRecsFoundErrorDesc)}\n                  <a href=\"https://docs.openshift.com/container-platform/latest/support/getting-support.html\">\n                    {' '}\n                    OpenShift documentation.\n                  </a>\n                </React.Fragment>\n              }\n              icon={InfoCircleIcon}\n              iconStyle={{ color: globalInfoColor100.value }}\n              variant=\"large\"\n            />\n          </Main>\n        ) : (\n          <Main>\n            <MessageState\n              title={intl.formatMessage(messages.noRecsError)}\n              text={intl.formatMessage(messages.noRecsErrorDesc)}\n              icon={ExclamationCircleIcon}\n              iconStyle={{ color: globalDangerColor100.value }}\n            />\n          </Main>\n        ))}\n      {isSuccess && (\n        <React.Fragment>\n          <Main>\n            <React.Fragment>\n              <Grid hasGutter>\n                <GridItem span={12}>\n                  <ClusterRules reports={data?.report?.data || []} />\n                </GridItem>\n              </Grid>\n            </React.Fragment>\n          </Main>\n        </React.Fragment>\n      )}\n    </React.Fragment>\n  );\n};\n\nCluster.propTypes = {\n  cluster: PropTypes.object.isRequired,\n  displayName: PropTypes.object.isRequired,\n  match: PropTypes.object.isRequired,\n};\n","import React, { useEffect } from 'react';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/RouterParams';\nimport { useIntl } from 'react-intl';\n\nimport { useGetClusterByIdQuery } from '../../Services/SmartProxy';\nimport messages from '../../Messages';\nimport { Cluster } from './Cluster';\nimport { useGetClusterDisplayNameByIdQuery } from '../../Services/AccountManagementService';\n\nexport default routerParams(({ match }) => {\n  const intl = useIntl();\n  const cluster = useGetClusterByIdQuery(match.params.clusterId);\n  const displayName = useGetClusterDisplayNameByIdQuery(match.params.clusterId);\n\n  useEffect(() => {\n    cluster.refetch();\n  }, [match.params.clusterId]);\n\n  useEffect(() => {\n    if (match.params.clusterId) {\n      const subnav = `${match.params.clusterId} - ${intl.formatMessage(\n        messages.clusters\n      )}`;\n      document.title = intl.formatMessage(messages.documentTitle, { subnav });\n    }\n  }, [match.params.clusterId]);\n\n  return <Cluster cluster={cluster} displayName={displayName} match={match} />;\n});\n"],"names":["ClusterHeader","clusterId","lastSeen","displayName","intl","useIntl","isUninitialized","isLoading","isFetching","clusterName","data","Grid","id","md","hasGutter","GridItem","Skeleton","size","Title","headingLevel","Stack","StackItem","formatMessage","messages","propTypes","PropTypes","routerParams","match","params","useGetClusterDisplayNameByIdQuery","useLazyGetClusterByIdQuery","report","ReportDetails","className","AsyncComponent","appName","module","fallback","Loading","details","extra_data","resolution","ClusterRules","prunedFilters","chips","reports","useState","activeReports","setActiveReports","sortBy","setSortBy","DEFAULT_CLUSTER_RULES_FILTERS","filters","setFilters","searchValue","setSearchValue","rows","setRows","results","length","cols","title","transforms","sortable","cellWidth","handleOnCollapse","_e","rowId","isOpen","collapseRows","onKebabClick","action","allRows","map","row","key","Object","prototype","hasOwnProperty","call","actions","label","onClick","buildRows","builtRows","flatMap","value","rule","entity","filter","rowVal","rowKey","rule_id","reportRow","cells","description","RuleLabels","DateFormat","date","created_at","type","tooltipProps","position","TooltipPosition","style","verticalAlign","likelihood","impact","Tooltip","content","LIKELIHOOD_LABEL","IMPACT_LABEL","InsightsLabel","total_risk","parent","fullWidth","isValidSearchValue","toLowerCase","includes","isValidFilterValue","keys","filterValues","rowValue","category","tags","rule_status","disabled","find","categoryName","String","RULE_CATEGORIES","every","x","forEach","index","onFilterChange","param","values","newFilters","removeFilterParam","filterConfigItems","onChange","onInputChange","FC","items","activeFiltersConfig","deleteTitle","entries","item","Array","isArray","name","capitalize","urlParam","push","onDelete","itemsToRemove","isAll","useEffect","activeReportsData","PrimaryToolbar","actionsConfig","filterConfig","isDisabled","pagination","undefined","Table","ouiaId","onCollapse","onSort","direction","sortedReports","sort","concat","firstItem","secondItem","sortedReportsDirectional","SortByDirection","reverse","variant","TableVariant","isStickyHeader","TableHeader","TableBody","Card","CardBody","MessageState","icon","CheckIcon","iconClass","text","defaultProps","Cluster","cluster","isError","isSuccess","error","clusterDisplayName","PageHeader","Breadcrumbs","current","Main","status","href","InfoCircleIcon","iconStyle","color","globalInfoColor100","ExclamationCircleIcon","globalDangerColor100","span","useGetClusterByIdQuery","refetch","subnav","document"],"sourceRoot":""}