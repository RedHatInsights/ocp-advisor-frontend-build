{"version":3,"sources":["webpack:///./src/Components/ClusterHeader/ClusterHeader.js","webpack:///./src/Components/MessageState/MessageState.js","webpack:///./src/Components/ReportDetails/ReportDetails.js","webpack:///./src/Components/ClusterRules/ClusterRules.js","webpack:///./src/Components/Breadcrumbs/Breadcrumbs.js","webpack:///./src/Components/Loading/Loading.js","webpack:///./src/Components/Cluster/Cluster.js"],"names":["ClusterHeader","uuid","lastSeen","intl","useIntl","Grid","md","hasGutter","GridItem","Title","size","headingLevel","Stack","StackItem","formatMessage","messages","propTypes","PropTypes","MessageState","className","children","icon","iconClass","iconStyle","text","title","variant","EmptyState","EmptyStateIcon","style","EmptyStateBody","marginBottom","defaultProps","CubesIcon","EmptyStateVariant","ReportDetails","report","AsyncComponent","appName","module","details","extra_data","resolution","ClusterRulesTable","cluster","useState","activeReports","setActiveReports","sortBy","setSortBy","filters","setFilters","searchValue","setSearchValue","isSelected","setIsSelected","rows","setRows","results","length","cols","transforms","sortable","cellWidth","handleOnCollapse","_e","rowId","isOpen","collapseRows","onKebabClick","action","allRows","map","row","key","Object","prototype","hasOwnProperty","call","actions","label","onClick","buildRows","builtRows","flatMap","value","rule","entity","filter","rowVal","rowKey","rule_id","selected","reportRow","cells","description","DateFormat","date","created_at","type","tooltipProps","position","TooltipPosition","verticalAlign","Tooltip","content","likelihood","LIKELIHOOD_LABEL","impact","IMPACT_LABEL","InsightsLabel","total_risk","parent","fullWidth","isValidSearchValue","toLowerCase","includes","isValidFilterValue","keys","filterValues","rowValue","tags","find","String","every","x","forEach","index","selectedItemsLength","getSelectedItems","onBulkSelect","bulkSelect","items","count","checked","onSelect","onFilterChange","param","values","newFilters","removeFilterParam","filterConfigItems","onChange","onInputChange","FC","id","activeFiltersConfig","deleteTitle","prunedFilters","entries","chips","item","category","name","capitalize","urlParam","push","buildFilterChips","onDelete","itemsToRemove","isAll","useEffect","activeReportsData","data","PrimaryToolbar","actionsConfig","filterConfig","pagination","fetchStatus","Card","CardBody","Table","onCollapse","canSelectAll","onSort","direction","sortedReports","sort","concat","firstItem","secondItem","sortedReportsDirectional","SortByDirection","reverse","TableVariant","isStickyHeader","TableHeader","TableBody","CheckIcon","TimesCircleIcon","Breadcrumbs","current","match","setItems","buildBreadcrumbs","useCallback","crumbs","splitUrl","url","split","navigate","params","clusterId","Breadcrumb","ouiaId","oneLink","BreadcrumbItem","Link","to","isActive","injectIntl","routerParams","Cluster","dispatch","useDispatch","useSelector","AdvisorStore","clusters","subnav","document","fetchClusterById","PageHeader","Main","span","ClusterRules","history"],"mappings":"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","file":"js/ClusterDetails.9e8975ca4e20d9bbc2a0.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  Grid,\n  GridItem,\n  Stack,\n  StackItem,\n  Title,\n} from '@patternfly/react-core';\nimport { useIntl } from 'react-intl';\nimport messages from '../../Messages';\n\nconst ClusterHeader = ({ uuid, lastSeen }) => {\n  const intl = useIntl();\n\n  return (\n    <React.Fragment>\n      <Grid md={12} hasGutter>\n        <GridItem>\n          <Title size=\"2xl\" headingLevel=\"h1\">\n            {uuid}\n          </Title>\n        </GridItem>\n        <GridItem>\n          <Stack>\n            <StackItem>\n              <span>UUID: </span>\n              <span>{uuid || intl.formatMessage(messages.unknown)}</span>\n            </StackItem>\n            <StackItem>\n              <span>{intl.formatMessage(messages.lastSeen)}: </span>\n              <span>{lastSeen || intl.formatMessage(messages.unknown)}</span>\n            </StackItem>\n          </Stack>\n        </GridItem>\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nClusterHeader.propTypes = {\n  uuid: PropTypes.string.isRequired,\n  lastSeen: PropTypes.string,\n};\n\nexport default ClusterHeader;\n","import {\n  EmptyState,\n  EmptyStateVariant,\n} from '@patternfly/react-core/dist/js/components/EmptyState/EmptyState';\n\nimport CubesIcon from '@patternfly/react-icons/dist/js/icons/cubes-icon';\nimport { EmptyStateBody } from '@patternfly/react-core/dist/js/components/EmptyState/EmptyStateBody';\nimport { EmptyStateIcon } from '@patternfly/react-core/dist/js/components/EmptyState/EmptyStateIcon';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Title } from '@patternfly/react-core/dist/js/components/Title/Title';\n\nconst MessageState = ({\n  className,\n  children,\n  icon,\n  iconClass,\n  iconStyle,\n  text,\n  title,\n  variant,\n}) => (\n  <EmptyState className={className} variant={variant}>\n    {icon !== 'none' && (\n      <EmptyStateIcon className={iconClass} style={iconStyle} icon={icon} />\n    )}\n    <Title headingLevel=\"h5\" size=\"lg\">\n      {title}\n    </Title>\n    <EmptyStateBody style={{ marginBottom: '16px' }}>{text}</EmptyStateBody>\n    {children}\n  </EmptyState>\n);\n\nMessageState.propTypes = {\n  children: PropTypes.any,\n  icon: PropTypes.any,\n  iconClass: PropTypes.any,\n  iconStyle: PropTypes.any,\n  text: PropTypes.any,\n  title: PropTypes.string,\n  variant: PropTypes.any,\n  className: PropTypes.string,\n};\n\nMessageState.defaultProps = {\n  icon: CubesIcon,\n  title: '',\n  variant: EmptyStateVariant.full,\n};\n\nexport default MessageState;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\n\n// Rule fields processing: https://docs.google.com/document/d/1D0ZLD6-2DZqBX1cUHJY2vL2QAD0dIAzY3O3xFNlEsVg/edit?usp=sharing\n\nconst ReportDetails = ({ report }) => {\n  return (\n    <div className=\"advisor\">\n      <AsyncComponent\n        appName=\"advisor\"\n        module=\"./AdvisorReportDetails\"\n        // TODO: make API rename `extra_data` to `details` or modify AdvisorReportDetails property\n        report={{\n          ...report,\n          details: report.extra_data,\n          resolution: {\n            resolution: report.resolution,\n          },\n        }}\n      />\n    </div>\n  );\n};\n\nReportDetails.propTypes = {\n  report: PropTypes.object.isRequired,\n};\n\nexport default ReportDetails;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { List } from 'react-content-loader';\nimport { useIntl } from 'react-intl';\nimport { CheckIcon, TimesCircleIcon } from '@patternfly/react-icons';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat/DateFormat';\nimport InsightsLabel from '@redhat-cloud-services/frontend-components/InsightsLabel';\nimport {\n  SortByDirection,\n  Table,\n  TableBody,\n  TableHeader,\n  TableVariant,\n  cellWidth,\n  sortable,\n} from '@patternfly/react-table';\nimport {\n  capitalize,\n  Card,\n  CardBody,\n  Tooltip,\n  TooltipPosition,\n} from '@patternfly/react-core';\nimport PrimaryToolbar from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\n\nimport messages from '../../Messages';\nimport MessageState from '../MessageState/MessageState';\nimport {\n  IMPACT_LABEL,\n  LIKELIHOOD_LABEL,\n  FILTER_CATEGORIES as FC,\n} from '../../AppConstants';\nimport ReportDetails from '../ReportDetails/ReportDetails';\n\nconst ClusterRulesTable = ({ cluster }) => {\n  const intl = useIntl();\n  const [activeReports, setActiveReports] = useState([]);\n  const [sortBy, setSortBy] = useState({});\n  const [filters, setFilters] = useState({});\n  const [searchValue, setSearchValue] = useState('');\n  const [isSelected, setIsSelected] = useState(false);\n  const [rows, setRows] = useState([]);\n  const results = rows ? rows.length / 2 : 0;\n\n  const cols = [\n    {\n      title: intl.formatMessage(messages.name),\n      transforms: [sortable],\n    },\n    {\n      title: intl.formatMessage(messages.added),\n      transforms: [sortable, cellWidth(15)],\n    },\n    {\n      title: intl.formatMessage(messages.totalRisk),\n      transforms: [sortable, cellWidth(15)],\n    },\n  ];\n\n  const handleOnCollapse = (_e, rowId, isOpen) => {\n    const collapseRows = [...rows];\n    collapseRows[rowId] = { ...collapseRows[rowId], isOpen };\n    setRows(collapseRows);\n  };\n\n  const onKebabClick = (action) => {\n    const isOpen = action === 'insights-expand-all';\n    const allRows = [...rows];\n\n    allRows.map((row, key) => {\n      if (Object.prototype.hasOwnProperty.call(row, 'isOpen')) {\n        row.isOpen = isOpen;\n        isOpen && handleOnCollapse(null, key, isOpen);\n      }\n    });\n\n    setRows(allRows);\n  };\n\n  const actions = [\n    {\n      label: 'Collapse all',\n      onClick: () => onKebabClick('insights-collapse-all'),\n    },\n    {\n      label: 'Expand all',\n      onClick: () => onKebabClick('insights-expand-all'),\n    },\n  ];\n\n  const buildRows = (activeReports, filters, rows, searchValue = '') => {\n    const builtRows = activeReports.flatMap((value, key) => {\n      const rule = value;\n      const resolution = value.resolution;\n      const entity = rows.filter(\n        (rowVal, rowKey) =>\n          rowKey % 2 === 0 && rowVal.rule.rule_id === rule.rule_id && rowVal\n      );\n      const selected = entity.length ? entity[0].selected : false;\n      const isOpen = rows.length\n        ? entity.length\n          ? entity[0].isOpen\n          : false\n        : key === 0\n        ? true\n        : false;\n\n      const reportRow = [\n        {\n          rule,\n          resolution,\n          isOpen,\n          selected,\n          cells: [\n            { title: <div> {rule.description}</div> },\n            {\n              title: (\n                <div key={key}>\n                  <DateFormat\n                    date={rule.created_at}\n                    type=\"relative\"\n                    tooltipProps={{ position: TooltipPosition.bottom }}\n                  />\n                </div>\n              ),\n            },\n            {\n              title: (\n                <div key={key} style={{ verticalAlign: 'top' }}>\n                  <Tooltip\n                    key={key}\n                    position={TooltipPosition.bottom}\n                    content={\n                      // TODO: refine fields lookup\n                      <span>\n                        The <strong>likelihood</strong> that this will be a\n                        problem is{' '}\n                        {rule?.likelihood\n                          ? LIKELIHOOD_LABEL[rule?.likelihood]\n                          : 'unknown'}\n                        . The <strong>impact</strong> of the problem would be{' '}\n                        {rule?.impact ? IMPACT_LABEL[rule?.impact] : 'unknown'}{' '}\n                        if it occurred.\n                      </span>\n                    }\n                  >\n                    <InsightsLabel value={rule.total_risk} />\n                  </Tooltip>\n                </div>\n              ),\n            },\n          ],\n        },\n        {\n          parent: key,\n          fullWidth: true,\n          cells: [\n            {\n              title: <ReportDetails key={`child-${key}`} report={value} />,\n            },\n          ],\n        },\n      ];\n      const isValidSearchValue =\n        searchValue.length === 0 ||\n        rule.description.toLowerCase().includes(searchValue.toLowerCase());\n      const isValidFilterValue =\n        Object.keys(filters).length === 0 ||\n        Object.keys(filters)\n          .map((key) => {\n            const filterValues = filters[key];\n            const rowValue = {\n              created_at: rule.created_at,\n              total_risk: rule.total_risk,\n              tags: rule.tags,\n            };\n            return filterValues.find(\n              (value) => String(value) === String(rowValue[key])\n            );\n          })\n          .every((x) => x);\n\n      return isValidSearchValue && isValidFilterValue ? reportRow : [];\n    });\n    // must recalculate parent for expandable table content whenever the array size changes\n    builtRows.forEach((row, index) =>\n      row.parent ? (row.parent = index - 1) : null\n    );\n\n    return builtRows;\n  };\n\n  const onSort = (_e, index, direction) => {\n    const sortedReports = {\n      2: 'description',\n      3: 'created_at',\n      4: 'total_risk',\n    };\n    const sort = () =>\n      activeReports\n        .concat()\n        .sort((firstItem, secondItem) =>\n          firstItem[sortedReports[index]] > secondItem[sortedReports[index]]\n            ? 1\n            : secondItem[sortedReports[index]] > firstItem[sortedReports[index]]\n            ? -1\n            : 0\n        );\n    const sortedReportsDirectional =\n      direction === SortByDirection.asc ? sort() : sort().reverse();\n\n    setActiveReports(sortedReportsDirectional);\n    setSortBy({\n      index,\n      direction,\n    });\n    setRows(buildRows(sortedReportsDirectional, filters, rows, searchValue));\n  };\n\n  const onRowSelect = (_e, isSelected, rowId) =>\n    setRows(\n      buildRows(\n        activeReports,\n        filters,\n        rows.map((row, index) =>\n          index === rowId ? { ...row, selected: isSelected } : row\n        ),\n        searchValue\n      )\n    );\n\n  const getSelectedItems = (rows) => rows.filter((entity) => entity.selected);\n  const selectedItemsLength = getSelectedItems(rows).length;\n\n  const onBulkSelect = (isSelected) => {\n    setIsSelected(isSelected);\n    setRows(\n      buildRows(\n        activeReports,\n        filters,\n        rows.map((row, index) =>\n          index % 2 === 0 ? { ...row, selected: isSelected } : row\n        ),\n        searchValue\n      )\n    );\n  };\n\n  const bulkSelect = {\n    items: [\n      {\n        title: 'Select none',\n        onClick: () => onBulkSelect(false),\n      },\n      {\n        title: 'Select all',\n        onClick: () => onBulkSelect(true),\n      },\n    ],\n    count: selectedItemsLength,\n    checked: isSelected,\n    onSelect: () => onBulkSelect(!isSelected),\n  };\n\n  const onInputChange = (value) => {\n    const builtRows = buildRows(activeReports, filters, rows, value);\n    setSearchValue(value);\n    setRows(builtRows);\n  };\n\n  const onFilterChange = (param, values) => {\n    const removeFilterParam = (param) => {\n      const filter = { ...filters };\n      delete filter[param];\n      return filter;\n    };\n\n    const newFilters =\n      values.length > 0\n        ? { ...filters, ...{ [param]: values } }\n        : removeFilterParam(param);\n    setRows(buildRows(activeReports, newFilters, rows, searchValue));\n    setFilters(newFilters);\n  };\n\n  const filterConfigItems = [\n    {\n      label: 'description',\n      filterValues: {\n        key: 'text-filter',\n        onChange: (_e, value) => onInputChange(value),\n        value: searchValue,\n      },\n    },\n    {\n      label: FC.total_risk.title,\n      type: FC.total_risk.type,\n      id: FC.total_risk.urlParam,\n      value: `checkbox-${FC.total_risk.urlParam}`,\n      filterValues: {\n        key: `${FC.total_risk.urlParam}-filter`,\n        onChange: (_e, values) =>\n          onFilterChange(FC.total_risk.urlParam, values),\n        value: filters.total_risk,\n        items: FC.total_risk.values,\n      },\n    },\n  ];\n\n  const buildFilterChips = (filters) => {\n    const prunedFilters = Object.entries(filters);\n    let chips =\n      filters && prunedFilters.length > 0\n        ? prunedFilters.map((item) => {\n            const category = FC[item[0]];\n            const chips = item[1].map((value) => ({\n              name: category.values.find(\n                (values) => values.value === String(value)\n              ).label,\n              value,\n            }));\n            return {\n              category: capitalize(category.title),\n              chips,\n              urlParam: category.urlParam,\n            };\n          })\n        : [];\n    searchValue.length > 0 &&\n      chips.push({\n        category: 'Name',\n        chips: [{ name: searchValue, value: searchValue }],\n      });\n    return chips;\n  };\n\n  const onChipDelete = (_e, itemsToRemove, isAll) => {\n    if (isAll) {\n      setRows(buildRows(activeReports, {}, rows, ''));\n      setFilters({});\n      setSearchValue('');\n    } else {\n      itemsToRemove.map((item) => {\n        if (item.category === 'Name') {\n          setRows(buildRows(activeReports, filters, rows, ''));\n          setSearchValue('');\n        } else {\n          onFilterChange(\n            item.urlParam,\n            filters[item.urlParam].filter(\n              (value) => String(value) !== String(item.chips[0].value)\n            )\n          );\n        }\n      });\n    }\n  };\n\n  const activeFiltersConfig = {\n    deleteTitle: intl.formatMessage(messages.resetFilters),\n    filters: buildFilterChips(filters),\n    onDelete: onChipDelete,\n  };\n\n  useEffect(() => {\n    const activeReportsData = cluster.data.report.data;\n    setActiveReports(activeReportsData);\n    setRows(buildRows(activeReportsData, filters, rows, searchValue));\n  }, []);\n\n  return (\n    <div>\n      <PrimaryToolbar\n        actionsConfig={{ actions }}\n        bulkSelect={bulkSelect}\n        filterConfig={{ items: filterConfigItems }}\n        pagination={\n          <React.Fragment>\n            {results === 1\n              ? `${results} Recommendation`\n              : `${results} Recommendations`}\n          </React.Fragment>\n        }\n        activeFiltersConfig={activeFiltersConfig}\n      />\n      {cluster.fetchStatus === 'pending' && (\n        <Card>\n          <CardBody>\n            <List />\n          </CardBody>\n        </Card>\n      )}\n      {cluster.fetchStatus === 'fulfilled' &&\n        (activeReports.length > 0 ? (\n          <React.Fragment>\n            <Table\n              aria-label={'Cluster recommendations table'}\n              onSelect={onRowSelect}\n              onCollapse={handleOnCollapse}\n              rows={rows}\n              cells={cols}\n              sortBy={sortBy}\n              canSelectAll={false}\n              onSort={onSort}\n              variant={TableVariant.compact}\n              isStickyHeader\n            >\n              <TableHeader />\n              <TableBody />\n            </Table>\n            {results === 0 && (\n              <Card>\n                <CardBody>\n                  <MessageState\n                    title=\"No matching recommendations found\"\n                    text={`This filter criteria matches no recommendations. Try changing your filter settings.`}\n                  />\n                </CardBody>\n              </Card>\n            )}\n          </React.Fragment>\n        ) : (\n          // ? Welcome to Insights feature for novice clusters with disabled Insights?\n          <Card>\n            <CardBody>\n              <MessageState\n                icon={CheckIcon}\n                iconClass=\"ins-c-insights__check\"\n                title=\"No recommendations\"\n                text={`No known recommendations affect this cluster`}\n              />\n            </CardBody>\n          </Card>\n        ))}\n      {cluster.fetchStatus === 'rejected' && (\n        <Card>\n          <CardBody>\n            <MessageState\n              icon={TimesCircleIcon}\n              title=\"Error getting recommendations\"\n              text={`There was an error fetching recommendations for this cluster. Refresh your page to try again.`}\n            />\n          </CardBody>\n        </Card>\n      )}\n    </div>\n  );\n};\n\nClusterRulesTable.propTypes = {\n  cluster: PropTypes.object.isRequired,\n};\n\nexport default ClusterRulesTable;\n","import React, { useCallback, useEffect, useState } from 'react';\n\nimport { Breadcrumb } from '@patternfly/react-core/dist/js/components/Breadcrumb/Breadcrumb';\nimport { BreadcrumbItem } from '@patternfly/react-core/dist/js/components/Breadcrumb/BreadcrumbItem';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../Messages';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/RouterParams';\n\nconst Breadcrumbs = ({ current, match, intl }) => {\n  const [items, setItems] = useState([]);\n  const buildBreadcrumbs = useCallback(() => {\n    const crumbs = [];\n    const splitUrl = match.url.split('/');\n\n    // add base\n    crumbs.push({\n      title: `${intl.formatMessage(messages.insightsHeader)} ${splitUrl[1]}`,\n      navigate: `/${splitUrl[1]}`,\n    });\n\n    setItems(crumbs);\n  }, [intl, match.params.clusterId, match.url]);\n\n  useEffect(() => {\n    buildBreadcrumbs();\n  }, [buildBreadcrumbs, match.params.clusterId, match.url]);\n\n  return (\n    <React.Fragment>\n      {items.length > 0 && (\n        <Breadcrumb ouiaId=\"detail\">\n          {items.map((oneLink, key) => (\n            <BreadcrumbItem key={key}>\n              <Link to={oneLink.navigate}>{oneLink.title}</Link>\n            </BreadcrumbItem>\n          ))}\n          <BreadcrumbItem isActive>{current}</BreadcrumbItem>\n        </Breadcrumb>\n      )}\n    </React.Fragment>\n  );\n};\n\nBreadcrumbs.propTypes = {\n  current: PropTypes.string,\n  match: PropTypes.object,\n  intl: PropTypes.any,\n};\n\nexport default injectIntl(routerParams(Breadcrumbs));\n","import { Card } from '@patternfly/react-core/dist/js/components/Card/Card';\nimport { CardBody } from '@patternfly/react-core/dist/js/components/Card/CardBody';\nimport { List } from 'react-content-loader';\nimport React from 'react';\nconst Loading = () => (\n  <Card>\n    <CardBody>\n      <List />\n    </CardBody>\n  </Card>\n);\n\nexport default Loading;\n","import './_Cluster.scss';\n\nimport React, { useEffect } from 'react';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Grid, GridItem } from '@patternfly/react-core';\n\nimport PageHeader from '@redhat-cloud-services/frontend-components/PageHeader';\nimport Main from '@redhat-cloud-services/frontend-components/Main';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/RouterParams';\n\nimport messages from '../../Messages';\nimport ClusterHeader from '../ClusterHeader/ClusterHeader';\nimport ClusterRules from '../ClusterRules/ClusterRules';\nimport Breadcrumbs from '../Breadcrumbs/Breadcrumbs';\nimport { fetchClusterById } from '../../AppActions';\nimport Loading from '../Loading/Loading';\n\nconst Cluster = ({ match }) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const cluster = useSelector(\n    (AdvisorStore) => AdvisorStore.clusters[match.params.clusterId]\n  );\n\n  useEffect(() => {\n    if (match.params.clusterId) {\n      const subnav = `${match.params.clusterId} - ${intl.formatMessage(\n        messages.clusters\n      )}`;\n      document.title = intl.formatMessage(messages.documentTitle, { subnav });\n    }\n\n    dispatch(fetchClusterById(match.params.clusterId));\n  }, [match.params.clusterId]);\n\n  return (\n    <React.Fragment>\n      <PageHeader className=\"pf-m-light ins-inventory-detail\">\n        {cluster && (\n          <Breadcrumbs current={match.params.clusterId} match={match} />\n        )}\n        <ClusterHeader uuid={match.params.clusterId} />\n      </PageHeader>\n      <Main>\n        <React.Fragment>\n          {cluster && cluster.fetchStatus === 'rejected' && (\n            <React.Fragment>No data for this cluster available</React.Fragment> // TODO: Create empty states\n          )}\n          {cluster && cluster.fetchStatus === 'pending' && <Loading />}\n          {cluster && cluster.fetchStatus === 'fulfilled' && (\n            <Grid hasGutter>\n              <GridItem span={12}>\n                <ClusterRules cluster={cluster} />\n              </GridItem>\n            </Grid>\n          )}\n        </React.Fragment>\n      </Main>\n    </React.Fragment>\n  );\n};\n\nCluster.propTypes = {\n  history: PropTypes.object,\n  match: PropTypes.any,\n};\n\nexport default routerParams(Cluster);\n"],"sourceRoot":""}