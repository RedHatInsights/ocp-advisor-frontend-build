{"version":3,"file":"js/606.13da27463d1992a00f50.js","mappings":"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","sources":["webpack:///./src/Components/Modals/DisableRule.js","webpack:///./src/Components/RuleDetailsLocal/RuleRating.js","webpack:///./src/Components/RuleDetailsLocal/RuleDetails.js","webpack:///./src/Components/Recommendation/RuleDetails.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\n\nimport { Button } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport { Checkbox } from '@patternfly/react-core/dist/js/components/Checkbox/Checkbox';\nimport { Form } from '@patternfly/react-core/dist/js/components/Form/Form';\nimport { FormGroup } from '@patternfly/react-core/dist/js/components/Form/FormGroup';\nimport { Modal } from '@patternfly/react-core/dist/js/components/Modal/Modal';\nimport { TextInput } from '@patternfly/react-core/dist/js/components/TextInput/TextInput';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\n\nimport messages from '../../Messages';\nimport { disableRuleForCluster, useSetAckMutation } from '../../Services/Acks';\n\nconst DisableRule = ({\n  isModalOpen,\n  handleModalToggle,\n  rule,\n  afterFn,\n  host,\n  hosts,\n}) => {\n  const intl = useIntl();\n  const [justification, setJustificaton] = useState('');\n  const [singleSystem, setSingleSystem] = useState(\n    host !== undefined || hosts.length > 0\n  );\n  const [setAck] = useSetAckMutation();\n  const dispatch = useDispatch();\n  const notify = (data) => dispatch(addNotification(data));\n\n  const bulkHostActions = async () => {\n    // disable for a group of hosts (clusters)\n    try {\n      const requests = hosts.map((h) =>\n        disableRuleForCluster({\n          uuid: h.id,\n          recId: rule.rule_id,\n          justification,\n        })\n      );\n      await Promise.all(requests);\n      notify({\n        variant: 'success',\n        dismissable: true,\n        timeout: true,\n        title: intl.formatMessage(messages.recSuccessfullyDisabledForCluster),\n      });\n      afterFn && afterFn();\n    } catch (error) {\n      notify({\n        variant: 'danger',\n        dismissable: true,\n        title: intl.formatMessage(messages.error),\n        description: `${error}`,\n      });\n    }\n  };\n\n  const disableRule = async () => {\n    if (!rule.disabled && hosts.length === 0) {\n      try {\n        if (singleSystem) {\n          // disable the rec for this single cluster\n          await disableRuleForCluster({\n            uuid: host,\n            recId: rule.rule_id,\n            justification,\n          });\n          notify({\n            variant: 'success',\n            timeout: true,\n            dismissable: true,\n            title: intl.formatMessage(\n              messages.recSuccessfullyDisabledForCluster\n            ),\n          });\n        } else {\n          // disable the whole rec\n          await setAck({\n            rule_id: rule.rule_id,\n            justification,\n          }).unwrap();\n          notify({\n            variant: 'success',\n            timeout: true,\n            dismissable: true,\n            title: intl.formatMessage(messages.recSuccessfullyDisabled),\n          });\n        }\n        setJustificaton('');\n        afterFn && afterFn();\n      } catch (error) {\n        notify({\n          variant: 'danger',\n          dismissable: true,\n          title: intl.formatMessage(messages.error),\n          description: `${error}`,\n        });\n      }\n    } else {\n      bulkHostActions();\n    }\n    handleModalToggle(false);\n  };\n\n  return (\n    <Modal\n      variant=\"small\"\n      title={intl.formatMessage(messages.disableRule)}\n      isOpen={isModalOpen}\n      onClose={() => {\n        handleModalToggle();\n        setJustificaton('');\n      }}\n      actions={[\n        <Button\n          key=\"confirm\"\n          variant=\"primary\"\n          onClick={() => disableRule()}\n          ouiaId=\"confirm\"\n        >\n          {intl.formatMessage(messages.save)}\n        </Button>,\n        <Button\n          key=\"cancel\"\n          variant=\"link\"\n          onClick={() => {\n            handleModalToggle(false);\n            setJustificaton('');\n          }}\n          ouiaId=\"cancel\"\n        >\n          {intl.formatMessage(messages.cancel)}\n        </Button>,\n      ]}\n      ouiaId=\"recommendation-disable\"\n    >\n      {intl.formatMessage(messages.disableRuleBody)}\n      <Form>\n        <FormGroup fieldId=\"blank-form\" />\n        {(host || hosts.length > 0) && (\n          <FormGroup fieldId=\"disable-rule-one-system\">\n            <Checkbox\n              isChecked={singleSystem}\n              onChange={() => {\n                setSingleSystem(!singleSystem);\n              }}\n              label={\n                host\n                  ? intl.formatMessage(messages.disableRuleSingleCluster)\n                  : intl.formatMessage(messages.disableRuleForClusters)\n              }\n              id=\"disable-rule-one-system\"\n              name=\"disable-rule-one-system\"\n              ouiaId=\"disable-recommendation-one-cluster\"\n            />\n          </FormGroup>\n        )}\n        <FormGroup\n          label={intl.formatMessage(messages.justificationNote)}\n          fieldId=\"disable-rule-justification\"\n        >\n          <TextInput\n            type=\"text\"\n            id=\"disable-rule-justification\"\n            aria-describedby=\"disable-rule-justification\"\n            value={justification}\n            onChange={(text) => setJustificaton(text)}\n            onKeyDown={(e) =>\n              e.key === 'Enter' && (e.preventDefault(), disableRule())\n            }\n          />\n        </FormGroup>\n      </Form>\n    </Modal>\n  );\n};\n\nDisableRule.propTypes = {\n  isModalOpen: PropTypes.bool,\n  rule: PropTypes.object,\n  handleModalToggle: PropTypes.func,\n  afterFn: PropTypes.func,\n  host: PropTypes.object,\n  hosts: PropTypes.array,\n};\n\nDisableRule.defaultProps = {\n  isModalOpen: false,\n  rule: {},\n  handleModalToggle: () => undefined,\n  afterFn: () => undefined,\n  host: undefined,\n  hosts: [],\n};\n\nexport default DisableRule;\n","import './_RuleRating.scss';\n\nimport React, { useState } from 'react';\n\nimport { Button } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport OutlinedThumbsDownIcon from '@patternfly/react-icons/dist/js/icons/outlined-thumbs-down-icon';\nimport OutlinedThumbsUpIcon from '@patternfly/react-icons/dist/js/icons/outlined-thumbs-up-icon';\nimport PropTypes from 'prop-types';\nimport ThumbsDownIcon from '@patternfly/react-icons/dist/js/icons/thumbs-down-icon';\nimport ThumbsUpIcon from '@patternfly/react-icons/dist/js/icons/thumbs-up-icon';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\n\nconst RuleRating = ({ ruleId, ruleRating, updateRatingAction }) => {\n  const intl = useIntl();\n  const [rating, setRating] = useState(ruleRating);\n  const [submitted, setSubmitted] = useState(false);\n  const [thankYou, setThankYou] = useState(\n    intl.formatMessage(messages.feedbackThankyou)\n  );\n  const updateRuleRating = async (newRating) => {\n    const calculatedRating = rating === newRating ? 0 : newRating;\n    try {\n      await updateRatingAction(ruleId, calculatedRating);\n      setRating(calculatedRating);\n      setSubmitted(true);\n      setTimeout(() => setThankYou(''), 3000);\n    } catch (error) {\n      console.error(error); // eslint-disable-line no-console\n    }\n  };\n\n  return (\n    <span className=\"ratingSpanOverride\">\n      {intl.formatMessage(messages.ruleHelpful)}\n      <Button\n        variant=\"plain\"\n        aria-label=\"thumbs-up\"\n        onClick={() => updateRuleRating(1)}\n        ouiaId=\"thumbsUp\"\n      >\n        {rating === 1 ? (\n          <ThumbsUpIcon className=\"like\" size=\"sm\" />\n        ) : (\n          <OutlinedThumbsUpIcon size=\"sm\" />\n        )}\n      </Button>\n      <Button\n        variant=\"plain\"\n        aria-label=\"thumbs-down\"\n        onClick={() => updateRuleRating(-1)}\n        ouiaId=\"thumbsDown\"\n      >\n        {rating === -1 ? (\n          <ThumbsDownIcon className=\"dislike\" size=\"sm\" />\n        ) : (\n          <OutlinedThumbsDownIcon size=\"sm\" />\n        )}\n      </Button>\n      {submitted && thankYou}\n    </span>\n  );\n};\n\nRuleRating.propTypes = {\n  ruleId: PropTypes.string.isRequired,\n  ruleRating: PropTypes.number.isRequired,\n  updateRatingAction: PropTypes.func.isRequired,\n};\n\nexport default RuleRating;\n","/* eslint-disable react/prop-types */\n/* eslint max-len: 0 */\nimport './_RuleDetails.scss';\n\nimport * as AppConstants from '../../AppConstants';\n\nimport { IntlProvider, useIntl } from 'react-intl';\nimport {\n  Split,\n  SplitItem,\n} from '@patternfly/react-core/dist/js/layouts/Split/index';\nimport {\n  Stack,\n  StackItem,\n} from '@patternfly/react-core/dist/js/layouts/Stack/index';\nimport {\n  Text,\n  TextContent,\n  TextVariants,\n} from '@patternfly/react-core/dist/js/components/Text/index';\n\nimport ExternalLinkAltIcon from '@patternfly/react-icons/dist/js/icons/external-link-alt-icon';\nimport { InsightsLabel } from '@redhat-cloud-services/frontend-components/InsightsLabel';\nimport { Link, Router } from 'react-router-dom';\nimport Markdown from 'react-markdown';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport RuleRating from './RuleRating';\nimport { SeverityLine } from '@redhat-cloud-services/frontend-components-charts/esm/SeverityLine';\nimport messages from '../../Messages';\nimport rehypeRaw from 'rehype-raw';\nimport rehypeSanitize from 'rehype-sanitize';\nimport { strong } from '../../Utilities/intlHelper';\n\nconst BaseRuleDetails = ({\n  children,\n  rule,\n  resolutionRisk,\n  header,\n  isDetailsPage,\n  onFeedbackChanged,\n  isOpenShift,\n  riskOfChangeDesc,\n  messageDescriptors,\n}) => {\n  const intl = useIntl();\n\n  const ruleDescription = (data, isGeneric) =>\n    typeof data === 'string' &&\n    Boolean(data) && (\n      <span className={isGeneric && 'genericOverride'}>\n        <Markdown rehypePlugins={[rehypeRaw, rehypeSanitize]}>{data}</Markdown>\n      </span>\n    );\n\n  return (\n    <Split className=\"ins-c-rule-details__split\" hasGutter>\n      <SplitItem>\n        <Stack hasGutter>\n          {header && <StackItem>{header}</StackItem>}\n          <StackItem>\n            {isOpenShift && ruleDescription(rule.generic, true)}\n            {!isOpenShift &&\n              (isDetailsPage\n                ? ruleDescription(rule.generic, true)\n                : ruleDescription(rule.summary))}\n          </StackItem>\n          {rule.node_id && (\n            <StackItem>\n              <a\n                rel=\"noopener noreferrer\"\n                target=\"_blank\"\n                href={`https://access.redhat.com/node/${rule.node_id}`}\n              >\n                {intl.formatMessage(messages.knowledgebaseArticle)}&nbsp;\n                <ExternalLinkAltIcon size=\"sm\" />\n              </a>\n            </StackItem>\n          )}\n          {isDetailsPage && onFeedbackChanged && (\n            <RuleRating\n              ruleId={rule.rule_id}\n              ruleRating={rule.rating}\n              updateRatingAction={onFeedbackChanged}\n            />\n          )}\n          {!isDetailsPage &&\n            rule?.[\n              isOpenShift ? 'impacted_clusters_count' : 'impacted_systems_count'\n            ] > 0 && (\n              <StackItem>\n                <Link\n                  key={`${rule.rule_id}-link`}\n                  to={`/recommendations/${rule.rule_id}`}\n                >\n                  {isOpenShift &&\n                    intl.formatMessage(\n                      messageDescriptors.viewAffectedClusters,\n                      {\n                        clusters: rule.impacted_clusters_count,\n                      }\n                    )}\n                </Link>\n              </StackItem>\n            )}\n        </Stack>\n      </SplitItem>\n      <SplitItem>\n        <Stack gutter=\"sm\">\n          {children && <StackItem>{children}</StackItem>}\n          <StackItem>\n            <Stack className=\"ins-c-rule-details__stack\">\n              <StackItem>\n                <strong>{intl.formatMessage(messages.totalRisk)}</strong>\n              </StackItem>\n              <StackItem className=\"pf-u-display-inline-flex alignCenterOverride pf-u-pb-sm pf-u-pt-sm\">\n                <span className=\"ins-c-rule-details__stackitem\">\n                  <span>\n                    <InsightsLabel value={rule.total_risk} />\n                  </span>\n                  <Stack hasGutter className=\"description-stack-override\">\n                    <StackItem>\n                      <TextContent>\n                        <Text component={TextVariants.p}>\n                          {intl.formatMessage(\n                            messages.rulesDetailsTotalriskBody,\n                            {\n                              risk:\n                                AppConstants.TOTAL_RISK_LABEL_LOWER[\n                                  rule.total_risk\n                                ] || intl.formatMessage(messages.undefined),\n                              strong: (str) => strong(str),\n                            }\n                          )}\n                        </Text>\n                      </TextContent>\n                    </StackItem>\n                    <Stack>\n                      <StackItem>\n                        <SeverityLine\n                          className=\"severity-line\"\n                          title={intl.formatMessage(messages.likelihoodLevel, {\n                            level:\n                              AppConstants.LIKELIHOOD_LABEL[rule.likelihood],\n                          })}\n                          value={rule.likelihood}\n                          tooltipMessage={intl.formatMessage(\n                            messages.likelihoodDescription,\n                            {\n                              level:\n                                AppConstants.LIKELIHOOD_LABEL_LOWER[\n                                  rule.likelihood\n                                ],\n                            }\n                          )}\n                        />\n                      </StackItem>\n                      <StackItem>\n                        <SeverityLine\n                          className=\"severity-line\"\n                          title={intl.formatMessage(messages.impactLevel, {\n                            level:\n                              AppConstants.IMPACT_LABEL[rule.impact.impact],\n                          })}\n                          value={rule.impact.impact}\n                          tooltipMessage={intl.formatMessage(\n                            messages.impactDescription,\n                            {\n                              level:\n                                AppConstants.IMPACT_LABEL_LOWER[\n                                  rule.impact.impact\n                                ],\n                            }\n                          )}\n                        />\n                      </StackItem>\n                    </Stack>\n                  </Stack>\n                </span>\n              </StackItem>\n              {resolutionRisk && riskOfChangeDesc && (\n                <React.Fragment>\n                  <hr></hr>\n                  <StackItem>\n                    <strong>{intl.formatMessage(messages.riskofchange)}</strong>\n                  </StackItem>\n                  <StackItem\n                    className={`pf-u-display-inline-flex alignCenterOverride pf-u-pb-sm pf-u-pt-sm`}\n                  >\n                    <span className=\"ins-c-rule-details__stackitem\">\n                      <span>\n                        <InsightsLabel\n                          text={\n                            AppConstants.RISK_OF_CHANGE_LABEL[resolutionRisk]\n                          }\n                          value={resolutionRisk}\n                          hideIcon\n                        />\n                      </span>\n                      <Stack hasGutter className=\"description-stack-override\">\n                        <StackItem>\n                          <TextContent>\n                            <Text component={TextVariants.p}>\n                              {resolutionRisk\n                                ? riskOfChangeDesc\n                                : intl.formatMessage(messages.undefined)}\n                            </Text>\n                          </TextContent>\n                        </StackItem>\n                      </Stack>\n                    </span>\n                  </StackItem>\n                </React.Fragment>\n              )}\n            </Stack>\n          </StackItem>\n        </Stack>\n      </SplitItem>\n    </Split>\n  );\n};\n\nconst RuleDetails = ({ intlProps, history, ...props }) => {\n  const RouterWrapper = history ? Router : React.Fragment;\n  const IntlWrapper = intlProps ? IntlProvider : React.Fragment;\n\n  return (\n    <RouterWrapper {...(history && { history })}>\n      <IntlWrapper\n        {...(intlProps && {\n          locale: navigator.language.slice(0, 2),\n          messages,\n          onError: console.log,\n          ...intlProps,\n        })}\n      >\n        <BaseRuleDetails {...props} />\n      </IntlWrapper>\n    </RouterWrapper>\n  );\n};\n\nRuleDetails.propTypes = {\n  children: PropTypes.any.isRequired,\n  rule: PropTypes.object.isRequired,\n  header: PropTypes.any.isRequired,\n  isDetailsPage: PropTypes.bool.isRequired,\n  resolutionRisk: PropTypes.number,\n  riskOfChangeDesc: PropTypes.string,\n  /**\n   * onFeedbackChanged - a callback used to update the rating of a particular rule\n   * @param {string} ruleId - ID (usually in plugin|error_key format) of the rule that needs to be updated\n   * @param {number} newRating rating (-1, 0, 1)\n   */\n  onFeedbackChanged: PropTypes.func,\n  /**\n   * isOpenShift - true when `rule` contains an OCP rule\n   */\n  isOpenShift: PropTypes.bool.isRequired,\n  /**\n   * intlProps - if provided, it will be passed to IntlProvider custom wrapper\n   */\n  intlProps: PropTypes.object,\n  /**\n   * messageDescriptors - allows to use custom message descriptors\n   */\n  messageDescriptors: PropTypes.object,\n  /**\n   * history - if provided, it will be passed to Router custom wrapper\n   */\n  history: PropTypes.object,\n};\n\nexport default RuleDetails;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\n\n// import AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\nimport RuleDetailsLocal from '../RuleDetailsLocal';\n\nimport Loading from '../Loading/Loading';\nimport messages from '../../Messages';\nimport { translations } from '../../Utilities/intlHelper';\n\nconst RuleDetails = ({ children, ...props }) => {\n  // make sure history@4.x.x is used as a react-router-dom dependency\n  const history = useHistory();\n\n  return (\n    <div className=\"advisor\">\n      <RuleDetailsLocal\n        appName=\"advisor\"\n        module=\"./AdvisorRecommendationDetails\"\n        fallback={<Loading />}\n        isOpenShift\n        intlProps={{ messages: translations[navigator.language.slice(0, 2)] }}\n        history={history}\n        messageDescriptors={messages}\n        {...props}\n      >\n        {children}\n      </RuleDetailsLocal>\n    </div>\n  );\n};\n\nRuleDetails.propTypes = {\n  header: PropTypes.any,\n  isDetailsPage: PropTypes.bool.isRequired,\n  rule: PropTypes.object.isRequired,\n  resolutionRisk: PropTypes.number,\n  riskOfChangeDesc: PropTypes.string,\n  onFeedbackChanged: PropTypes.func,\n  children: PropTypes.node,\n};\n\nexport default RuleDetails;\n"],"names":["DisableRule","isModalOpen","handleModalToggle","rule","afterFn","host","hosts","intl","useIntl","useState","justification","setJustificaton","undefined","length","singleSystem","setSingleSystem","useSetAckMutation","setAck","dispatch","useDispatch","notify","data","addNotification","bulkHostActions","requests","map","h","disableRuleForCluster","uuid","id","recId","rule_id","Promise","all","variant","dismissable","timeout","title","formatMessage","messages","description","disableRule","disabled","unwrap","isOpen","onClose","actions","Button","key","onClick","ouiaId","fieldId","Checkbox","isChecked","onChange","label","name","TextInput","type","value","text","onKeyDown","e","preventDefault","propTypes","PropTypes","defaultProps","RuleRating","ruleId","ruleRating","updateRatingAction","rating","setRating","submitted","setSubmitted","thankYou","setThankYou","updateRuleRating","newRating","calculatedRating","setTimeout","console","error","className","size","BaseRuleDetails","children","resolutionRisk","header","isDetailsPage","onFeedbackChanged","isOpenShift","riskOfChangeDesc","messageDescriptors","ruleDescription","isGeneric","Boolean","rehypePlugins","rehypeRaw","rehypeSanitize","Split","hasGutter","SplitItem","Stack","StackItem","generic","summary","node_id","rel","target","href","Link","to","viewAffectedClusters","clusters","impacted_clusters_count","gutter","InsightsLabel","total_risk","Text","TextContent","component","TextVariants","risk","AppConstants","strong","str","SeverityLine","level","likelihood","tooltipMessage","impact","hideIcon","RuleDetails","intlProps","history","props","RouterWrapper","Router","React","IntlWrapper","IntlProvider","locale","navigator","language","slice","onError","log","useHistory","appName","module","fallback","Loading","translations"],"sourceRoot":""}