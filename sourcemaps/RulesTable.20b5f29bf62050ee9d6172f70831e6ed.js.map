{"version":3,"file":"js/RulesTable.fcefb99475e18c9361da.js","mappings":"i/BAsdA,QAzasB,WACpB,IAAMA,GAAOC,EAAAA,EAAAA,KACPC,GAAWC,EAAAA,EAAAA,eACXC,GAAUC,EAAAA,EAAAA,cAAY,qBAAGD,QAAsBE,iBACrD,GACEC,EAAAA,EAAAA,IAAgB,CAAEC,WAAW,IADvBC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,gBAAiBC,EAAlC,EAAkCA,WAAYC,EAA9C,EAA8CA,UAAWC,EAAzD,EAAyDA,KAEnDC,GAAOD,MAAAA,OAAA,EAAAA,EAAME,kBAAmB,GAChCC,EAAOZ,EAAQa,OAASb,EAAQc,MAAQ,EAC9C,GAAwCC,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA0CF,EAAAA,EAAAA,UAAS,IAAnD,eAAOG,EAAP,KAAsBC,EAAtB,MAEAC,EAAAA,EAAAA,YAAU,WACRD,EAAiBE,EAAmBL,MACnC,CAACA,EAAchB,EAAQc,MAAOd,EAAQa,UAEzCO,EAAAA,EAAAA,YAAU,WACRH,EAAgBK,EAAkBZ,EAAMV,MACvC,CAACS,EAAMT,IAGV,IAoSQuB,EApSFD,EAAoB,SAACE,EAASxB,GAClC,OACEwB,EACGC,QAAO,SAACC,GAAD,OClEI,SAACA,EAAM1B,GAAP,OAClB2B,OAAOC,QAAQ5B,GAAS6B,OAAM,YAA8B,mBAA5BC,EAA4B,KAAjBC,EAAiB,KAC1D,OAAQD,GACN,IAAK,OACH,OAAOJ,EAAKM,YACTC,cACAC,SAASH,EAAYE,eAC1B,KAAKE,EAAAA,GAAAA,WAAAA,SACH,OAAOJ,EAAYG,SAASE,OAAOV,EAAKW,aAC1C,KAAKF,EAAAA,GAAAA,SAAAA,SACH,OAAOT,EAAKY,KAAKC,MAAK,SAACC,GAAD,OACpBT,EAAYG,SAASE,OAAOK,EAAAA,GAAgBD,QAEhD,KAAKL,EAAAA,GAAAA,OAAAA,SACH,OAAOJ,EAAYG,SAASE,OAAOV,EAAKgB,SAC1C,KAAKP,EAAAA,GAAAA,UAAAA,SACH,QAAOJ,EAAYY,OAAS,IACxBZ,EAAYa,MAAK,SAACC,GAChB,MAAU,SAANA,EACKnB,EAAKoB,wBAA0B,EAE9B,UAAND,EACsC,IAAjCnB,EAAKoB,6BADd,KAKR,KAAKX,EAAAA,GAAAA,WAAAA,SACH,OAAOJ,EAAYG,SAASE,OAAOV,EAAKqB,aAM1C,QACE,OAAO,MDgCWC,CAAYtB,EAAM1B,MAEnCiD,MAAK,SAACC,EAAKC,GAAN,OAAeD,EAAIb,WAAac,EAAId,WAAa,GAAK,KAC3De,KAAI,SAACC,EAAOC,GAAR,MAAgB,CACnB,CACEC,QAAQ,EACR7B,KAAM2B,EACNG,MAAO,CACL,CACEC,MACE,0BAAMH,IAAKA,GACT,kBAAC,EAAAI,KAAD,CACEJ,IAAKA,EAELK,GAAE,2BACA,2BAEwBN,EAAMO,WAG/B,KACAP,MAAAA,OAAA,EAAAA,EAAOrB,eAAeqB,MAAAA,OAAtB,EAAsBA,EAAOO,SAAS,KAEzC,kBAACC,EAAA,EAAD,CAAYnC,KAAM2B,MAIxB,CACEI,MAAOJ,MAAAA,GAAAA,EAAOS,aACZ,kBAACC,EAAA,EAAD,CACET,IAAKA,EACLU,KAAMX,EAAMS,aACZG,QAAQ,aAGVrE,EAAKsE,cAAcC,EAAAA,EAAAA,KAGvB,CACEV,MACE,yBAAKH,IAAKA,GACR,kBAACc,EAAAA,QAAD,CACEd,IAAKA,EACLe,SAAUC,EAAAA,gBAAAA,OACVC,QAAS3E,EAAKsE,cACZC,EAAAA,EAAAA,0BACA,CACEK,KACEC,EAAAA,GAAuBpB,EAAMhB,aAC7BzC,EAAKsE,cAAcC,EAAAA,EAAAA,WACrBO,OAAQ,SAACC,GAAD,OEpHZ,SAACA,GAAD,OAAS,gCAASA,GFoHGD,CAAOC,OAI3BtB,MAAAA,GAAAA,EAAOhB,WACN,kBAACuC,EAAA,EAAD,CAAevB,MAAOA,EAAMhB,aAE5BzC,EAAKsE,cAAcC,EAAAA,EAAAA,OAM7B,CACEV,MACE,yBAAKH,IAAKA,GAAV,eACqCuB,KAAnCxB,MAAAA,OAAA,EAAAA,EAAOP,yBACHO,EAAMP,wBAAwBgC,iBAC9BlF,EAAKsE,cAAcC,EAAAA,EAAAA,SAMjC,CACEY,WAAW,EACXvB,MAAO,CACL,CACEC,MACE,kBAACuB,EAAA,EAAD,CAAMC,UAAU,cACd,kBAACC,EAAAA,MAAD,CAAOC,WAAS,GACd,kBAACC,EAAA,EAAD,CACE1D,KAAI,OACC2B,GADD,IAEFX,OAAQ,CAAEA,OAAQW,EAAMX,QAExBI,6BAAyB+B,gBAa3CxD,EAAqB,SAACgE,GAC1B,OAAOA,EACJC,MACCtF,EAAQc,OAASF,EAAO,GACxBZ,EAAQc,OAASF,EAAO,GAAKZ,EAAQc,OAEtCyE,SAAQ,SAACC,EAAKC,GACb,IAAMC,GAAa,OAAIF,GAEvB,OADAA,EAAI,GAAGG,OAAiB,EAARF,EACTC,MAIPE,EAAoB,SAACC,GACzB,IAAMpE,EAAS,EAAH,KAAQzB,GAAR,IAAiBa,OAAQ,WAC9BY,EAAOoE,GACd/F,GACEgG,EAAAA,EAAAA,IAAc,EAAD,KAAMrE,GAAsB,SAAVoE,EAAmB,CAAEE,KAAM,IAAO,OAK/DC,EAAiB,SAACH,EAAOI,GAC7BA,EAAOtD,OAAS,EACZ7C,GACEgG,EAAAA,EAAAA,IAAc,EAAD,KAAM9F,GAAN,IAAea,OAAQ,IAAvB,UAAgCgF,EAAQI,MAEvDL,EAAkBC,IAclBK,EAAoB,CACxB,CACEC,MAAOvG,EAAKsE,cAAcC,EAAAA,EAAAA,MAAelC,cACzCmE,aAAc,CACZ9C,IAAK,cACL+C,SAAU,SAACC,EAAQjD,GAAT,OACRvD,GAASgG,EAAAA,EAAAA,IAAc,EAAD,KAAM9F,GAAN,IAAe+F,KAAM1C,OAC7CA,MAAOrD,EAAQ+F,KACfQ,YAAa3G,EAAKsE,cAAcC,EAAAA,EAAAA,YAGpC,CACEgC,MAAOhE,EAAAA,GAAAA,WAAAA,MACPqE,KAAMrE,EAAAA,GAAAA,WAAAA,KACNsE,GAAItE,EAAAA,GAAAA,WAAAA,SACJkB,MAAO,YAAF,OAAclB,EAAAA,GAAAA,WAAAA,UACnBiE,aAAc,CACZ9C,IAAK,GAAF,OAAKnB,EAAAA,GAAAA,WAAAA,SAAL,WACHkE,SAAU,SAACC,EAAQL,GAAT,OACRD,EAAe7D,EAAAA,GAAAA,WAAAA,SAAuC8D,IACxD5C,MAAOrD,EAAQqC,WACfqE,MAAOvE,EAAAA,GAAAA,WAAAA,SAGX,CACEgE,MAAOhE,EAAAA,GAAAA,OAAAA,MACPqE,KAAMrE,EAAAA,GAAAA,OAAAA,KACNsE,GAAItE,EAAAA,GAAAA,OAAAA,SACJkB,MAAO,YAAF,OAAclB,EAAAA,GAAAA,OAAAA,UACnBiE,aAAc,CACZ9C,IAAK,GAAF,OAAKnB,EAAAA,GAAAA,OAAAA,SAAL,WACHkE,SAAU,SAACC,EAAQL,GAAT,OACRD,EAAe7D,EAAAA,GAAAA,OAAAA,SAAmC8D,IACpD5C,MAAOrD,EAAQ0C,OACfgE,MAAOvE,EAAAA,GAAAA,OAAAA,SAGX,CACEgE,MAAOhE,EAAAA,GAAAA,WAAAA,MACPqE,KAAMrE,EAAAA,GAAAA,WAAAA,KACNsE,GAAItE,EAAAA,GAAAA,WAAAA,SACJkB,MAAO,YAAF,OAAclB,EAAAA,GAAAA,WAAAA,UACnBiE,aAAc,CACZ9C,IAAK,GAAF,OAAKnB,EAAAA,GAAAA,WAAAA,SAAL,WACHkE,SAAU,SAACC,EAAQL,GAAT,OACRD,EAAe7D,EAAAA,GAAAA,WAAAA,SAAuC8D,IACxD5C,MAAOrD,EAAQ+C,WACf2D,MAAOvE,EAAAA,GAAAA,WAAAA,SAGX,CACEgE,MAAOhE,EAAAA,GAAAA,SAAAA,MACPqE,KAAMrE,EAAAA,GAAAA,SAAAA,KACNsE,GAAItE,EAAAA,GAAAA,SAAAA,SACJkB,MAAO,YAAF,OAAclB,EAAAA,GAAAA,SAAAA,UACnBiE,aAAc,CACZ9C,IAAK,GAAF,OAAKnB,EAAAA,GAAAA,SAAAA,SAAL,WACHkE,SAAU,SAACC,EAAQL,GAAT,OACRD,EAAe7D,EAAAA,GAAAA,SAAAA,SAAqC8D,IACtD5C,MAAOrD,EAAQ2G,SACfD,MAAOvE,EAAAA,GAAAA,SAAAA,SAeX,CACEgE,MAAOhE,EAAAA,GAAAA,UAAAA,MACPqE,KAAMrE,EAAAA,GAAAA,UAAAA,KACNsE,GAAItE,EAAAA,GAAAA,UAAAA,SACJkB,MAAO,YAAF,OAAclB,EAAAA,GAAAA,UAAAA,UACnBiE,aAAc,CACZ9C,IAAK,GAAF,OAAKnB,EAAAA,GAAAA,UAAAA,SAAL,WACHkE,SAAU,SAACO,EAAGX,GAAJ,OACRD,EAAe7D,EAAAA,GAAAA,UAAAA,SAAsC8D,IACvD5C,MAAOrD,EAAQI,UACfsG,MAAOvE,EAAAA,GAAAA,UAAAA,UAwEP0E,EAAsB,CAC1BC,YAAalH,EAAKsE,cAAcC,EAAAA,EAAAA,cAChCnE,SAVMuB,EAAe,EAAH,GAAQvB,UACnBuB,EAAawF,iBACbxF,EAAayF,qBACbzF,EAAaV,cACbU,EAAaT,MA7DD,SAACS,EAAc0F,GAClC,IAAMC,EAAgBvF,OAAOC,QAAQL,GACrC,OAAO2F,EAAcvE,OAAS,EAC1BuE,EAAcC,QAAO,SAACC,EAAKC,GACzB,GAAIJ,EAAiBI,EAAK,IAAK,CAC7B,IAAMV,EAAWM,EAAiBI,EAAK,IACjCC,EAAQC,MAAMC,QAAQH,EAAK,IAC7BA,EAAK,GAAGjE,KAAI,SAACC,GACX,IAAMoE,EAAwBd,EAASV,OAAO1D,MAC5C,SAAC0D,GAAD,OAAYA,EAAO5C,QAAUjB,OAAOiB,MAEtC,OAAOoE,EACH,CACEC,KACED,EAAsB1B,MACtB0B,EAAsBtB,MACxB9C,MAAAA,GAEF,CAAEqE,KAAMrE,EAAOA,MAAAA,MAErB,CACE,CACEqE,KAAMf,EAASV,OAAO1D,MACpB,SAAC0D,GAAD,OAAYA,EAAO5C,QAAUjB,OAAOiF,EAAK,OACzClB,MACF9C,MAAOgE,EAAK,KAGpB,wBACKD,GADL,CAEE,CACET,UAjCMgB,EAiCehB,EAASlD,MAjCbkE,EAAO,GAAGC,cAAgBD,EAAOE,UAAU,IAkC5DP,MAAAA,EACAQ,SAAUnB,EAASmB,YAGlB,MAAgB,SAAZT,EAAK,GACd,kBACKD,IADL,OAEMC,EAAK,GAAG1E,OAAS,EACjB,CACE,CACEgE,SAAU,OACVW,MAAO,CAAC,CAAEI,KAAML,EAAK,GAAIhE,MAAOgE,EAAK,KACrCS,SAAUT,EAAK,KAGnB,KAGCD,EApDE,IAACO,IAsDX,IACH,GASGI,CAAaxG,EAAcY,EAAAA,KAMlC6F,SAAU,SAAC1B,EAAQ2B,EAAeC,GAC5BA,EACFpI,GAASgG,EAAAA,EAAAA,IAAcqC,EAAAA,KAEvBF,EAAc7E,KAAI,SAACiE,GACjB,IAAMe,GAAY,UACff,EAAKS,SAAWP,MAAMC,QAAQxH,EAAQqH,EAAKS,WACxC9H,EAAQqH,EAAKS,UAAUrG,QACrB,SAAC4B,GAAD,OAAWjB,OAAOiB,KAAWjB,OAAOiF,EAAKC,MAAM,GAAGjE,UAEpD,IAEN+E,EAAUf,EAAKS,UAAUnF,OAAS,EAC9B7C,GAASgG,EAAAA,EAAAA,IAAc,EAAD,KAAM9F,GAAYoI,KACxCxC,EAAkByB,EAAKS,eAYnC,OACE,kBAAC,aAAD,KACE,kBAACO,EAAA,EAAD,CACEC,WAAY,CACVC,UAAWvH,EAAa2B,OACxB/B,KAAMZ,EAAQa,OAASb,EAAQc,MAAQ,EACvC0H,QAASC,OAAOzI,EAAQc,OACxB4H,UAJU,SAIApC,EAAQ1F,GAChBd,GACEgG,EAAAA,EAAAA,IAAc,EAAD,KACR9F,GADQ,IAEXa,OAAQb,EAAQc,OAASF,EAAO,QAItC+H,gBAZU,SAYMrC,EAAQkC,GACtB1I,GAASgG,EAAAA,EAAAA,IAAc,EAAD,KAAM9F,GAAN,IAAec,MAAO0H,EAAS3H,OAAQ,OAE/D+H,WAAW,GAEbC,aAAc,CAAEnC,MAAOR,GACvBW,oBAAqBA,KAErBvG,GAAmBC,IAAe,kBAACuI,EAAA,EAAD,OAClCzI,GAAYG,GAA6B,IAAhBE,EAAKiC,SAC9B,kBAACoG,EAAAA,KAAD,KACE,kBAACA,EAAAC,SAAD,KACE,kBAAC,KAAD,QAILxI,GAAaE,EAAKiC,OAAS,GAC1B,kBAAC,aAAD,KACE,kBAAC,EAAAsG,MAAD,CACE,aAAW,2BACXC,OAAO,gBACPjF,QAASkF,EAAAA,aAAAA,QACT3F,MAAO4F,EAAAA,GACP/D,KAAMnE,EACNmI,WA7Ce,SAACC,EAAIC,EAAOhG,GACnC,IAAMiG,GAAe,OAAItI,GACzBsI,EAAaD,GAAb,OAA2BC,EAAaD,IAAxC,IAAgDhG,OAAAA,IAChDpC,EAAiBqI,KA4CT,kBAAC,EAAAC,YAAD,MACA,kBAAC,EAAAC,UAAD,OAEDhJ,EAAKiC,OAAS,GAA6B,IAAxB3B,EAAa2B,QAC/B,kBAACoG,EAAAA,KAAD,CAAMG,OAAQ,yBACZ,kBAACH,EAAAC,SAAD,KACE,kBAAC,KAAD,SAMV,kBAACW,EAAAA,WAAD,CACET,OAAO,8BACPX,UAAWvH,EAAa2B,OACxB/B,KAAMZ,EAAQa,OAASb,EAAQc,MAAQ,EACvC0H,QAASC,OAAOzI,EAAQc,OACxB4H,UAAW,SAACY,EAAI1I,GACdd,GACEgG,EAAAA,EAAAA,IAAc,EAAD,KACR9F,GADQ,IAEXa,OAAQb,EAAQc,OAASF,EAAO,QAItC+H,gBAAiB,SAACW,EAAId,GACpB1I,GAASgG,EAAAA,EAAAA,IAAc,EAAD,KAAM9F,GAAN,IAAec,MAAO0H,EAAS3H,OAAQ,OAE/D+I,SAAQ,iCACR3F,QAAS4F,EAAAA,kBAAAA","sources":["webpack:///./src/Components/RecsListTable/index.js","webpack:///./src/Components/Common/Tables.js","webpack:///./src/Utilities/intlHelper.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\n\nimport {\n  Table,\n  TableBody,\n  TableHeader,\n  TableVariant,\n} from '@patternfly/react-table';\nimport { Card, CardBody } from '@patternfly/react-core/dist/js/components/Card';\nimport {\n  Pagination,\n  PaginationVariant,\n} from '@patternfly/react-core/dist/js/components/Pagination';\nimport { Stack } from '@patternfly/react-core/dist/js/layouts/Stack';\nimport {\n  Tooltip,\n  TooltipPosition,\n} from '@patternfly/react-core/dist/js/components/Tooltip';\n\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { InsightsLabel } from '@redhat-cloud-services/frontend-components/InsightsLabel';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport PrimaryToolbar from '@redhat-cloud-services/frontend-components/PrimaryToolbar/PrimaryToolbar';\n\nimport {\n  FILTER_CATEGORIES,\n  RECS_LIST_COLUMNS,\n  TOTAL_RISK_LABEL_LOWER,\n} from '../../AppConstants';\nimport { useGetRecsQuery } from '../../Services/SmartProxy';\nimport messages from '../../Messages';\nimport {\n  RECS_LIST_INITIAL_STATE,\n  updateRecsListFilters as updateFilters,\n} from '../../Services/Filters';\nimport RuleLabels from '../RuleLabels/RuleLabels';\nimport { strong } from '../../Utilities/intlHelper';\nimport Loading from '../Loading/Loading';\nimport { ErrorState, NoMatchingRecs } from '../MessageState/EmptyStates';\nimport RuleDetails from '../Recommendation/RuleDetails';\nimport { passFilters } from '../Common/Tables';\n\nconst RecsListTable = () => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const filters = useSelector(({ filters }) => filters.recsListState);\n  const { isError, isUninitialized, isFetching, isSuccess, data } =\n    useGetRecsQuery({ impacting: false });\n  const recs = data?.recommendations || [];\n  const page = filters.offset / filters.limit + 1;\n  const [filteredRows, setFilteredRows] = useState([]);\n  const [displayedRows, setDisplayedRows] = useState([]);\n\n  useEffect(() => {\n    setDisplayedRows(buildDisplayedRows(filteredRows));\n  }, [filteredRows, filters.limit, filters.offset]);\n\n  useEffect(() => {\n    setFilteredRows(buildFilteredRows(recs, filters));\n  }, [data, filters]);\n\n  // constructs array of rows (from the initial data) checking currently applied filters\n  const buildFilteredRows = (allRows, filters) => {\n    return (\n      allRows\n        .filter((rule) => passFilters(rule, filters))\n        // TODO: replace with sortable rows\n        .sort((fst, snd) => (fst.total_risk < snd.total_risk ? 1 : -1))\n        .map((value, key) => [\n          {\n            isOpen: false,\n            rule: value,\n            cells: [\n              {\n                title: (\n                  <span key={key}>\n                    <Link\n                      key={key}\n                      // https://github.com/RedHatInsights/ocp-advisor-frontend/issues/29\n                      to={`/recommendations/${\n                        process.env.NODE_ENV === 'development'\n                          ? value.rule_id.replaceAll('.', '%2E')\n                          : `/recommendations/${value.rule_id}`\n                      }`}\n                    >\n                      {' '}\n                      {value?.description || value?.rule_id}{' '}\n                    </Link>\n                    <RuleLabels rule={value} />\n                  </span>\n                ),\n              },\n              {\n                title: value?.publish_date ? (\n                  <DateFormat\n                    key={key}\n                    date={value.publish_date}\n                    variant=\"relative\"\n                  />\n                ) : (\n                  intl.formatMessage(messages.nA)\n                ),\n              },\n              {\n                title: (\n                  <div key={key}>\n                    <Tooltip\n                      key={key}\n                      position={TooltipPosition.bottom}\n                      content={intl.formatMessage(\n                        messages.rulesDetailsTotalRiskBody,\n                        {\n                          risk:\n                            TOTAL_RISK_LABEL_LOWER[value.total_risk] ||\n                            intl.formatMessage(messages.undefined),\n                          strong: (str) => strong(str),\n                        }\n                      )}\n                    >\n                      {value?.total_risk ? (\n                        <InsightsLabel value={value.total_risk} />\n                      ) : (\n                        intl.formatMessage(messages.nA)\n                      )}\n                    </Tooltip>\n                  </div>\n                ),\n              },\n              {\n                title: (\n                  <div key={key}>{`${\n                    value?.impacted_clusters_count !== undefined\n                      ? value.impacted_clusters_count.toLocaleString()\n                      : intl.formatMessage(messages.nA)\n                  }`}</div>\n                ),\n              },\n            ],\n          },\n          {\n            fullWidth: true,\n            cells: [\n              {\n                title: (\n                  <Main className=\"pf-m-light\">\n                    <Stack hasGutter>\n                      <RuleDetails\n                        rule={{\n                          ...value,\n                          impact: { impact: value.impact },\n                          // TODO: fix <Router> issue in the async component and then remove the line below\n                          impacted_clusters_count: undefined,\n                        }}\n                      />\n                    </Stack>\n                  </Main>\n                ),\n              },\n            ],\n          },\n        ])\n    );\n  };\n\n  const buildDisplayedRows = (rows) => {\n    return rows\n      .slice(\n        filters.limit * (page - 1),\n        filters.limit * (page - 1) + filters.limit\n      )\n      .flatMap((row, index) => {\n        const updatedRow = [...row];\n        row[1].parent = index * 2;\n        return updatedRow;\n      });\n  };\n\n  const removeFilterParam = (param) => {\n    const filter = { ...filters, offset: 0 };\n    delete filter[param];\n    dispatch(\n      updateFilters({ ...filter, ...(param === 'text' ? { text: '' } : {}) })\n    );\n  };\n\n  // TODO: update URL when filters changed\n  const addFilterParam = (param, values) => {\n    values.length > 0\n      ? dispatch(\n          updateFilters({ ...filters, offset: 0, ...{ [param]: values } })\n        )\n      : removeFilterParam(param);\n  };\n\n  /* const toggleRulesDisabled = (rule_status) => {\n    dispatch(\n      updateFilters({\n        ...filters,\n        rule_status,\n        offset: 0,\n        ...(rule_status !== 'enabled' && { impacting: ['false'] }),\n      })\n    );\n  }; */\n\n  const filterConfigItems = [\n    {\n      label: intl.formatMessage(messages.name).toLowerCase(),\n      filterValues: {\n        key: 'text-filter',\n        onChange: (_event, value) =>\n          dispatch(updateFilters({ ...filters, text: value })),\n        value: filters.text,\n        placeholder: intl.formatMessage(messages.filterBy),\n      },\n    },\n    {\n      label: FILTER_CATEGORIES.total_risk.title,\n      type: FILTER_CATEGORIES.total_risk.type,\n      id: FILTER_CATEGORIES.total_risk.urlParam,\n      value: `checkbox-${FILTER_CATEGORIES.total_risk.urlParam}`,\n      filterValues: {\n        key: `${FILTER_CATEGORIES.total_risk.urlParam}-filter`,\n        onChange: (_event, values) =>\n          addFilterParam(FILTER_CATEGORIES.total_risk.urlParam, values),\n        value: filters.total_risk,\n        items: FILTER_CATEGORIES.total_risk.values,\n      },\n    },\n    {\n      label: FILTER_CATEGORIES.impact.title,\n      type: FILTER_CATEGORIES.impact.type,\n      id: FILTER_CATEGORIES.impact.urlParam,\n      value: `checkbox-${FILTER_CATEGORIES.impact.urlParam}`,\n      filterValues: {\n        key: `${FILTER_CATEGORIES.impact.urlParam}-filter`,\n        onChange: (_event, values) =>\n          addFilterParam(FILTER_CATEGORIES.impact.urlParam, values),\n        value: filters.impact,\n        items: FILTER_CATEGORIES.impact.values,\n      },\n    },\n    {\n      label: FILTER_CATEGORIES.likelihood.title,\n      type: FILTER_CATEGORIES.likelihood.type,\n      id: FILTER_CATEGORIES.likelihood.urlParam,\n      value: `checkbox-${FILTER_CATEGORIES.likelihood.urlParam}`,\n      filterValues: {\n        key: `${FILTER_CATEGORIES.likelihood.urlParam}-filter`,\n        onChange: (_event, values) =>\n          addFilterParam(FILTER_CATEGORIES.likelihood.urlParam, values),\n        value: filters.likelihood,\n        items: FILTER_CATEGORIES.likelihood.values,\n      },\n    },\n    {\n      label: FILTER_CATEGORIES.category.title,\n      type: FILTER_CATEGORIES.category.type,\n      id: FILTER_CATEGORIES.category.urlParam,\n      value: `checkbox-${FILTER_CATEGORIES.category.urlParam}`,\n      filterValues: {\n        key: `${FILTER_CATEGORIES.category.urlParam}-filter`,\n        onChange: (_event, values) =>\n          addFilterParam(FILTER_CATEGORIES.category.urlParam, values),\n        value: filters.category,\n        items: FILTER_CATEGORIES.category.values,\n      },\n    } /*\n    {\n      label: FILTER_CATEGORIES.rule_status.title,\n      type: FILTER_CATEGORIES.rule_status.type,\n      id: FILTER_CATEGORIES.rule_status.urlParam,\n      value: `radio-${FILTER_CATEGORIES.rule_status.urlParam}`,\n      filterValues: {\n        key: `${FILTER_CATEGORIES.rule_status.urlParam}-filter`,\n        onChange: (_event, value) => toggleRulesDisabled(value),\n        value: `${filters.rule_status}`,\n        items: FILTER_CATEGORIES.rule_status.values,\n      },\n    },*/,\n    {\n      label: FILTER_CATEGORIES.impacting.title,\n      type: FILTER_CATEGORIES.impacting.type,\n      id: FILTER_CATEGORIES.impacting.urlParam,\n      value: `checkbox-${FILTER_CATEGORIES.impacting.urlParam}`,\n      filterValues: {\n        key: `${FILTER_CATEGORIES.impacting.urlParam}-filter`,\n        onChange: (e, values) =>\n          addFilterParam(FILTER_CATEGORIES.impacting.urlParam, values),\n        value: filters.impacting,\n        items: FILTER_CATEGORIES.impacting.values,\n      },\n    },\n  ];\n\n  const capitalize = (string) => string[0].toUpperCase() + string.substring(1);\n\n  const pruneFilters = (localFilters, filterCategories) => {\n    const prunedFilters = Object.entries(localFilters);\n    return prunedFilters.length > 0\n      ? prunedFilters.reduce((arr, item) => {\n          if (filterCategories[item[0]]) {\n            const category = filterCategories[item[0]];\n            const chips = Array.isArray(item[1])\n              ? item[1].map((value) => {\n                  const selectedCategoryValue = category.values.find(\n                    (values) => values.value === String(value)\n                  );\n                  return selectedCategoryValue\n                    ? {\n                        name:\n                          selectedCategoryValue.text ||\n                          selectedCategoryValue.label,\n                        value,\n                      }\n                    : { name: value, value };\n                })\n              : [\n                  {\n                    name: category.values.find(\n                      (values) => values.value === String(item[1])\n                    ).label,\n                    value: item[1],\n                  },\n                ];\n            return [\n              ...arr,\n              {\n                category: capitalize(category.title),\n                chips,\n                urlParam: category.urlParam,\n              },\n            ];\n          } else if (item[0] === 'text') {\n            return [\n              ...arr,\n              ...(item[1].length > 0\n                ? [\n                    {\n                      category: 'Name',\n                      chips: [{ name: item[1], value: item[1] }],\n                      urlParam: item[0],\n                    },\n                  ]\n                : []),\n            ];\n          } else {\n            return arr;\n          }\n        }, [])\n      : [];\n  };\n\n  const buildFilterChips = () => {\n    const localFilters = { ...filters };\n    delete localFilters.sortIndex;\n    delete localFilters.sortDirection;\n    delete localFilters.offset;\n    delete localFilters.limit;\n    return pruneFilters(localFilters, FILTER_CATEGORIES);\n  };\n\n  const activeFiltersConfig = {\n    deleteTitle: intl.formatMessage(messages.resetFilters),\n    filters: buildFilterChips(),\n    onDelete: (_event, itemsToRemove, isAll) => {\n      if (isAll) {\n        dispatch(updateFilters(RECS_LIST_INITIAL_STATE));\n      } else {\n        itemsToRemove.map((item) => {\n          const newFilter = {\n            [item.urlParam]: Array.isArray(filters[item.urlParam])\n              ? filters[item.urlParam].filter(\n                  (value) => String(value) !== String(item.chips[0].value)\n                )\n              : '',\n          };\n          newFilter[item.urlParam].length > 0\n            ? dispatch(updateFilters({ ...filters, ...newFilter }))\n            : removeFilterParam(item.urlParam);\n        });\n      }\n    },\n  };\n\n  const handleOnCollapse = (_e, rowId, isOpen) => {\n    const collapseRows = [...displayedRows];\n    collapseRows[rowId] = { ...collapseRows[rowId], isOpen };\n    setDisplayedRows(collapseRows);\n  };\n\n  return (\n    <React.Fragment>\n      <PrimaryToolbar\n        pagination={{\n          itemCount: filteredRows.length,\n          page: filters.offset / filters.limit + 1,\n          perPage: Number(filters.limit),\n          onSetPage(_event, page) {\n            dispatch(\n              updateFilters({\n                ...filters,\n                offset: filters.limit * (page - 1),\n              })\n            );\n          },\n          onPerPageSelect(_event, perPage) {\n            dispatch(updateFilters({ ...filters, limit: perPage, offset: 0 }));\n          },\n          isCompact: true,\n        }}\n        filterConfig={{ items: filterConfigItems }}\n        activeFiltersConfig={activeFiltersConfig}\n      />\n      {(isUninitialized || isFetching) && <Loading />}\n      {(isError || (isSuccess && recs.length === 0)) && (\n        <Card>\n          <CardBody>\n            <ErrorState />\n          </CardBody>\n        </Card>\n      )}\n      {isSuccess && recs.length > 0 && (\n        <React.Fragment>\n          <Table\n            aria-label=\"Table of recommendations\"\n            ouiaId=\"recsListTable\"\n            variant={TableVariant.compact}\n            cells={RECS_LIST_COLUMNS}\n            rows={displayedRows}\n            onCollapse={handleOnCollapse}\n          >\n            <TableHeader />\n            <TableBody />\n          </Table>\n          {recs.length > 0 && filteredRows.length === 0 && (\n            <Card ouiaId={'empty-recommendations'}>\n              <CardBody>\n                <NoMatchingRecs />\n              </CardBody>\n            </Card>\n          )}\n        </React.Fragment>\n      )}\n      <Pagination\n        ouiaId=\"recs-list-pagination-bottom\"\n        itemCount={filteredRows.length}\n        page={filters.offset / filters.limit + 1}\n        perPage={Number(filters.limit)}\n        onSetPage={(_e, page) => {\n          dispatch(\n            updateFilters({\n              ...filters,\n              offset: filters.limit * (page - 1),\n            })\n          );\n        }}\n        onPerPageSelect={(_e, perPage) => {\n          dispatch(updateFilters({ ...filters, limit: perPage, offset: 0 }));\n        }}\n        widgetId={`pagination-options-menu-bottom`}\n        variant={PaginationVariant.bottom}\n      />\n    </React.Fragment>\n  );\n};\n\nexport default RecsListTable;\n","import { FILTER_CATEGORIES, RULE_CATEGORIES } from '../../AppConstants';\n\nconst passFilters = (rule, filters) =>\n  Object.entries(filters).every(([filterKey, filterValue]) => {\n    switch (filterKey) {\n      case 'text':\n        return rule.description\n          .toLowerCase()\n          .includes(filterValue.toLowerCase());\n      case FILTER_CATEGORIES.total_risk.urlParam:\n        return filterValue.includes(String(rule.total_risk));\n      case FILTER_CATEGORIES.category.urlParam:\n        return rule.tags.find((c) =>\n          filterValue.includes(String(RULE_CATEGORIES[c]))\n        );\n      case FILTER_CATEGORIES.impact.urlParam:\n        return filterValue.includes(String(rule.impact));\n      case FILTER_CATEGORIES.impacting.urlParam:\n        return filterValue.length > 0\n          ? filterValue.some((v) => {\n              if (v === 'true') {\n                return rule.impacted_clusters_count > 0;\n              }\n              if (v === 'false') {\n                return rule.impacted_clusters_count === 0;\n              }\n            })\n          : true;\n      case FILTER_CATEGORIES.likelihood.urlParam:\n        return filterValue.includes(String(rule.likelihood));\n      /* case FC.rule_status.urlParam:\n        return (\n          rule.rule_status === 'all' ||\n          String(rule.rule_status) === filterValue\n        ); */\n      default:\n        return true;\n    }\n  });\n\nexport { passFilters };\n","import React from 'react';\n\nexport const strong = (str) => <strong>{str}</strong>;\n"],"names":["intl","useIntl","dispatch","useDispatch","filters","useSelector","recsListState","useGetRecsQuery","impacting","isError","isUninitialized","isFetching","isSuccess","data","recs","recommendations","page","offset","limit","useState","filteredRows","setFilteredRows","displayedRows","setDisplayedRows","useEffect","buildDisplayedRows","buildFilteredRows","localFilters","allRows","filter","rule","Object","entries","every","filterKey","filterValue","description","toLowerCase","includes","FILTER_CATEGORIES","String","total_risk","tags","find","c","RULE_CATEGORIES","impact","length","some","v","impacted_clusters_count","likelihood","passFilters","sort","fst","snd","map","value","key","isOpen","cells","title","Link","to","rule_id","RuleLabels","publish_date","DateFormat","date","variant","formatMessage","messages","Tooltip","position","TooltipPosition","content","risk","TOTAL_RISK_LABEL_LOWER","strong","str","InsightsLabel","undefined","toLocaleString","fullWidth","Main","className","Stack","hasGutter","RuleDetails","rows","slice","flatMap","row","index","updatedRow","parent","removeFilterParam","param","updateFilters","text","addFilterParam","values","filterConfigItems","label","filterValues","onChange","_event","placeholder","type","id","items","category","e","activeFiltersConfig","deleteTitle","sortIndex","sortDirection","filterCategories","prunedFilters","reduce","arr","item","chips","Array","isArray","selectedCategoryValue","name","string","toUpperCase","substring","urlParam","pruneFilters","onDelete","itemsToRemove","isAll","RECS_LIST_INITIAL_STATE","newFilter","PrimaryToolbar","pagination","itemCount","perPage","Number","onSetPage","onPerPageSelect","isCompact","filterConfig","Loading","Card","CardBody","Table","ouiaId","TableVariant","RECS_LIST_COLUMNS","onCollapse","_e","rowId","collapseRows","TableHeader","TableBody","Pagination","widgetId","PaginationVariant"],"sourceRoot":""}