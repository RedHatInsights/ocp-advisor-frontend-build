{"version":3,"file":"js/9843.66a3ce63f00768690c2c.js","mappings":"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","sources":["webpack:///./src/Components/Common/Tables.js","webpack:///./src/Utilities/Workloads.js"],"sourcesContent":["import capitalize from 'lodash/capitalize';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { useEffect, useState } from 'react';\nimport { coerce, compare, valid } from 'semver';\nimport {\n  CLUSTER_FILTER_CATEGORIES,\n  FILTER_CATEGORIES,\n  RULE_CATEGORIES,\n} from '../../AppConstants';\nimport {\n  hasAnyValueGreaterThanZero,\n  remappingSeverity,\n} from '../../Utilities/Workloads';\n\nexport const passFilters = (rule, filters) =>\n  Object.entries(filters).every(([filterKey, filterValue]) => {\n    switch (filterKey) {\n      case 'text':\n        return rule.description\n          .toLowerCase()\n          .includes(filterValue.toLowerCase());\n      case FILTER_CATEGORIES.total_risk.urlParam:\n        return filterValue.includes(String(rule.total_risk));\n      case FILTER_CATEGORIES.category.urlParam:\n        return rule.tags.find((c) =>\n          filterValue.includes(String(RULE_CATEGORIES[c]))\n        );\n      case FILTER_CATEGORIES.impact.urlParam:\n        return filterValue.includes(String(rule.impact));\n      case FILTER_CATEGORIES.impacting.urlParam:\n        return filterValue.length > 0\n          ? filterValue.some((v) => {\n              if (v === 'true') {\n                return rule.impacted_clusters_count > 0;\n              }\n              if (v === 'false') {\n                return rule.impacted_clusters_count === 0;\n              }\n            })\n          : true;\n      case FILTER_CATEGORIES.likelihood.urlParam:\n        return filterValue.includes(String(rule.likelihood));\n      case FILTER_CATEGORIES.rule_status.urlParam:\n        return (\n          filterValue === 'all' ||\n          (filterValue === 'disabled' && rule.disabled) ||\n          (filterValue === 'enabled' && !rule.disabled)\n        );\n      case FILTER_CATEGORIES.res_risk.urlParam:\n        return filterValue.includes(String(rule.resolution_risk));\n      default:\n        return true;\n    }\n  });\n\nexport const passFiltersCluster = (cluster, filters) =>\n  Object.entries(filters).every(([filterKey, filterValue]) => {\n    switch (filterKey) {\n      case 'text':\n        return (cluster.cluster_name || cluster.cluster_id)\n          .toLowerCase()\n          .includes(filterValue.toLowerCase());\n      case CLUSTER_FILTER_CATEGORIES.hits.urlParam:\n        return (\n          // clusters with at least one rule hit\n          (filterValue.length === 0 && parseInt(cluster.total_hit_count) > 0) ||\n          // all clusters\n          filterValue.includes('all') ||\n          // clusters with at least one rule hit for any of the active risk filters\n          filterValue.some((v) => cluster.hits_by_total_risk[v] > 0)\n        );\n      case 'version':\n        return (\n          filterValue.length === 0 ||\n          filterValue.includes(toValidSemVer(cluster.cluster_version))\n        );\n      default:\n        return true;\n    }\n  });\n\nconst pruneFilters = (localFilters, filterCategories) => {\n  const prunedFilters = Object.entries(localFilters || {});\n  return prunedFilters.reduce((arr, it) => {\n    const [key, item] = it;\n    if (filterCategories[key]) {\n      const category = filterCategories[key];\n      const chips = Array.isArray(item)\n        ? item.map((value) => {\n            const selectedCategoryValue = category.values.find(\n              (values) => values.value === String(value)\n            );\n            return selectedCategoryValue\n              ? {\n                  name:\n                    selectedCategoryValue.text || selectedCategoryValue.label,\n                  value,\n                }\n              : { name: value, value };\n          })\n        : [\n            {\n              name: category.values.find(\n                (values) => values.value === String(item)\n              ).label,\n              value: item,\n            },\n          ];\n      return [\n        ...arr,\n        {\n          category: capitalize(category.title),\n          chips,\n          urlParam: category.urlParam,\n        },\n      ];\n    } else if (key === 'text') {\n      return [\n        ...arr,\n        ...(item.length > 0\n          ? [\n              {\n                category: 'Name',\n                chips: [{ name: item, value: item }],\n                urlParam: key,\n              },\n            ]\n          : []),\n      ];\n    } else if (key === 'version') {\n      return [\n        ...arr,\n        ...(item.length > 0\n          ? [\n              {\n                category: 'Version',\n                chips: item.map((it) => ({\n                  name: it,\n                  value: it,\n                })),\n                urlParam: key,\n              },\n            ]\n          : []),\n      ];\n    } else if (key === 'namespace_name') {\n      return [\n        ...arr,\n        ...(item.length > 0\n          ? [\n              {\n                category: 'Namespace name',\n                chips: [{ name: item, value: item }],\n                urlParam: key,\n              },\n            ]\n          : []),\n      ];\n    } else if (key === 'cluster_name') {\n      return [\n        ...arr,\n        ...(item.length > 0\n          ? [\n              {\n                category: 'Cluster name',\n                chips: [{ name: item, value: item }],\n                urlParam: key,\n              },\n            ]\n          : []),\n      ];\n    }\n  }, []);\n};\n\nexport const buildFilterChips = (filters, categories) => {\n  const localFilters = cloneDeep(filters);\n  delete localFilters.sortIndex;\n  delete localFilters.sortDirection;\n  delete localFilters.sort;\n  delete localFilters.offset;\n  delete localFilters.limit;\n  localFilters?.hits &&\n    localFilters.hits.length === 0 &&\n    delete localFilters.hits;\n  return pruneFilters(localFilters, categories);\n};\n\n// parses url params for use in table/filter chips\nexport const paramParser = (search) => {\n  const searchParams = new URLSearchParams(search);\n  return Array.from(searchParams).reduce(\n    (acc, [key, value]) => ({\n      ...acc,\n      [key]: [\n        'text',\n        'first',\n        'rule_status',\n        'sort',\n        'cluster_name',\n        'namespace_name',\n        'description',\n        'object_id',\n      ].includes(key)\n        ? value // just copy the full value\n        : value === 'true' || value === 'false'\n        ? JSON.parse(value) // parse boolean\n        : // parse array of values\n          value.split(','),\n    }),\n    {}\n  );\n};\n\nexport const translateSortParams = (value) => ({\n  name: value.substring(value.startsWith('-') ? 1 : 0),\n  direction: value.startsWith('-') ? 'desc' : 'asc',\n  description: value.substring(value.startsWith('-') ? 1 : 0),\n  object_id: value.substring(value.startsWith('-') ? 1 : 0),\n});\n\nexport const translateSortValue = (index, indexMapping, direction) => {\n  if (!['desc', 'asc'].includes(direction)) {\n    console.error('Invalid sort parameters (is not asc nor desc)');\n  }\n  return `${direction === 'asc' ? '' : '-'}${indexMapping[index]}`;\n};\n\n// TODO: remove since unused\nexport const debounce = (value, delay) => {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [delay, value]);\n\n  return debouncedValue;\n};\n\nexport const updateSearchParams = (filters = {}, columnMapping) => {\n  const url = new URL(window.location.origin + window.location.pathname);\n  // separately check the sort param\n  url.searchParams.set(\n    'sort',\n    translateSortValue(filters.sortIndex, columnMapping, filters.sortDirection)\n  );\n  // check the rest of filters\n  Object.entries(filters).forEach(([key, value]) => {\n    return (\n      key !== 'sortIndex' &&\n      key !== 'sortDirection' &&\n      key !== 'sort' &&\n      value !== '' &&\n      !(Array.isArray(value) && value.length === 0) &&\n      url.searchParams.set(key, value)\n    );\n  });\n  window.history.replaceState(null, null, url.href);\n};\n\n// TODO: move to Utils.js\nexport const compareSemVer = (v1, v2, d) => d * compare(v1, v2);\nexport const toValidSemVer = (version) =>\n  coerce(version === undefined || !valid(coerce(version)) ? '0.0.0' : version)\n    .version;\n\nexport const removeFilterParam = (currentFilters, updateFilters, param) => {\n  const { [param]: omitted, ...newFilters } = { ...currentFilters, offset: 0 };\n  updateFilters({\n    ...newFilters,\n    ...(param === 'text'\n      ? { text: '' }\n      : param === 'hits'\n      ? { hits: [] }\n      : param === 'version'\n      ? { version: [] }\n      : param === 'object_id'\n      ? { object_id: '' }\n      : {}),\n  });\n};\n\nexport const addFilterParam = (currentFilters, updateFilters, param, values) =>\n  values.length > 0\n    ? updateFilters({\n        ...currentFilters,\n        offset: 0,\n        ...{ [param]: values },\n      })\n    : removeFilterParam(currentFilters, updateFilters, param);\n\nexport const passFilterWorkloads = (workloads, filters) => {\n  const generalSeverityRemapped = remappingSeverity(\n    workloads.metadata.hits_by_severity,\n    'general'\n  );\n  return Object.entries(filters).every(([filterKey, filterValue]) => {\n    switch (filterKey) {\n      case 'cluster_name':\n        return (workloads.cluster.display_name || workloads.cluster.uuid)\n          .toLowerCase()\n          .includes(filterValue.toLowerCase());\n      case 'namespace_name':\n        return (workloads.namespace.name || workloads.namespace.uuid)\n          .toLowerCase()\n          .includes(filterValue.toLowerCase());\n      case 'severity':\n        return (\n          filterValue.length === 0 ||\n          hasAnyValueGreaterThanZero(generalSeverityRemapped, filters.severity)\n        );\n      default:\n        return true;\n    }\n  });\n};\n","import { SortByDirection } from '@patternfly/react-table';\nimport _ from 'lodash';\n\nexport const SEVERITY_OPTIONS = [\n  {\n    value: 'critical',\n    label: 'Critical',\n    iconColor: 'var(--pf-global--danger-color--100)',\n    textColor: 'var(--pf-global--danger-color--100)',\n    hasIcon: true,\n    indexNumber: 4,\n  },\n  {\n    value: 'important',\n    label: 'Important',\n    iconColor: 'var(--pf-global--palette--orange-300)',\n    textColor: 'var(--pf-global--palette--orange-400)',\n    hasIcon: true,\n    indexNumber: 3,\n  },\n  {\n    value: 'moderate',\n    label: 'Moderate',\n    iconColor: 'var(--pf-global--warning-color--100)',\n    textColor: 'var(--pf-global--warning-color--200)',\n    hasIcon: true,\n    indexNumber: 2,\n  },\n  {\n    value: 'low',\n    label: 'Low',\n    iconColor: 'var(--pf-global--Color--200)',\n    textColor: 'var(--pf-global--default-color--300)',\n    hasIcon: true,\n    indexNumber: 1,\n  },\n];\n\nexport const remappingSeverity = (obj, mode) => {\n  const mapping = {\n    1: 'low',\n    2: 'moderate',\n    3: 'important',\n    4: 'critical',\n  };\n  let updatedObj = {};\n\n  if (mode === 'general' || mode === 'label') {\n    for (const key in obj) {\n      if (key in mapping) {\n        updatedObj[mapping[key]] = obj[key];\n      }\n    }\n  } else {\n    updatedObj = mapping[obj];\n  }\n\n  return updatedObj;\n};\n\nexport const hasAnyValueGreaterThanZero = (obj, stringsToCheck) => {\n  for (const key of stringsToCheck) {\n    if (obj[key] > 0) {\n      return true; // Return true if any matching string has a value greater than 0\n    }\n  }\n};\n\nexport const severityTypeToText = (value) => {\n  value = parseInt(value);\n  if (value === 1) {\n    return 'Low';\n  } else if (value === 2) {\n    return 'Moderate';\n  } else if (value === 3) {\n    return 'Important';\n  } else {\n    return 'Critical';\n  }\n};\n\nexport const filtersAreApplied = (params) => {\n  const cleanedUpParams = _.cloneDeep(params);\n  delete cleanedUpParams.sortIndex;\n  delete cleanedUpParams.sortDirection;\n  delete cleanedUpParams.offset;\n  delete cleanedUpParams.limit;\n  delete cleanedUpParams.sort;\n  return Object.values(cleanedUpParams).filter((value) => !_.isEmpty(value))\n    .length\n    ? true\n    : false;\n};\n\nexport const capitalize = (str) => {\n  return str?.charAt(0).toUpperCase() + str?.slice(1);\n};\n\nexport const createChips = (category, value) => {\n  if (category.values) {\n    const selectedCategoryValue = category.values.find(\n      (values) => values.value === String(value)\n    );\n\n    return selectedCategoryValue\n      ? {\n          name: selectedCategoryValue.label || selectedCategoryValue.text,\n          value,\n        }\n      : { name: value, value };\n  }\n\n  return { name: value, value };\n};\n\nexport const pruneWorkloadsRulesFilters = (localFilters, filterCategories) => {\n  const prunedFilters = Object.entries(localFilters);\n  return prunedFilters.reduce((arr, [name, value]) => {\n    if (filterCategories[name]) {\n      const category = filterCategories[name];\n      if (\n        (Array.isArray(value) && value.length > 0) ||\n        (typeof value === 'string' && value.trim() !== '')\n      ) {\n        const chips = Array.isArray(value)\n          ? value.map((v) => createChips(category, v))\n          : [createChips(category, value)];\n\n        arr.push({\n          category: capitalize(category.label),\n          chips,\n          urlParam: category.urlParam,\n        });\n      }\n    } else if (\n      (name === 'description' || name === 'object_id') &&\n      value.trim() !== ''\n    ) {\n      arr.push({\n        category: capitalize(name.replace('_', ' ')),\n        chips: [{ name: value, value }],\n        urlParam: name,\n      });\n    }\n\n    return arr;\n  }, []);\n};\n\nexport const switchSort = (sortIndex, item) => {\n  const rule = item[0].rule;\n  switch (sortIndex) {\n    case 1:\n      return rule.details;\n    case 2:\n      return rule.total_risk;\n    case 3:\n      return rule.objects.length;\n    case 4:\n      return rule.modified;\n  }\n};\n\nexport const sortWithSwitch = (sortIndex, sortDirection, filteredRows) => {\n  return sortIndex >= 1\n    ? [...filteredRows]?.sort((a, b) => {\n        const d = sortDirection === SortByDirection.asc ? 1 : -1;\n        return switchSort(sortIndex, a) > switchSort(sortIndex, b)\n          ? d\n          : switchSort(sortIndex, b) > switchSort(sortIndex, a)\n          ? -d\n          : 0;\n      })\n    : [...filteredRows];\n};\n\nexport const flatMapRows = (filteredRows, expandFirst) => {\n  return filteredRows.flatMap((row, index) => {\n    const updatedRow = [...row];\n    if (expandFirst && index === 0) {\n      row[0].isOpen = true;\n    }\n    row[1].parent = index * 2;\n    return updatedRow;\n  });\n};\n\nexport const passObjectsFilters = (objects, filters) => {\n  return Object.entries(filters).some(([filterKey, filterValue]) => {\n    switch (filterKey) {\n      case 'object_id':\n        return objects.uid.toLowerCase().includes(filterValue.toLowerCase());\n      default:\n        return false;\n    }\n  });\n};\n\nexport const workloadsRulesRemoveFilterParam = (\n  currentFilters,\n  updateFilters,\n  param\n) => {\n  const { [param]: omitted, ...newFilters } = { ...currentFilters };\n  updateFilters({\n    ...newFilters,\n    ...(param === 'description'\n      ? { description: '' }\n      : param === 'total_risk'\n      ? { total_risk: [] }\n      : param === 'object_id'\n      ? { object_id: '' }\n      : {}),\n  });\n};\n\nexport const workloadsRulesAddFilterParam = (\n  currentFilters,\n  updateFilters,\n  param,\n  values\n) =>\n  values.length > 0\n    ? updateFilters({\n        ...currentFilters,\n        ...{ [param]: values },\n      })\n    : workloadsRulesRemoveFilterParam(currentFilters, updateFilters, param);\n\nexport const passFilterWorkloadsRecs = (recommendation, filters) => {\n  const cleanedUpFilters = _.omitBy(_.cloneDeep(filters), _.isEmpty);\n\n  return Object.entries(cleanedUpFilters).every(([filterKey, filterValue]) => {\n    switch (filterKey) {\n      case 'description':\n        return (\n          filterValue &&\n          recommendation.details\n            .toLowerCase()\n            .includes(filterValue.toLowerCase())\n        );\n      case 'object_id':\n        return (\n          filterValue &&\n          recommendation.objects.some((obj) =>\n            obj.uid.toLowerCase().includes(filterValue.toLowerCase())\n          )\n        );\n      case 'total_risk':\n        return (\n          filterValue && filterValue.includes(String(recommendation.total_risk))\n        );\n      default:\n        return true;\n    }\n  });\n};\n"],"names":["passFilters","rule","filters","Object","entries","every","_ref","_ref2","_slicedToArray","filterKey","filterValue","description","toLowerCase","includes","FILTER_CATEGORIES","total_risk","urlParam","String","category","tags","find","c","RULE_CATEGORIES","impact","impacting","length","some","v","impacted_clusters_count","likelihood","rule_status","disabled","res_risk","resolution_risk","passFiltersCluster","cluster","_ref3","_ref4","cluster_name","cluster_id","CLUSTER_FILTER_CATEGORIES","hits","parseInt","total_hit_count","hits_by_total_risk","toValidSemVer","cluster_version","buildFilterChips","categories","localFilters","cloneDeep","sortIndex","sortDirection","sort","offset","limit","filterCategories","reduce","arr","it","_it","key","item","chips","Array","isArray","map","value","selectedCategoryValue","values","name","text","label","concat","_toConsumableArray","capitalize","title","pruneFilters","paramParser","search","searchParams","URLSearchParams","from","acc","_ref5","_ref6","_objectSpread","_defineProperty","JSON","parse","split","translateSortParams","substring","startsWith","direction","object_id","updateSearchParams","index","indexMapping","arguments","undefined","columnMapping","url","URL","window","location","origin","pathname","set","console","error","forEach","_ref7","_ref8","history","replaceState","href","compareSemVer","v1","v2","d","compare","version","coerce","valid","removeFilterParam","currentFilters","updateFilters","param","_currentFilters$offse","_objectWithoutProperties","_toPropertyKey","addFilterParam","passFilterWorkloads","workloads","generalSeverityRemapped","remappingSeverity","metadata","hits_by_severity","_ref9","_ref10","display_name","uuid","namespace","hasAnyValueGreaterThanZero","severity","obj","mode","mapping","updatedObj","stringsToCheck","_step","_iterator","_createForOfIteratorHelper","s","n","done","err","e","f","filtersAreApplied","params","cleanedUpParams","_","filter","str","charAt","toUpperCase","slice","createChips","pruneWorkloadsRulesFilters","trim","push","replace","switchSort","details","objects","modified","sortWithSwitch","filteredRows","a","b","SortByDirection","asc","flatMapRows","expandFirst","flatMap","row","updatedRow","isOpen","parent","passObjectsFilters","uid","workloadsRulesRemoveFilterParam","_currentFilters","workloadsRulesAddFilterParam","passFilterWorkloadsRecs","recommendation","cleanedUpFilters"],"sourceRoot":""}