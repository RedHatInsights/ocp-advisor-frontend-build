{"version":3,"sources":["webpack:///./src/Messages.js","webpack:///./src/Components/ClusterHeader/ClusterHeader.js","webpack:///./src/Components/MessageState/MessageState.js","webpack:///./src/AppConstants.js","webpack:///./src/Components/ReportDetails/ReportDetails.js","webpack:///./src/Components/ClusterRules/ClusterRules.js","webpack:///./src/Components/Breadcrumbs/Breadcrumbs.js","webpack:///./src/Components/Loading/Loading.js","webpack:///./src/Components/Cluster/Cluster.js"],"names":["defineMessages","documentTitle","id","defaultMessage","clusters","added","loading","lastSeen","actions","name","filterBy","totalRisk","recommendation","recommendations","insightsHeader","unknown","low","moderate","important","critical","veryLow","medium","high","availability","performance","stability","security","enabled","impact","impactLevel","impactDescription","category","likelihood","likelihoodLevel","likelihoodDescription","all","disabled","resetFilters","noMatchingRecommendations","noMatchingRecommendationsDesc","noRecommendations","noRecommendationsDesc","ClusterHeader","uuid","intl","useIntl","Grid","md","hasGutter","GridItem","Title","size","headingLevel","Stack","StackItem","formatMessage","messages","propTypes","PropTypes","MessageState","className","children","icon","iconClass","iconStyle","text","title","variant","EmptyState","EmptyStateIcon","style","EmptyStateBody","marginBottom","defaultProps","CubesIcon","EmptyStateVariant","cache","createIntlCache","locale","navigator","language","slice","createIntl","onError","console","error","intlSettings","LIKELIHOOD_LABEL","intlHelper","IMPACT_LABEL","TOTAL_RISK_LABEL","RISK_OF_CHANGE_LABEL","FILTER_CATEGORIES","total_risk","type","urlParam","values","label","value","res_risk","rule_status","ReportDetails","report","AsyncComponent","appName","module","details","extra_data","resolution","ClusterRules","reports","useState","activeReports","setActiveReports","sortBy","setSortBy","filters","setFilters","searchValue","setSearchValue","isSelected","setIsSelected","rows","setRows","results","length","cols","transforms","sortable","cellWidth","handleOnCollapse","_e","rowId","isOpen","collapseRows","onKebabClick","action","allRows","map","row","key","Object","prototype","hasOwnProperty","call","onClick","buildRows","builtRows","flatMap","rule","entity","filter","rowVal","rowKey","rule_id","selected","reportRow","cells","description","DateFormat","date","created_at","tooltipProps","position","TooltipPosition","verticalAlign","Tooltip","content","InsightsLabel","parent","fullWidth","isValidSearchValue","toLowerCase","includes","isValidFilterValue","keys","filterValues","rowValue","tags","find","String","every","x","forEach","index","selectedItemsLength","getSelectedItems","onBulkSelect","bulkSelect","items","count","checked","onSelect","onFilterChange","param","newFilters","removeFilterParam","filterConfigItems","onChange","onInputChange","FC","activeFiltersConfig","deleteTitle","prunedFilters","entries","chips","item","capitalize","push","buildFilterChips","onDelete","itemsToRemove","isAll","useEffect","activeReportsData","PrimaryToolbar","actionsConfig","filterConfig","pagination","Table","onCollapse","canSelectAll","onSort","direction","sortedReports","sort","concat","firstItem","secondItem","sortedReportsDirectional","SortByDirection","reverse","TableVariant","isStickyHeader","TableHeader","TableBody","Card","CardBody","CheckIcon","Breadcrumbs","current","match","setItems","buildBreadcrumbs","useCallback","crumbs","splitUrl","url","split","navigate","params","clusterId","Breadcrumb","ouiaId","oneLink","BreadcrumbItem","isActive","injectIntl","routerParams","Cluster","useGetClusterByIdQuery","data","isUninitialized","isLoading","isFetching","isSuccess","isError","refetch","subnav","document","PageHeader","Main","SearchIcon","span","history"],"mappings":"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","file":"js/ClusterDetails.fbe7b7a8af4ae786fea8.js","sourcesContent":["/* eslint-disable max-len */\nimport { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  documentTitle: {\n    id: 'documentTitle',\n    description: 'The title of the page as it appears in the browser tab',\n    defaultMessage: '{subnav} - OCP Advisor | Red Hat Insights',\n  },\n  clusters: {\n    id: 'clusters',\n    description:\n      'Clusters title used in recommendation table column and clusters tab header',\n    defaultMessage: 'Clusters',\n  },\n  added: {\n    id: 'added',\n    description: 'Recommendation table column title',\n    defaultMessage: 'Added',\n  },\n  loading: {\n    id: 'loading',\n    description: 'Loading text',\n    defaultMessage: 'Loading',\n  },\n  lastSeen: {\n    id: 'lastSeen',\n    description:\n      'Used in the cluster table title column, the last time a cluster has checked in',\n    defaultMessage: 'Last seen',\n  },\n  actions: {\n    id: 'actions',\n    description: 'actions',\n    defaultMessage: 'Actions',\n  },\n  name: {\n    id: 'name',\n    description:\n      'Used in the cluster table title column, identifying display name of a cluster',\n    defaultMessage: 'Name',\n  },\n  filterBy: {\n    id: 'filterBy',\n    description: 'Filter by name',\n    defaultMessage: 'Filter by name',\n  },\n  totalRisk: {\n    id: 'totalRisk',\n    description:\n      'Recommendation table column title, recommendationdetails label',\n    defaultMessage: 'Total risk',\n  },\n  recommendation: {\n    id: 'recommendation',\n    description: 'Recommendation',\n    defaultMessage: 'Recommendation',\n  },\n  recommendations: {\n    id: 'recommendations',\n    description: 'Used as a title',\n    defaultMessage: 'Recommendations',\n  },\n  insightsHeader: {\n    id: 'insightsHeader',\n    description: 'Header for the application title',\n    defaultMessage: 'Advisor',\n  },\n  unknown: {\n    id: 'unknown',\n    description: 'Unknown',\n    defaultMessage: 'Unknown',\n  },\n  low: {\n    id: 'low',\n    description: 'Filter value',\n    defaultMessage: 'Low',\n  },\n  moderate: {\n    id: 'moderate',\n    description: 'Filter value',\n    defaultMessage: 'Moderate',\n  },\n  important: {\n    id: 'important',\n    description: 'Filter value',\n    defaultMessage: 'Important',\n  },\n  critical: {\n    id: 'critical',\n    description: 'Filter value',\n    defaultMessage: 'Critical',\n  },\n  veryLow: {\n    id: 'veryLow',\n    description: 'Filter value',\n    defaultMessage: 'Very Low',\n  },\n  medium: {\n    id: 'medium',\n    description: 'Filter value',\n    defaultMessage: 'Medium',\n  },\n  high: {\n    id: 'high',\n    description: 'Filter value',\n    defaultMessage: 'High',\n  },\n  availability: {\n    id: 'availability',\n    description: 'Filter value',\n    defaultMessage: 'Availability',\n  },\n  performance: {\n    id: 'performance',\n    description: 'Filter value',\n    defaultMessage: 'Performance',\n  },\n  stability: {\n    id: 'stability',\n    description: 'Filter value',\n    defaultMessage: 'Stability',\n  },\n  security: {\n    id: 'security',\n    description: 'Filter value',\n    defaultMessage: 'Security',\n  },\n  enabled: {\n    id: 'enabled',\n    description: 'Filter value',\n    defaultMessage: 'Enabled',\n  },\n  impact: {\n    id: 'impact',\n    description: 'Filter title',\n    defaultMessage: 'Impact',\n  },\n  impactLevel: {\n    id: 'impactLevel',\n    description: 'Describes the impact level of a rule',\n    defaultMessage: '{level} impact',\n  },\n  impactDescription: {\n    id: 'impactDescription',\n    description:\n      'Used in the SeverityLine tooltip to describe the impact of a rule',\n    defaultMessage:\n      'The impact of the problem would be {level} if it occurred.',\n  },\n  category: {\n    id: 'category',\n    description: 'Filter title',\n    defaultMessage: 'Category',\n  },\n  likelihood: {\n    id: 'likelihood',\n    description: 'Filter title',\n    defaultMessage: 'Likelihood',\n  },\n  likelihoodLevel: {\n    id: 'likelihoodLevel',\n    description: 'Describes the likelihood of a rule',\n    defaultMessage: '{level} likelihood',\n  },\n  likelihoodDescription: {\n    id: 'likelihoodDescription',\n    description:\n      'Used in the SeverityLine tooltip to describe the likelihood of a rule',\n    defaultMessage: 'The likelihood that this will be a problem is {level}.',\n  },\n  all: {\n    id: 'all',\n    description: 'All',\n    defaultMessage: 'All',\n  },\n  disabled: {\n    id: 'disabled',\n    description: 'Disabled',\n    defaultMessage: 'Disabled',\n  },\n  resetFilters: {\n    id: 'resetFilters',\n    description: 'Filter action, reset all filter chips',\n    defaultMessage: 'Reset filters',\n  },\n  noMatchingRecommendations: {\n    id: 'noMatchingRecommendations',\n    defaultMessage: 'No matching recommendations found',\n  },\n  noMatchingRecommendationsDesc: {\n    id: 'noMatchingRecommendationsDesc',\n    defaultMessage:\n      'This filter criteria matches no recommendations. Try changing your filter settings.',\n  },\n  noRecommendations: {\n    id: 'noRecommendations',\n    description:\n      'Recommendation table, no recommendations message for any known rules, body',\n    defaultMessage:\n      'None of your connected systems are affected by any known recommendations.',\n  },\n  noRecommendationsDesc: {\n    id: 'noRecommendationsDesc',\n    defaultMessage: 'No known recommendations affect this cluster.',\n  },\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  Grid,\n  GridItem,\n  Stack,\n  StackItem,\n  Title,\n} from '@patternfly/react-core';\nimport { useIntl } from 'react-intl';\nimport messages from '../../Messages';\n\nconst ClusterHeader = ({ uuid, lastSeen }) => {\n  const intl = useIntl();\n\n  return (\n    <React.Fragment>\n      <Grid md={12} hasGutter>\n        <GridItem>\n          <Title size=\"2xl\" headingLevel=\"h1\">\n            {uuid}\n          </Title>\n        </GridItem>\n        <GridItem>\n          <Stack>\n            <StackItem>\n              <span>UUID: </span>\n              <span>{uuid || intl.formatMessage(messages.unknown)}</span>\n            </StackItem>\n            <StackItem>\n              <span>{intl.formatMessage(messages.lastSeen)}: </span>\n              <span>{lastSeen || intl.formatMessage(messages.unknown)}</span>\n            </StackItem>\n          </Stack>\n        </GridItem>\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nClusterHeader.propTypes = {\n  uuid: PropTypes.string.isRequired,\n  lastSeen: PropTypes.string,\n};\n\nexport default ClusterHeader;\n","import {\n  EmptyState,\n  EmptyStateVariant,\n} from '@patternfly/react-core/dist/js/components/EmptyState/EmptyState';\n\nimport CubesIcon from '@patternfly/react-icons/dist/js/icons/cubes-icon';\nimport { EmptyStateBody } from '@patternfly/react-core/dist/js/components/EmptyState/EmptyStateBody';\nimport { EmptyStateIcon } from '@patternfly/react-core/dist/js/components/EmptyState/EmptyStateIcon';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Title } from '@patternfly/react-core/dist/js/components/Title/Title';\n\nconst MessageState = ({\n  className,\n  children,\n  icon,\n  iconClass,\n  iconStyle,\n  text,\n  title,\n  variant,\n}) => (\n  <EmptyState className={className} variant={variant}>\n    {icon !== 'none' && (\n      <EmptyStateIcon className={iconClass} style={iconStyle} icon={icon} />\n    )}\n    <Title headingLevel=\"h5\" size=\"lg\">\n      {title}\n    </Title>\n    <EmptyStateBody style={{ marginBottom: '16px' }}>{text}</EmptyStateBody>\n    {children}\n  </EmptyState>\n);\n\nMessageState.propTypes = {\n  children: PropTypes.any,\n  icon: PropTypes.any,\n  iconClass: PropTypes.any,\n  iconStyle: PropTypes.any,\n  text: PropTypes.any,\n  title: PropTypes.string,\n  variant: PropTypes.any,\n  className: PropTypes.string,\n};\n\nMessageState.defaultProps = {\n  icon: CubesIcon,\n  title: '',\n  variant: EmptyStateVariant.full,\n};\n\nexport default MessageState;\n","import { createIntl, createIntlCache } from 'react-intl';\nimport intlHelper from '@redhat-cloud-services/frontend-components-translations/intlHelper';\n\nimport messages from './Messages';\n\nconst cache = createIntlCache();\nconst locale = navigator.language.slice(0, 2);\nconst intl = createIntl(\n  {\n    // eslint-disable-next-line no-console\n    onError: console.error,\n    locale,\n  },\n  cache\n);\nconst intlSettings = { locale };\n\nexport const LIKELIHOOD_LABEL = {\n  1: intlHelper(intl.formatMessage(messages.low), intlSettings),\n  2: intlHelper(intl.formatMessage(messages.medium), intlSettings),\n  3: intlHelper(intl.formatMessage(messages.high), intlSettings),\n  4: intlHelper(intl.formatMessage(messages.critical), intlSettings),\n};\nexport const IMPACT_LABEL = {\n  1: intlHelper(intl.formatMessage(messages.low), intlSettings),\n  2: intlHelper(intl.formatMessage(messages.medium), intlSettings),\n  3: intlHelper(intl.formatMessage(messages.high), intlSettings),\n  4: intlHelper(intl.formatMessage(messages.critical), intlSettings),\n};\nexport const TOTAL_RISK_LABEL = {\n  1: intlHelper(intl.formatMessage(messages.low), intlSettings),\n  2: intlHelper(intl.formatMessage(messages.moderate), intlSettings),\n  3: intlHelper(intl.formatMessage(messages.important), intlSettings),\n  4: intlHelper(intl.formatMessage(messages.critical), intlSettings),\n};\nexport const RISK_OF_CHANGE_LABEL = {\n  1: intlHelper(intl.formatMessage(messages.veryLow), intlSettings),\n  2: intlHelper(intl.formatMessage(messages.low), intlSettings),\n  3: intlHelper(intl.formatMessage(messages.moderate), intlSettings),\n  4: intlHelper(intl.formatMessage(messages.high), intlSettings),\n};\nexport const FILTER_CATEGORIES = {\n  total_risk: {\n    type: 'checkbox',\n    title: 'total risk',\n    urlParam: 'total_risk',\n    values: [\n      { label: TOTAL_RISK_LABEL[4], value: '4' },\n      { label: TOTAL_RISK_LABEL[3], value: '3' },\n      { label: TOTAL_RISK_LABEL[2], value: '2' },\n      { label: TOTAL_RISK_LABEL[1], value: '1' },\n    ],\n  },\n  res_risk: {\n    type: 'checkbox',\n    title: 'risk of change',\n    urlParam: 'res_risk',\n    values: [\n      { label: RISK_OF_CHANGE_LABEL[4], value: '4' },\n      { label: RISK_OF_CHANGE_LABEL[3], value: '3' },\n      { label: RISK_OF_CHANGE_LABEL[2], value: '2' },\n      { label: RISK_OF_CHANGE_LABEL[1], value: '1' },\n    ],\n  },\n  impact: {\n    type: 'checkbox',\n    title: 'impact',\n    urlParam: 'impact',\n    values: [\n      { label: IMPACT_LABEL[4], value: '4' },\n      { label: IMPACT_LABEL[3], value: '3' },\n      { label: IMPACT_LABEL[2], value: '2' },\n      { label: IMPACT_LABEL[1], value: '1' },\n    ],\n  },\n  likelihood: {\n    type: 'checkbox',\n    title: 'likelihood',\n    urlParam: 'likelihood',\n    values: [\n      { label: LIKELIHOOD_LABEL[4], value: '4' },\n      { label: LIKELIHOOD_LABEL[3], value: '3' },\n      { label: LIKELIHOOD_LABEL[2], value: '2' },\n      { label: LIKELIHOOD_LABEL[1], value: '1' },\n    ],\n  },\n  rule_status: {\n    type: 'radio',\n    title: 'status',\n    urlParam: 'rule_status',\n    values: [\n      {\n        label: intlHelper(intl.formatMessage(messages.all), intlSettings),\n        value: 'all',\n      },\n      {\n        label: intlHelper(intl.formatMessage(messages.enabled), intlSettings),\n        value: 'enabled',\n      },\n      {\n        label: intlHelper(intl.formatMessage(messages.disabled), intlSettings),\n        value: 'disabled',\n      },\n    ],\n  },\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\n\n// Rule fields processing: https://docs.google.com/document/d/1D0ZLD6-2DZqBX1cUHJY2vL2QAD0dIAzY3O3xFNlEsVg/edit?usp=sharing\n\nconst ReportDetails = ({ report }) => {\n  return (\n    <div className=\"advisor\">\n      <AsyncComponent\n        appName=\"advisor\"\n        module=\"./AdvisorReportDetails\"\n        // TODO: make API rename `extra_data` to `details` or modify AdvisorReportDetails property\n        report={{\n          ...report,\n          details: report.extra_data,\n          resolution: {\n            resolution: report.resolution,\n          },\n        }}\n      />\n    </div>\n  );\n};\n\nReportDetails.propTypes = {\n  report: PropTypes.object.isRequired,\n};\n\nexport default ReportDetails;\n","import './_ClusterRules.scss';\n\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { CheckIcon } from '@patternfly/react-icons';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat/DateFormat';\nimport InsightsLabel from '@redhat-cloud-services/frontend-components/InsightsLabel';\nimport {\n  SortByDirection,\n  Table,\n  TableBody,\n  TableHeader,\n  TableVariant,\n  cellWidth,\n  sortable,\n} from '@patternfly/react-table';\nimport {\n  capitalize,\n  Card,\n  CardBody,\n  Tooltip,\n  TooltipPosition,\n} from '@patternfly/react-core';\nimport PrimaryToolbar from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\n\nimport messages from '../../Messages';\nimport MessageState from '../MessageState/MessageState';\nimport {\n  IMPACT_LABEL,\n  LIKELIHOOD_LABEL,\n  FILTER_CATEGORIES as FC,\n} from '../../AppConstants';\nimport ReportDetails from '../ReportDetails/ReportDetails';\n\nconst ClusterRules = ({ reports }) => {\n  const intl = useIntl();\n  const [activeReports, setActiveReports] = useState([]);\n  const [sortBy, setSortBy] = useState({});\n  const [filters, setFilters] = useState({});\n  const [searchValue, setSearchValue] = useState('');\n  const [isSelected, setIsSelected] = useState(false);\n  const [rows, setRows] = useState([]);\n  const results = rows ? rows.length / 2 : 0;\n\n  const cols = [\n    {\n      title: intl.formatMessage(messages.name),\n      transforms: [sortable],\n    },\n    {\n      title: intl.formatMessage(messages.added),\n      transforms: [sortable, cellWidth(15)],\n    },\n    {\n      title: intl.formatMessage(messages.totalRisk),\n      transforms: [sortable, cellWidth(15)],\n    },\n  ];\n\n  const handleOnCollapse = (_e, rowId, isOpen) => {\n    const collapseRows = [...rows];\n    collapseRows[rowId] = { ...collapseRows[rowId], isOpen };\n    setRows(collapseRows);\n  };\n\n  const onKebabClick = (action) => {\n    const isOpen = action === 'insights-expand-all';\n    const allRows = [...rows];\n\n    allRows.map((row, key) => {\n      if (Object.prototype.hasOwnProperty.call(row, 'isOpen')) {\n        row.isOpen = isOpen;\n        isOpen && handleOnCollapse(null, key, isOpen);\n      }\n    });\n\n    setRows(allRows);\n  };\n\n  const actions = [\n    {\n      label: 'Collapse all',\n      onClick: () => onKebabClick('insights-collapse-all'),\n    },\n    {\n      label: 'Expand all',\n      onClick: () => onKebabClick('insights-expand-all'),\n    },\n  ];\n\n  const buildRows = (activeReports, filters, rows, searchValue = '') => {\n    const builtRows = activeReports.flatMap((value, key) => {\n      const rule = value;\n      const resolution = value.resolution;\n      const entity = rows.filter(\n        (rowVal, rowKey) =>\n          rowKey % 2 === 0 && rowVal.rule.rule_id === rule.rule_id && rowVal\n      );\n      const selected = entity.length ? entity[0].selected : false;\n      const isOpen = rows.length\n        ? entity.length\n          ? entity[0].isOpen\n          : false\n        : key === 0\n        ? true\n        : false;\n\n      const reportRow = [\n        {\n          rule,\n          resolution,\n          isOpen,\n          selected,\n          cells: [\n            { title: <div> {rule.description}</div> },\n            {\n              title: (\n                <div key={key}>\n                  <DateFormat\n                    date={rule.created_at}\n                    type=\"relative\"\n                    tooltipProps={{ position: TooltipPosition.bottom }}\n                  />\n                </div>\n              ),\n            },\n            {\n              title: (\n                <div key={key} style={{ verticalAlign: 'top' }}>\n                  <Tooltip\n                    key={key}\n                    position={TooltipPosition.bottom}\n                    content={\n                      // TODO: refine fields lookup\n                      <span>\n                        The <strong>likelihood</strong> that this will be a\n                        problem is{' '}\n                        {rule?.likelihood\n                          ? LIKELIHOOD_LABEL[rule?.likelihood]\n                          : 'unknown'}\n                        . The <strong>impact</strong> of the problem would be{' '}\n                        {rule?.impact ? IMPACT_LABEL[rule?.impact] : 'unknown'}{' '}\n                        if it occurred.\n                      </span>\n                    }\n                  >\n                    <InsightsLabel value={rule.total_risk} />\n                  </Tooltip>\n                </div>\n              ),\n            },\n          ],\n        },\n        {\n          parent: key,\n          fullWidth: true,\n          cells: [\n            {\n              title: <ReportDetails key={`child-${key}`} report={value} />,\n            },\n          ],\n        },\n      ];\n      const isValidSearchValue =\n        searchValue.length === 0 ||\n        rule.description.toLowerCase().includes(searchValue.toLowerCase());\n      const isValidFilterValue =\n        Object.keys(filters).length === 0 ||\n        Object.keys(filters)\n          .map((key) => {\n            const filterValues = filters[key];\n            const rowValue = {\n              created_at: rule.created_at,\n              total_risk: rule.total_risk,\n              tags: rule.tags,\n            };\n            return filterValues.find(\n              (value) => String(value) === String(rowValue[key])\n            );\n          })\n          .every((x) => x);\n\n      return isValidSearchValue && isValidFilterValue ? reportRow : [];\n    });\n    // must recalculate parent for expandable table content whenever the array size changes\n    builtRows.forEach((row, index) =>\n      row.parent ? (row.parent = index - 1) : null\n    );\n\n    return builtRows;\n  };\n\n  const onSort = (_e, index, direction) => {\n    const sortedReports = {\n      2: 'description',\n      3: 'created_at',\n      4: 'total_risk',\n    };\n    const sort = () =>\n      activeReports\n        .concat()\n        .sort((firstItem, secondItem) =>\n          firstItem[sortedReports[index]] > secondItem[sortedReports[index]]\n            ? 1\n            : secondItem[sortedReports[index]] > firstItem[sortedReports[index]]\n            ? -1\n            : 0\n        );\n    const sortedReportsDirectional =\n      direction === SortByDirection.asc ? sort() : sort().reverse();\n\n    setActiveReports(sortedReportsDirectional);\n    setSortBy({\n      index,\n      direction,\n    });\n    setRows(buildRows(sortedReportsDirectional, filters, rows, searchValue));\n  };\n\n  const onRowSelect = (_e, isSelected, rowId) =>\n    setRows(\n      buildRows(\n        activeReports,\n        filters,\n        rows.map((row, index) =>\n          index === rowId ? { ...row, selected: isSelected } : row\n        ),\n        searchValue\n      )\n    );\n\n  const getSelectedItems = (rows) => rows.filter((entity) => entity.selected);\n  const selectedItemsLength = getSelectedItems(rows).length;\n\n  const onBulkSelect = (isSelected) => {\n    setIsSelected(isSelected);\n    setRows(\n      buildRows(\n        activeReports,\n        filters,\n        rows.map((row, index) =>\n          index % 2 === 0 ? { ...row, selected: isSelected } : row\n        ),\n        searchValue\n      )\n    );\n  };\n\n  const bulkSelect = {\n    items: [\n      {\n        title: 'Select none',\n        onClick: () => onBulkSelect(false),\n      },\n      {\n        title: 'Select all',\n        onClick: () => onBulkSelect(true),\n      },\n    ],\n    count: selectedItemsLength,\n    checked: isSelected,\n    onSelect: () => onBulkSelect(!isSelected),\n  };\n\n  const onInputChange = (value) => {\n    const builtRows = buildRows(activeReports, filters, rows, value);\n    setSearchValue(value);\n    setRows(builtRows);\n  };\n\n  const onFilterChange = (param, values) => {\n    const removeFilterParam = (param) => {\n      const filter = { ...filters };\n      delete filter[param];\n      return filter;\n    };\n\n    const newFilters =\n      values.length > 0\n        ? { ...filters, ...{ [param]: values } }\n        : removeFilterParam(param);\n    setRows(buildRows(activeReports, newFilters, rows, searchValue));\n    setFilters(newFilters);\n  };\n\n  const filterConfigItems = [\n    {\n      label: 'description',\n      filterValues: {\n        key: 'text-filter',\n        onChange: (_e, value) => onInputChange(value),\n        value: searchValue,\n      },\n    },\n    {\n      label: FC.total_risk.title,\n      type: FC.total_risk.type,\n      id: FC.total_risk.urlParam,\n      value: `checkbox-${FC.total_risk.urlParam}`,\n      filterValues: {\n        key: `${FC.total_risk.urlParam}-filter`,\n        onChange: (_e, values) =>\n          onFilterChange(FC.total_risk.urlParam, values),\n        value: filters.total_risk,\n        items: FC.total_risk.values,\n      },\n    },\n  ];\n\n  const buildFilterChips = (filters) => {\n    const prunedFilters = Object.entries(filters);\n    let chips =\n      filters && prunedFilters.length > 0\n        ? prunedFilters.map((item) => {\n            const category = FC[item[0]];\n            const chips = item[1].map((value) => ({\n              name: category.values.find(\n                (values) => values.value === String(value)\n              ).label,\n              value,\n            }));\n            return {\n              category: capitalize(category.title),\n              chips,\n              urlParam: category.urlParam,\n            };\n          })\n        : [];\n    searchValue.length > 0 &&\n      chips.push({\n        category: 'Name',\n        chips: [{ name: searchValue, value: searchValue }],\n      });\n    return chips;\n  };\n\n  const onChipDelete = (_e, itemsToRemove, isAll) => {\n    if (isAll) {\n      setRows(buildRows(activeReports, {}, rows, ''));\n      setFilters({});\n      setSearchValue('');\n    } else {\n      itemsToRemove.map((item) => {\n        if (item.category === 'Name') {\n          setRows(buildRows(activeReports, filters, rows, ''));\n          setSearchValue('');\n        } else {\n          onFilterChange(\n            item.urlParam,\n            filters[item.urlParam].filter(\n              (value) => String(value) !== String(item.chips[0].value)\n            )\n          );\n        }\n      });\n    }\n  };\n\n  const activeFiltersConfig = {\n    deleteTitle: intl.formatMessage(messages.resetFilters),\n    filters: buildFilterChips(filters),\n    onDelete: onChipDelete,\n  };\n\n  useEffect(() => {\n    const activeReportsData = reports;\n    setActiveReports(activeReportsData);\n    setRows(buildRows(activeReportsData, filters, rows, searchValue));\n  }, []);\n\n  return (\n    <div>\n      <PrimaryToolbar\n        actionsConfig={{ actions }}\n        bulkSelect={bulkSelect}\n        filterConfig={{ items: filterConfigItems }}\n        pagination={\n          <React.Fragment>\n            {results === 1\n              ? `${results} ${intl.formatMessage(messages.recommendation)}`\n              : `${results} ${intl.formatMessage(messages.recommendations)}`}\n          </React.Fragment>\n        }\n        activeFiltersConfig={activeFiltersConfig}\n      />\n      {activeReports.length > 0 ? (\n        <React.Fragment>\n          <Table\n            aria-label={'Cluster recommendations table'}\n            onSelect={onRowSelect}\n            onCollapse={handleOnCollapse}\n            rows={rows}\n            cells={cols}\n            sortBy={sortBy}\n            canSelectAll={false}\n            onSort={onSort}\n            variant={TableVariant.compact}\n            isStickyHeader\n          >\n            <TableHeader />\n            <TableBody />\n          </Table>\n          {results === 0 && (\n            <Card>\n              <CardBody>\n                <MessageState\n                  title={intl.formatMessage(messages.noMatchingRecommendations)}\n                  text={intl.formatMessage(\n                    messages.noMatchingRecommendationsDesc\n                  )}\n                />\n              </CardBody>\n            </Card>\n          )}\n        </React.Fragment>\n      ) : (\n        // ? Welcome to Insights feature for novice clusters with disabled Insights?\n        <Card>\n          <CardBody>\n            <MessageState\n              icon={CheckIcon}\n              iconClass=\"ins-c-insights__check\"\n              title={intl.formatMessage(messages.noRecommendations)}\n              text={intl.formatMessage(messages.noRecommendationsDesc)}\n            />\n          </CardBody>\n        </Card>\n      )}\n    </div>\n  );\n};\n\nClusterRules.propTypes = {\n  reports: PropTypes.array.isRequired,\n};\n\nClusterRules.defaultProps = {\n  reports: [],\n};\n\nexport default ClusterRules;\n","import React, { useCallback, useEffect, useState } from 'react';\n\nimport { Breadcrumb } from '@patternfly/react-core/dist/js/components/Breadcrumb/Breadcrumb';\nimport { BreadcrumbItem } from '@patternfly/react-core/dist/js/components/Breadcrumb/BreadcrumbItem';\nimport PropTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../Messages';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/RouterParams';\n\nconst Breadcrumbs = ({ current, match, intl }) => {\n  const [items, setItems] = useState([]);\n  const buildBreadcrumbs = useCallback(() => {\n    const crumbs = [];\n    const splitUrl = match.url.split('/');\n\n    // add base\n    crumbs.push({\n      title: `${intl.formatMessage(messages.insightsHeader)} ${splitUrl[1]}`,\n      navigate: `/${splitUrl[1]}`,\n    });\n\n    setItems(crumbs);\n  }, [intl, match.params.clusterId, match.url]);\n\n  useEffect(() => {\n    buildBreadcrumbs();\n  }, [buildBreadcrumbs, match.params.clusterId, match.url]);\n\n  return (\n    <React.Fragment>\n      {items.length > 0 && (\n        <Breadcrumb ouiaId=\"detail\">\n          {items.map((oneLink, key) => (\n            <BreadcrumbItem key={key}>\n              {/*<Link to={oneLink.navigate}>{oneLink.title}</Link>*/}\n              <span>{oneLink.title}</span>\n            </BreadcrumbItem>\n          ))}\n          <BreadcrumbItem isActive>{current}</BreadcrumbItem>\n        </Breadcrumb>\n      )}\n    </React.Fragment>\n  );\n};\n\nBreadcrumbs.propTypes = {\n  current: PropTypes.string,\n  match: PropTypes.object,\n  intl: PropTypes.any,\n};\n\nexport default injectIntl(routerParams(Breadcrumbs));\n","import { Card } from '@patternfly/react-core/dist/js/components/Card/Card';\nimport { CardBody } from '@patternfly/react-core/dist/js/components/Card/CardBody';\nimport { List } from 'react-content-loader';\nimport React from 'react';\nconst Loading = () => (\n  <Card>\n    <CardBody>\n      <List />\n    </CardBody>\n  </Card>\n);\n\nexport default Loading;\n","import './_Cluster.scss';\n\nimport React, { useEffect } from 'react';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { Grid, GridItem } from '@patternfly/react-core';\n\nimport { SearchIcon } from '@patternfly/react-icons';\nimport PageHeader from '@redhat-cloud-services/frontend-components/PageHeader';\nimport Main from '@redhat-cloud-services/frontend-components/Main';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/RouterParams';\n\nimport messages from '../../Messages';\nimport ClusterHeader from '../ClusterHeader/ClusterHeader';\nimport ClusterRules from '../ClusterRules/ClusterRules';\nimport Breadcrumbs from '../Breadcrumbs/Breadcrumbs';\nimport MessageState from '../MessageState/MessageState';\nimport Loading from '../Loading/Loading';\nimport { useGetClusterByIdQuery } from '../../Services/SmartProxy';\n\nconst Cluster = ({ match }) => {\n  const {\n    data,\n    isUninitialized,\n    isLoading,\n    isFetching,\n    isSuccess,\n    isError,\n    refetch,\n  } = useGetClusterByIdQuery(match.params.clusterId);\n  const intl = useIntl();\n\n  useEffect(() => {\n    if (match.params.clusterId) {\n      const subnav = `${match.params.clusterId} - ${intl.formatMessage(\n        messages.clusters\n      )}`;\n      document.title = intl.formatMessage(messages.documentTitle, { subnav });\n    }\n\n    refetch();\n  }, [match.params.clusterId]);\n\n  return (\n    <React.Fragment>\n      <PageHeader className=\"pf-m-light ins-inventory-detail\">\n        <Breadcrumbs current={match.params.clusterId} match={match} />\n        <ClusterHeader uuid={match.params.clusterId} />\n      </PageHeader>\n      <Main>\n        <React.Fragment>\n          {isError && (\n            <MessageState\n              title=\"No recommendations available\"\n              text=\"There was an error fetching recommendations for this cluster. Refresh your page to try again.\"\n              icon={SearchIcon}\n            />\n          )}\n          {(isUninitialized || isLoading || isFetching) && <Loading />}\n          {isSuccess && (\n            <Grid hasGutter>\n              <GridItem span={12}>\n                <ClusterRules reports={data?.report?.data} />\n              </GridItem>\n            </Grid>\n          )}\n        </React.Fragment>\n      </Main>\n    </React.Fragment>\n  );\n};\n\nCluster.propTypes = {\n  history: PropTypes.object,\n  match: PropTypes.any,\n};\n\nexport default routerParams(Cluster);\n"],"sourceRoot":""}