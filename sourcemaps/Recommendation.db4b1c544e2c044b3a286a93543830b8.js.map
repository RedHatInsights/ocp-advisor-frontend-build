{"version":3,"file":"js/Recommendation.10c468cccc760741a603.js","mappings":"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","sources":["webpack:///./src/Utilities/Rule.js","webpack:///./src/Components/AffectedClustersTable/index.js","webpack:///./src/Utilities/Api.js","webpack:///./src/Components/Recommendation/Recommendation.js","webpack:///./src/Components/Recommendation/index.js"],"sourcesContent":["const getPluginName = (rule) => rule.split('|')?.[0];\nconst getErrorKey = (rule) => rule.split('|')?.[1];\n// workaround. Should be removed when https://issues.redhat.com/browse/CCXDEV-5534 is done.\nconst adjustOCPRule = (rule, recId) => {\n  const errorKeyContent = rule?.error_keys?.[getErrorKey(recId)] || {};\n  const adjusted = {\n    ...rule,\n    ...errorKeyContent,\n    ...(errorKeyContent?.metadata || rule?.metadata || {}),\n  };\n  adjusted.impact = {\n    impact: adjusted.impact,\n  };\n  delete adjusted.metadata;\n  delete adjusted.error_keys;\n  return adjusted;\n};\n\nexport { getPluginName, getErrorKey, adjustOCPRule };\n","import React, { useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport PrimaryToolbar from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter/conditionalFilterConstants';\nimport { EmptyTable } from '@redhat-cloud-services/frontend-components/EmptyTable';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components/TableToolbar';\n\nimport { Card, CardBody } from '@patternfly/react-core/dist/js/components/Card';\nimport { sortable } from '@patternfly/react-table/dist/js/components/Table/utils/decorators/sortable';\nimport { Table } from '@patternfly/react-table/dist/js/components/Table/Table';\nimport { TableBody } from '@patternfly/react-table/dist/js/components/Table/Body';\nimport { TableHeader } from '@patternfly/react-table/dist/js/components/Table/Header';\nimport { Bullseye } from '@patternfly/react-core/dist/js/layouts/Bullseye';\nimport {\n  Pagination,\n  PaginationVariant,\n} from '@patternfly/react-core/dist/js/components/Pagination/Pagination';\n\nimport {\n  ErrorState,\n  NoAffectedClusters,\n  NoMatchingClusters,\n} from '../MessageState/EmptyStates';\nimport { updateAffectedClustersFilters } from '../../Services/Filters';\nimport Loading from '../Loading/Loading';\nimport { useGetAffectedClustersQuery } from '../../Services/SmartProxy';\n\nconst AffectedClustersTable = () => {\n  const affectedClusters = useGetAffectedClustersQuery(\n    useParams().recommendationId\n  );\n  const dispatch = useDispatch();\n  const filters = useSelector(({ filters }) => filters.affectedClustersState);\n  const perPage = Number(filters.limit);\n  const page = filters.offset / filters.limit + 1;\n  const setFilters = (filters) =>\n    dispatch(updateAffectedClustersFilters(filters));\n  const {\n    isError,\n    isUninitialized,\n    isFetching,\n    isSuccess,\n    data: rows = [],\n  } = affectedClusters;\n  const [filteredRows, setFilteredRows] = useState([]);\n  const [displayedRows, setDisplayedRows] = useState([]);\n  const [chips, setChips] = useState([]);\n\n  const updateNameChip = (chips, newValue) => {\n    const newChips = chips;\n    const nameCategoryIndex = newChips.findIndex(\n      (chip) => chip.category === 'Name'\n    );\n    if (newValue === '') {\n      newChips.splice(nameCategoryIndex);\n    } else {\n      if (nameCategoryIndex === -1) {\n        newChips.push({ category: 'Name', chips: [{ name: newValue }] });\n      } else {\n        newChips[nameCategoryIndex] = {\n          category: 'Name',\n          chips: [{ name: newValue }],\n        };\n      }\n    }\n    return newChips;\n  };\n\n  const onChipDelete = () => {\n    // right now, only designed to treat the Name (text) filter\n    const newFilters = { ...filters, text: '' };\n    setFilters(newFilters);\n  };\n\n  const onNameFilterChange = (value) => {\n    const newFilters = { ...filters, text: value, offset: 0 };\n    setFilters(newFilters);\n  };\n\n  const filterConfig = {\n    items: [\n      {\n        label: 'Name',\n        type: conditionalFilterType.text,\n        filterValues: {\n          key: 'name-filter',\n          onChange: (_e, value) => onNameFilterChange(value),\n          value: filters.text,\n        },\n      },\n    ],\n    isDisabled: isError || (rows && rows.length === 0),\n  };\n\n  const onSort = (_e, index, direction) => {\n    setFilters({ ...filters, sortIndex: index, sortDirection: direction });\n  };\n\n  const onSetPage = (_e, pageNumber) => {\n    const newOffset = pageNumber * filters.limit - filters.limit;\n    setFilters({ ...filters, offset: newOffset });\n  };\n\n  const onSetPerPage = (_e, perPage) => {\n    setFilters({ ...filters, limit: perPage });\n  };\n\n  // constructs array of rows (from the initial data) checking currently applied filters\n  const buildFilteredRows = (allRows, filters) => {\n    const rows = allRows;\n    return rows\n      .filter((row) => {\n        // further filters conditions will be added soon\n        return row?.cluster.includes(filters.text);\n      })\n      .sort((a, b) => {\n        if (filters.sortDirection === 'asc') {\n          return a?.cluster.localeCompare(b?.cluster);\n        }\n        return b?.cluster.localeCompare(a?.cluster);\n      });\n  };\n\n  const buildDisplayedRows = (rows) => {\n    return rows.slice(perPage * (page - 1), perPage * (page - 1) + perPage);\n  };\n\n  useEffect(() => {\n    const newFilteredRows = buildFilteredRows(rows, filters);\n    const newDisplayedRows = buildDisplayedRows(newFilteredRows);\n    const newChips = updateNameChip(chips, filters.text);\n    setFilteredRows(newFilteredRows);\n    setDisplayedRows(newDisplayedRows);\n    setChips(newChips);\n  }, [affectedClusters, filters]);\n\n  return (\n    <div id=\"affected-list-table\">\n      <PrimaryToolbar\n        filterConfig={filterConfig}\n        pagination={{\n          itemCount: filteredRows.length,\n          page,\n          perPage,\n          onSetPage: onSetPage,\n          onPerPageSelect: onSetPerPage,\n        }}\n        activeFiltersConfig={{\n          filters: chips,\n          onDelete: onChipDelete,\n        }}\n      />\n      {(isUninitialized || isFetching) && <Loading />}\n      {isError && (\n        <Card>\n          <CardBody>\n            <ErrorState />\n          </CardBody>\n        </Card>\n      )}\n      {isSuccess && rows.length === 0 && (\n        <Card>\n          <CardBody>\n            <NoAffectedClusters />\n          </CardBody>\n        </Card>\n      )}\n      {isSuccess &&\n        rows.length > 0 &&\n        (filteredRows.length > 0 ? (\n          <Table\n            aria-label=\"Table of affected clusters\"\n            ouiaId=\"affectedClustersTable\"\n            variant=\"compact\"\n            cells={[{ title: 'Name', transforms: [sortable] }]}\n            rows={displayedRows.map((c) => ({\n              cells: [\n                <span key={c?.cluter}>\n                  <Link to={`/clusters/${c?.cluster}`}>{c?.cluster}</Link>\n                </span>,\n              ],\n            }))}\n            sortBy={{\n              index: filters.sortIndex,\n              direction: filters.sortDirection,\n            }}\n            onSort={onSort}\n          >\n            <TableHeader />\n            <TableBody />\n          </Table>\n        ) : (\n          <EmptyTable>\n            <Bullseye>\n              <NoMatchingClusters />\n            </Bullseye>\n          </EmptyTable>\n        ))}\n      <TableToolbar isFooter className=\"ins-c-inventory__table--toolbar\">\n        <Pagination\n          variant={PaginationVariant.bottom}\n          itemCount={filteredRows.length}\n          page={page}\n          perPage={perPage}\n          onSetPage={onSetPage}\n          onPerPageSelect={onSetPerPage}\n          onPageInput={onSetPage}\n        />\n      </TableToolbar>\n    </div>\n  );\n};\n\nexport default AffectedClustersTable;\n","import axios from 'axios';\n\nconst Post = (url, headers = {}, data = {}) =>\n  axios.post(url, data, { headers });\n\nexport { Post };\n","import './Recommendation.scss';\n\nimport React from 'react';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\n\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { Label } from '@patternfly/react-core/dist/js/components/Label/Label';\nimport { Title } from '@patternfly/react-core/dist/js/components/Title/Title';\nimport { LabelGroup } from '@patternfly/react-core/dist/js/components/LabelGroup';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\nimport { global_danger_color_100 as globalDangerColor100 } from '@patternfly/react-tokens/dist/js/global_danger_color_100';\n\nimport Breadcrumbs from '../Breadcrumbs';\nimport RuleLabels from '../RuleLabels/RuleLabels';\nimport { FILTER_CATEGORIES, RULE_CATEGORIES } from '../../AppConstants';\nimport messages from '../../Messages';\nimport RuleDetails from './RuleDetails';\nimport Loading from '../Loading/Loading';\nimport { adjustOCPRule } from '../../Utilities/Rule';\nimport MessageState from '../MessageState/MessageState';\nimport AffectedClustersTable from '../AffectedClustersTable';\nimport { Post } from '../../Utilities/Api';\nimport { BASE_URL } from '../../Services/SmartProxy';\n\nconst Recommendation = ({ rule, match }) => {\n  const intl = useIntl();\n  const { isError, isUninitialized, isLoading, isFetching, isSuccess, data } =\n    rule;\n  const recId = match.params.recommendationId;\n  const content = isSuccess ? adjustOCPRule(data.content, recId) : undefined;\n\n  return (\n    <React.Fragment>\n      {(isUninitialized || isLoading || isFetching) && (\n        <Main>\n          <Loading />\n        </Main>\n      )}\n      {isError && (\n        <Main>\n          <MessageState\n            title={intl.formatMessage(messages.unableToConnect)}\n            text={intl.formatMessage(messages.unableToConnectDesc)}\n            icon={ExclamationCircleIcon}\n            iconStyle={{ color: globalDangerColor100.value }}\n          />\n        </Main>\n      )}\n      {!(isUninitialized || isLoading || isFetching) && isSuccess && (\n        <React.Fragment>\n          <PageHeader className=\"pageHeaderOverride\">\n            <Breadcrumbs current={content?.description || recId} />\n          </PageHeader>\n          <Main className=\"pf-m-light pf-u-pt-sm\">\n            <RuleDetails\n              isOpenShift\n              isDetailsPage\n              rule={content}\n              header={\n                <React.Fragment>\n                  <PageHeaderTitle\n                    title={\n                      <React.Fragment>\n                        {content.description} <RuleLabels rule={content} />\n                      </React.Fragment>\n                    }\n                  />\n                  <p>\n                    {intl.formatMessage(messages.rulesDetailsPubishdate, {\n                      date: (\n                        <DateFormat\n                          date={new Date(content.publish_date)}\n                          type=\"onlyDate\"\n                        />\n                      ),\n                    })}\n                    {content.tags &&\n                      (Array.isArray(content.tags) ? (\n                        <LabelGroup className=\"categoryLabels\" numLabels={1}>\n                          {content.tags.reduce((labels, tag) => {\n                            if (RULE_CATEGORIES[tag]) {\n                              labels.push(\n                                <Label key={`label-${tag}`} color=\"blue\">\n                                  {\n                                    FILTER_CATEGORIES.category.values[\n                                      RULE_CATEGORIES[tag] - 1\n                                    ].label\n                                  }\n                                </Label>\n                              );\n                            }\n                            return labels;\n                          }, [])}\n                        </LabelGroup>\n                      ) : (\n                        <Label>{content.tags}</Label>\n                      ))}\n                  </p>\n                </React.Fragment>\n              }\n              onFeedbackChanged={async (rule, rating) =>\n                await Post(`${BASE_URL}/v2/rating`, {}, { rule, rating })\n              }\n            />\n          </Main>\n          <Main>\n            <React.Fragment>\n              <React.Fragment>\n                <Title className=\"titleOverride\" headingLevel=\"h3\" size=\"2xl\">\n                  {intl.formatMessage(messages.affectedClusters)}\n                </Title>\n                <AffectedClustersTable />\n              </React.Fragment>\n            </React.Fragment>\n          </Main>\n        </React.Fragment>\n      )}\n    </React.Fragment>\n  );\n};\n\nRecommendation.propTypes = {\n  rule: PropTypes.object.isRequired,\n  match: PropTypes.object.isRequired,\n};\n\nexport { Recommendation };\n","import React, { useEffect } from 'react';\n\nimport { useParams, useRouteMatch } from 'react-router-dom';\n\nimport { Recommendation } from './Recommendation';\nimport { useGetRuleByIdQuery } from '../../Services/SmartProxy';\n\nconst RecommendationWrapper = () => {\n  const rule = useGetRuleByIdQuery(useParams().recommendationId);\n\n  useEffect(() => {\n    rule.refetch();\n  }, [useParams().recommendationId]);\n\n  return <Recommendation rule={rule} match={useRouteMatch()} />;\n};\n\nexport default RecommendationWrapper;\n"],"names":["affectedClusters","useGetAffectedClustersQuery","useParams","recommendationId","dispatch","useDispatch","filters","useSelector","affectedClustersState","perPage","Number","limit","page","offset","setFilters","updateAffectedClustersFilters","isError","isUninitialized","isFetching","isSuccess","data","rows","useState","filteredRows","setFilteredRows","displayedRows","setDisplayedRows","chips","setChips","filterConfig","items","label","type","conditionalFilterType","filterValues","key","onChange","_e","value","newFilters","text","onNameFilterChange","isDisabled","length","onSetPage","pageNumber","newOffset","onSetPerPage","useEffect","newFilteredRows","allRows","filter","row","cluster","includes","sort","a","b","sortDirection","localeCompare","buildFilteredRows","newDisplayedRows","slice","buildDisplayedRows","newChips","newValue","nameCategoryIndex","findIndex","chip","category","splice","push","name","updateNameChip","id","PrimaryToolbar","pagination","itemCount","onPerPageSelect","activeFiltersConfig","onDelete","Loading","Card","CardBody","Table","ouiaId","variant","cells","title","transforms","sortable","map","c","cluter","Link","to","sortBy","index","sortIndex","direction","onSort","EmptyTable","Bullseye","TableToolbar","isFooter","className","Pagination","PaginationVariant","onPageInput","Post","url","headers","axios","Recommendation","rule","match","intl","useIntl","isLoading","recId","params","content","errorKeyContent","error_keys","split","getErrorKey","adjusted","metadata","impact","adjustOCPRule","undefined","Main","MessageState","formatMessage","messages","icon","ExclamationCircleIcon","iconStyle","color","globalDangerColor100","PageHeader","Breadcrumbs","current","description","RuleDetails","isOpenShift","isDetailsPage","header","PageHeaderTitle","RuleLabels","date","DateFormat","Date","publish_date","tags","Array","isArray","LabelGroup","numLabels","reduce","labels","tag","RULE_CATEGORIES","Label","FILTER_CATEGORIES","onFeedbackChanged","rating","BASE_URL","Title","headingLevel","size","propTypes","PropTypes","useGetRuleByIdQuery","refetch","useRouteMatch"],"sourceRoot":""}