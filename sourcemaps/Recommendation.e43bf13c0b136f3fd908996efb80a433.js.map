{"version":3,"file":"js/Recommendation.f12bba01d8fd7f32e6f5.js","mappings":"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","sources":["webpack:///./src/Components/AffectedClustersTable/AffectedClustersTable.js","webpack:///./src/Components/Modals/ViewHostAcks.js","webpack:///./src/Components/Recommendation/Recommendation.js","webpack:///./src/Components/Recommendation/index.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter/conditionalFilterConstants';\nimport PrimaryToolbar from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport { EmptyTable } from '@redhat-cloud-services/frontend-components/EmptyTable';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components/TableToolbar';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { Card, CardBody } from '@patternfly/react-core/dist/js/components/Card';\nimport { Table } from '@patternfly/react-table/dist/js/components/Table/Table';\nimport { TableBody } from '@patternfly/react-table/dist/js/components/Table/Body';\nimport { TableHeader } from '@patternfly/react-table/dist/js/components/Table/Header';\nimport { Bullseye } from '@patternfly/react-core/dist/js/layouts/Bullseye';\nimport { Tooltip } from '@patternfly/react-core/dist/js/components/Tooltip';\nimport {\n  Pagination,\n  PaginationVariant,\n} from '@patternfly/react-core/dist/js/components/Pagination/Pagination';\n\nimport {\n  ErrorState,\n  NoAffectedClusters,\n  NoMatchingClusters,\n} from '../MessageState/EmptyStates';\nimport {\n  AFFECTED_CLUSTERS_COLUMNS,\n  AFFECTED_CLUSTERS_LAST_SEEN,\n  AFFECTED_CLUSTERS_NAME_CELL,\n} from '../../AppConstants';\nimport Loading from '../Loading/Loading';\nimport { updateAffectedClustersFilters } from '../../Services/Filters';\nimport messages from '../../Messages';\nimport DisableRule from '../Modals/DisableRule';\n\nconst AffectedClustersTable = ({ query, rule, afterDisableFn }) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n\n  const [filteredRows, setFilteredRows] = useState([]);\n  const [displayedRows, setDisplayedRows] = useState([]);\n  const [disableRuleModalOpen, setDisableRuleModalOpen] = useState(false);\n  const [chips, setChips] = useState([]);\n  const [selected, setSelected] = useState([]);\n  const [host, setHost] = useState(undefined);\n\n  const {\n    isError,\n    isUninitialized,\n    isFetching,\n    isSuccess,\n    /* the response contains two lists: `disabled` has clusters\n      for which the rec is disabled (acked), and `enable` contains\n       clusters that are affected by the rec */\n    data = { disabled: [], enabled: [] },\n  } = query;\n  const rows = data.enabled;\n  const filters = useSelector(({ filters }) => filters.affectedClustersState);\n  const perPage = filters.limit;\n  const page = filters.offset / filters.limit + 1;\n  const allSelected = selected.length === filteredRows.length;\n\n  const updateFilters = (filters) =>\n    dispatch(updateAffectedClustersFilters(filters));\n\n  const updateNameChip = (chips, newValue) => {\n    const newChips = chips;\n    const nameCategoryIndex = newChips.findIndex(\n      (chip) => chip.category === 'Name'\n    );\n    if (newValue === '') {\n      newChips.splice(nameCategoryIndex);\n    } else {\n      if (nameCategoryIndex === -1) {\n        newChips.push({ category: 'Name', chips: [{ name: newValue }] });\n      } else {\n        newChips[nameCategoryIndex] = {\n          category: 'Name',\n          chips: [{ name: newValue }],\n        };\n      }\n    }\n    return newChips;\n  };\n\n  const onChipDelete = () => {\n    // right now, only designed to treat the Name (text) filter\n    const newFilters = { ...filters, text: '' };\n    updateFilters(newFilters);\n  };\n\n  const onNameFilterChange = (value) => {\n    const newFilters = { ...filters, text: value, offset: 0 };\n    updateFilters(newFilters);\n  };\n\n  const filterConfig = {\n    items: [\n      {\n        label: 'Name',\n        placeholder: 'Filter by name',\n        type: conditionalFilterType.text,\n        filterValues: {\n          id: 'name-filter',\n          key: 'name-filter',\n          onChange: (_e, value) => onNameFilterChange(value),\n          value: filters.text,\n        },\n      },\n    ],\n    isDisabled: isError || (rows && rows.length === 0),\n  };\n\n  const onSort = (_e, index, direction) => {\n    updateFilters({ ...filters, sortIndex: index, sortDirection: direction });\n  };\n\n  const onSetPage = (_e, pageNumber) => {\n    const newOffset = pageNumber * filters.limit - filters.limit;\n    updateFilters({ ...filters, offset: newOffset });\n  };\n\n  const onSetPerPage = (_e, perPage) => {\n    updateFilters({ ...filters, limit: perPage });\n  };\n\n  // constructs array of rows (from the initial data) checking currently applied filters\n  const buildFilteredRows = (allRows, filters) => {\n    const rows = allRows.map((r) => ({\n      id: r.cluster,\n      cells: [r?.cluster_name || r.cluster],\n      last_checked_at: r?.last_checked_at,\n    }));\n    return rows\n      .filter((row) => {\n        return row?.cells[0].toLowerCase().includes(filters.text.toLowerCase());\n      })\n      .sort((a, b) => {\n        let fst, snd;\n        const d = filters.sortDirection === 'asc' ? 1 : -1;\n        switch (filters.sortIndex) {\n          case AFFECTED_CLUSTERS_NAME_CELL:\n            if (filters.sortDirection === 'asc') {\n              return a?.cells[0].localeCompare(b?.cells[0]);\n            }\n            return b?.cells[0].localeCompare(a?.cells[0]);\n          case AFFECTED_CLUSTERS_LAST_SEEN:\n            fst = new Date(a.last_checked_at || 0);\n            snd = new Date(b.last_checked_at || 0);\n            return fst > snd ? d : snd > fst ? -d : 0;\n        }\n      });\n  };\n\n  const buildDisplayedRows = (rows) => {\n    return rows\n      .slice(perPage * (page - 1), perPage * (page - 1) + perPage)\n      .map((r) => ({\n        ...r,\n        cells: [\n          <span key={r.id}>\n            <Link to={`/clusters/${r.id}?first=${rule.rule_id}`}>\n              {r.cells[0]}\n            </Link>\n          </span>,\n          <span key={r.id}>\n            {r.last_checked_at ? (\n              <DateFormat\n                extraTitle={`${intl.formatMessage(messages.lastSeen)}: `}\n                date={r.last_checked_at}\n                variant=\"relative\"\n              />\n            ) : (\n              <Tooltip\n                key={r.id}\n                content={\n                  <span>\n                    {intl.formatMessage(messages.lastSeen) + ': '}\n                    {intl.formatMessage(messages.nA)}\n                  </span>\n                }\n              >\n                <span>{intl.formatMessage(messages.nA)}</span>\n              </Tooltip>\n            )}\n          </span>,\n        ],\n      }));\n  };\n\n  // if rowId === -1, then select all rows\n  const onSelect = (event, isSelected, rowId) => {\n    let rows;\n    rowId === -1\n      ? (rows = filteredRows.map((r) => ({ ...r, selected: isSelected })))\n      : (rows = filteredRows.map((r, i) => ({\n          ...r,\n          selected: i === rowId ? isSelected : r.selected,\n        })));\n    setSelected(rows.filter((r) => r.selected));\n    setFilteredRows(rows);\n    setDisplayedRows(buildDisplayedRows(rows));\n  };\n\n  useEffect(() => {\n    const newFilteredRows = buildFilteredRows(rows, filters);\n    const newDisplayedRows = buildDisplayedRows(newFilteredRows);\n    const newChips = updateNameChip(chips, filters.text);\n    setFilteredRows(newFilteredRows);\n    setDisplayedRows(newDisplayedRows);\n    setChips(newChips);\n  }, [query, filters]);\n\n  const handleModalToggle = (disableRuleModalOpen, host = undefined) => {\n    setDisableRuleModalOpen(disableRuleModalOpen);\n    setHost(host);\n  };\n\n  return (\n    <div id=\"affected-list-table\">\n      {disableRuleModalOpen && (\n        <DisableRule\n          handleModalToggle={handleModalToggle}\n          isModalOpen={disableRuleModalOpen}\n          rule={rule}\n          afterFn={afterDisableFn}\n          hosts={selected}\n          host={host}\n        />\n      )}\n      <PrimaryToolbar\n        filterConfig={filterConfig}\n        pagination={{\n          itemCount: filteredRows.length,\n          page,\n          perPage,\n          onSetPage: onSetPage,\n          onPerPageSelect: onSetPerPage,\n          ouiaId: 'pager',\n        }}\n        activeFiltersConfig={\n          isError || (rows && rows.length === 0)\n            ? undefined\n            : {\n                filters: chips,\n                onDelete: onChipDelete,\n              }\n        }\n        bulkSelect={{\n          count: selected.length,\n          items: [\n            {\n              title: intl.formatMessage(messages.selectNone),\n              onClick: (event) => onSelect(event, false, -1),\n            },\n            {\n              title: intl.formatMessage(messages.selectAll, {\n                items: filteredRows?.length || 0,\n              }),\n              onClick: (event) => onSelect(event, true, -1),\n            },\n          ],\n          checked: allSelected,\n          onSelect: (event) =>\n            allSelected\n              ? onSelect(event, false, -1)\n              : onSelect(event, true, -1),\n          ouiaId: 'clusters-selector',\n        }}\n        actionsConfig={{\n          actions: [\n            '',\n            {\n              label: intl.formatMessage(messages.disableRuleForClusters),\n              props: { isDisabled: selected.length === 0 },\n              onClick: () => handleModalToggle(true),\n            },\n          ],\n        }}\n      />\n      <Table\n        aria-label=\"Table of affected clusters\"\n        ouiaId=\"clusters\"\n        variant=\"compact\"\n        cells={AFFECTED_CLUSTERS_COLUMNS}\n        rows={displayedRows}\n        sortBy={{\n          index: filters.sortIndex,\n          direction: filters.sortDirection,\n        }}\n        onSort={onSort}\n        canSelectAll={false}\n        onSelect={displayedRows?.length > 0 ? onSelect : undefined}\n        actions={[\n          {\n            title: 'Disable recommendation for cluster',\n            onClick: (event, rowIndex) => {\n              return handleModalToggle(true, filteredRows[rowIndex].id);\n            },\n          },\n        ]}\n      >\n        <TableHeader />\n        {(isUninitialized || isFetching) && <Loading />}\n        {isError && (\n          <Card id=\"error-state-message\" ouiaId=\"error-state\">\n            <CardBody>\n              <ErrorState />\n            </CardBody>\n          </Card>\n        )}\n        {isSuccess && rows.length === 0 && (\n          <Card id=\"empty-state-message\" ouiaId=\"empty-state\">\n            <CardBody>\n              <NoAffectedClusters />\n            </CardBody>\n          </Card>\n        )}\n        {isSuccess &&\n          rows.length > 0 &&\n          (filteredRows.length > 0 ? (\n            <TableBody />\n          ) : (\n            <EmptyTable>\n              <Bullseye>\n                <NoMatchingClusters />\n              </Bullseye>\n            </EmptyTable>\n          ))}\n      </Table>\n      <TableToolbar isFooter className=\"ins-c-inventory__table--toolbar\">\n        <Pagination\n          variant={PaginationVariant.bottom}\n          itemCount={filteredRows.length}\n          page={page}\n          perPage={perPage}\n          onSetPage={onSetPage}\n          onPerPageSelect={onSetPerPage}\n          onPageInput={onSetPage}\n          ouiaId=\"pager\"\n        />\n      </TableToolbar>\n    </div>\n  );\n};\n\nAffectedClustersTable.propTypes = {\n  query: PropTypes.shape({\n    isError: PropTypes.bool.isRequired,\n    isUninitialized: PropTypes.bool.isRequired,\n    isFetching: PropTypes.bool.isRequired,\n    isSuccess: PropTypes.bool.isRequired,\n    data: PropTypes.array,\n  }),\n  rule: PropTypes.object,\n  afterDisableFn: PropTypes.func,\n};\n\nexport { AffectedClustersTable };\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { List } from 'react-content-loader';\nimport { useIntl } from 'react-intl';\nimport { useDispatch } from 'react-redux';\n\nimport {\n  Table,\n  TableBody,\n  TableHeader,\n  cellWidth,\n} from '@patternfly/react-table';\nimport { Button } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { Modal } from '@patternfly/react-core/dist/js/components/Modal/Modal';\nimport OutlinedBellIcon from '@patternfly/react-icons/dist/js/icons/outlined-bell-icon';\nimport { addNotification as notification } from '@redhat-cloud-services/frontend-components-notifications/';\n\nimport messages from '../../Messages';\nimport { enableRuleForCluster } from '../../Services/Acks';\n\nconst ViewHostAcks = ({\n  handleModalToggle,\n  isModalOpen,\n  clusters,\n  recId,\n  afterFn,\n}) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const addNotification = (data) => dispatch(notification(data));\n  const { data, isFetching, isLoading, refetch } = clusters;\n  const hostAcks = data?.disabled || [];\n  const [rows, setRows] = useState([]);\n  const [unclean, setUnclean] = useState(false);\n\n  const columns = [\n    {\n      title: intl.formatMessage(messages.clusterName),\n\n      transforms: [cellWidth(50)],\n    },\n    {\n      title: intl.formatMessage(messages.justificationNote),\n\n      transforms: [cellWidth(25)],\n    },\n    {\n      title: intl.formatMessage(messages.dateDisabled),\n\n      transforms: [cellWidth(15)],\n    },\n    '',\n  ];\n\n  const deleteAck = async (host) => {\n    try {\n      await enableRuleForCluster({ uuid: host.cluster_id, recId });\n      refetch();\n      setUnclean(true);\n    } catch (error) {\n      handleModalToggle(false);\n      addNotification({\n        variant: 'danger',\n        dismissable: true,\n        title: intl.formatMessage(messages.error),\n        description: `${error}`,\n      });\n    }\n  };\n\n  useEffect(() => {\n    const rows = hostAcks?.map((item) => ({\n      cells: [\n        item.cluster_name || item.cluster_id,\n        item.justification || intl.formatMessage(messages.none),\n        {\n          title: (\n            <DateFormat date={new Date(item.disabled_at)} type=\"onlyDate\" />\n          ),\n        },\n        {\n          title: (\n            <Button\n              key={item.cluster_id}\n              isInline\n              variant=\"link\"\n              onClick={() => deleteAck(item)}\n            >\n              <OutlinedBellIcon size=\"sm\" />\n              {` ${intl.formatMessage(messages.enable)}`}\n            </Button>\n          ),\n        },\n      ],\n    }));\n\n    if (!isLoading && hostAcks.length === 0) {\n      afterFn();\n      handleModalToggle(false);\n    }\n    setRows(rows);\n  }, [hostAcks]);\n\n  return (\n    <Modal\n      width={'75%'}\n      title={intl.formatMessage(messages.hostAckModalTitle)}\n      isOpen={isModalOpen}\n      onClose={() => {\n        unclean && afterFn();\n        handleModalToggle(false);\n      }}\n    >\n      {!isFetching ? (\n        <Table aria-label=\"host-ack-table\" rows={rows} cells={columns}>\n          <TableHeader />\n          <TableBody />\n        </Table>\n      ) : (\n        <Table\n          aria-label=\"host-ack-table\"\n          rows={[\n            {\n              cells: [{ props: { colSpan: 3 }, title: <List /> }],\n            },\n          ]}\n          cells={columns}\n        >\n          <TableHeader />\n          <TableBody />\n        </Table>\n      )}\n    </Modal>\n  );\n};\n\nViewHostAcks.propTypes = {\n  isModalOpen: PropTypes.bool,\n  handleModalToggle: PropTypes.func,\n  clusters: PropTypes.object,\n  recId: PropTypes.string,\n  afterFn: PropTypes.func,\n};\n\nViewHostAcks.defaultProps = {\n  isModalOpen: false,\n  handleModalToggle: () => undefined,\n  clusters: {},\n  recId: '',\n  afterFn: () => undefined,\n};\n\nexport default ViewHostAcks;\n","import './Recommendation.scss';\n\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\n\nimport {\n  Card,\n  CardBody,\n  CardFooter,\n  CardHeader,\n} from '@patternfly/react-core/dist/js/components/Card';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { Label } from '@patternfly/react-core/dist/js/components/Label/Label';\nimport { Title } from '@patternfly/react-core/dist/js/components/Title/Title';\nimport { LabelGroup } from '@patternfly/react-core/dist/js/components/LabelGroup';\nimport BellSlashIcon from '@patternfly/react-icons/dist/js/icons/bell-slash-icon';\nimport CaretDownIcon from '@patternfly/react-icons/dist/js/icons/caret-down-icon';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { Button } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport { Dropdown } from '@patternfly/react-core/dist/js/components/Dropdown/Dropdown';\nimport { DropdownItem } from '@patternfly/react-core/dist/js/components/Dropdown/DropdownItem';\nimport { DropdownToggle } from '@patternfly/react-core/dist/js/components/Dropdown/DropdownToggle';\nimport { Flex } from '@patternfly/react-core/dist/js/layouts/Flex/Flex';\nimport { FlexItem } from '@patternfly/react-core/dist/js/layouts/Flex/FlexItem';\nimport { ErrorState } from '@redhat-cloud-services/frontend-components/ErrorState';\n\nimport Breadcrumbs from '../Breadcrumbs';\nimport RuleLabels from '../Labels/RuleLabels';\nimport { FILTER_CATEGORIES, RULE_CATEGORIES } from '../../AppConstants';\nimport messages from '../../Messages';\nimport RuleDetails from './RuleDetails';\nimport Loading from '../Loading/Loading';\nimport { adjustOCPRule } from '../../Utilities/Rule';\nimport MessageState from '../MessageState/MessageState';\nimport { AffectedClustersTable } from '../AffectedClustersTable/AffectedClustersTable';\nimport { Delete, Post } from '../../Utilities/Api';\nimport { BASE_URL } from '../../Services/SmartProxy';\nimport DisableRule from '../Modals/DisableRule';\nimport ViewHostAcks from '../Modals/ViewHostAcks';\nimport { OneLineLoader } from '../../Utilities/Loaders';\nimport { enableRuleForCluster } from '../../Services/Acks';\n\nconst Recommendation = ({ rule, ack, clusters, match }) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const notify = (data) => dispatch(addNotification(data));\n  const recId = match.params.recommendationId;\n  const [disableRuleModalOpen, setDisableRuleModalOpen] = useState(false);\n  const [actionsDropdownOpen, setActionsDropdownOpen] = useState(false);\n  const [viewSystemsModalOpen, setViewSystemsModalOpen] = useState(false);\n\n  // rule's info\n  const {\n    isError,\n    isUninitialized,\n    isLoading,\n    isFetching,\n    isSuccess,\n    data,\n    refetch,\n  } = rule;\n  // justification note, last time acknowledged, etc.\n  const { data: ackData, isFetching: ackIsFetching, refetch: refetchAck } = ack;\n  const ruleDate = new Date(ackData?.updated_at || ackData?.created_at);\n  // affected and acked clusters lists\n  const {\n    data: clustersData,\n    isFetching: clustersIsFetching,\n    refetch: refetchClusters,\n  } = clusters;\n\n  const content =\n    isSuccess && data ? adjustOCPRule(data.content, recId) : undefined;\n  const ackedClusters =\n    !clustersIsFetching && clustersData ? clustersData.disabled : undefined;\n\n  const afterDisableFn = async () => {\n    refetch();\n    refetchAck();\n    refetchClusters();\n  };\n\n  const handleModalToggle = (disableRuleModalOpen) => {\n    setDisableRuleModalOpen(disableRuleModalOpen);\n  };\n\n  const enableRecForHosts = async ({ uuids }) => {\n    try {\n      const requests = uuids.map((uuid) =>\n        enableRuleForCluster({ uuid, recId })\n      );\n      await Promise.all(requests);\n      refetch();\n      refetchAck();\n      refetchClusters();\n      notify({\n        variant: 'success',\n        timeout: true,\n        dismissable: true,\n        title: intl.formatMessage(messages.recSuccessfullyEnabledForCluster),\n      });\n    } catch (error) {\n      notify({\n        variant: 'danger',\n        dismissable: true,\n        title: intl.formatMessage(messages.error),\n        description: `${error}`,\n      });\n    }\n  };\n\n  const enableRule = async (rule) => {\n    try {\n      await Delete(`${BASE_URL}/v2/ack/${rule.data.content.rule_id}/`);\n      notify({\n        variant: 'success',\n        timeout: true,\n        dismissable: true,\n        title: intl.formatMessage(messages.recSuccessfullyEnabled),\n      });\n      refetch();\n    } catch (error) {\n      handleModalToggle(false);\n      notify({\n        variant: 'danger',\n        dismissable: true,\n        title: intl.formatMessage(messages.error),\n        description: `${error}`,\n      });\n    }\n  };\n\n  return (\n    <React.Fragment>\n      {viewSystemsModalOpen && (\n        <ViewHostAcks\n          handleModalToggle={(toggleModal) =>\n            setViewSystemsModalOpen(toggleModal)\n          }\n          isModalOpen={viewSystemsModalOpen}\n          clusters={clusters}\n          afterFn={() => refetchClusters()}\n          recId={recId}\n        />\n      )}\n      {disableRuleModalOpen && (\n        <DisableRule\n          handleModalToggle={handleModalToggle}\n          isModalOpen={disableRuleModalOpen}\n          rule={content}\n          afterFn={afterDisableFn}\n        />\n      )}\n      <PageHeader className=\"pageHeaderOverride\">\n        <Breadcrumbs current={content?.description || recId} />\n      </PageHeader>\n      {(isUninitialized || isLoading || isFetching) && (\n        <Main>\n          <Loading />\n        </Main>\n      )}\n      {isError && (\n        <Main>\n          <ErrorState />\n        </Main>\n      )}\n      {!(isUninitialized || isLoading || isFetching) && isSuccess && (\n        <React.Fragment>\n          <Main className=\"pf-m-light pf-u-pt-sm\">\n            <RuleDetails\n              isOpenShift\n              isDetailsPage\n              rule={content}\n              header={\n                <React.Fragment>\n                  <PageHeaderTitle\n                    title={\n                      <React.Fragment>\n                        {content.description} <RuleLabels rule={content} />\n                      </React.Fragment>\n                    }\n                  />\n                  <p>\n                    {intl.formatMessage(messages.rulesDetailsPubishdate, {\n                      date: (\n                        <DateFormat\n                          date={new Date(content.publish_date)}\n                          type=\"onlyDate\"\n                        />\n                      ),\n                    })}\n                    {content.tags &&\n                      (Array.isArray(content.tags) ? (\n                        <LabelGroup\n                          className=\"categoryLabels\"\n                          numLabels={1}\n                          isCompact\n                        >\n                          {content.tags.reduce((labels, tag) => {\n                            if (RULE_CATEGORIES[tag]) {\n                              labels.push(\n                                <Label\n                                  key={`label-${tag}`}\n                                  color=\"blue\"\n                                  isCompact\n                                >\n                                  {\n                                    FILTER_CATEGORIES.category.values[\n                                      RULE_CATEGORIES[tag] - 1\n                                    ].label\n                                  }\n                                </Label>\n                              );\n                            }\n                            return labels;\n                          }, [])}\n                        </LabelGroup>\n                      ) : (\n                        <Label isCompact>{content.tags}</Label>\n                      ))}\n                  </p>\n                </React.Fragment>\n              }\n              onFeedbackChanged={async (rule, rating) =>\n                await Post(`${BASE_URL}/v2/rating`, {}, { rule, rating })\n              }\n            >\n              <Flex>\n                <FlexItem align={{ default: 'alignRight' }}>\n                  <Dropdown\n                    className=\"ins-c-rec-details__actions_dropdown\"\n                    onSelect={() =>\n                      setActionsDropdownOpen(!actionsDropdownOpen)\n                    }\n                    position=\"right\"\n                    ouiaId=\"actions\"\n                    toggle={\n                      <DropdownToggle\n                        onToggle={(actionsDropdownOpen) =>\n                          setActionsDropdownOpen(actionsDropdownOpen)\n                        }\n                        toggleIndicator={CaretDownIcon}\n                      >\n                        {intl.formatMessage(messages.actions)}\n                      </DropdownToggle>\n                    }\n                    isOpen={actionsDropdownOpen}\n                    dropdownItems={\n                      content?.disabled\n                        ? [\n                            <DropdownItem\n                              key=\"link\"\n                              ouiaId=\"enable\"\n                              onClick={() => {\n                                enableRule(rule);\n                              }}\n                            >\n                              {intl.formatMessage(messages.enableRule)}\n                            </DropdownItem>,\n                          ]\n                        : [\n                            <DropdownItem\n                              key=\"link\"\n                              ouiaId=\"disable\"\n                              onClick={() => {\n                                handleModalToggle(true);\n                              }}\n                            >\n                              {intl.formatMessage(messages.disableRule)}\n                            </DropdownItem>,\n                          ]\n                    }\n                  />\n                </FlexItem>\n              </Flex>\n            </RuleDetails>\n          </Main>\n          <Main>\n            <React.Fragment>\n              {(content?.hosts_acked_count ||\n                ackedClusters?.length > 0 ||\n                content?.disabled) && (\n                <Card className=\"cardOverride\">\n                  <CardHeader>\n                    <Title headingLevel=\"h4\" size=\"xl\">\n                      <BellSlashIcon size=\"sm\" />\n                      &nbsp;\n                      {intl.formatMessage(\n                        (content?.hosts_acked_count ||\n                          ackedClusters?.length > 0) &&\n                          !content?.disabled\n                          ? messages.ruleIsDisabledForClusters\n                          : messages.ruleIsDisabled\n                      )}\n                    </Title>\n                  </CardHeader>\n                  <CardBody>\n                    {(content?.hosts_acked_count ||\n                      ackedClusters?.length > 0) &&\n                    !content?.disabled ? (\n                      <React.Fragment>\n                        {intl.formatMessage(\n                          messages.ruleIsDisabledForClustersBody,\n                          {\n                            clusters: ackedClusters?.length,\n                          }\n                        )}\n                        {!clustersIsFetching && ackedClusters?.length > 0 ? (\n                          <React.Fragment>\n                            &nbsp;\n                            <Button\n                              isInline\n                              variant=\"link\"\n                              onClick={() => setViewSystemsModalOpen(true)}\n                              ouiaId=\"view-clusters\"\n                            >\n                              {intl.formatMessage(messages.viewClusters)}\n                            </Button>\n                          </React.Fragment>\n                        ) : (\n                          <OneLineLoader />\n                        )}\n                      </React.Fragment>\n                    ) : (\n                      !ackIsFetching &&\n                      ackData && (\n                        <React.Fragment>\n                          {ackData?.justification\n                            ? intl.formatMessage(\n                                messages.ruleIsDisabledWithJustificaiton,\n                                {\n                                  date: (\n                                    <span>\n                                      <DateFormat\n                                        date={ruleDate}\n                                        type=\"onlyDate\"\n                                      />\n                                    </span>\n                                  ),\n                                  reason: ackData.justification,\n                                }\n                              )\n                            : intl.formatMessage(\n                                messages.ruleIsDisabledWithoutJustificaiton,\n                                {\n                                  date: (\n                                    <span>\n                                      <DateFormat\n                                        date={ruleDate}\n                                        type=\"onlyDate\"\n                                      />\n                                    </span>\n                                  ),\n                                }\n                              )}\n                        </React.Fragment>\n                      )\n                    )}\n                  </CardBody>\n                  <CardFooter>\n                    {(content?.hosts_acked_count ||\n                      ackedClusters?.length > 0) &&\n                    !content?.disabled ? (\n                      !clustersIsFetching && ackedClusters ? (\n                        <Button\n                          isInline\n                          variant=\"link\"\n                          onClick={() =>\n                            enableRecForHosts({\n                              uuids: ackedClusters.map((c) => c.cluster_id),\n                            })\n                          }\n                          ouiaId=\"enable-all\"\n                        >\n                          {intl.formatMessage(messages.enableRuleForClusters)}\n                        </Button>\n                      ) : (\n                        <OneLineLoader />\n                      )\n                    ) : (\n                      <Button\n                        isInline\n                        variant=\"link\"\n                        onClick={() => enableRule(rule)}\n                        ouiaId=\"rule\"\n                      >\n                        {intl.formatMessage(messages.enableRule)}\n                      </Button>\n                    )}\n                  </CardFooter>\n                </Card>\n              )}\n              {!content?.disabled && (\n                <React.Fragment>\n                  <Title className=\"titleOverride\" headingLevel=\"h3\" size=\"2xl\">\n                    {intl.formatMessage(messages.affectedClusters)}\n                  </Title>\n                  <AffectedClustersTable\n                    query={clusters}\n                    rule={content}\n                    afterDisableFn={afterDisableFn}\n                  />\n                </React.Fragment>\n              )}\n              {content?.disabled && (\n                <MessageState\n                  icon={BellSlashIcon}\n                  title={intl.formatMessage(messages.ruleIsDisabled)}\n                  text={intl.formatMessage(messages.ruleIsDisabledBody)}\n                />\n              )}\n            </React.Fragment>\n          </Main>\n        </React.Fragment>\n      )}\n    </React.Fragment>\n  );\n};\n\nRecommendation.propTypes = {\n  rule: PropTypes.object.isRequired,\n  ack: PropTypes.object.isRequired,\n  clusters: PropTypes.object.isRequired,\n  match: PropTypes.object.isRequired,\n};\n\nexport { Recommendation };\n","import React, { useEffect } from 'react';\nimport { useParams, useRouteMatch } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\n\nimport { Recommendation } from './Recommendation';\nimport {\n  useGetAffectedClustersQuery,\n  useGetRuleByIdQuery,\n} from '../../Services/SmartProxy';\nimport { useGetRecAcksQuery } from '../../Services/Acks';\nimport messages from '../../Messages';\n\nconst RecommendationWrapper = () => {\n  const intl = useIntl();\n  const rule = useGetRuleByIdQuery(useParams().recommendationId);\n  const ack = useGetRecAcksQuery({ ruleId: useParams().recommendationId });\n  if (rule.isSuccess && rule.data?.content?.description) {\n    const subnav = `${rule.data.content.description} - Recommendations`;\n    document.title = intl.formatMessage(messages.documentTitle, { subnav });\n  }\n  const clusters = useGetAffectedClustersQuery(useParams().recommendationId);\n\n  useEffect(() => {\n    rule.refetch();\n  }, [useParams().recommendationId]);\n\n  return (\n    <Recommendation\n      rule={rule}\n      ack={ack}\n      clusters={clusters}\n      match={useRouteMatch()}\n    />\n  );\n};\n\nexport default RecommendationWrapper;\n"],"names":["AffectedClustersTable","query","rule","afterDisableFn","intl","useIntl","dispatch","useDispatch","useState","filteredRows","setFilteredRows","displayedRows","setDisplayedRows","disableRuleModalOpen","setDisableRuleModalOpen","chips","setChips","selected","setSelected","undefined","host","setHost","isError","isUninitialized","isFetching","isSuccess","data","rows","disabled","enabled","filters","useSelector","affectedClustersState","perPage","limit","page","offset","allSelected","length","updateFilters","updateAffectedClustersFilters","filterConfig","items","label","placeholder","type","conditionalFilterType","filterValues","id","key","onChange","_e","value","newFilters","text","onNameFilterChange","isDisabled","onSetPage","pageNumber","newOffset","onSetPerPage","buildDisplayedRows","slice","map","r","cells","Link","to","rule_id","last_checked_at","DateFormat","extraTitle","formatMessage","messages","date","variant","Tooltip","content","onSelect","event","isSelected","rowId","i","filter","useEffect","newFilteredRows","allRows","cluster","cluster_name","row","toLowerCase","includes","sort","a","b","fst","snd","d","sortDirection","sortIndex","AFFECTED_CLUSTERS_NAME_CELL","localeCompare","AFFECTED_CLUSTERS_LAST_SEEN","Date","buildFilteredRows","newDisplayedRows","newChips","newValue","nameCategoryIndex","findIndex","chip","category","splice","push","name","updateNameChip","handleModalToggle","DisableRule","isModalOpen","afterFn","hosts","PrimaryToolbar","pagination","itemCount","onPerPageSelect","ouiaId","activeFiltersConfig","onDelete","bulkSelect","count","title","onClick","checked","actionsConfig","actions","props","Table","AFFECTED_CLUSTERS_COLUMNS","sortBy","index","direction","onSort","canSelectAll","rowIndex","Loading","Card","CardBody","EmptyTable","Bullseye","TableToolbar","isFooter","className","Pagination","PaginationVariant","onPageInput","propTypes","PropTypes","ViewHostAcks","clusters","recId","addNotification","notification","isLoading","refetch","hostAcks","setRows","unclean","setUnclean","columns","transforms","cellWidth","deleteAck","enableRuleForCluster","uuid","cluster_id","dismissable","description","item","justification","disabled_at","Button","isInline","size","Modal","width","isOpen","onClose","colSpan","TableHeader","TableBody","defaultProps","Recommendation","ack","match","notify","params","recommendationId","actionsDropdownOpen","setActionsDropdownOpen","viewSystemsModalOpen","setViewSystemsModalOpen","ackData","ackIsFetching","refetchAck","ruleDate","updated_at","created_at","clustersData","clustersIsFetching","refetchClusters","adjustOCPRule","ackedClusters","enableRecForHosts","uuids","requests","Promise","all","timeout","enableRule","Delete","BASE_URL","toggleModal","PageHeader","Breadcrumbs","current","Main","ErrorState","RuleDetails","isOpenShift","isDetailsPage","header","PageHeaderTitle","RuleLabels","publish_date","tags","Array","isArray","LabelGroup","numLabels","isCompact","reduce","labels","tag","RULE_CATEGORIES","Label","color","FILTER_CATEGORIES","onFeedbackChanged","rating","Post","Flex","FlexItem","align","default","Dropdown","position","toggle","DropdownToggle","onToggle","toggleIndicator","CaretDownIcon","dropdownItems","DropdownItem","hosts_acked_count","CardHeader","Title","headingLevel","reason","CardFooter","c","MessageState","icon","BellSlashIcon","useGetRuleByIdQuery","useParams","useGetRecAcksQuery","ruleId","subnav","document","useGetAffectedClustersQuery","useRouteMatch"],"sourceRoot":""}