{"version":3,"file":"js/RulesTable.5981b06bf7db7b64cdfe.js","mappings":"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","sources":["webpack:///./src/Components/RecsListTable/RecsListTable.js","webpack:///./src/Components/RecsListTable/index.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport {\n  SortByDirection,\n  Table,\n  TableBody,\n  TableHeader,\n  TableVariant,\n} from '@patternfly/react-table';\nimport { Card, CardBody } from '@patternfly/react-core/dist/js/components/Card';\nimport {\n  Pagination,\n  PaginationVariant,\n} from '@patternfly/react-core/dist/js/components/Pagination';\nimport { Stack } from '@patternfly/react-core/dist/js/layouts/Stack';\nimport {\n  Tooltip,\n  TooltipPosition,\n} from '@patternfly/react-core/dist/js/components/Tooltip';\n\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { InsightsLabel } from '@redhat-cloud-services/frontend-components/InsightsLabel';\nimport PrimaryToolbar from '@redhat-cloud-services/frontend-components/PrimaryToolbar/PrimaryToolbar';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\n\nimport {\n  FILTER_CATEGORIES,\n  RECS_LIST_COLUMNS,\n  TOTAL_RISK_LABEL_LOWER,\n} from '../../AppConstants';\nimport messages from '../../Messages';\nimport {\n  RECS_LIST_INITIAL_STATE,\n  updateRecsListFilters as updateFilters,\n} from '../../Services/Filters';\nimport RuleLabels from '../RuleLabels/RuleLabels';\nimport { strong } from '../../Utilities/intlHelper';\nimport Loading from '../Loading/Loading';\nimport { ErrorState, NoMatchingRecs } from '../MessageState/EmptyStates';\nimport RuleDetails from '../Recommendation/RuleDetails';\nimport { passFilters, capitalize } from '../Common/Tables';\nimport DisableRule from '../Modals/DisableRule';\nimport { Delete } from '../../Utilities/Api';\nimport { BASE_URL } from '../../Services/SmartProxy';\n\nconst RecsListTable = ({ query }) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const filters = useSelector(({ filters }) => filters.recsListState);\n  const { isError, isUninitialized, isFetching, isSuccess, data, refetch } =\n    query;\n  const recs = data?.recommendations || [];\n  const page = filters.offset / filters.limit + 1;\n  const [filteredRows, setFilteredRows] = useState([]);\n  const [displayedRows, setDisplayedRows] = useState([]);\n  const [disableRuleOpen, setDisableRuleOpen] = useState(false);\n  const [selectedRule, setSelectedRule] = useState({});\n  const notify = (data) => dispatch(addNotification(data));\n\n  useEffect(() => {\n    setDisplayedRows(\n      buildDisplayedRows(filteredRows, filters.sortIndex, filters.sortDirection)\n    );\n  }, [\n    filteredRows,\n    filters.limit,\n    filters.offset,\n    filters.sortIndex,\n    filters.sortDirection,\n  ]);\n\n  useEffect(() => {\n    setFilteredRows(buildFilteredRows(recs, filters));\n  }, [data, filters]);\n\n  // constructs array of rows (from the initial data) checking currently applied filters\n  const buildFilteredRows = (allRows, filters) => {\n    return allRows\n      .filter((rule) => passFilters(rule, filters))\n      .map((value, key) => [\n        {\n          isOpen: false,\n          rule: value,\n          cells: [\n            {\n              title: (\n                <span key={key}>\n                  <Link\n                    key={key}\n                    // https://github.com/RedHatInsights/ocp-advisor-frontend/issues/29\n                    to={`/recommendations/${\n                      process.env.NODE_ENV === 'development'\n                        ? value.rule_id.replaceAll('.', '%2E')\n                        : value.rule_id\n                    }`}\n                  >\n                    {' '}\n                    {value?.description || value?.rule_id}{' '}\n                  </Link>\n                  <RuleLabels rule={value} />\n                </span>\n              ),\n            },\n            {\n              title: value?.publish_date ? (\n                <DateFormat\n                  key={key}\n                  date={value.publish_date}\n                  variant=\"relative\"\n                />\n              ) : (\n                intl.formatMessage(messages.nA)\n              ),\n            },\n            {\n              title: (\n                <div key={key}>\n                  <Tooltip\n                    key={key}\n                    position={TooltipPosition.bottom}\n                    content={intl.formatMessage(\n                      messages.rulesDetailsTotalRiskBody,\n                      {\n                        risk:\n                          TOTAL_RISK_LABEL_LOWER[value.total_risk] ||\n                          intl.formatMessage(messages.undefined),\n                        strong: (str) => strong(str),\n                      }\n                    )}\n                  >\n                    {value?.total_risk ? (\n                      <InsightsLabel value={value.total_risk} />\n                    ) : (\n                      intl.formatMessage(messages.nA)\n                    )}\n                  </Tooltip>\n                </div>\n              ),\n            },\n            {\n              title: (\n                <div key={key}>{`${\n                  value?.impacted_clusters_count !== undefined\n                    ? value.impacted_clusters_count.toLocaleString()\n                    : intl.formatMessage(messages.nA)\n                }`}</div>\n              ),\n            },\n          ],\n        },\n        {\n          fullWidth: true,\n          cells: [\n            {\n              title: (\n                <section className=\"pf-m-light pf-l-page__main-section pf-c-page__main-section\">\n                  <Stack hasGutter>\n                    <RuleDetails\n                      rule={{\n                        ...value,\n                        impact: { impact: value.impact },\n                        // TODO: fix <Router> issue in the async component and then remove the line below\n                        impacted_clusters_count: undefined,\n                      }}\n                      isDetailsPage={false}\n                    />\n                  </Stack>\n                </section>\n              ),\n            },\n          ],\n        },\n      ]);\n  };\n\n  const buildDisplayedRows = (rows, index, direction) => {\n    const sortedRecommendations = [\n      'description',\n      'publish_date',\n      'total_risk',\n      'impacted_clusters_count',\n    ];\n    const sortingRows = [...rows].sort((firstItem, secondItem) => {\n      const fst = firstItem[0].rule[sortedRecommendations[index - 1]];\n      const snd = secondItem[0].rule[sortedRecommendations[index - 1]];\n      return fst > snd ? 1 : snd > fst ? -1 : 0;\n    });\n    if (direction === SortByDirection.desc) {\n      sortingRows.reverse();\n    }\n    return sortingRows\n      .slice(\n        filters.limit * (page - 1),\n        filters.limit * (page - 1) + filters.limit\n      )\n      .flatMap((row, index) => {\n        const updatedRow = [...row];\n        row[1].parent = index * 2;\n        return updatedRow;\n      });\n  };\n\n  const removeFilterParam = (param) => {\n    const filter = { ...filters, offset: 0 };\n    delete filter[param];\n    dispatch(\n      updateFilters({ ...filter, ...(param === 'text' ? { text: '' } : {}) })\n    );\n  };\n\n  // TODO: update URL when filters changed\n  const addFilterParam = (param, values) => {\n    values.length > 0\n      ? dispatch(\n          updateFilters({ ...filters, offset: 0, ...{ [param]: values } })\n        )\n      : removeFilterParam(param);\n  };\n\n  const toggleRulesDisabled = (rule_status) => {\n    dispatch(\n      updateFilters({\n        ...filters,\n        rule_status,\n        offset: 0,\n        ...(rule_status !== 'enabled' && { impacting: ['false'] }),\n      })\n    );\n  };\n\n  const filterConfigItems = [\n    {\n      label: intl.formatMessage(messages.name).toLowerCase(),\n      filterValues: {\n        key: 'text-filter',\n        onChange: (_event, value) =>\n          dispatch(updateFilters({ ...filters, text: value })),\n        value: filters.text,\n        placeholder: intl.formatMessage(messages.filterBy),\n      },\n    },\n    {\n      label: FILTER_CATEGORIES.total_risk.title,\n      type: FILTER_CATEGORIES.total_risk.type,\n      id: FILTER_CATEGORIES.total_risk.urlParam,\n      value: `checkbox-${FILTER_CATEGORIES.total_risk.urlParam}`,\n      filterValues: {\n        key: `${FILTER_CATEGORIES.total_risk.urlParam}-filter`,\n        onChange: (_event, values) =>\n          addFilterParam(FILTER_CATEGORIES.total_risk.urlParam, values),\n        value: filters.total_risk,\n        items: FILTER_CATEGORIES.total_risk.values,\n      },\n    },\n    {\n      label: FILTER_CATEGORIES.impact.title,\n      type: FILTER_CATEGORIES.impact.type,\n      id: FILTER_CATEGORIES.impact.urlParam,\n      value: `checkbox-${FILTER_CATEGORIES.impact.urlParam}`,\n      filterValues: {\n        key: `${FILTER_CATEGORIES.impact.urlParam}-filter`,\n        onChange: (_event, values) =>\n          addFilterParam(FILTER_CATEGORIES.impact.urlParam, values),\n        value: filters.impact,\n        items: FILTER_CATEGORIES.impact.values,\n      },\n    },\n    {\n      label: FILTER_CATEGORIES.likelihood.title,\n      type: FILTER_CATEGORIES.likelihood.type,\n      id: FILTER_CATEGORIES.likelihood.urlParam,\n      value: `checkbox-${FILTER_CATEGORIES.likelihood.urlParam}`,\n      filterValues: {\n        key: `${FILTER_CATEGORIES.likelihood.urlParam}-filter`,\n        onChange: (_event, values) =>\n          addFilterParam(FILTER_CATEGORIES.likelihood.urlParam, values),\n        value: filters.likelihood,\n        items: FILTER_CATEGORIES.likelihood.values,\n      },\n    },\n    {\n      label: FILTER_CATEGORIES.category.title,\n      type: FILTER_CATEGORIES.category.type,\n      id: FILTER_CATEGORIES.category.urlParam,\n      value: `checkbox-${FILTER_CATEGORIES.category.urlParam}`,\n      filterValues: {\n        key: `${FILTER_CATEGORIES.category.urlParam}-filter`,\n        onChange: (_event, values) =>\n          addFilterParam(FILTER_CATEGORIES.category.urlParam, values),\n        value: filters.category,\n        items: FILTER_CATEGORIES.category.values,\n      },\n    },\n    {\n      label: FILTER_CATEGORIES.rule_status.title,\n      type: FILTER_CATEGORIES.rule_status.type,\n      id: FILTER_CATEGORIES.rule_status.urlParam,\n      value: `radio-${FILTER_CATEGORIES.rule_status.urlParam}`,\n      filterValues: {\n        key: `${FILTER_CATEGORIES.rule_status.urlParam}-filter`,\n        onChange: (_event, value) => toggleRulesDisabled(value),\n        value: `${filters.rule_status}`,\n        items: FILTER_CATEGORIES.rule_status.values,\n      },\n    },\n    {\n      label: FILTER_CATEGORIES.impacting.title,\n      type: FILTER_CATEGORIES.impacting.type,\n      id: FILTER_CATEGORIES.impacting.urlParam,\n      value: `checkbox-${FILTER_CATEGORIES.impacting.urlParam}`,\n      filterValues: {\n        key: `${FILTER_CATEGORIES.impacting.urlParam}-filter`,\n        onChange: (e, values) =>\n          addFilterParam(FILTER_CATEGORIES.impacting.urlParam, values),\n        value: filters.impacting,\n        items: FILTER_CATEGORIES.impacting.values,\n      },\n    },\n  ];\n\n  const onSort = (_e, index, direction) => {\n    dispatch(\n      updateFilters({ ...filters, sortIndex: index, sortDirection: direction })\n    );\n  };\n\n  const pruneFilters = (localFilters, filterCategories) => {\n    const prunedFilters = Object.entries(localFilters);\n    return prunedFilters.length > 0\n      ? prunedFilters.reduce((arr, item) => {\n          if (filterCategories[item[0]]) {\n            const category = filterCategories[item[0]];\n            const chips = Array.isArray(item[1])\n              ? item[1].map((value) => {\n                  const selectedCategoryValue = category.values.find(\n                    (values) => values.value === String(value)\n                  );\n                  return selectedCategoryValue\n                    ? {\n                        name:\n                          selectedCategoryValue.text ||\n                          selectedCategoryValue.label,\n                        value,\n                      }\n                    : { name: value, value };\n                })\n              : [\n                  {\n                    name: category.values.find(\n                      (values) => values.value === String(item[1])\n                    ).label,\n                    value: item[1],\n                  },\n                ];\n            return [\n              ...arr,\n              {\n                category: capitalize(category.title),\n                chips,\n                urlParam: category.urlParam,\n              },\n            ];\n          } else if (item[0] === 'text') {\n            return [\n              ...arr,\n              ...(item[1].length > 0\n                ? [\n                    {\n                      category: 'Name',\n                      chips: [{ name: item[1], value: item[1] }],\n                      urlParam: item[0],\n                    },\n                  ]\n                : []),\n            ];\n          } else {\n            return arr;\n          }\n        }, [])\n      : [];\n  };\n\n  const buildFilterChips = () => {\n    const localFilters = { ...filters };\n    delete localFilters.sortIndex;\n    delete localFilters.sortDirection;\n    delete localFilters.offset;\n    delete localFilters.limit;\n    return pruneFilters(localFilters, FILTER_CATEGORIES);\n  };\n\n  const activeFiltersConfig = {\n    deleteTitle: intl.formatMessage(messages.resetFilters),\n    filters: buildFilterChips(),\n    onDelete: (_event, itemsToRemove, isAll) => {\n      if (isAll) {\n        dispatch(updateFilters(RECS_LIST_INITIAL_STATE));\n      } else {\n        itemsToRemove.map((item) => {\n          const newFilter = {\n            [item.urlParam]: Array.isArray(filters[item.urlParam])\n              ? filters[item.urlParam].filter(\n                  (value) => String(value) !== String(item.chips[0].value)\n                )\n              : '',\n          };\n          newFilter[item.urlParam].length > 0\n            ? dispatch(updateFilters({ ...filters, ...newFilter }))\n            : removeFilterParam(item.urlParam);\n        });\n      }\n    },\n  };\n\n  const handleOnCollapse = (_e, rowId, isOpen) => {\n    const collapseRows = [...displayedRows];\n    collapseRows[rowId] = { ...collapseRows[rowId], isOpen };\n    setDisplayedRows(collapseRows);\n  };\n\n  const ackRule = async (rowId) => {\n    const rule = displayedRows[rowId].rule;\n\n    try {\n      if (!rule.disabled) {\n        // show disable rule modal\n        setSelectedRule(rule);\n        setDisableRuleOpen(true);\n      } else {\n        try {\n          await Delete(`${BASE_URL}/v2/ack/${rule.rule_id}/`);\n          notify({\n            variant: 'success',\n            timeout: true,\n            dismissable: true,\n            title: intl.formatMessage(messages.recSuccessfullyEnabled),\n          });\n          refetch();\n        } catch (error) {\n          notify({\n            variant: 'danger',\n            dismissable: true,\n            title: intl.formatMessage(messages.error),\n            description: `${error}`,\n          });\n        }\n      }\n    } catch (error) {\n      notify({\n        variant: 'danger',\n        dismissable: true,\n        title: rule.disabled\n          ? intl.formatMessage(messages.rulesTableErrorEnabled)\n          : intl.formatMessage(messages.rulesTableErrorDisabled),\n        description: `${error}`,\n      });\n    }\n  };\n\n  const actionResolver = (rowData, { rowIndex }) => {\n    const rule = displayedRows[rowIndex].rule\n      ? displayedRows[rowIndex].rule\n      : null;\n    if (rowIndex % 2 !== 0 || !rule) {\n      return null;\n    }\n\n    return rule && !rule.disabled\n      ? [\n          {\n            title: intl.formatMessage(messages.disableRule),\n            onClick: (_event, rowId) => ackRule(rowId),\n          },\n        ]\n      : [\n          {\n            title: intl.formatMessage(messages.enableRule),\n            onClick: (_event, rowId) => ackRule(rowId),\n          },\n        ];\n  };\n\n  return (\n    <div id=\"recs-list-table\">\n      {disableRuleOpen && (\n        <DisableRule\n          handleModalToggle={setDisableRuleOpen}\n          isModalOpen={disableRuleOpen}\n          rule={selectedRule}\n          afterFn={refetch}\n        />\n      )}\n      <PrimaryToolbar\n        pagination={{\n          itemCount: filteredRows.length,\n          page: filters.offset / filters.limit + 1,\n          perPage: Number(filters.limit),\n          onSetPage(_event, page) {\n            dispatch(\n              updateFilters({\n                ...filters,\n                offset: filters.limit * (page - 1),\n              })\n            );\n          },\n          onPerPageSelect(_event, perPage) {\n            dispatch(updateFilters({ ...filters, limit: perPage, offset: 0 }));\n          },\n          isCompact: true,\n        }}\n        filterConfig={{ items: filterConfigItems }}\n        activeFiltersConfig={activeFiltersConfig}\n      />\n      {(isUninitialized || isFetching) && <Loading />}\n      {(isError || (isSuccess && recs.length === 0)) && (\n        <Card>\n          <CardBody>\n            <ErrorState />\n          </CardBody>\n        </Card>\n      )}\n      {!(isUninitialized || isFetching) && isSuccess && recs.length > 0 && (\n        <React.Fragment>\n          <Table\n            aria-label=\"Table of recommendations\"\n            ouiaId=\"recsListTable\"\n            variant={TableVariant.compact}\n            cells={RECS_LIST_COLUMNS}\n            rows={displayedRows}\n            onCollapse={handleOnCollapse}\n            sortBy={{\n              index: filters.sortIndex,\n              direction: filters.sortDirection,\n            }}\n            onSort={onSort}\n            actionResolver={actionResolver}\n          >\n            <TableHeader />\n            <TableBody />\n          </Table>\n          {recs.length > 0 && filteredRows.length === 0 && (\n            <Card ouiaId={'empty-recommendations'}>\n              <CardBody>\n                <NoMatchingRecs />\n              </CardBody>\n            </Card>\n          )}\n        </React.Fragment>\n      )}\n      <Pagination\n        ouiaId=\"recs-list-pagination-bottom\"\n        itemCount={filteredRows.length}\n        page={filters.offset / filters.limit + 1}\n        perPage={Number(filters.limit)}\n        onSetPage={(_e, page) => {\n          dispatch(\n            updateFilters({\n              ...filters,\n              offset: filters.limit * (page - 1),\n            })\n          );\n        }}\n        onPerPageSelect={(_e, perPage) => {\n          dispatch(updateFilters({ ...filters, limit: perPage, offset: 0 }));\n        }}\n        widgetId={`pagination-options-menu-bottom`}\n        variant={PaginationVariant.bottom}\n      />\n    </div>\n  );\n};\n\nRecsListTable.propTypes = {\n  query: PropTypes.shape({\n    isError: PropTypes.bool.isRequired,\n    isUninitialized: PropTypes.bool.isRequired,\n    isFetching: PropTypes.bool.isRequired,\n    isSuccess: PropTypes.bool.isRequired,\n    data: PropTypes.array,\n    refetch: PropTypes.func,\n  }),\n};\n\nexport { RecsListTable };\n","import React from 'react';\n\nimport { RecsListTable } from './RecsListTable';\nimport { useGetRecsQuery } from '../../Services/SmartProxy';\n\nconst RecsListTableWrapper = () => {\n  const query = useGetRecsQuery();\n\n  return <RecsListTable query={query} />;\n};\n\nexport default RecsListTableWrapper;\n"],"names":["RecsListTable","query","intl","useIntl","dispatch","useDispatch","filters","useSelector","recsListState","isError","isUninitialized","isFetching","isSuccess","data","refetch","recs","recommendations","page","offset","limit","useState","filteredRows","setFilteredRows","displayedRows","setDisplayedRows","disableRuleOpen","setDisableRuleOpen","selectedRule","setSelectedRule","notify","addNotification","useEffect","buildDisplayedRows","sortIndex","sortDirection","buildFilteredRows","localFilters","allRows","filter","rule","passFilters","map","value","key","isOpen","cells","title","Link","to","rule_id","description","RuleLabels","publish_date","DateFormat","date","variant","formatMessage","messages","Tooltip","position","TooltipPosition","content","risk","TOTAL_RISK_LABEL_LOWER","total_risk","strong","str","InsightsLabel","undefined","impacted_clusters_count","toLocaleString","fullWidth","className","Stack","hasGutter","RuleDetails","impact","isDetailsPage","rows","index","direction","sortedRecommendations","sortingRows","sort","firstItem","secondItem","fst","snd","SortByDirection","reverse","slice","flatMap","row","updatedRow","parent","removeFilterParam","param","updateFilters","text","addFilterParam","values","length","filterConfigItems","label","toLowerCase","filterValues","onChange","_event","placeholder","FILTER_CATEGORIES","type","id","items","likelihood","category","rule_status","impacting","e","activeFiltersConfig","deleteTitle","filterCategories","prunedFilters","Object","entries","reduce","arr","item","chips","Array","isArray","selectedCategoryValue","find","String","name","capitalize","urlParam","pruneFilters","onDelete","itemsToRemove","isAll","RECS_LIST_INITIAL_STATE","newFilter","ackRule","rowId","disabled","Delete","BASE_URL","timeout","dismissable","DisableRule","handleModalToggle","isModalOpen","afterFn","PrimaryToolbar","pagination","itemCount","perPage","Number","onSetPage","onPerPageSelect","isCompact","filterConfig","Loading","Card","CardBody","Table","ouiaId","TableVariant","RECS_LIST_COLUMNS","onCollapse","_e","collapseRows","sortBy","onSort","actionResolver","rowData","rowIndex","onClick","TableHeader","TableBody","Pagination","widgetId","PaginationVariant","propTypes","PropTypes","useGetRecsQuery"],"sourceRoot":""}