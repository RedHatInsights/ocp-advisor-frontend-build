{"version":3,"file":"js/ClustersList.707ec02609430588ed16.js","mappings":"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","sources":["webpack:///./src/Components/ClustersListTable/ClustersListTable.js","webpack:///./src/Components/ClustersListTable/index.js","webpack:///./src/Components/ClustersList/index.js","webpack:///./src/Components/Loading/Loading.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { useDispatch, useSelector } from 'react-redux';\nimport isEqual from 'lodash/isEqual';\nimport { useLocation } from 'react-router-dom';\nimport uniqBy from 'lodash/uniqBy';\nimport { valid } from 'semver';\nimport { Link } from 'react-router-dom';\n\nimport {\n  SortByDirection,\n  Table,\n  TableBody,\n  TableHeader,\n  TableVariant,\n} from '@patternfly/react-table';\nimport { Pagination, Tooltip } from '@patternfly/react-core';\nimport { PaginationVariant } from '@patternfly/react-core/dist/js/components/Pagination/Pagination';\nimport PrimaryToolbar from '@redhat-cloud-services/frontend-components/PrimaryToolbar/PrimaryToolbar';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter/conditionalFilterConstants';\n\nimport {\n  CLUSTERS_LIST_INITIAL_STATE,\n  resetFilters,\n  updateClustersListFilters,\n} from '../../Services/Filters';\nimport {\n  CLUSTERS_LIST_COLUMNS,\n  CLUSTERS_LIST_COLUMNS_KEYS,\n  CLUSTERS_TABLE_CELL_NAME,\n  CLUSTERS_TABLE_CELL_LAST_SEEN,\n  CLUSTERS_TABLE_CELL_VERSION,\n  CLUSTER_FILTER_CATEGORIES,\n} from '../../AppConstants';\nimport {\n  buildFilterChips,\n  paramParser,\n  passFiltersCluster,\n  removeFilterParam as _removeFilterParam,\n  addFilterParam as _addFilterParam,\n  translateSortParams,\n  updateSearchParams,\n  compareSemVer,\n  toValidSemVer,\n} from '../Common/Tables';\nimport Loading from '../Loading/Loading';\nimport messages from '../../Messages';\nimport {\n  ErrorState,\n  NoMatchingClusters,\n  NoRecsForClusters,\n} from '../MessageState/EmptyStates';\nimport { coerce } from 'semver';\nimport { BASE_PATH } from '../../Routes';\n\nconst ClustersListTable = ({\n  query: { isError, isUninitialized, isFetching, isSuccess, data, refetch },\n}) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const updateFilters = (payload) =>\n    dispatch(updateClustersListFilters(payload));\n  const filters = useSelector(({ filters }) => filters.clustersListState);\n\n  const clusters = data?.data || [];\n  const page = filters.offset / filters.limit + 1;\n\n  const [filteredRows, setFilteredRows] = useState([]);\n  const [displayedRows, setDisplayedRows] = useState([]);\n  // helps to distinguish the state when the API data received but not yet filtered\n  const [rowsFiltered, setRowsFiltered] = useState(false);\n  const [filterBuilding, setFilterBuilding] = useState(true);\n  const { search } = useLocation();\n  const loadingState = isUninitialized || isFetching || !rowsFiltered;\n  const errorState = isError;\n  const noMatch = clusters.length > 0 && filteredRows.length === 0;\n  const successState = isSuccess;\n\n  const removeFilterParam = (param) =>\n    _removeFilterParam(filters, updateFilters, param);\n\n  const addFilterParam = (param, values) =>\n    _addFilterParam(filters, updateFilters, param, values);\n\n  useEffect(() => {\n    setDisplayedRows(buildDisplayedRows(filteredRows));\n    setRowsFiltered(true);\n  }, [filteredRows, filters.limit, filters.offset]);\n\n  useEffect(() => {\n    setFilteredRows(buildFilteredRows(clusters));\n  }, [\n    data,\n    filters.text,\n    filters.version,\n    filters.hits,\n    filters.sortDirection,\n    filters.sortIndex,\n  ]);\n\n  useEffect(() => {\n    if (search && filterBuilding) {\n      const paramsObject = paramParser(search);\n\n      if (paramsObject.sort) {\n        const sortObj = translateSortParams(paramsObject.sort);\n        paramsObject.sortIndex = CLUSTERS_LIST_COLUMNS_KEYS.indexOf(\n          sortObj.name\n        );\n        paramsObject.sortDirection = sortObj.direction;\n      }\n      paramsObject.offset &&\n        (paramsObject.offset = Number(paramsObject.offset[0]));\n      paramsObject.limit &&\n        (paramsObject.limit = Number(paramsObject.limit[0]));\n      paramsObject.impacting &&\n        !Array.isArray(paramsObject.impacting) &&\n        (paramsObject.impacting = [`${paramsObject.impacting}`]);\n      updateFilters({ ...filters, ...paramsObject });\n    }\n    setFilterBuilding(false);\n  }, []);\n\n  useEffect(() => {\n    if (!filterBuilding) {\n      updateSearchParams(filters, CLUSTERS_LIST_COLUMNS_KEYS);\n    }\n  }, [filters, filterBuilding]);\n\n  const buildFilteredRows = (items) => {\n    setRowsFiltered(false);\n    const filtered = items.filter((it) => {\n      return passFiltersCluster(it, filters);\n    });\n    const mapped = filtered.map((it, index) => {\n      if (\n        it.cluster_version !== undefined &&\n        it.cluster_version !== '' &&\n        !valid(coerce(it.cluster_version))\n      ) {\n        console.error(\n          `Cluster version ${it.cluster_version} has invalid format!`\n        );\n      }\n      const ver = toValidSemVer(it.cluster_version);\n\n      return {\n        entity: it,\n        cells: [\n          <span key={index}>\n            <Link to={`${BASE_PATH}/clusters/${it.cluster_id}`}>\n              {it.cluster_name || it.cluster_id}\n            </Link>\n          </span>,\n          ver === '0.0.0' ? intl.formatMessage(messages.nA) : ver,\n          it.total_hit_count,\n          it.hits_by_total_risk?.[4] || 0,\n          it.hits_by_total_risk?.[3] || 0,\n          it.hits_by_total_risk?.[2] || 0,\n          it.hits_by_total_risk?.[1] || 0,\n          <span key={index}>\n            {it.last_checked_at ? (\n              <DateFormat\n                extraTitle={`${intl.formatMessage(messages.lastSeen)}: `}\n                date={it.last_checked_at}\n                variant=\"relative\"\n              />\n            ) : (\n              <Tooltip\n                key={index}\n                content={\n                  <span>\n                    {intl.formatMessage(messages.lastSeen) + ': '}\n                    {intl.formatMessage(messages.nA)}\n                  </span>\n                }\n              >\n                <span>{intl.formatMessage(messages.nA)}</span>\n              </Tooltip>\n            )}\n          </span>,\n        ],\n      };\n    });\n    const sorted =\n      filters.sortIndex === -1\n        ? mapped\n        : mapped.sort((a, b) => {\n            let fst, snd;\n            const d = filters.sortDirection === SortByDirection.asc ? 1 : -1;\n            switch (filters.sortIndex) {\n              case CLUSTERS_TABLE_CELL_NAME:\n                fst = a.entity.cluster_name || a.entity.cluster_id;\n                snd = b.entity.cluster_name || b.entity.cluster_id;\n                return fst.localeCompare(snd) ? fst.localeCompare(snd) * d : 0;\n              case CLUSTERS_TABLE_CELL_VERSION:\n                return compareSemVer(\n                  toValidSemVer(a.entity.cluster_version),\n                  toValidSemVer(b.entity.cluster_version),\n                  d\n                );\n              case CLUSTERS_TABLE_CELL_LAST_SEEN:\n                fst = new Date(a.entity.last_checked_at || 0);\n                snd = new Date(b.entity.last_checked_at || 0);\n                return fst > snd ? d : snd > fst ? -d : 0;\n              default:\n                fst = a.cells[filters.sortIndex];\n                snd = b.cells[filters.sortIndex];\n                return fst > snd ? d : snd > fst ? -d : 0;\n            }\n          });\n    return sorted;\n  };\n\n  const buildDisplayedRows = (items) =>\n    items.slice(\n      filters.limit * (page - 1),\n      filters.limit * (page - 1) + filters.limit\n    );\n\n  const filterConfigItems = [\n    {\n      label: intl.formatMessage(messages.name).toLowerCase(),\n      filterValues: {\n        key: 'text-filter',\n        onChange: (_event, value) =>\n          updateFilters({ ...filters, offset: 0, text: value }),\n        value: filters.text,\n        placeholder: intl.formatMessage(messages.filterByName),\n      },\n    },\n    {\n      label: intl.formatMessage(messages.version),\n      placeholder: intl.formatMessage(messages.filterByVersion),\n      type: conditionalFilterType.checkbox,\n      filterValues: {\n        id: 'version-filter',\n        key: 'version-filter',\n        onChange: (event, value) => addFilterParam('version', value),\n        value: filters.version,\n        items: uniqBy(\n          clusters\n            .filter(\n              (c) => c.cluster_version !== undefined && c.cluster_version !== ''\n            )\n            .map((c) => ({\n              value: toValidSemVer(c.cluster_version),\n            }))\n            .sort((a, b) =>\n              compareSemVer(\n                toValidSemVer(a.cluster_version),\n                toValidSemVer(b.cluster_version),\n                1\n              )\n            )\n            .reverse(), // should start from the latest version\n          'value'\n        ),\n      },\n    },\n    {\n      label: CLUSTER_FILTER_CATEGORIES.hits.title,\n      type: CLUSTER_FILTER_CATEGORIES.hits.type,\n      id: CLUSTER_FILTER_CATEGORIES.hits.urlParam,\n      value: `checkbox-${CLUSTER_FILTER_CATEGORIES.hits.urlParam}`,\n      filterValues: {\n        key: `${CLUSTER_FILTER_CATEGORIES.hits.urlParam}-filter`,\n        onChange: (_event, values) =>\n          addFilterParam(CLUSTER_FILTER_CATEGORIES.hits.urlParam, values),\n        value: filters.hits,\n        items: CLUSTER_FILTER_CATEGORIES.hits.values,\n      },\n    },\n  ];\n\n  const activeFiltersConfig = {\n    showDeleteButton: true,\n    deleteTitle: intl.formatMessage(messages.resetFilters),\n    filters: buildFilterChips(filters, CLUSTER_FILTER_CATEGORIES),\n    onDelete: (_event, itemsToRemove, isAll) => {\n      if (isAll) {\n        if (isEqual(filters, CLUSTERS_LIST_INITIAL_STATE)) {\n          refetch();\n        } else {\n          resetFilters(filters, CLUSTERS_LIST_INITIAL_STATE, updateFilters);\n        }\n      } else {\n        itemsToRemove.map((item) => {\n          const newFilter = {\n            [item.urlParam]: Array.isArray(filters[item.urlParam])\n              ? filters[item.urlParam].filter(\n                  (value) => String(value) !== String(item.chips[0].value)\n                )\n              : '',\n          };\n          newFilter[item.urlParam].length > 0\n            ? updateFilters({ ...filters, ...newFilter })\n            : removeFilterParam(item.urlParam);\n        });\n      }\n    },\n  };\n\n  const onSort = (_e, index, direction) => {\n    setRowsFiltered(false);\n    updateFilters({ ...filters, sortIndex: index, sortDirection: direction });\n  };\n\n  return (\n    <>\n      {isSuccess && clusters.length === 0 ? (\n        <NoRecsForClusters /> // TODO: do not mix this logic in the table component\n      ) : (\n        <div id=\"clusters-list-table\" data-ouia-safe={!loadingState}>\n          <PrimaryToolbar\n            pagination={{\n              itemCount: filteredRows.length,\n              page,\n              perPage: filters.limit,\n              onSetPage: (_event, page) => {\n                setRowsFiltered(false);\n                return updateFilters({\n                  ...filters,\n                  offset: filters.limit * (page - 1),\n                });\n              },\n              onPerPageSelect: (_event, perPage) => {\n                setRowsFiltered(false);\n                return updateFilters({ ...filters, limit: perPage, offset: 0 });\n              },\n              isCompact: true,\n              ouiaId: 'pager',\n            }}\n            filterConfig={{ items: filterConfigItems }}\n            activeFiltersConfig={activeFiltersConfig}\n          />\n          <Table\n            aria-label=\"Table of clusters\"\n            ouiaId=\"clusters\"\n            ouiaSafe={!loadingState}\n            variant={TableVariant.compact}\n            cells={CLUSTERS_LIST_COLUMNS}\n            rows={\n              errorState || loadingState || noMatch ? (\n                [\n                  {\n                    fullWidth: true,\n                    cells: [\n                      {\n                        props: {\n                          colSpan: CLUSTERS_LIST_COLUMNS.length + 1,\n                        },\n                        title: errorState ? (\n                          <ErrorState />\n                        ) : loadingState ? (\n                          <Loading />\n                        ) : (\n                          <NoMatchingClusters />\n                        ),\n                      },\n                    ],\n                  },\n                ]\n              ) : successState ? (\n                displayedRows\n              ) : (\n                <ErrorState />\n              )\n            }\n            sortBy={{\n              index: filters.sortIndex,\n              direction: filters.sortDirection,\n            }}\n            onSort={onSort}\n            isStickyHeader\n          >\n            <TableHeader />\n            <TableBody />\n          </Table>\n          <Pagination\n            ouiaId=\"pager\"\n            itemCount={filteredRows.length}\n            page={filters.offset / filters.limit + 1}\n            perPage={Number(filters.limit)}\n            onSetPage={(_e, page) =>\n              updateFilters({\n                ...filters,\n                offset: filters.limit * (page - 1),\n              })\n            }\n            onPerPageSelect={(_e, perPage) =>\n              updateFilters({ ...filters, limit: perPage, offset: 0 })\n            }\n            widgetId={`pagination-options-menu-bottom`}\n            variant={PaginationVariant.bottom}\n          />\n        </div>\n      )}\n    </>\n  );\n};\n\nClustersListTable.propTypes = {\n  query: PropTypes.object.isRequired,\n};\n\nexport { ClustersListTable };\n","import React from 'react';\nimport { useGetClustersQuery } from '../../Services/SmartProxy';\nimport { ClustersListTable } from './ClustersListTable';\n\nconst ClustersListTableWrapper = () => {\n  const query = useGetClustersQuery();\n\n  return <ClustersListTable query={query} />;\n};\n\nexport default ClustersListTableWrapper;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\n\nimport PageHeader from '@redhat-cloud-services/frontend-components/PageHeader';\n\nimport messages from '../../Messages';\nimport ClustersListTable from '../ClustersListTable';\nimport { Title } from '@patternfly/react-core';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\n\nconst ClustersList = () => {\n  const intl = useIntl();\n  const chrome = useChrome();\n\n  chrome.updateDocumentTitle(\n    intl.formatMessage(messages.documentTitle, {\n      subnav: intl.formatMessage(messages.clusters),\n    })\n  );\n\n  return (\n    <React.Fragment>\n      <PageHeader className=\"ins-c-clusters-header\">\n        <Title headingLevel=\"h1\" ouiaId=\"page-header\">\n          {`${intl.formatMessage(messages.insightsHeader)} ${intl\n            .formatMessage(messages.clusters)\n            .toLowerCase()}`}\n        </Title>\n      </PageHeader>\n      <section className=\"pf-l-page__main-section pf-c-page__main-section\">\n        <ClustersListTable />\n      </section>\n    </React.Fragment>\n  );\n};\n\nexport default ClustersList;\n","import React from 'react';\nimport { Card, CardBody } from '@patternfly/react-core';\nimport { List } from 'react-content-loader';\n\nconst Loading = () => (\n  <Card ouiaId=\"loading-skeleton\">\n    <CardBody>\n      <List />\n    </CardBody>\n  </Card>\n);\n\nexport default Loading;\n"],"names":["ClustersListTable","query","isError","isUninitialized","isFetching","isSuccess","data","refetch","intl","useIntl","dispatch","useDispatch","updateFilters","payload","updateClustersListFilters","filters","useSelector","clustersListState","clusters","page","offset","limit","useState","filteredRows","setFilteredRows","displayedRows","setDisplayedRows","rowsFiltered","setRowsFiltered","filterBuilding","setFilterBuilding","search","useLocation","loadingState","errorState","noMatch","length","successState","addFilterParam","param","values","_addFilterParam","useEffect","buildDisplayedRows","buildFilteredRows","text","version","hits","sortDirection","sortIndex","paramsObject","paramParser","sort","sortObj","translateSortParams","CLUSTERS_LIST_COLUMNS_KEYS","indexOf","name","direction","Number","impacting","Array","isArray","updateSearchParams","items","mapped","filter","it","passFiltersCluster","map","index","undefined","cluster_version","valid","coerce","console","error","ver","toValidSemVer","entity","cells","key","Link","to","BASE_PATH","cluster_id","cluster_name","formatMessage","messages","nA","total_hit_count","hits_by_total_risk","last_checked_at","DateFormat","extraTitle","lastSeen","date","variant","Tooltip","content","a","b","fst","snd","d","SortByDirection","asc","CLUSTERS_TABLE_CELL_NAME","localeCompare","CLUSTERS_TABLE_CELL_VERSION","compareSemVer","CLUSTERS_TABLE_CELL_LAST_SEEN","Date","slice","filterConfigItems","label","toLowerCase","filterValues","onChange","_event","value","placeholder","filterByName","filterByVersion","type","conditionalFilterType","checkbox","id","event","uniqBy","c","reverse","CLUSTER_FILTER_CATEGORIES","title","urlParam","activeFiltersConfig","showDeleteButton","deleteTitle","resetFilters","buildFilterChips","onDelete","itemsToRemove","isAll","isEqual","CLUSTERS_LIST_INITIAL_STATE","item","newFilter","String","chips","_removeFilterParam","pagination","itemCount","perPage","onSetPage","onPerPageSelect","isCompact","ouiaId","filterConfig","Table","ouiaSafe","TableVariant","compact","CLUSTERS_LIST_COLUMNS","rows","fullWidth","props","colSpan","Loading","sortBy","onSort","_e","isStickyHeader","TableHeader","TableBody","Pagination","widgetId","PaginationVariant","bottom","propTypes","PropTypes","isRequired","useGetClustersQuery","useChrome","updateDocumentTitle","documentTitle","subnav","PageHeader","className","Title","headingLevel","insightsHeader","Card","CardBody"],"sourceRoot":""}