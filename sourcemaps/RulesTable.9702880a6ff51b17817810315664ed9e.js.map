{"version":3,"file":"js/RulesTable.9ecfd32787ac90a13d0b.js","mappings":"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","sources":["webpack:///./src/Components/Labels/CategoryLabel.js","webpack:///./src/Components/RecsListTable/RecsListTable.js","webpack:///./src/Components/RecsListTable/index.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport camelCase from 'lodash/camelCase';\n\nimport { Label } from '@patternfly/react-core/dist/js/components/Label/index';\nimport { LabelGroup } from '@patternfly/react-core/dist/js/components/LabelGroup/LabelGroup';\nimport LockIcon from '@patternfly/react-icons/dist/esm/icons/lock-icon';\nimport PortIcon from '@patternfly/react-icons/dist/esm/icons/port-icon';\nimport AutomationIcon from '@patternfly/react-icons/dist/esm/icons/automation-icon';\nimport SyncAltIcon from '@patternfly/react-icons/dist/esm/icons/sync-icon';\n\nimport messages from '../../Messages';\nimport { RULE_CATEGORIES } from '../../AppConstants';\n\nconst CATEGORY_ICONS = {\n  security: <LockIcon />,\n  service_availability: <AutomationIcon />,\n  performance: <PortIcon />,\n  fault_tolerance: <SyncAltIcon />,\n};\n\nexport const extractCategories = (tags) =>\n  tags.filter((t) => Object.keys(RULE_CATEGORIES).includes(t));\n\nconst CategoryLabel = ({ tags }) => {\n  const intl = useIntl();\n\n  return (\n    <LabelGroup numLabels={1} isCompact>\n      {extractCategories(tags).map((tag, key) => (\n        <Label\n          key={key}\n          icon={CATEGORY_ICONS[tag]}\n          variant=\"outline\"\n          color=\"blue\"\n          isCompact\n        >\n          {intl.formatMessage(messages[camelCase(tag)])}\n        </Label>\n      ))}\n    </LabelGroup>\n  );\n};\n\nCategoryLabel.propTypes = {\n  tags: PropTypes.array.isRequired,\n};\n\nexport default CategoryLabel;\n","import './RecsListTable.scss';\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useIntl } from 'react-intl';\nimport { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport cloneDeep from 'lodash/cloneDeep';\nimport capitalize from 'lodash/capitalize';\nimport {\n  SortByDirection,\n  Table,\n  TableBody,\n  TableHeader,\n  TableVariant,\n} from '@patternfly/react-table';\nimport { Card, CardBody } from '@patternfly/react-core/dist/js/components/Card';\nimport {\n  Pagination,\n  PaginationVariant,\n} from '@patternfly/react-core/dist/js/components/Pagination';\nimport { Stack } from '@patternfly/react-core/dist/js/layouts/Stack';\nimport {\n  Tooltip,\n  TooltipPosition,\n} from '@patternfly/react-core/dist/js/components/Tooltip';\n\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { InsightsLabel } from '@redhat-cloud-services/frontend-components/InsightsLabel';\nimport PrimaryToolbar from '@redhat-cloud-services/frontend-components/PrimaryToolbar/PrimaryToolbar';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\n\nimport {\n  DEBOUNCE_DELAY,\n  FILTER_CATEGORIES,\n  RECS_LIST_COLUMNS,\n  RECS_LIST_COLUMNS_KEYS,\n  TOTAL_RISK_LABEL_LOWER,\n} from '../../AppConstants';\nimport messages from '../../Messages';\nimport {\n  RECS_LIST_INITIAL_STATE,\n  updateRecsListFilters,\n} from '../../Services/Filters';\nimport RuleLabels from '../Labels/RuleLabels';\nimport { strong } from '../../Utilities/intlHelper';\nimport Loading from '../Loading/Loading';\nimport { ErrorState, NoMatchingRecs } from '../MessageState/EmptyStates';\nimport RuleDetails from '../Recommendation/RuleDetails';\nimport {\n  passFilters,\n  paramParser,\n  translateSortParams,\n  debounce,\n} from '../Common/Tables';\nimport DisableRule from '../Modals/DisableRule';\nimport { Delete } from '../../Utilities/Api';\nimport { BASE_URL } from '../../Services/SmartProxy';\nimport CategoryLabel, { extractCategories } from '../Labels/CategoryLabel';\n\nconst RecsListTable = ({ query }) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const filters = useSelector(({ filters }) => filters.recsListState);\n  const { isError, isUninitialized, isFetching, isSuccess, data, refetch } =\n    query;\n  const recs = data?.recommendations || [];\n  const page = filters.offset / filters.limit + 1;\n  const [filteredRows, setFilteredRows] = useState([]);\n  const [displayedRows, setDisplayedRows] = useState([]);\n  const [disableRuleOpen, setDisableRuleOpen] = useState(false);\n  const [selectedRule, setSelectedRule] = useState({});\n  const [isAllExpanded, setIsAllExpanded] = useState(false);\n  const notify = (data) => dispatch(addNotification(data));\n  const { search } = useLocation();\n  const [filterBuilding, setFilterBuilding] = useState(true);\n  const updateFilters = (filters) => dispatch(updateRecsListFilters(filters));\n  const [searchText, setSearchText] = useState(filters?.text || '');\n  const debouncedSearchText = debounce(searchText, DEBOUNCE_DELAY);\n\n  useEffect(() => {\n    setDisplayedRows(\n      buildDisplayedRows(filteredRows, filters.sortIndex, filters.sortDirection)\n    );\n  }, [\n    filteredRows,\n    filters.limit,\n    filters.offset,\n    filters.sortIndex,\n    filters.sortDirection,\n  ]);\n\n  useEffect(() => {\n    setFilteredRows(buildFilteredRows(recs, filters));\n  }, [data, filters]);\n\n  useEffect(() => {\n    if (search && filterBuilding) {\n      const paramsObject = paramParser(search);\n\n      paramsObject.text === undefined\n        ? setSearchText('')\n        : setSearchText(paramsObject.text);\n      if (paramsObject.sort) {\n        const sortObj = translateSortParams(paramsObject.sort[0]);\n        paramsObject.sortIndex = RECS_LIST_COLUMNS_KEYS.indexOf(sortObj.name);\n        paramsObject.sortDirection = sortObj.direction;\n      }\n      paramsObject.offset &&\n        (paramsObject.offset = Number(paramsObject.offset[0]));\n      paramsObject.limit &&\n        (paramsObject.limit = Number(paramsObject.limit[0]));\n      paramsObject.impacting &&\n        !Array.isArray(paramsObject.impacting) &&\n        (paramsObject.impacting = [`${paramsObject.impacting}`]);\n      updateFilters({ ...filters, ...paramsObject });\n    }\n    setFilterBuilding(false);\n  }, []);\n\n  useEffect(() => {\n    if (!filterBuilding && !isFetching && !isUninitialized) {\n      const updatedFilters = cloneDeep(filters);\n      const text = searchText.length ? { text: searchText } : {};\n      delete updatedFilters.text;\n      updateFilters({ ...updatedFilters, ...text, offset: 0 });\n    }\n  }, [debouncedSearchText]);\n\n  // constructs array of rows (from the initial data) checking currently applied filters\n  const buildFilteredRows = (allRows, filters) => {\n    return allRows\n      .filter((rule) => passFilters(rule, filters))\n      .map((value, key) => [\n        {\n          isOpen: isAllExpanded,\n          rule: value,\n          cells: [\n            {\n              title: (\n                <span key={key}>\n                  <Link\n                    key={key}\n                    // https://github.com/RedHatInsights/ocp-advisor-frontend/issues/29\n                    to={`/recommendations/${\n                      process.env.NODE_ENV === 'development'\n                        ? value.rule_id.replaceAll('.', '%2E')\n                        : value.rule_id\n                    }`}\n                  >\n                    {' '}\n                    {value?.description || value?.rule_id}{' '}\n                  </Link>\n                  <RuleLabels rule={value} />\n                </span>\n              ),\n            },\n            {\n              title: value?.publish_date ? (\n                <DateFormat\n                  key={key}\n                  date={value.publish_date}\n                  variant=\"relative\"\n                />\n              ) : (\n                intl.formatMessage(messages.nA)\n              ),\n            },\n            {\n              title: <CategoryLabel key={key} tags={value.tags} />,\n            },\n            {\n              title: (\n                <div key={key}>\n                  <Tooltip\n                    key={key}\n                    position={TooltipPosition.bottom}\n                    content={intl.formatMessage(\n                      messages.rulesDetailsTotalRiskBody,\n                      {\n                        risk:\n                          TOTAL_RISK_LABEL_LOWER[value.total_risk] ||\n                          intl.formatMessage(messages.undefined),\n                        strong: (str) => strong(str),\n                      }\n                    )}\n                  >\n                    {value?.total_risk ? (\n                      <InsightsLabel\n                        value={value.total_risk}\n                        rest={{ isCompact: true }}\n                      />\n                    ) : (\n                      intl.formatMessage(messages.nA)\n                    )}\n                  </Tooltip>\n                </div>\n              ),\n            },\n            {\n              title: (\n                <div key={key}>{`${\n                  value?.impacted_clusters_count !== undefined\n                    ? value.impacted_clusters_count.toLocaleString()\n                    : intl.formatMessage(messages.nA)\n                }`}</div>\n              ),\n            },\n          ],\n        },\n        {\n          fullWidth: true,\n          cells: [\n            {\n              title: (\n                <section className=\"pf-m-light pf-l-page__main-section pf-c-page__main-section\">\n                  <Stack hasGutter>\n                    <RuleDetails\n                      rule={{\n                        ...value,\n                        impact: { impact: value.impact },\n                      }}\n                      isDetailsPage={false}\n                    />\n                  </Stack>\n                </section>\n              ),\n            },\n          ],\n        },\n      ]);\n  };\n\n  const buildDisplayedRows = (rows, index, direction) => {\n    const sortingRows = [...rows].sort((firstItem, secondItem) => {\n      const fst = firstItem[0].rule[RECS_LIST_COLUMNS_KEYS[index - 1]];\n      const snd = secondItem[0].rule[RECS_LIST_COLUMNS_KEYS[index - 1]];\n      if (index === 3) {\n        return extractCategories(fst)[0].localeCompare(\n          extractCategories(snd)[0]\n        );\n      }\n      return fst > snd ? 1 : snd > fst ? -1 : 0;\n    });\n    if (direction === SortByDirection.desc) {\n      sortingRows.reverse();\n    }\n    return sortingRows\n      .slice(\n        filters.limit * (page - 1),\n        filters.limit * (page - 1) + filters.limit\n      )\n      .flatMap((row, index) => {\n        const updatedRow = [...row];\n        row[1].parent = index * 2;\n        return updatedRow;\n      });\n  };\n\n  const removeFilterParam = (param) => {\n    const filter = { ...filters, offset: 0 };\n    delete filter[param];\n    updateFilters({ ...filter, ...(param === 'text' ? { text: '' } : {}) });\n  };\n\n  // TODO: update URL when filters changed\n  const addFilterParam = (param, values) =>\n    values.length > 0\n      ? updateFilters({ ...filters, offset: 0, ...{ [param]: values } })\n      : removeFilterParam(param);\n\n  const toggleRulesDisabled = (rule_status) =>\n    updateFilters({\n      ...filters,\n      rule_status,\n      offset: 0,\n    });\n\n  const filterConfigItems = [\n    {\n      label: intl.formatMessage(messages.name).toLowerCase(),\n      filterValues: {\n        key: 'text-filter',\n        onChange: (_event, value) => setSearchText(value),\n        value: searchText,\n        placeholder: intl.formatMessage(messages.filterBy),\n      },\n    },\n    {\n      label: FILTER_CATEGORIES.total_risk.title,\n      type: FILTER_CATEGORIES.total_risk.type,\n      id: FILTER_CATEGORIES.total_risk.urlParam,\n      value: `checkbox-${FILTER_CATEGORIES.total_risk.urlParam}`,\n      filterValues: {\n        key: `${FILTER_CATEGORIES.total_risk.urlParam}-filter`,\n        onChange: (_event, values) =>\n          addFilterParam(FILTER_CATEGORIES.total_risk.urlParam, values),\n        value: filters.total_risk,\n        items: FILTER_CATEGORIES.total_risk.values,\n      },\n    },\n    {\n      label: FILTER_CATEGORIES.impact.title,\n      type: FILTER_CATEGORIES.impact.type,\n      id: FILTER_CATEGORIES.impact.urlParam,\n      value: `checkbox-${FILTER_CATEGORIES.impact.urlParam}`,\n      filterValues: {\n        key: `${FILTER_CATEGORIES.impact.urlParam}-filter`,\n        onChange: (_event, values) =>\n          addFilterParam(FILTER_CATEGORIES.impact.urlParam, values),\n        value: filters.impact,\n        items: FILTER_CATEGORIES.impact.values,\n      },\n    },\n    {\n      label: FILTER_CATEGORIES.likelihood.title,\n      type: FILTER_CATEGORIES.likelihood.type,\n      id: FILTER_CATEGORIES.likelihood.urlParam,\n      value: `checkbox-${FILTER_CATEGORIES.likelihood.urlParam}`,\n      filterValues: {\n        key: `${FILTER_CATEGORIES.likelihood.urlParam}-filter`,\n        onChange: (_event, values) =>\n          addFilterParam(FILTER_CATEGORIES.likelihood.urlParam, values),\n        value: filters.likelihood,\n        items: FILTER_CATEGORIES.likelihood.values,\n      },\n    },\n    {\n      label: FILTER_CATEGORIES.category.title,\n      type: FILTER_CATEGORIES.category.type,\n      id: FILTER_CATEGORIES.category.urlParam,\n      value: `checkbox-${FILTER_CATEGORIES.category.urlParam}`,\n      filterValues: {\n        key: `${FILTER_CATEGORIES.category.urlParam}-filter`,\n        onChange: (_event, values) =>\n          addFilterParam(FILTER_CATEGORIES.category.urlParam, values),\n        value: filters.category,\n        items: FILTER_CATEGORIES.category.values,\n      },\n    },\n    {\n      label: FILTER_CATEGORIES.rule_status.title,\n      type: FILTER_CATEGORIES.rule_status.type,\n      id: FILTER_CATEGORIES.rule_status.urlParam,\n      value: `radio-${FILTER_CATEGORIES.rule_status.urlParam}`,\n      filterValues: {\n        key: `${FILTER_CATEGORIES.rule_status.urlParam}-filter`,\n        onChange: (_event, value) => toggleRulesDisabled(value),\n        value: `${filters.rule_status}`,\n        items: FILTER_CATEGORIES.rule_status.values,\n      },\n    },\n    {\n      label: FILTER_CATEGORIES.impacting.title,\n      type: FILTER_CATEGORIES.impacting.type,\n      id: FILTER_CATEGORIES.impacting.urlParam,\n      value: `checkbox-${FILTER_CATEGORIES.impacting.urlParam}`,\n      filterValues: {\n        key: `${FILTER_CATEGORIES.impacting.urlParam}-filter`,\n        onChange: (e, values) =>\n          addFilterParam(FILTER_CATEGORIES.impacting.urlParam, values),\n        value: filters.impacting,\n        items: FILTER_CATEGORIES.impacting.values,\n      },\n    },\n  ];\n\n  const onSort = (_e, index, direction) =>\n    updateFilters({ ...filters, sortIndex: index, sortDirection: direction });\n\n  const pruneFilters = (localFilters, filterCategories) => {\n    const prunedFilters = Object.entries(localFilters);\n    return prunedFilters.length > 0\n      ? prunedFilters.reduce((arr, item) => {\n          if (filterCategories[item[0]]) {\n            const category = filterCategories[item[0]];\n            const chips = Array.isArray(item[1])\n              ? item[1].map((value) => {\n                  const selectedCategoryValue = category.values.find(\n                    (values) => values.value === String(value)\n                  );\n                  return selectedCategoryValue\n                    ? {\n                        name:\n                          selectedCategoryValue.text ||\n                          selectedCategoryValue.label,\n                        value,\n                      }\n                    : { name: value, value };\n                })\n              : [\n                  {\n                    name: category.values.find(\n                      (values) => values.value === String(item[1])\n                    ).label,\n                    value: item[1],\n                  },\n                ];\n            return [\n              ...arr,\n              {\n                category: capitalize(category.title),\n                chips,\n                urlParam: category.urlParam,\n              },\n            ];\n          } else if (item[0] === 'text') {\n            return [\n              ...arr,\n              ...(item[1].length > 0\n                ? [\n                    {\n                      category: 'Name',\n                      chips: [{ name: item[1], value: item[1] }],\n                      urlParam: item[0],\n                    },\n                  ]\n                : []),\n            ];\n          } else {\n            return arr;\n          }\n        }, [])\n      : [];\n  };\n\n  const buildFilterChips = () => {\n    const localFilters = { ...filters };\n    delete localFilters.sortIndex;\n    delete localFilters.sortDirection;\n    delete localFilters.offset;\n    delete localFilters.limit;\n    return pruneFilters(localFilters, FILTER_CATEGORIES);\n  };\n\n  const activeFiltersConfig = {\n    deleteTitle: intl.formatMessage(messages.resetFilters),\n    filters: buildFilterChips(),\n    onDelete: (_event, itemsToRemove, isAll) => {\n      if (isAll) {\n        updateFilters(RECS_LIST_INITIAL_STATE);\n      } else {\n        itemsToRemove.map((item) => {\n          const newFilter = {\n            [item.urlParam]: Array.isArray(filters[item.urlParam])\n              ? filters[item.urlParam].filter(\n                  (value) => String(value) !== String(item.chips[0].value)\n                )\n              : '',\n          };\n          newFilter[item.urlParam].length > 0\n            ? updateFilters({ ...filters, ...newFilter })\n            : removeFilterParam(item.urlParam);\n        });\n      }\n    },\n  };\n\n  //Responsible for the handling collapse for all the recommendations\n  //Used in the PrimaryToolbar\n  const collapseAll = (_e, isOpen) => {\n    setIsAllExpanded(isOpen);\n    setDisplayedRows(\n      displayedRows.map((row) => {\n        return {\n          ...row,\n          isOpen: isOpen,\n        };\n      })\n    );\n  };\n\n  //Responsible for handling collapse for single recommendation\n  const handleOnCollapse = (_e, rowId, isOpen) => {\n    const collapseRows = [...displayedRows];\n    collapseRows[rowId] = { ...collapseRows[rowId], isOpen };\n    setDisplayedRows(collapseRows);\n  };\n\n  const ackRule = async (rowId) => {\n    const rule = displayedRows[rowId].rule;\n\n    try {\n      if (!rule.disabled) {\n        // show disable rule modal\n        setSelectedRule(rule);\n        setDisableRuleOpen(true);\n      } else {\n        try {\n          await Delete(`${BASE_URL}/v2/ack/${rule.rule_id}/`);\n          notify({\n            variant: 'success',\n            timeout: true,\n            dismissable: true,\n            title: intl.formatMessage(messages.recSuccessfullyEnabled),\n          });\n          refetch();\n        } catch (error) {\n          notify({\n            variant: 'danger',\n            dismissable: true,\n            title: intl.formatMessage(messages.error),\n            description: `${error}`,\n          });\n        }\n      }\n    } catch (error) {\n      notify({\n        variant: 'danger',\n        dismissable: true,\n        title: rule.disabled\n          ? intl.formatMessage(messages.rulesTableErrorEnabled)\n          : intl.formatMessage(messages.rulesTableErrorDisabled),\n        description: `${error}`,\n      });\n    }\n  };\n\n  const actionResolver = (rowData, { rowIndex }) => {\n    const rule = displayedRows[rowIndex].rule\n      ? displayedRows[rowIndex].rule\n      : null;\n    if (rowIndex % 2 !== 0 || !rule) {\n      return null;\n    }\n\n    return rule && !rule.disabled\n      ? [\n          {\n            title: intl.formatMessage(messages.disableRule),\n            onClick: (_event, rowId) => ackRule(rowId),\n          },\n        ]\n      : [\n          {\n            title: intl.formatMessage(messages.enableRule),\n            onClick: (_event, rowId) => ackRule(rowId),\n          },\n        ];\n  };\n\n  return (\n    <div id=\"recs-list-table\">\n      {disableRuleOpen && (\n        <DisableRule\n          handleModalToggle={setDisableRuleOpen}\n          isModalOpen={disableRuleOpen}\n          rule={selectedRule}\n          afterFn={refetch}\n        />\n      )}\n      <PrimaryToolbar\n        expandAll={{ isAllExpanded, onClick: collapseAll }}\n        pagination={{\n          itemCount: filteredRows.length,\n          page: filters.offset / filters.limit + 1,\n          perPage: Number(filters.limit),\n          onSetPage(_event, page) {\n            updateFilters({\n              ...filters,\n              offset: filters.limit * (page - 1),\n            });\n          },\n          onPerPageSelect(_event, perPage) {\n            updateFilters({ ...filters, limit: perPage, offset: 0 });\n          },\n          isCompact: true,\n          ouiaId: 'pager',\n        }}\n        filterConfig={{ items: filterConfigItems }}\n        activeFiltersConfig={activeFiltersConfig}\n      />\n      {(isUninitialized || isFetching) && <Loading />}\n      {(isError || (isSuccess && recs.length === 0)) && (\n        <Card id=\"error-state-message\" ouiaId=\"error-state\">\n          <CardBody>\n            <ErrorState />\n          </CardBody>\n        </Card>\n      )}\n      {!(isUninitialized || isFetching) && isSuccess && recs.length > 0 && (\n        <React.Fragment>\n          <Table\n            aria-label=\"Table of recommendations\"\n            ouiaId=\"recommendations\"\n            variant={TableVariant.compact}\n            cells={RECS_LIST_COLUMNS}\n            rows={displayedRows}\n            onCollapse={handleOnCollapse}\n            sortBy={{\n              index: filters.sortIndex,\n              direction: filters.sortDirection,\n            }}\n            onSort={onSort}\n            actionResolver={actionResolver}\n            isStickyHeader\n          >\n            <TableHeader />\n            <TableBody />\n          </Table>\n          {recs.length > 0 && filteredRows.length === 0 && (\n            <Card ouiaId=\"empty-state\">\n              <CardBody>\n                <NoMatchingRecs />\n              </CardBody>\n            </Card>\n          )}\n        </React.Fragment>\n      )}\n      <Pagination\n        ouiaId=\"pager\"\n        itemCount={filteredRows.length}\n        page={filters.offset / filters.limit + 1}\n        perPage={Number(filters.limit)}\n        onSetPage={(_e, page) =>\n          updateFilters({\n            ...filters,\n            offset: filters.limit * (page - 1),\n          })\n        }\n        onPerPageSelect={(_e, perPage) =>\n          updateFilters({ ...filters, limit: perPage, offset: 0 })\n        }\n        widgetId={`pagination-options-menu-bottom`}\n        variant={PaginationVariant.bottom}\n      />\n    </div>\n  );\n};\n\nRecsListTable.propTypes = {\n  query: PropTypes.shape({\n    isError: PropTypes.bool.isRequired,\n    isUninitialized: PropTypes.bool.isRequired,\n    isFetching: PropTypes.bool.isRequired,\n    isSuccess: PropTypes.bool.isRequired,\n    data: PropTypes.array,\n    refetch: PropTypes.func,\n  }),\n};\n\nexport { RecsListTable };\n","import React from 'react';\n\nimport { RecsListTable } from './RecsListTable';\nimport { useGetRecsQuery } from '../../Services/SmartProxy';\n\nconst RecsListTableWrapper = () => {\n  const query = useGetRecsQuery();\n\n  return <RecsListTable query={query} />;\n};\n\nexport default RecsListTableWrapper;\n"],"names":["CATEGORY_ICONS","security","service_availability","performance","fault_tolerance","extractCategories","tags","filter","t","Object","keys","RULE_CATEGORIES","includes","CategoryLabel","intl","useIntl","LabelGroup","numLabels","isCompact","map","tag","key","Label","icon","variant","color","formatMessage","messages","camelCase","propTypes","PropTypes","RecsListTable","query","dispatch","useDispatch","filters","useSelector","recsListState","isError","isUninitialized","isFetching","isSuccess","data","refetch","recs","recommendations","page","offset","limit","useState","filteredRows","setFilteredRows","displayedRows","setDisplayedRows","disableRuleOpen","setDisableRuleOpen","selectedRule","setSelectedRule","isAllExpanded","setIsAllExpanded","notify","addNotification","search","useLocation","filterBuilding","setFilterBuilding","updateFilters","updateRecsListFilters","text","searchText","setSearchText","debouncedSearchText","debounce","DEBOUNCE_DELAY","useEffect","buildDisplayedRows","sortIndex","sortDirection","buildFilteredRows","paramsObject","paramParser","undefined","sort","sortObj","translateSortParams","RECS_LIST_COLUMNS_KEYS","name","direction","Number","impacting","Array","isArray","updatedFilters","cloneDeep","length","localFilters","allRows","rule","passFilters","value","isOpen","cells","title","Link","to","rule_id","description","RuleLabels","publish_date","DateFormat","date","Tooltip","position","TooltipPosition","content","risk","TOTAL_RISK_LABEL_LOWER","total_risk","strong","str","InsightsLabel","rest","impacted_clusters_count","toLocaleString","fullWidth","className","Stack","hasGutter","RuleDetails","impact","isDetailsPage","rows","index","sortingRows","firstItem","secondItem","fst","snd","localeCompare","SortByDirection","reverse","slice","flatMap","row","updatedRow","parent","removeFilterParam","param","addFilterParam","values","filterConfigItems","label","toLowerCase","filterValues","onChange","_event","placeholder","FILTER_CATEGORIES","type","id","items","likelihood","category","rule_status","e","activeFiltersConfig","deleteTitle","filterCategories","prunedFilters","entries","reduce","arr","item","chips","selectedCategoryValue","find","String","capitalize","urlParam","pruneFilters","onDelete","itemsToRemove","isAll","RECS_LIST_INITIAL_STATE","newFilter","ackRule","rowId","disabled","Delete","BASE_URL","timeout","dismissable","DisableRule","handleModalToggle","isModalOpen","afterFn","PrimaryToolbar","expandAll","onClick","_e","pagination","itemCount","perPage","onSetPage","onPerPageSelect","ouiaId","filterConfig","Loading","Card","CardBody","Table","TableVariant","RECS_LIST_COLUMNS","onCollapse","collapseRows","sortBy","onSort","actionResolver","rowData","rowIndex","isStickyHeader","TableHeader","TableBody","Pagination","widgetId","PaginationVariant","useGetRecsQuery"],"sourceRoot":""}