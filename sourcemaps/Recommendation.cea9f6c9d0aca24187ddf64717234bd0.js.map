{"version":3,"file":"js/Recommendation.b742a2e754cbf79d4a2d.js","mappings":"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","sources":["webpack:///./src/Components/AffectedClustersTable/AffectedClustersTable.js","webpack:///./src/Components/Modals/ViewHostAcks.js","webpack:///./src/Components/Recommendation/Recommendation.js","webpack:///./src/Components/Recommendation/index.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter/conditionalFilterConstants';\nimport PrimaryToolbar from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport { EmptyTable } from '@redhat-cloud-services/frontend-components/EmptyTable';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components/TableToolbar';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { Card, CardBody } from '@patternfly/react-core/dist/js/components/Card';\nimport { Table } from '@patternfly/react-table/dist/js/components/Table/Table';\nimport { TableBody } from '@patternfly/react-table/dist/js/components/Table/Body';\nimport { TableHeader } from '@patternfly/react-table/dist/js/components/Table/Header';\nimport { Bullseye } from '@patternfly/react-core/dist/js/layouts/Bullseye';\nimport { Tooltip } from '@patternfly/react-core/dist/js/components/Tooltip';\nimport {\n  Pagination,\n  PaginationVariant,\n} from '@patternfly/react-core/dist/js/components/Pagination/Pagination';\n\nimport {\n  ErrorState,\n  NoAffectedClusters,\n  NoMatchingClusters,\n} from '../MessageState/EmptyStates';\nimport {\n  AFFECTED_CLUSTERS_COLUMNS,\n  AFFECTED_CLUSTERS_LAST_SEEN,\n  AFFECTED_CLUSTERS_NAME_CELL,\n} from '../../AppConstants';\nimport Loading from '../Loading/Loading';\nimport { updateAffectedClustersFilters } from '../../Services/Filters';\nimport messages from '../../Messages';\nimport DisableRule from '../Modals/DisableRule';\n\nconst AffectedClustersTable = ({ query, rule, afterDisableFn }) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n\n  const [filteredRows, setFilteredRows] = useState([]);\n  const [displayedRows, setDisplayedRows] = useState([]);\n  const [disableRuleModalOpen, setDisableRuleModalOpen] = useState(false);\n  const [chips, setChips] = useState([]);\n  const [selected, setSelected] = useState([]);\n  const [host, setHost] = useState(undefined);\n\n  const {\n    isError,\n    isUninitialized,\n    isFetching,\n    isSuccess,\n    /* the response contains two lists: `disabled` has clusters\n      for which the rec is disabled (acked), and `enable` contains\n       clusters that are affected by the rec */\n    data = { disabled: [], enabled: [] },\n  } = query;\n  const rows = data.enabled;\n  const filters = useSelector(({ filters }) => filters.affectedClustersState);\n  const perPage = filters.limit;\n  const page = filters.offset / filters.limit + 1;\n  const allSelected = selected.length === filteredRows.length;\n\n  const updateFilters = (filters) =>\n    dispatch(updateAffectedClustersFilters(filters));\n\n  const updateNameChip = (chips, newValue) => {\n    const newChips = chips;\n    const nameCategoryIndex = newChips.findIndex(\n      (chip) => chip.category === 'Name'\n    );\n    if (newValue === '') {\n      newChips.splice(nameCategoryIndex);\n    } else {\n      if (nameCategoryIndex === -1) {\n        newChips.push({ category: 'Name', chips: [{ name: newValue }] });\n      } else {\n        newChips[nameCategoryIndex] = {\n          category: 'Name',\n          chips: [{ name: newValue }],\n        };\n      }\n    }\n    return newChips;\n  };\n\n  const onChipDelete = () => {\n    // right now, only designed to treat the Name (text) filter\n    const newFilters = { ...filters, text: '' };\n    updateFilters(newFilters);\n  };\n\n  const onNameFilterChange = (value) => {\n    const newFilters = { ...filters, text: value, offset: 0 };\n    updateFilters(newFilters);\n  };\n\n  const filterConfig = {\n    items: [\n      {\n        label: 'Name',\n        placeholder: 'Filter by name',\n        type: conditionalFilterType.text,\n        filterValues: {\n          id: 'name-filter',\n          key: 'name-filter',\n          onChange: (_e, value) => onNameFilterChange(value),\n          value: filters.text,\n        },\n      },\n    ],\n    isDisabled: isError || (rows && rows.length === 0),\n  };\n\n  const onSort = (_e, index, direction) => {\n    updateFilters({ ...filters, sortIndex: index, sortDirection: direction });\n  };\n\n  const onSetPage = (_e, pageNumber) => {\n    const newOffset = pageNumber * filters.limit - filters.limit;\n    updateFilters({ ...filters, offset: newOffset });\n  };\n\n  const onSetPerPage = (_e, perPage) => {\n    updateFilters({ ...filters, limit: perPage });\n  };\n\n  // constructs array of rows (from the initial data) checking currently applied filters\n  const buildFilteredRows = (allRows, filters) => {\n    const rows = allRows.map((r) => ({\n      id: r.cluster,\n      cells: [r?.cluster_name || r.cluster],\n      last_checked_at: r?.last_checked_at,\n    }));\n    return rows\n      .filter((row) => {\n        return row?.cells[0].toLowerCase().includes(filters.text.toLowerCase());\n      })\n      .sort((a, b) => {\n        let fst, snd;\n        const d = filters.sortDirection === 'asc' ? 1 : -1;\n        switch (filters.sortIndex) {\n          case AFFECTED_CLUSTERS_NAME_CELL:\n            if (filters.sortDirection === 'asc') {\n              return a?.cells[0].localeCompare(b?.cells[0]);\n            }\n            return b?.cells[0].localeCompare(a?.cells[0]);\n          case AFFECTED_CLUSTERS_LAST_SEEN:\n            fst = new Date(a.last_checked_at || 0);\n            snd = new Date(b.last_checked_at || 0);\n            return fst > snd ? d : snd > fst ? -d : 0;\n        }\n      });\n  };\n\n  const buildDisplayedRows = (rows) => {\n    return rows\n      .slice(perPage * (page - 1), perPage * (page - 1) + perPage)\n      .map((r) => ({\n        ...r,\n        cells: [\n          <span key={r.id}>\n            <Link to={`/clusters/${r.id}?first=${rule.rule_id}`}>\n              {r.cells[0]}\n            </Link>\n          </span>,\n          <span key={r.id}>\n            {r.last_checked_at ? (\n              <DateFormat\n                extraTitle={`${intl.formatMessage(messages.lastSeen)}: `}\n                date={r.last_checked_at}\n                variant=\"relative\"\n              />\n            ) : (\n              <Tooltip\n                key={r.id}\n                content={\n                  <span>\n                    {intl.formatMessage(messages.lastSeen) + ': '}\n                    {intl.formatMessage(messages.nA)}\n                  </span>\n                }\n              >\n                <span>{intl.formatMessage(messages.nA)}</span>\n              </Tooltip>\n            )}\n          </span>,\n        ],\n      }));\n  };\n\n  // if rowId === -1, then select all rows\n  const onSelect = (event, isSelected, rowId) => {\n    let rows;\n    rowId === -1\n      ? (rows = filteredRows.map((r) => ({ ...r, selected: isSelected })))\n      : (rows = filteredRows.map((r, i) => ({\n          ...r,\n          selected: i === rowId ? isSelected : r.selected,\n        })));\n    setSelected(rows.filter((r) => r.selected));\n    setFilteredRows(rows);\n    setDisplayedRows(buildDisplayedRows(rows));\n  };\n\n  useEffect(() => {\n    const newFilteredRows = buildFilteredRows(rows, filters);\n    const newDisplayedRows = buildDisplayedRows(newFilteredRows);\n    const newChips = updateNameChip(chips, filters.text);\n    setFilteredRows(newFilteredRows);\n    setDisplayedRows(newDisplayedRows);\n    setChips(newChips);\n  }, [query, filters]);\n\n  const handleModalToggle = (disableRuleModalOpen, host = undefined) => {\n    setDisableRuleModalOpen(disableRuleModalOpen);\n    setHost(host);\n  };\n\n  return (\n    <div id=\"affected-list-table\">\n      {disableRuleModalOpen && (\n        <DisableRule\n          handleModalToggle={handleModalToggle}\n          isModalOpen={disableRuleModalOpen}\n          rule={rule}\n          afterFn={afterDisableFn}\n          hosts={selected}\n          host={host}\n        />\n      )}\n      <PrimaryToolbar\n        filterConfig={filterConfig}\n        pagination={{\n          itemCount: filteredRows.length,\n          page,\n          perPage,\n          onSetPage: onSetPage,\n          onPerPageSelect: onSetPerPage,\n          ouiaId: 'pager',\n        }}\n        activeFiltersConfig={\n          isError || (rows && rows.length === 0)\n            ? undefined\n            : {\n                filters: chips,\n                onDelete: onChipDelete,\n              }\n        }\n        bulkSelect={{\n          count: selected.length,\n          items: [\n            {\n              title: intl.formatMessage(messages.selectNone),\n              onClick: (event) => onSelect(event, false, -1),\n            },\n            {\n              title: intl.formatMessage(messages.selectAll, {\n                items: filteredRows?.length || 0,\n              }),\n              onClick: (event) => onSelect(event, true, -1),\n            },\n          ],\n          checked: allSelected,\n          onSelect: (event) =>\n            allSelected\n              ? onSelect(event, false, -1)\n              : onSelect(event, true, -1),\n          ouiaId: 'clusters-selector',\n        }}\n        actionsConfig={{\n          actions: [\n            '',\n            {\n              label: intl.formatMessage(messages.disableRuleForClusters),\n              props: { isDisabled: selected.length === 0 },\n              onClick: () => handleModalToggle(true),\n            },\n          ],\n        }}\n      />\n      <Table\n        aria-label=\"Table of affected clusters\"\n        ouiaId=\"clusters\"\n        variant=\"compact\"\n        cells={AFFECTED_CLUSTERS_COLUMNS}\n        rows={displayedRows}\n        sortBy={{\n          index: filters.sortIndex,\n          direction: filters.sortDirection,\n        }}\n        onSort={onSort}\n        canSelectAll={false}\n        onSelect={displayedRows?.length > 0 ? onSelect : undefined}\n        actions={[\n          {\n            title: 'Disable recommendation for cluster',\n            onClick: (event, rowIndex) => {\n              return handleModalToggle(true, filteredRows[rowIndex].id);\n            },\n          },\n        ]}\n      >\n        <TableHeader />\n        {(isUninitialized || isFetching) && <Loading />}\n        {isError && (\n          <Card id=\"error-state-message\" ouiaId=\"error-state\">\n            <CardBody>\n              <ErrorState />\n            </CardBody>\n          </Card>\n        )}\n        {isSuccess && rows.length === 0 && (\n          <Card id=\"empty-state-message\" ouiaId=\"empty-state\">\n            <CardBody>\n              <NoAffectedClusters />\n            </CardBody>\n          </Card>\n        )}\n        {isSuccess &&\n          rows.length > 0 &&\n          (filteredRows.length > 0 ? (\n            <TableBody />\n          ) : (\n            <EmptyTable>\n              <Bullseye>\n                <NoMatchingClusters />\n              </Bullseye>\n            </EmptyTable>\n          ))}\n      </Table>\n      <TableToolbar isFooter className=\"ins-c-inventory__table--toolbar\">\n        <Pagination\n          variant={PaginationVariant.bottom}\n          itemCount={filteredRows.length}\n          page={page}\n          perPage={perPage}\n          onSetPage={onSetPage}\n          onPerPageSelect={onSetPerPage}\n          onPageInput={onSetPage}\n          ouiaId=\"pager\"\n        />\n      </TableToolbar>\n    </div>\n  );\n};\n\nAffectedClustersTable.propTypes = {\n  query: PropTypes.shape({\n    isError: PropTypes.bool.isRequired,\n    isUninitialized: PropTypes.bool.isRequired,\n    isFetching: PropTypes.bool.isRequired,\n    isSuccess: PropTypes.bool.isRequired,\n    data: PropTypes.array,\n  }),\n  rule: PropTypes.object,\n  afterDisableFn: PropTypes.func,\n};\n\nexport { AffectedClustersTable };\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { List } from 'react-content-loader';\nimport { useIntl } from 'react-intl';\nimport { useDispatch } from 'react-redux';\n\nimport {\n  Table,\n  TableBody,\n  TableHeader,\n  cellWidth,\n} from '@patternfly/react-table';\nimport { Button } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { Modal } from '@patternfly/react-core/dist/js/components/Modal/Modal';\nimport OutlinedBellIcon from '@patternfly/react-icons/dist/js/icons/outlined-bell-icon';\nimport { addNotification as notification } from '@redhat-cloud-services/frontend-components-notifications/';\n\nimport messages from '../../Messages';\nimport { enableRuleForCluster } from '../../Services/Acks';\n\nconst ViewHostAcks = ({\n  handleModalToggle,\n  isModalOpen,\n  clusters,\n  recId,\n  afterFn,\n}) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const addNotification = (data) => dispatch(notification(data));\n  const { data, isFetching, isLoading, refetch } = clusters;\n  const hostAcks = data?.disabled || [];\n  const [rows, setRows] = useState([]);\n  const [unclean, setUnclean] = useState(false);\n\n  const columns = [\n    {\n      title: intl.formatMessage(messages.clusterName),\n\n      transforms: [cellWidth(50)],\n    },\n    {\n      title: intl.formatMessage(messages.justificationNote),\n\n      transforms: [cellWidth(25)],\n    },\n    {\n      title: intl.formatMessage(messages.dateDisabled),\n\n      transforms: [cellWidth(15)],\n    },\n    '',\n  ];\n\n  const deleteAck = async (host) => {\n    try {\n      await enableRuleForCluster({ uuid: host.cluster_id, recId });\n      refetch();\n      setUnclean(true);\n    } catch (error) {\n      handleModalToggle(false);\n      addNotification({\n        variant: 'danger',\n        dismissable: true,\n        title: intl.formatMessage(messages.error),\n        description: `${error}`,\n      });\n    }\n  };\n\n  useEffect(() => {\n    const rows = hostAcks?.map((item) => ({\n      cells: [\n        item.cluster_name || item.cluster_id,\n        item.justification || intl.formatMessage(messages.none),\n        {\n          title: (\n            <DateFormat date={new Date(item.disabled_at)} type=\"onlyDate\" />\n          ),\n        },\n        {\n          title: (\n            <Button\n              key={item.cluster_id}\n              isInline\n              variant=\"link\"\n              onClick={() => deleteAck(item)}\n            >\n              <OutlinedBellIcon size=\"sm\" />\n              {` ${intl.formatMessage(messages.enable)}`}\n            </Button>\n          ),\n        },\n      ],\n    }));\n\n    if (!isLoading && hostAcks.length === 0) {\n      afterFn();\n      handleModalToggle(false);\n    }\n    setRows(rows);\n  }, [hostAcks]);\n\n  return (\n    <Modal\n      width={'75%'}\n      title={intl.formatMessage(messages.hostAckModalTitle)}\n      isOpen={isModalOpen}\n      onClose={() => {\n        unclean && afterFn();\n        handleModalToggle(false);\n      }}\n    >\n      {!isFetching ? (\n        <Table aria-label=\"host-ack-table\" rows={rows} cells={columns}>\n          <TableHeader />\n          <TableBody />\n        </Table>\n      ) : (\n        <Table\n          aria-label=\"host-ack-table\"\n          rows={[\n            {\n              cells: [{ props: { colSpan: 3 }, title: <List /> }],\n            },\n          ]}\n          cells={columns}\n        >\n          <TableHeader />\n          <TableBody />\n        </Table>\n      )}\n    </Modal>\n  );\n};\n\nViewHostAcks.propTypes = {\n  isModalOpen: PropTypes.bool,\n  handleModalToggle: PropTypes.func,\n  clusters: PropTypes.object,\n  recId: PropTypes.string,\n  afterFn: PropTypes.func,\n};\n\nViewHostAcks.defaultProps = {\n  isModalOpen: false,\n  handleModalToggle: () => undefined,\n  clusters: {},\n  recId: '',\n  afterFn: () => undefined,\n};\n\nexport default ViewHostAcks;\n","import './Recommendation.scss';\n\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\n\nimport {\n  Card,\n  CardBody,\n  CardFooter,\n  CardHeader,\n} from '@patternfly/react-core/dist/js/components/Card';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { Label } from '@patternfly/react-core/dist/js/components/Label/Label';\nimport { Title } from '@patternfly/react-core/dist/js/components/Title/Title';\nimport { LabelGroup } from '@patternfly/react-core/dist/js/components/LabelGroup';\nimport BellSlashIcon from '@patternfly/react-icons/dist/js/icons/bell-slash-icon';\nimport CaretDownIcon from '@patternfly/react-icons/dist/js/icons/caret-down-icon';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { Button } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport { Dropdown } from '@patternfly/react-core/dist/js/components/Dropdown/Dropdown';\nimport { DropdownItem } from '@patternfly/react-core/dist/js/components/Dropdown/DropdownItem';\nimport { DropdownToggle } from '@patternfly/react-core/dist/js/components/Dropdown/DropdownToggle';\nimport { Flex } from '@patternfly/react-core/dist/js/layouts/Flex/Flex';\nimport { FlexItem } from '@patternfly/react-core/dist/js/layouts/Flex/FlexItem';\nimport { ErrorState } from '@redhat-cloud-services/frontend-components/ErrorState';\n\nimport Breadcrumbs from '../Breadcrumbs';\nimport RuleLabels from '../Labels/RuleLabels';\nimport { FILTER_CATEGORIES, RULE_CATEGORIES } from '../../AppConstants';\nimport messages from '../../Messages';\nimport RuleDetails from './RuleDetails';\nimport Loading from '../Loading/Loading';\nimport { adjustOCPRule } from '../../Utilities/Rule';\nimport MessageState from '../MessageState/MessageState';\nimport { AffectedClustersTable } from '../AffectedClustersTable/AffectedClustersTable';\nimport { Delete, Post } from '../../Utilities/Api';\nimport { BASE_URL } from '../../Services/SmartProxy';\nimport DisableRule from '../Modals/DisableRule';\nimport ViewHostAcks from '../Modals/ViewHostAcks';\nimport { OneLineLoader } from '../../Utilities/Loaders';\nimport { enableRuleForCluster } from '../../Services/Acks';\n\nconst Recommendation = ({ rule, ack, clusters, match }) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const notify = (data) => dispatch(addNotification(data));\n  const recId = match.params.recommendationId;\n  const [disableRuleModalOpen, setDisableRuleModalOpen] = useState(false);\n  const [actionsDropdownOpen, setActionsDropdownOpen] = useState(false);\n  const [viewSystemsModalOpen, setViewSystemsModalOpen] = useState(false);\n\n  // rule's info\n  const {\n    isError,\n    isUninitialized,\n    isLoading,\n    isFetching,\n    isSuccess,\n    data,\n    refetch,\n  } = rule;\n  // justification note, last time acknowledged, etc.\n  const { data: ackData, isFetching: ackIsFetching, refetch: refetchAck } = ack;\n  const ruleDate = new Date(ackData?.updated_at || ackData?.created_at);\n  // affected and acked clusters lists\n  const {\n    data: clustersData,\n    isFetching: clustersIsFetching,\n    refetch: refetchClusters,\n  } = clusters;\n\n  const content =\n    isSuccess && data ? adjustOCPRule(data.content, recId) : undefined;\n  const ackedClusters =\n    !clustersIsFetching && clustersData ? clustersData.disabled : undefined;\n\n  const afterDisableFn = async () => {\n    refetch();\n    refetchAck();\n    refetchClusters();\n  };\n\n  const handleModalToggle = (disableRuleModalOpen) => {\n    setDisableRuleModalOpen(disableRuleModalOpen);\n  };\n\n  const enableRecForHosts = async ({ uuids }) => {\n    try {\n      const requests = uuids.map((uuid) =>\n        enableRuleForCluster({ uuid, recId })\n      );\n      await Promise.all(requests);\n      refetch();\n      refetchAck();\n      refetchClusters();\n      notify({\n        variant: 'success',\n        timeout: true,\n        dismissable: true,\n        title: intl.formatMessage(messages.recSuccessfullyEnabledForCluster),\n      });\n    } catch (error) {\n      notify({\n        variant: 'danger',\n        dismissable: true,\n        title: intl.formatMessage(messages.error),\n        description: `${error}`,\n      });\n    }\n  };\n\n  const enableRule = async (rule) => {\n    try {\n      await Delete(`${BASE_URL}/v2/ack/${rule.data.content.rule_id}/`);\n      notify({\n        variant: 'success',\n        timeout: true,\n        dismissable: true,\n        title: intl.formatMessage(messages.recSuccessfullyEnabled),\n      });\n      refetch();\n    } catch (error) {\n      handleModalToggle(false);\n      notify({\n        variant: 'danger',\n        dismissable: true,\n        title: intl.formatMessage(messages.error),\n        description: `${error}`,\n      });\n    }\n  };\n\n  return (\n    <React.Fragment>\n      {viewSystemsModalOpen && (\n        <ViewHostAcks\n          handleModalToggle={(toggleModal) =>\n            setViewSystemsModalOpen(toggleModal)\n          }\n          isModalOpen={viewSystemsModalOpen}\n          clusters={clusters}\n          afterFn={() => refetchClusters()}\n          recId={recId}\n        />\n      )}\n      {disableRuleModalOpen && (\n        <DisableRule\n          handleModalToggle={handleModalToggle}\n          isModalOpen={disableRuleModalOpen}\n          rule={content}\n          afterFn={afterDisableFn}\n        />\n      )}\n      <PageHeader className=\"pageHeaderOverride\">\n        <Breadcrumbs current={content?.description || recId} />\n      </PageHeader>\n      {(isUninitialized || isLoading || isFetching) && (\n        <Main>\n          <Loading />\n        </Main>\n      )}\n      {isError && (\n        <Main>\n          <ErrorState />\n        </Main>\n      )}\n      {!(isUninitialized || isLoading || isFetching) && isSuccess && (\n        <React.Fragment>\n          <Main className=\"pf-m-light pf-u-pt-sm\">\n            <RuleDetails\n              isOpenShift\n              isDetailsPage\n              rule={content}\n              header={\n                <React.Fragment>\n                  <PageHeaderTitle\n                    title={\n                      <React.Fragment>\n                        {content.description} <RuleLabels rule={content} />\n                      </React.Fragment>\n                    }\n                  />\n                  <p>\n                    {intl.formatMessage(messages.rulesDetailsPubishdate, {\n                      date: (\n                        <DateFormat\n                          date={new Date(content.publish_date)}\n                          type=\"onlyDate\"\n                        />\n                      ),\n                    })}\n                    {content.tags &&\n                      (Array.isArray(content.tags) ? (\n                        <LabelGroup\n                          className=\"categoryLabels\"\n                          numLabels={1}\n                          isCompact\n                        >\n                          {content.tags.reduce((labels, tag) => {\n                            if (RULE_CATEGORIES[tag]) {\n                              labels.push(\n                                <Label\n                                  key={`label-${tag}`}\n                                  color=\"blue\"\n                                  isCompact\n                                >\n                                  {\n                                    FILTER_CATEGORIES.category.values[\n                                      RULE_CATEGORIES[tag] - 1\n                                    ].label\n                                  }\n                                </Label>\n                              );\n                            }\n                            return labels;\n                          }, [])}\n                        </LabelGroup>\n                      ) : (\n                        <Label isCompact>{content.tags}</Label>\n                      ))}\n                  </p>\n                </React.Fragment>\n              }\n              onFeedbackChanged={async (rule, rating) =>\n                await Post(`${BASE_URL}/v2/rating`, {}, { rule, rating })\n              }\n            >\n              <Flex>\n                <FlexItem align={{ default: 'alignRight' }}>\n                  <Dropdown\n                    className=\"ins-c-rec-details__actions_dropdown\"\n                    onSelect={() =>\n                      setActionsDropdownOpen(!actionsDropdownOpen)\n                    }\n                    position=\"right\"\n                    ouiaId=\"actions\"\n                    toggle={\n                      <DropdownToggle\n                        onToggle={(actionsDropdownOpen) =>\n                          setActionsDropdownOpen(actionsDropdownOpen)\n                        }\n                        toggleIndicator={CaretDownIcon}\n                      >\n                        {intl.formatMessage(messages.actions)}\n                      </DropdownToggle>\n                    }\n                    isOpen={actionsDropdownOpen}\n                    dropdownItems={\n                      content?.disabled\n                        ? [\n                            <DropdownItem\n                              key=\"link\"\n                              ouiaId=\"enable\"\n                              onClick={() => {\n                                enableRule(rule);\n                              }}\n                            >\n                              {intl.formatMessage(messages.enableRule)}\n                            </DropdownItem>,\n                          ]\n                        : [\n                            <DropdownItem\n                              key=\"link\"\n                              ouiaId=\"disable\"\n                              onClick={() => {\n                                handleModalToggle(true);\n                              }}\n                            >\n                              {intl.formatMessage(messages.disableRule)}\n                            </DropdownItem>,\n                          ]\n                    }\n                  />\n                </FlexItem>\n              </Flex>\n            </RuleDetails>\n          </Main>\n          <Main>\n            <React.Fragment>\n              {(content?.hosts_acked_count ||\n                ackedClusters?.length > 0 ||\n                content?.disabled) && (\n                <Card className=\"cardOverride\">\n                  <CardHeader>\n                    <Title headingLevel=\"h4\" size=\"xl\">\n                      <BellSlashIcon size=\"sm\" />\n                      &nbsp;\n                      {intl.formatMessage(\n                        (content?.hosts_acked_count ||\n                          ackedClusters?.length > 0) &&\n                          !content?.disabled\n                          ? messages.ruleIsDisabledForClusters\n                          : messages.ruleIsDisabled\n                      )}\n                    </Title>\n                  </CardHeader>\n                  <CardBody>\n                    {(content?.hosts_acked_count ||\n                      ackedClusters?.length > 0) &&\n                    !content?.disabled ? (\n                      <React.Fragment>\n                        {intl.formatMessage(\n                          messages.ruleIsDisabledForClustersBody,\n                          {\n                            clusters: ackedClusters?.length,\n                          }\n                        )}\n                        {!clustersIsFetching && ackedClusters?.length > 0 ? (\n                          <React.Fragment>\n                            &nbsp;\n                            <Button\n                              isInline\n                              variant=\"link\"\n                              onClick={() => setViewSystemsModalOpen(true)}\n                              ouiaId=\"view-clusters\"\n                            >\n                              {intl.formatMessage(messages.viewClusters)}\n                            </Button>\n                          </React.Fragment>\n                        ) : (\n                          <OneLineLoader />\n                        )}\n                      </React.Fragment>\n                    ) : (\n                      !ackIsFetching &&\n                      ackData && (\n                        <React.Fragment>\n                          {ackData?.justification\n                            ? intl.formatMessage(\n                                messages.ruleIsDisabledWithJustificaiton,\n                                {\n                                  date: (\n                                    <span>\n                                      <DateFormat\n                                        date={ruleDate}\n                                        type=\"onlyDate\"\n                                      />\n                                    </span>\n                                  ),\n                                  reason: ackData.justification,\n                                }\n                              )\n                            : intl.formatMessage(\n                                messages.ruleIsDisabledWithoutJustificaiton,\n                                {\n                                  date: (\n                                    <span>\n                                      <DateFormat\n                                        date={ruleDate}\n                                        type=\"onlyDate\"\n                                      />\n                                    </span>\n                                  ),\n                                }\n                              )}\n                        </React.Fragment>\n                      )\n                    )}\n                  </CardBody>\n                  <CardFooter>\n                    {(content?.hosts_acked_count ||\n                      ackedClusters?.length > 0) &&\n                    !content?.disabled ? (\n                      !clustersIsFetching && ackedClusters ? (\n                        <Button\n                          isInline\n                          variant=\"link\"\n                          onClick={() =>\n                            enableRecForHosts({\n                              uuids: ackedClusters.map((c) => c.cluster_id),\n                            })\n                          }\n                          ouiaId=\"enable-all\"\n                        >\n                          {intl.formatMessage(messages.enableRuleForClusters)}\n                        </Button>\n                      ) : (\n                        <OneLineLoader />\n                      )\n                    ) : (\n                      <Button\n                        isInline\n                        variant=\"link\"\n                        onClick={() => enableRule(rule)}\n                        ouiaId=\"rule\"\n                      >\n                        {intl.formatMessage(messages.enableRule)}\n                      </Button>\n                    )}\n                  </CardFooter>\n                </Card>\n              )}\n              {!content?.disabled && (\n                <React.Fragment>\n                  <Title className=\"titleOverride\" headingLevel=\"h3\" size=\"2xl\">\n                    {intl.formatMessage(messages.affectedClusters)}\n                  </Title>\n                  <AffectedClustersTable\n                    query={clusters}\n                    rule={content}\n                    afterDisableFn={afterDisableFn}\n                  />\n                </React.Fragment>\n              )}\n              {content?.disabled && (\n                <MessageState\n                  icon={BellSlashIcon}\n                  title={intl.formatMessage(messages.ruleIsDisabled)}\n                  text={intl.formatMessage(messages.ruleIsDisabledBody)}\n                />\n              )}\n            </React.Fragment>\n          </Main>\n        </React.Fragment>\n      )}\n    </React.Fragment>\n  );\n};\n\nRecommendation.propTypes = {\n  rule: PropTypes.object.isRequired,\n  ack: PropTypes.object.isRequired,\n  clusters: PropTypes.object.isRequired,\n  match: PropTypes.object.isRequired,\n};\n\nexport { Recommendation };\n","import React, { useEffect } from 'react';\nimport { useParams, useRouteMatch } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\n\nimport { Recommendation } from './Recommendation';\nimport {\n  useGetAffectedClustersQuery,\n  useGetRuleByIdQuery,\n} from '../../Services/SmartProxy';\nimport { useGetRecAcksQuery } from '../../Services/Acks';\nimport messages from '../../Messages';\n\nconst RecommendationWrapper = () => {\n  const intl = useIntl();\n  const rule = useGetRuleByIdQuery(useParams().recommendationId);\n  const ack = useGetRecAcksQuery({ ruleId: useParams().recommendationId });\n  if (rule.isSuccess && rule.data?.content?.description) {\n    const subnav = `${rule.data.content.description} - Recommendations`;\n    document.title = intl.formatMessage(messages.documentTitle, { subnav });\n  }\n  const clusters = useGetAffectedClustersQuery(useParams().recommendationId);\n\n  useEffect(() => {\n    rule.refetch();\n  }, [useParams().recommendationId]);\n\n  return (\n    <Recommendation\n      rule={rule}\n      ack={ack}\n      clusters={clusters}\n      match={useRouteMatch()}\n    />\n  );\n};\n\nexport default RecommendationWrapper;\n"],"names":["AffectedClustersTable","query","rule","afterDisableFn","intl","useIntl","dispatch","useDispatch","useState","filteredRows","setFilteredRows","displayedRows","setDisplayedRows","disableRuleModalOpen","setDisableRuleModalOpen","chips","setChips","selected","setSelected","undefined","host","setHost","isError","isUninitialized","isFetching","isSuccess","data","disabled","enabled","rows","filters","useSelector","f","affectedClustersState","perPage","limit","page","offset","allSelected","length","updateFilters","updateAffectedClustersFilters","filterConfig","items","label","placeholder","type","conditionalFilterType","filterValues","id","key","onChange","_e","value","newFilters","text","onNameFilterChange","isDisabled","onSetPage","pageNumber","newOffset","onSetPerPage","buildDisplayedRows","slice","map","r","cells","Link","to","rule_id","last_checked_at","DateFormat","extraTitle","formatMessage","messages","date","variant","Tooltip","content","onSelect","event","isSelected","rowId","i","filter","useEffect","newFilteredRows","allRows","cluster","cluster_name","row","toLowerCase","includes","sort","a","b","fst","snd","d","sortDirection","sortIndex","AFFECTED_CLUSTERS_NAME_CELL","localeCompare","AFFECTED_CLUSTERS_LAST_SEEN","Date","buildFilteredRows","newDisplayedRows","newChips","newValue","nameCategoryIndex","findIndex","chip","category","splice","push","name","updateNameChip","handleModalToggle","DisableRule","isModalOpen","afterFn","hosts","PrimaryToolbar","pagination","itemCount","onPerPageSelect","ouiaId","activeFiltersConfig","onDelete","bulkSelect","count","title","onClick","checked","actionsConfig","actions","props","Table","AFFECTED_CLUSTERS_COLUMNS","sortBy","index","direction","onSort","canSelectAll","rowIndex","Loading","Card","CardBody","EmptyTable","Bullseye","TableToolbar","isFooter","className","Pagination","PaginationVariant","onPageInput","propTypes","PropTypes","ViewHostAcks","clusters","recId","addNotification","notification","isLoading","refetch","hostAcks","setRows","unclean","setUnclean","columns","transforms","cellWidth","deleteAck","enableRuleForCluster","uuid","cluster_id","dismissable","description","item","justification","disabled_at","Button","isInline","size","Modal","width","isOpen","onClose","colSpan","TableHeader","TableBody","defaultProps","Recommendation","ack","match","notify","params","recommendationId","actionsDropdownOpen","setActionsDropdownOpen","viewSystemsModalOpen","setViewSystemsModalOpen","ackData","ackIsFetching","refetchAck","ruleDate","updated_at","created_at","clustersData","clustersIsFetching","refetchClusters","adjustOCPRule","ackedClusters","enableRecForHosts","uuids","requests","Promise","all","timeout","enableRule","Delete","BASE_URL","toggleModal","s","PageHeader","Breadcrumbs","current","Main","ErrorState","RuleDetails","isOpenShift","isDetailsPage","header","PageHeaderTitle","RuleLabels","publish_date","tags","Array","isArray","LabelGroup","numLabels","isCompact","reduce","labels","tag","RULE_CATEGORIES","Label","color","FILTER_CATEGORIES","onFeedbackChanged","rating","Post","Flex","FlexItem","align","default","Dropdown","position","toggle","DropdownToggle","onToggle","toggleIndicator","CaretDownIcon","dropdownItems","DropdownItem","hosts_acked_count","CardHeader","Title","headingLevel","reason","CardFooter","c","MessageState","icon","BellSlashIcon","useGetRuleByIdQuery","useParams","useGetRecAcksQuery","ruleId","subnav","document","useGetAffectedClustersQuery","useRouteMatch"],"sourceRoot":""}