{"version":3,"sources":["webpack:///./src/Routes.js","webpack:///./src/App.js","webpack:///./src/Utilities/Api.js","webpack:///./src/AppActions.js","webpack:///./src/AppConstants.js","webpack:///./src/Messages.js","webpack:///./src/AppReducer.js","webpack:///./src/Store/index.js"],"names":["paths","title","path","component","lazy","Routes","Suspense","fallback","Bullseye","Spinner","Switch","map","Route","key","Main","history","useHistory","useEffect","getRegistry","register","notifications","notificationsReducer","insights","chrome","init","identifyApp","unregister","on","event","push","navId","className","url","headers","params","axios","paramsSerializer","Qs","arrayFormat","fetchData","options","search","auth","getUser","API","response","data","fetchClusterById","createAsyncThunk","ActionTypes","clusterId","condition","arg","cluster","getState","clusters","fetchStatus","getPendingMeta","requestId","cache","createIntlCache","locale","navigator","language","slice","intl","createIntl","onError","console","error","intlSettings","CLUSTER_FETCH","CLUSTER_FETCH_URL","LIKELIHOOD_LABEL","intlHelper","formatMessage","messages","IMPACT_LABEL","TOTAL_RISK_LABEL","RISK_OF_CHANGE_LABEL","FILTER_CATEGORIES","total_risk","type","urlParam","values","label","value","res_risk","impact","likelihood","rule_status","defineMessages","documentTitle","id","defaultMessage","added","loading","lastSeen","actions","name","filterBy","totalRisk","recommendation","recommendations","insightsHeader","unknown","low","moderate","important","critical","veryLow","medium","high","availability","performance","stability","security","enabled","impactLevel","impactDescription","category","likelihoodLevel","likelihoodDescription","all","disabled","resetFilters","initialState","previousState","createReducer","builder","addCase","state","action","String","meta","payload","useLogger","configureStore","reducer","getAdvisorStore","middleware","getDefaultMiddleware","concat","logger"],"mappings":"6tCAWMA,EAAQ,CACZ,CACEC,MAAO,WACPC,KAAM,uBACNC,WAVYC,WAAK,kBACnB,8EAqBWC,EAAS,kBACpB,kBAAC,EAAAC,SAAD,CACEC,SACE,kBAAC,EAAAC,SAAD,KACE,kBAAC,EAAAC,QAAD,QAIJ,kBAAC,EAAAC,OAAD,KACGV,EAAMW,KAAI,SAACT,GAAD,OACT,kBAAC,EAAAU,MAAD,CAAOC,IAAKX,EAAKD,MAAOC,KAAMA,EAAKA,KAAMC,UAAWD,EAAKC,eAG3D,kBAAC,EAAAS,MAAD,CAAOV,KAAK,IAAIC,UAAW,kBAAM,kBAACW,EAAA,GAAD,4BCHvC,QA1BY,WACV,IAAMC,GAAUC,kBAehB,OAbAC,gBAAU,YACSC,UACRC,SAAS,CAAEC,cAAeC,OACnCC,SAASC,OAAOC,OAChBF,SAASC,OAAOE,YAAY,eAC5B,IAAMC,EAAaJ,SAASC,OAAOI,GAAG,kBAAkB,SAACC,GAAD,OACtDb,EAAQc,KAAR,WAAiBD,EAAME,WAEzB,OAAO,WACLJ,OAED,IAGD,kBAAC,aAAD,KACE,kBAAC,KAAD,MACA,yBAAKK,UAAU,eACb,kBAAC1B,EAAD,U,6IC5BR,QAAe,SACT2B,GAAgC,IAA3BC,EAA2B,uDAAjB,GAAIC,EAAa,uDAAJ,GAC9B,OAAOC,QAAUH,EAAK,CACpBC,UACAC,SACAE,iBAHoB,SAGHF,GACf,OAAOG,cAAaH,EAAQ,CAAEI,YAAa,eCJnD,IAAMC,EAAS,mCAAG,WAAOP,EAAKC,EAASO,EAASC,GAA9B,uFACVnB,SAASC,OAAOmB,KAAKC,UADX,WAECF,EAFD,gCAGNG,EAAA,UAAWZ,EAAX,YAAkBS,GAAUR,EAASO,GAH/B,2DAINI,EAAA,UAAWZ,GAAOC,EAASO,GAJrB,mCAEVK,EAFU,uBAKTA,EAASC,MALA,4CAAH,4DAQFC,GAAmBC,QAC9BC,KAD8C,mCAE9C,WAAOC,GAAP,0FAAqBX,EAAUU,KAA8BC,KAA7D,2CAF8C,sDAG9C,CAEEC,UAAW,SAACC,EAAD,GAAuB,IAE1BC,GADeC,EADW,EAAfA,YACTC,SACiBH,GACzB,GACEC,IACyB,cAAxBA,EAAQG,aACiB,YAAxBH,EAAQG,aAGV,OAAO,GAGXC,eAAgB,kBAAyB,CACvCL,IADc,EAAGA,IAEjBM,UAFc,EAAQA,e,mICzBtBC,GAAQC,UACRC,EAASC,UAAUC,SAASC,MAAM,EAAG,GACrCC,GAAOC,OACX,CAEEC,QAASC,QAAQC,MACjBR,UAEFF,GAEIW,EAAe,CAAET,UAEVU,EAAgB,gBAEhBC,EAAoB,SAACtB,GAAD,gBADT,sCACS,qBACPA,EADO,YAEpBuB,EAAmB,CAC9B,GAAGC,OAAWT,EAAKU,cAAcC,SAAeN,GAChD,GAAGI,OAAWT,EAAKU,cAAcC,YAAkBN,GACnD,GAAGI,OAAWT,EAAKU,cAAcC,UAAgBN,GACjD,GAAGI,OAAWT,EAAKU,cAAcC,cAAoBN,IAE1CO,EAAe,CAC1B,GAAGH,OAAWT,EAAKU,cAAcC,SAAeN,GAChD,GAAGI,OAAWT,EAAKU,cAAcC,YAAkBN,GACnD,GAAGI,OAAWT,EAAKU,cAAcC,UAAgBN,GACjD,GAAGI,OAAWT,EAAKU,cAAcC,cAAoBN,IAE1CQ,EAAmB,CAC9B,GAAGJ,OAAWT,EAAKU,cAAcC,SAAeN,GAChD,GAAGI,OAAWT,EAAKU,cAAcC,cAAoBN,GACrD,GAAGI,OAAWT,EAAKU,cAAcC,eAAqBN,GACtD,GAAGI,OAAWT,EAAKU,cAAcC,cAAoBN,IAE1CS,EAAuB,CAClC,GAAGL,OAAWT,EAAKU,cAAcC,aAAmBN,GACpD,GAAGI,OAAWT,EAAKU,cAAcC,SAAeN,GAChD,GAAGI,OAAWT,EAAKU,cAAcC,cAAoBN,GACrD,GAAGI,OAAWT,EAAKU,cAAcC,UAAgBN,IAEtCU,EAAoB,CAC/BC,WAAY,CACVC,KAAM,WACNjF,MAAO,aACPkF,SAAU,aACVC,OAAQ,CACN,CAAEC,MAAOP,EAAiB,GAAIQ,MAAO,KACrC,CAAED,MAAOP,EAAiB,GAAIQ,MAAO,KACrC,CAAED,MAAOP,EAAiB,GAAIQ,MAAO,KACrC,CAAED,MAAOP,EAAiB,GAAIQ,MAAO,OAGzCC,SAAU,CACRL,KAAM,WACNjF,MAAO,iBACPkF,SAAU,WACVC,OAAQ,CACN,CAAEC,MAAON,EAAqB,GAAIO,MAAO,KACzC,CAAED,MAAON,EAAqB,GAAIO,MAAO,KACzC,CAAED,MAAON,EAAqB,GAAIO,MAAO,KACzC,CAAED,MAAON,EAAqB,GAAIO,MAAO,OAG7CE,OAAQ,CACNN,KAAM,WACNjF,MAAO,SACPkF,SAAU,SACVC,OAAQ,CACN,CAAEC,MAAOR,EAAa,GAAIS,MAAO,KACjC,CAAED,MAAOR,EAAa,GAAIS,MAAO,KACjC,CAAED,MAAOR,EAAa,GAAIS,MAAO,KACjC,CAAED,MAAOR,EAAa,GAAIS,MAAO,OAGrCG,WAAY,CACVP,KAAM,WACNjF,MAAO,aACPkF,SAAU,aACVC,OAAQ,CACN,CAAEC,MAAOZ,EAAiB,GAAIa,MAAO,KACrC,CAAED,MAAOZ,EAAiB,GAAIa,MAAO,KACrC,CAAED,MAAOZ,EAAiB,GAAIa,MAAO,KACrC,CAAED,MAAOZ,EAAiB,GAAIa,MAAO,OAGzCI,YAAa,CACXR,KAAM,QACNjF,MAAO,SACPkF,SAAU,cACVC,OAAQ,CACN,CACEC,OAAOX,OAAWT,EAAKU,cAAcC,SAAeN,GACpDgB,MAAO,OAET,CACED,OAAOX,OAAWT,EAAKU,cAAcC,aAAmBN,GACxDgB,MAAO,WAET,CACED,OAAOX,OAAWT,EAAKU,cAAcC,cAAoBN,GACzDgB,MAAO,gB,8CCtGf,SAAeK,E,SAAAA,IAAe,CAC5BC,cAAe,CACbC,GAAI,gBAEJC,eAAgB,CAAF,6EAEhBvC,SAAU,CACRsC,GAAI,WAGJC,eAAgB,CAAF,4BAEhBC,MAAO,CACLF,GAAI,QAEJC,eAAgB,CAAF,yBAEhBE,QAAS,CACPH,GAAI,UAEJC,eAAgB,CAAF,2BAEhBG,SAAU,CACRJ,GAAI,WAGJC,eAAgB,CAAF,6BAEhBI,QAAS,CACPL,GAAI,UAEJC,eAAgB,CAAF,2BAEhBK,KAAM,CACJN,GAAI,OAGJC,eAAgB,CAAF,wBAEhBM,SAAU,CACRP,GAAI,WAEJC,eAAgB,CAAF,kCAEhBO,UAAW,CACTR,GAAI,YAGJC,eAAgB,CAAF,8BAEhBQ,eAAgB,CACdT,GAAI,iBAEJC,eAAgB,CAAF,kCAEhBS,gBAAiB,CACfV,GAAI,kBAEJC,eAAgB,CAAF,mCAEhBU,eAAgB,CACdX,GAAI,iBAEJC,eAAgB,CAAF,2BAEhBW,QAAS,CACPZ,GAAI,UAEJC,eAAgB,CAAF,2BAEhBY,IAAK,CACHb,GAAI,MAEJC,eAAgB,CAAF,uBAEhBa,SAAU,CACRd,GAAI,WAEJC,eAAgB,CAAF,4BAEhBc,UAAW,CACTf,GAAI,YAEJC,eAAgB,CAAF,6BAEhBe,SAAU,CACRhB,GAAI,WAEJC,eAAgB,CAAF,4BAEhBgB,QAAS,CACPjB,GAAI,UAEJC,eAAgB,CAAF,4BAEhBiB,OAAQ,CACNlB,GAAI,SAEJC,eAAgB,CAAF,0BAEhBkB,KAAM,CACJnB,GAAI,OAEJC,eAAgB,CAAF,wBAEhBmB,aAAc,CACZpB,GAAI,eAEJC,eAAgB,CAAF,gCAEhBoB,YAAa,CACXrB,GAAI,cAEJC,eAAgB,CAAF,+BAEhBqB,UAAW,CACTtB,GAAI,YAEJC,eAAgB,CAAF,6BAEhBsB,SAAU,CACRvB,GAAI,WAEJC,eAAgB,CAAF,4BAEhBuB,QAAS,CACPxB,GAAI,UAEJC,eAAgB,CAAF,2BAEhBN,OAAQ,CACNK,GAAI,SAEJC,eAAgB,CAAF,0BAEhBwB,YAAa,CACXzB,GAAI,cAEJC,eAAgB,CAAF,kDAEhByB,kBAAmB,CACjB1B,GAAI,oBAGJC,eAAc,iHAGhB0B,SAAU,CACR3B,GAAI,WAEJC,eAAgB,CAAF,4BAEhBL,WAAY,CACVI,GAAI,aAEJC,eAAgB,CAAF,8BAEhB2B,gBAAiB,CACf5B,GAAI,kBAEJC,eAAgB,CAAF,sDAEhB4B,sBAAuB,CACrB7B,GAAI,wBAGJC,eAAgB,CAAF,4GAEhB6B,IAAK,CACH9B,GAAI,MAEJC,eAAgB,CAAF,uBAEhB8B,SAAU,CACR/B,GAAI,WAEJC,eAAgB,CAAF,4BAEhB+B,aAAc,CACZhC,GAAI,eAEJC,eAAgB,CAAF,oC,sGCrLZgC,EAAe,CACnBvE,SAAU,IA4BZ,QAzBwB,eAACwE,EAAD,uDAAiBD,EAAjB,OACtBE,QAAcD,GAAe,SAACE,GAE5BA,EAAQC,QAAQnF,aAA0B,SAACoF,EAAOC,GAChDD,EAAM5E,UAAN,UACG8E,OAAOD,EAAOE,KAAKlF,KAAO,CAAEI,YAAa,eAG9CyE,EAAQC,QAAQnF,eAA4B,SAACoF,EAAOC,GAClDD,EAAM5E,UAAN,UACG8E,OAAOD,EAAOE,KAAKlF,KAAO,CACzBI,YAAa,YACbV,KAAMsF,EAAOG,aAInBN,EAAQC,QAAQnF,cAA2B,SAACoF,EAAOC,GACjDD,EAAM5E,UAAN,UACG8E,OAAOD,EAAOE,KAAKlF,KAAO,CACzBI,YAAa,oBCZvB,EATiB,SAACgF,GAAD,OACfC,QAAe,CACbC,QAASC,IACTC,WAAY,SAACC,GAAD,OACVL,EACIK,IAAuBC,OAAOC,KAC9BF,S","file":"js/830.3b8e92a8de47446595ab.js","sourcesContent":["import { Route, Switch } from 'react-router-dom';\nimport React, { Suspense, lazy } from 'react';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main/Main';\n\nconst Cluster = lazy(() =>\n  import(\n    /* webpackChunkName: \"ClusterDetails\" */ './Components/Cluster/Cluster'\n  )\n);\n\nconst paths = [\n  {\n    title: 'Clusters',\n    path: '/clusters/:clusterId',\n    component: Cluster,\n  },\n];\n\n/**\n * the Switch component changes routes depending on the path.\n *\n * Route properties:\n *      exact - path must match exactly,\n *      path - https://prod.foo.redhat.com:1337/insights/advisor/rules\n *      component - component to be rendered when a route has been chosen.\n */\nexport const Routes = () => (\n  <Suspense\n    fallback={\n      <Bullseye>\n        <Spinner />\n      </Bullseye>\n    }\n  >\n    <Switch>\n      {paths.map((path) => (\n        <Route key={path.title} path={path.path} component={path.component} />\n      ))}\n      {/* Finally, catch all unmatched routes */}\n      <Route path=\"*\" component={() => <Main>No page found</Main>} />\n    </Switch>\n  </Suspense>\n);\n","import './App.scss';\n\nimport React, { useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport NotificationsPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry/Registry';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nimport { Routes } from './Routes';\n\nconst App = () => {\n  const history = useHistory();\n\n  useEffect(() => {\n    const registry = getRegistry();\n    registry.register({ notifications: notificationsReducer });\n    insights.chrome.init();\n    insights.chrome.identifyApp('ocp-advisor');\n    const unregister = insights.chrome.on('APP_NAVIGATION', (event) =>\n      history.push(`/${event.navId}`)\n    );\n    return () => {\n      unregister();\n    };\n  }, []);\n\n  return (\n    <React.Fragment>\n      <NotificationsPortal />\n      <div className=\"ocp-advisor\">\n        <Routes />\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","import Qs from 'qs';\nimport axios from 'axios';\n\nexport default {\n  get(url, headers = {}, params = {}) {\n    return axios.get(url, {\n      headers,\n      params,\n      paramsSerializer(params) {\n        return Qs.stringify(params, { arrayFormat: 'repeat' });\n      },\n    });\n  },\n  put(url, data = {}, headers = {}) {\n    return axios.put(url, data, {\n      headers,\n    });\n  },\n  post(url, headers = {}, data = {}) {\n    return axios.post(url, data, {\n      headers,\n    });\n  },\n  delete(url, data = {}, headers = {}) {\n    return axios.delete(url, data, {\n      headers,\n    });\n  },\n};\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport * as ActionTypes from './AppConstants';\n\nimport API from './Utilities/Api';\n\nconst fetchData = async (url, headers, options, search) => {\n  await insights.chrome.auth.getUser();\n  const response = search\n    ? await API.get(`${url}?${search}`, headers, options)\n    : await API.get(`${url}`, headers, options);\n  return response.data;\n};\n\nexport const fetchClusterById = createAsyncThunk(\n  ActionTypes.CLUSTER_FETCH,\n  async (clusterId) => fetchData(ActionTypes.CLUSTER_FETCH_URL(clusterId)),\n  {\n    // Here, arg is a cluster ID (https://redux-toolkit.js.org/api/createAsyncThunk#payloadcreator)\n    condition: (arg, { getState }) => {\n      const { clusters } = getState();\n      const cluster = clusters[arg];\n      if (\n        cluster &&\n        (cluster.fetchStatus === 'fulfilled' ||\n          cluster.fetchStatus === 'pending')\n      ) {\n        // Already fetched or in progress, don't need to re-fetch\n        return false;\n      }\n    },\n    getPendingMeta: ({ arg, requestId }) => ({\n      arg,\n      requestId,\n    }),\n  }\n);\n","import { createIntl, createIntlCache } from 'react-intl';\nimport intlHelper from '@redhat-cloud-services/frontend-components-translations/intlHelper';\n\nimport messages from './Messages';\n\nconst cache = createIntlCache();\nconst locale = navigator.language.slice(0, 2);\nconst intl = createIntl(\n  {\n    // eslint-disable-next-line no-console\n    onError: console.error,\n    locale,\n  },\n  cache\n);\nconst intlSettings = { locale };\n\nexport const CLUSTER_FETCH = 'CLUSTER_FETCH';\nexport const BASE_URL = '/api/insights-results-aggregator/v1';\nexport const CLUSTER_FETCH_URL = (clusterId) =>\n  `${BASE_URL}/clusters/${clusterId}/report`;\nexport const LIKELIHOOD_LABEL = {\n  1: intlHelper(intl.formatMessage(messages.low), intlSettings),\n  2: intlHelper(intl.formatMessage(messages.medium), intlSettings),\n  3: intlHelper(intl.formatMessage(messages.high), intlSettings),\n  4: intlHelper(intl.formatMessage(messages.critical), intlSettings),\n};\nexport const IMPACT_LABEL = {\n  1: intlHelper(intl.formatMessage(messages.low), intlSettings),\n  2: intlHelper(intl.formatMessage(messages.medium), intlSettings),\n  3: intlHelper(intl.formatMessage(messages.high), intlSettings),\n  4: intlHelper(intl.formatMessage(messages.critical), intlSettings),\n};\nexport const TOTAL_RISK_LABEL = {\n  1: intlHelper(intl.formatMessage(messages.low), intlSettings),\n  2: intlHelper(intl.formatMessage(messages.moderate), intlSettings),\n  3: intlHelper(intl.formatMessage(messages.important), intlSettings),\n  4: intlHelper(intl.formatMessage(messages.critical), intlSettings),\n};\nexport const RISK_OF_CHANGE_LABEL = {\n  1: intlHelper(intl.formatMessage(messages.veryLow), intlSettings),\n  2: intlHelper(intl.formatMessage(messages.low), intlSettings),\n  3: intlHelper(intl.formatMessage(messages.moderate), intlSettings),\n  4: intlHelper(intl.formatMessage(messages.high), intlSettings),\n};\nexport const FILTER_CATEGORIES = {\n  total_risk: {\n    type: 'checkbox',\n    title: 'total risk',\n    urlParam: 'total_risk',\n    values: [\n      { label: TOTAL_RISK_LABEL[4], value: '4' },\n      { label: TOTAL_RISK_LABEL[3], value: '3' },\n      { label: TOTAL_RISK_LABEL[2], value: '2' },\n      { label: TOTAL_RISK_LABEL[1], value: '1' },\n    ],\n  },\n  res_risk: {\n    type: 'checkbox',\n    title: 'risk of change',\n    urlParam: 'res_risk',\n    values: [\n      { label: RISK_OF_CHANGE_LABEL[4], value: '4' },\n      { label: RISK_OF_CHANGE_LABEL[3], value: '3' },\n      { label: RISK_OF_CHANGE_LABEL[2], value: '2' },\n      { label: RISK_OF_CHANGE_LABEL[1], value: '1' },\n    ],\n  },\n  impact: {\n    type: 'checkbox',\n    title: 'impact',\n    urlParam: 'impact',\n    values: [\n      { label: IMPACT_LABEL[4], value: '4' },\n      { label: IMPACT_LABEL[3], value: '3' },\n      { label: IMPACT_LABEL[2], value: '2' },\n      { label: IMPACT_LABEL[1], value: '1' },\n    ],\n  },\n  likelihood: {\n    type: 'checkbox',\n    title: 'likelihood',\n    urlParam: 'likelihood',\n    values: [\n      { label: LIKELIHOOD_LABEL[4], value: '4' },\n      { label: LIKELIHOOD_LABEL[3], value: '3' },\n      { label: LIKELIHOOD_LABEL[2], value: '2' },\n      { label: LIKELIHOOD_LABEL[1], value: '1' },\n    ],\n  },\n  rule_status: {\n    type: 'radio',\n    title: 'status',\n    urlParam: 'rule_status',\n    values: [\n      {\n        label: intlHelper(intl.formatMessage(messages.all), intlSettings),\n        value: 'all',\n      },\n      {\n        label: intlHelper(intl.formatMessage(messages.enabled), intlSettings),\n        value: 'enabled',\n      },\n      {\n        label: intlHelper(intl.formatMessage(messages.disabled), intlSettings),\n        value: 'disabled',\n      },\n    ],\n  },\n};\n","/* eslint-disable max-len */\nimport { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  documentTitle: {\n    id: 'documentTitle',\n    description: 'The title of the page as it appears in the browser tab',\n    defaultMessage: '{subnav} - OCP Advisor | Red Hat Insights',\n  },\n  clusters: {\n    id: 'clusters',\n    description:\n      'Clusters title used in recommendation table column and clusters tab header',\n    defaultMessage: 'Clusters',\n  },\n  added: {\n    id: 'added',\n    description: 'Recommendation table column title',\n    defaultMessage: 'Added',\n  },\n  loading: {\n    id: 'loading',\n    description: 'Loading text',\n    defaultMessage: 'Loading',\n  },\n  lastSeen: {\n    id: 'lastSeen',\n    description:\n      'Used in the cluster table title column, the last time a cluster has checked in',\n    defaultMessage: 'Last seen',\n  },\n  actions: {\n    id: 'actions',\n    description: 'actions',\n    defaultMessage: 'Actions',\n  },\n  name: {\n    id: 'name',\n    description:\n      'Used in the cluster table title column, identifying display name of a cluster',\n    defaultMessage: 'Name',\n  },\n  filterBy: {\n    id: 'filterBy',\n    description: 'Filter by name',\n    defaultMessage: 'Filter by name',\n  },\n  totalRisk: {\n    id: 'totalRisk',\n    description:\n      'Recommendation table column title, recommendationdetails label',\n    defaultMessage: 'Total risk',\n  },\n  recommendation: {\n    id: 'recommendation',\n    description: 'Recommendation',\n    defaultMessage: 'Recommendation',\n  },\n  recommendations: {\n    id: 'recommendations',\n    description: 'Used as a title',\n    defaultMessage: 'Recommendations',\n  },\n  insightsHeader: {\n    id: 'insightsHeader',\n    description: 'Header for the application title',\n    defaultMessage: 'Advisor',\n  },\n  unknown: {\n    id: 'unknown',\n    description: 'Unknown',\n    defaultMessage: 'Unknown',\n  },\n  low: {\n    id: 'low',\n    description: 'Filter value',\n    defaultMessage: 'Low',\n  },\n  moderate: {\n    id: 'moderate',\n    description: 'Filter value',\n    defaultMessage: 'Moderate',\n  },\n  important: {\n    id: 'important',\n    description: 'Filter value',\n    defaultMessage: 'Important',\n  },\n  critical: {\n    id: 'critical',\n    description: 'Filter value',\n    defaultMessage: 'Critical',\n  },\n  veryLow: {\n    id: 'veryLow',\n    description: 'Filter value',\n    defaultMessage: 'Very Low',\n  },\n  medium: {\n    id: 'medium',\n    description: 'Filter value',\n    defaultMessage: 'Medium',\n  },\n  high: {\n    id: 'high',\n    description: 'Filter value',\n    defaultMessage: 'High',\n  },\n  availability: {\n    id: 'availability',\n    description: 'Filter value',\n    defaultMessage: 'Availability',\n  },\n  performance: {\n    id: 'performance',\n    description: 'Filter value',\n    defaultMessage: 'Performance',\n  },\n  stability: {\n    id: 'stability',\n    description: 'Filter value',\n    defaultMessage: 'Stability',\n  },\n  security: {\n    id: 'security',\n    description: 'Filter value',\n    defaultMessage: 'Security',\n  },\n  enabled: {\n    id: 'enabled',\n    description: 'Filter value',\n    defaultMessage: 'Enabled',\n  },\n  impact: {\n    id: 'impact',\n    description: 'Filter title',\n    defaultMessage: 'Impact',\n  },\n  impactLevel: {\n    id: 'impactLevel',\n    description: 'Describes the impact level of a rule',\n    defaultMessage: '{level} impact',\n  },\n  impactDescription: {\n    id: 'impactDescription',\n    description:\n      'Used in the SeverityLine tooltip to describe the impact of a rule',\n    defaultMessage:\n      'The impact of the problem would be {level} if it occurred.',\n  },\n  category: {\n    id: 'category',\n    description: 'Filter title',\n    defaultMessage: 'Category',\n  },\n  likelihood: {\n    id: 'likelihood',\n    description: 'Filter title',\n    defaultMessage: 'Likelihood',\n  },\n  likelihoodLevel: {\n    id: 'likelihoodLevel',\n    description: 'Describes the likelihood of a rule',\n    defaultMessage: '{level} likelihood',\n  },\n  likelihoodDescription: {\n    id: 'likelihoodDescription',\n    description:\n      'Used in the SeverityLine tooltip to describe the likelihood of a rule',\n    defaultMessage: 'The likelihood that this will be a problem is {level}.',\n  },\n  all: {\n    id: 'all',\n    description: 'All',\n    defaultMessage: 'All',\n  },\n  disabled: {\n    id: 'disabled',\n    description: 'Disabled',\n    defaultMessage: 'Disabled',\n  },\n  resetFilters: {\n    id: 'resetFilters',\n    description: 'Filter action, reset all filter chips',\n    defaultMessage: 'Reset filters',\n  },\n});\n","import { createReducer } from '@reduxjs/toolkit';\nimport { fetchClusterById } from './AppActions';\n\nconst initialState = {\n  clusters: {},\n};\n\nconst getAdvisorStore = (previousState = initialState) =>\n  createReducer(previousState, (builder) => {\n    // CLUSTER_FETCH\n    builder.addCase(fetchClusterById.pending, (state, action) => {\n      state.clusters = {\n        [String(action.meta.arg)]: { fetchStatus: 'pending' },\n      };\n    });\n    builder.addCase(fetchClusterById.fulfilled, (state, action) => {\n      state.clusters = {\n        [String(action.meta.arg)]: {\n          fetchStatus: 'fulfilled',\n          data: action.payload,\n        },\n      };\n    });\n    builder.addCase(fetchClusterById.rejected, (state, action) => {\n      state.clusters = {\n        [String(action.meta.arg)]: {\n          fetchStatus: 'rejected',\n        },\n      };\n    });\n  });\n\nexport default getAdvisorStore;\n","import { configureStore } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\n\nimport getAdvisorStore from '../AppReducer';\n\nconst getStore = (useLogger) =>\n  configureStore({\n    reducer: getAdvisorStore(),\n    middleware: (getDefaultMiddleware) =>\n      useLogger\n        ? getDefaultMiddleware().concat(logger)\n        : getDefaultMiddleware(),\n  });\n\nexport default getStore;\n"],"sourceRoot":""}