{"version":3,"file":"js/Recommendation.f35464754b07fda7dc9d.js","mappings":"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","sources":["webpack:///./src/Components/Recommendation/RuleDetails.js","webpack:///./src/Utilities/RuleName.js","webpack:///./src/Components/Recommendation/AffectedClustersTable.js","webpack:///./src/Components/Recommendation/Recommendation.js","webpack:///./src/Components/Recommendation/index.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\n\nimport Loading from '../Loading/Loading';\n\nconst RuleDetails = ({\n  rule,\n  header,\n  isDetailsPage,\n  resolutionRisk,\n  riskOfChangeDesc,\n}) => {\n  const intl = useIntl();\n\n  return (\n    <div className=\"advisor\">\n      <AsyncComponent\n        appName=\"advisor\"\n        module=\"./AdvisorRecommendationDetails\"\n        fallback={<Loading />}\n        rule={rule}\n        customItnl\n        intlProps={intl}\n        isDetailsPage={isDetailsPage}\n        header={header}\n        resolutionRisk={resolutionRisk}\n        riskOfChangeDesc={riskOfChangeDesc}\n      />\n    </div>\n  );\n};\n\nRuleDetails.propTypes = {\n  header: PropTypes.any,\n  isDetailsPage: PropTypes.bool.isRequired,\n  rule: PropTypes.object.isRequired,\n  resolutionRisk: PropTypes.number,\n  riskOfChangeDesc: PropTypes.string,\n};\n\nexport default RuleDetails;\n","const getPluginName = (rule) => rule.split('|')?.[0];\nconst getErrorKey = (rule) => rule.split('|')?.[1];\n\nexport { getPluginName, getErrorKey };\n","import React from 'react';\nimport { useIntl } from 'react-intl';\n\nimport PrimaryToolbar from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport { global_success_color_100 as globalSuccessColor100 } from '@patternfly/react-tokens/dist/js/global_success_color_100';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport { Card, CardBody } from '@patternfly/react-core/dist/js/components/Card';\n\nimport messages from '../../Messages';\nimport MessageState from '../MessageState/MessageState';\n\nconst AffectedClustersTable = () => {\n  const intl = useIntl();\n  const filterConfig = {\n    items: [{ label: 'Name' }, { label: 'Total Risk' }],\n    isDisabled: true,\n  };\n\n  return (\n    <React.Fragment>\n      <PrimaryToolbar\n        filterConfig={filterConfig}\n        pagination={{\n          itemCount: 0,\n          page: 0,\n          perPage: 0,\n        }}\n      />\n      <Card>\n        <CardBody>\n          <MessageState\n            icon={CheckCircleIcon}\n            iconStyle={{ color: globalSuccessColor100.value }}\n            title={intl.formatMessage(messages.noClusters)}\n            text={intl.formatMessage(messages.noClustersBody)}\n          />\n        </CardBody>\n      </Card>\n    </React.Fragment>\n  );\n};\n\nexport default AffectedClustersTable;\n","import './Recommendation.scss';\n\nimport React, { useCallback } from 'react';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\n\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { Label } from '@patternfly/react-core/dist/js/components/Label/Label';\nimport { Title } from '@patternfly/react-core/dist/js/components/Title/Title';\nimport { LabelGroup } from '@patternfly/react-core/dist/js/components/LabelGroup';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\nimport { global_danger_color_100 as globalDangerColor100 } from '@patternfly/react-tokens/dist/js/global_danger_color_100';\n\nimport Breadcrumbs from '../Breadcrumbs';\nimport RuleLabels from '../RuleLabels/RuleLabels';\nimport {\n  FILTER_CATEGORIES,\n  IMPACT_VALUES,\n  RULE_CATEGORIES,\n} from '../../AppConstants';\nimport messages from '../../Messages';\nimport RuleDetails from './RuleDetails';\nimport Loading from '../Loading/Loading';\nimport { getErrorKey } from '../../Utilities/RuleName';\nimport MessageState from '../MessageState/MessageState';\nimport AffectedClustersTable from './AffectedClustersTable';\n\nconst Recommendation = ({ rule, match }) => {\n  const intl = useIntl();\n  const { isError, isUninitialized, isLoading, isFetching, isSuccess, data } =\n    rule;\n  // workaround. Should be removed when https://issues.redhat.com/browse/CCXDEV-5534 is done.\n  const adjustOCPRule = useCallback((rule) => {\n    const errorKeyContent =\n      rule.error_keys[getErrorKey(match.params.recommendationId)];\n    const adjusted = {\n      ...rule,\n      ...errorKeyContent,\n      ...errorKeyContent.metadata,\n    };\n    adjusted.impact = {\n      name: adjusted.impact,\n      impact: IMPACT_VALUES[adjusted.impact],\n    };\n    delete adjusted.metadata;\n    delete adjusted.error_keys;\n    adjusted.tags = [...adjusted.tags, 'fault_tolerance', 'security'];\n    return adjusted;\n  }, []);\n  const content = isSuccess ? adjustOCPRule(data.content) : undefined;\n\n  return (\n    <React.Fragment>\n      {(isUninitialized || isLoading || isFetching) && (\n        <Main>\n          <Loading />\n        </Main>\n      )}\n      {isError && (\n        <Main>\n          <MessageState\n            title={intl.formatMessage(messages.unableToConnect)}\n            text={intl.formatMessage(messages.unableToConnectDesc)}\n            icon={ExclamationCircleIcon}\n            iconStyle={{ color: globalDangerColor100.value }}\n          />\n        </Main>\n      )}\n      {isSuccess && (\n        <React.Fragment>\n          <PageHeader className=\"pageHeaderOverride\">\n            <Breadcrumbs\n              current={content?.description || match.params.recommendationId}\n            />\n          </PageHeader>\n          <Main className=\"pf-m-light pf-u-pt-sm\">\n            <RuleDetails\n              isOpenShift\n              isDetailsPage\n              rule={content}\n              header={\n                <React.Fragment>\n                  <PageHeaderTitle\n                    title={\n                      <React.Fragment>\n                        {content.description} <RuleLabels rule={content} />\n                      </React.Fragment>\n                    }\n                  />\n                  <p>\n                    {intl.formatMessage(messages.rulesDetailsPubishdate, {\n                      date: (\n                        <DateFormat\n                          date={new Date(content.publish_date)}\n                          type=\"onlyDate\"\n                        />\n                      ),\n                    })}\n                    <LabelGroup className=\"categoryLabels\" numLabels={1}>\n                      {Array.isArray(content.tags) ? (\n                        content.tags.reduce((labels, tag) => {\n                          if (RULE_CATEGORIES[tag]) {\n                            labels.push(\n                              <Label key={`label-${tag}`} color=\"blue\">\n                                {\n                                  FILTER_CATEGORIES.category.values[\n                                    RULE_CATEGORIES[tag] - 1\n                                  ].label\n                                }\n                              </Label>\n                            );\n                          }\n                          return labels;\n                        }, [])\n                      ) : (\n                        <Label>{content.tags}</Label>\n                      )}\n                    </LabelGroup>\n                  </p>\n                </React.Fragment>\n              }\n            />\n          </Main>\n          <Main>\n            <React.Fragment>\n              <React.Fragment>\n                <Title className=\"titleOverride\" headingLevel=\"h3\" size=\"2xl\">\n                  {intl.formatMessage(messages.affectedClusters)}\n                </Title>\n                <AffectedClustersTable />\n              </React.Fragment>\n            </React.Fragment>\n          </Main>\n        </React.Fragment>\n      )}\n    </React.Fragment>\n  );\n};\n\nRecommendation.propTypes = {\n  rule: PropTypes.object.isRequired,\n  match: PropTypes.object.isRequired,\n};\n\nexport { Recommendation };\n","import React, { useEffect } from 'react';\n\nimport { useParams, useRouteMatch } from 'react-router-dom';\n\nimport { Recommendation } from './Recommendation';\nimport { useGetRuleByIdQuery } from '../../Services/SmartProxy';\nimport { getPluginName } from '../../Utilities/RuleName';\n\nconst RecommendationWrapper = () => {\n  const rule = useGetRuleByIdQuery(getPluginName(useParams().recommendationId));\n\n  useEffect(() => {\n    rule.refetch();\n  }, [useParams().recommendationId]);\n\n  return <Recommendation rule={rule} match={useRouteMatch()} />;\n};\n\nexport default RecommendationWrapper;\n"],"names":["RuleDetails","rule","header","isDetailsPage","resolutionRisk","riskOfChangeDesc","intl","useIntl","className","AsyncComponent","appName","module","fallback","Loading","customItnl","intlProps","propTypes","PropTypes","PrimaryToolbar","filterConfig","items","label","isDisabled","pagination","itemCount","page","perPage","Card","CardBody","MessageState","icon","CheckCircleIcon","iconStyle","color","globalSuccessColor100","title","formatMessage","messages","text","Recommendation","match","isError","isUninitialized","isLoading","isFetching","isSuccess","data","adjustOCPRule","useCallback","errorKeyContent","error_keys","split","getErrorKey","params","recommendationId","adjusted","metadata","impact","name","IMPACT_VALUES","tags","content","undefined","Main","ExclamationCircleIcon","globalDangerColor100","PageHeader","Breadcrumbs","current","description","isOpenShift","PageHeaderTitle","RuleLabels","date","DateFormat","Date","publish_date","type","LabelGroup","numLabels","Array","isArray","reduce","labels","tag","RULE_CATEGORIES","push","Label","key","FILTER_CATEGORIES","Title","headingLevel","size","useGetRuleByIdQuery","getPluginName","useParams","useEffect","refetch","useRouteMatch"],"sourceRoot":""}