{"version":3,"file":"js/ClustersList.68ebcb3bcc2fad509d3d.js","mappings":"y/jBAkDA,IAAMA,EAAoB,SAAC,GAErB,QADJC,MAASC,EACL,EADKA,QAASC,EACd,EADcA,gBAAiBC,EAC/B,EAD+BA,WAAYC,EAC3C,EAD2CA,UAAWC,EACtD,EADsDA,KAAMC,EAC5D,EAD4DA,QAC5D,WACJ,IAAMC,GAAI,YAAGC,EAAAA,EAAAA,MACPC,GAAQ,YAAGC,EAAAA,EAAAA,gBAFb,WAGJ,IAAMC,EAAgB,SAACC,GACrB,6BAAAH,GAASI,EAAAA,EAAAA,IAA0BD,KAC/BE,GAAO,YAAGC,EAAAA,EAAAA,cAAY,YAAiB,IAAdD,EAAc,EAAdA,QAAc,WAAAE,EAAA,gBAAAF,EAAQG,sBAE/CC,GAAQ,WAAG,eAAAb,MAAAA,OAAA,EAAAA,EAAMA,QAAN,cAAc,KACzBc,GAAI,WAAGL,EAAQM,OAASN,EAAQO,MAAQ,GAE9C,eAAwCC,EAAAA,EAAAA,UAAS,KAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACA,gBAA0CF,EAAAA,EAAAA,UAAS,KAAnD,eAAOG,EAAP,KAAsBC,EAAtB,KAEA,gBAAwCJ,EAAAA,EAAAA,WAAS,IAAjD,eAAOK,EAAP,KAAqBC,EAArB,KACA,gBAA4CN,EAAAA,EAAAA,WAAS,IAArD,eAAOO,EAAP,KAAuBC,GAAvB,KACQC,IAAR,aAAmBC,EAAAA,EAAAA,gBAAXD,OACFE,IAAY,YAAG,cAAA/B,IAAe,cAAIC,KAAnB,eAAkCwB,IACjDO,IAAU,YAAGjC,GACbkC,IAAY,YAAG/B,GAlBjB,aAoBJgC,EAAAA,EAAAA,YAAU,WAAM,uBACdV,EACEW,GAAmBd,EAAcT,EAAQwB,UAAWxB,EAAQyB,kBAE7D,CACDhB,EACAT,EAAQwB,UACRxB,EAAQyB,cACRzB,EAAQO,MACRP,EAAQM,SA7BN,aAgCJgB,EAAAA,EAAAA,YAAU,WAAM,uBACdZ,EAAgBgB,GAAkBtB,EAAUJ,IAD9B,YAEV,cAAAV,IAAS,eAAKuB,IAAc,0BAC9BC,GAAgB,IADlB,gBAGC,CAACvB,EAAMS,EAAQ2B,KAAM3B,EAAQ4B,OArC5B,aAuCJN,EAAAA,EAAAA,YAAU,WACR,GADc,uBACV,cAAAL,KAAM,cAAIF,GAAgB,eAC5B,IAAMc,GAAY,aAAGC,EAAAA,EAAAA,IAAYb,KAEjC,GAH4B,YAGxBY,EAAaE,KAAM,eACrB,IAAMC,GAAO,aAAGC,EAAAA,EAAAA,IAAoBJ,EAAaE,OAD5B,YAErBF,EAAaL,UAAYU,EAAAA,GAAAA,QACvBF,EAAQG,MAHW,YAKrBN,EAAaJ,cAAgBO,EAAQI,eALvC,cAH4B,YAU5B,cAAAP,EAAavB,SAAb,cACGuB,EAAavB,OAAS+B,OAAOR,EAAavB,OAAO,KAXxB,YAY5B,cAAAuB,EAAatB,QAAb,cACGsB,EAAatB,MAAQ8B,OAAOR,EAAatB,MAAM,KAbtB,YAc5B,cAAAsB,EAAaS,YAAb,eACGC,MAAMC,QAAQX,EAAaS,cAD9B,cAEGT,EAAaS,UAAY,CAAC,GAAD,OAAIT,EAAaS,aAhBjB,YAiB5BzC,EAAc,EAAD,KAAMG,GAAY6B,SAjBjC,cADc,YAoBdb,IAAkB,KACjB,IA5DC,aA8DJM,EAAAA,EAAAA,YAAU,WAAM,uBACTP,EAAL,gBAAqB,4BACnB0B,EAAAA,EAAAA,IAAmBzC,EAASkC,EAAAA,OAE7B,CAAClC,EAASe,IAlET,YAoEJ,IAAMW,GAAoB,SAACgB,EAAS1C,GAClC,+BAAA2C,EAAAA,EAAAA,IACED,EAAQE,QAAO,SAACC,GAAY,+BAAAC,EAAAA,EAAAA,IAAmBD,EAAS7C,QAtExD,YAyEJ,IAAMuB,GAAqB,SAACwB,EAAMC,EAAOZ,GAAc,WACrD,IAAMa,GAAM,oBAAOF,IAoBnB,OArBqD,YAErD,gBAAW,IAAXC,IAAA,eACEC,EAAOlB,MAAK,SAACmB,EAAGC,GACd,IAAIC,EAAKC,EADW,YAEpB,IAAMC,GAAC,YAAGlB,IAAcmB,EAAAA,gBAAAA,KAAd,eAAoC,IAApC,gBAAyC,IACnD,OAHoB,YAGZP,GACN,KAAKQ,EAAAA,GAGH,OAHF,2BACQ,eAANJ,EAAMF,EAAEL,QAAQY,eAAV,eAA0BP,EAAEL,QAAQa,YAD5C,YAEQ,IAAAP,EAAA,SAANE,EAAMF,EAAEN,QAAQY,eAAV,IAAAN,EAAA,SAA0BA,EAAEN,QAAQa,YAF5C,YAGSN,EAAIO,cAAcN,IAAlB,eAAyBD,EAAIO,cAAcN,GAAOC,IAAlD,eAAsD,GAC/D,KAAKM,EAAAA,GAGH,OAHF,2BACER,EAAM,IAAIS,MAAK,eAAAX,EAAEL,QAAQiB,kBAAV,eAA6B,KAD9C,YAEET,EAAM,IAAIQ,MAAK,IAAAV,EAAA,SAAAA,EAAEN,QAAQiB,kBAAV,IAAAX,EAAA,SAA6B,KAF9C,YAGSC,EAAMC,GAAN,eAAYC,IAAZ,eAAgBD,EAAMD,GAAN,gBAAaE,IAAb,eAAiB,IAC1C,QAGE,OAHF,2BACEF,EAAMF,EAAEa,MAAMf,GADhB,YAEEK,EAAMF,EAAEY,MAAMf,GAFhB,YAGSI,EAAMC,GAAN,eAAYC,IAAZ,eAAgBD,EAAMD,GAAN,gBAAaE,IAAb,eAAiB,SAlBK,YAqB9CL,EAAOe,MACZhE,EAAQO,OAASF,EAAO,GACxBL,EAAQO,OAASF,EAAO,GAAKL,EAAQO,QAhGrC,YAoGJ,IAAM0D,GAAoB,SAACC,GAAU,YACnC,0BAAiDlE,GAAjD,IAA0DM,OAAQ,KAArC6D,GAA7B,EAASD,IAAT,UAASA,GAAT,SADmC,YAEnCrE,EAAc,EAAD,KACRsE,GACW,SAAVD,GAAA,eACA,CAAEtC,KAAM,MADR,eAEU,SAAVsC,GAAA,eACA,CAAEvC,KAAM,MADR,eAEA,QA5GJ,YAiHJ,IAMMyC,IAAiB,YAAG,CACxB,CACEC,MAAO5E,EAAK6E,cAAcC,EAAAA,EAAAA,MAAeC,cACzCC,aAAc,CACZC,IAAK,cACLC,SAAU,SAACC,EAAQC,GAAU,+BAAAhF,EAAc,EAAD,KAAMG,GAAN,IAAe4B,KAAMiD,MAC/DA,MAAO7E,EAAQ4B,KACfkD,YAAarF,EAAK6E,cAAcC,EAAAA,EAAAA,YAGpC,CACEF,MAAOU,EAAAA,GAAAA,KAAAA,MACPC,KAAMD,EAAAA,GAAAA,KAAAA,KACNE,GAAIF,EAAAA,GAAAA,KAAAA,SACJF,MAAO,YAAF,OAAcE,EAAAA,GAAAA,KAAAA,UACnBN,aAAc,CACZC,IAAK,GAAF,OAAKK,EAAAA,GAAAA,KAAAA,SAAL,WACHJ,SAAU,SAACC,EAAQM,GACjB,+BAxBe,SAAChB,EAAOgB,GAAW,wBACxCA,EAAOC,OAAS,GAAhB,eACItF,EAAc,EAAD,KAAMG,GAAN,IAAeM,OAAQ,IAAvB,UAAgC4D,EAAQgB,OADzD,eAEIjB,GAAkBC,IAqBhBkB,CAAeL,EAAAA,GAAAA,KAAAA,SAAyCG,IAC1DL,MAAO7E,EAAQ2B,KACf0D,MAAON,EAAAA,GAAAA,KAAAA,WAKPO,IAAmB,YAAG,CAC1BC,kBAAkB,EAClBC,YAAa/F,EAAK6E,cAAcC,EAAAA,EAAAA,cAChCvE,SAASyF,EAAAA,EAAAA,IAAiBzF,EAAS+E,EAAAA,IACnCW,SAAU,SAACd,EAAQe,EAAeC,GAAU,wBACtCA,GAAO,2BACLC,GAAAA,CAAQ7F,EAAS8F,EAAAA,KAA8B,2BACjDtG,MACK,2BACLK,EAAciG,EAAAA,OAEX,2BACLH,EAAcI,KAAI,SAACC,GAAS,YAC1B,IAAMC,GAAS,uBACZD,EAAKE,SAAW3D,MAAMC,QAAQxC,EAAQgG,EAAKE,YAA3B,eACblG,EAAQgG,EAAKE,UAAUtD,QACrB,SAACiC,GAAU,+BAAAsB,OAAOtB,KAAWsB,OAAOH,EAAKI,MAAM,GAAGvB,YAFvC,eAIb,MANoB,YAQ1BoB,EAAUD,EAAKE,UAAUf,OAAS,GAAlC,eACItF,EAAc,EAAD,KAAMG,GAAYiG,MADnC,eAEIhC,GAAkB+B,EAAKE,kBAUnC,OAhLI,wBAiLF,oCACG/E,IAAgB,IAAJ,WACX,kBAACkF,EAAAA,SAAD,KACE,kBAACC,EAAAA,QAAD,SAFS,eAIW,IAApBlG,EAAS+E,QAAT,eACF,kBAAC,KAAD,QADE,eAGF,yBAAKF,GAAG,uBACN,kBAAC,IAAD,CACEsB,WAAY,CACVC,UAAW/F,EAAa0E,OACxB9E,KAAAA,EACAoG,QAASzG,EAAQO,MACjBmG,UAAW,SAAC9B,EAAQvE,GAClB,+BAAAR,EAAc,EAAD,KACRG,GADQ,IAEXM,OAAQN,EAAQO,OAASF,EAAO,OAEpCsG,gBAAiB,SAAC/B,EAAQ6B,GACxB,+BAAA5G,EAAc,EAAD,KAAMG,GAAN,IAAeO,MAAOkG,EAASnG,OAAQ,MACtDsG,WAAW,EACXC,OAAQ,SAEVC,aAAc,CAAEzB,MAAOjB,IACvBkB,oBAAqBA,MAEtB,eAAAnE,KAAY,eAAI,kBAAC4F,EAAA,EAAD,SAChB,eAAA3F,KAAU,eACT,kBAAC4F,EAAAA,KAAD,CAAMH,OAAO,eACX,kBAACG,EAAAC,SAAD,KACE,kBAAC,KAAD,WAIL,gBAAC9F,KAAD,eAAiBE,MAAjB,eACC,kBAAC,aAAD,KACE,kBAAC,EAAA6F,MAAD,CACE,aAAW,oBACXL,OAAO,WACPM,QAASC,EAAAA,aAAAA,QACTrD,MAAOsD,EAAAA,GACPtE,KAAMpC,EACN2G,OAAQ,CACNtE,MAAOhD,EAAQwB,UACfY,UAAWpC,EAAQyB,eAErB8F,OApDC,SAACC,EAAIxE,EAAOZ,GAAc,wBACvCvC,EAAc,EAAD,KAAMG,GAAN,IAAewB,UAAWwB,EAAOvB,cAAeW,MAoDjDqF,gBAAc,GAEd,kBAAC,EAAAC,YAAD,MACA,kBAAC,EAAAC,UAAD,QAED,eAAwB,IAAxBlH,EAAa0E,SAAb,eACC,kBAAC6B,EAAAA,KAAD,CAAMH,OAAO,eACX,kBAACG,EAAAC,SAAD,KACE,kBAAC,KAAD,aAMV,kBAACW,EAAAA,WAAD,CACEf,OAAO,QACPL,UAAW/F,EAAa0E,OACxB9E,KAAML,EAAQM,OAASN,EAAQO,MAAQ,EACvCkG,QAASpE,OAAOrC,EAAQO,OACxBmG,UAAW,SAACc,EAAInH,GACd,+BAAAR,EAAc,EAAD,KACRG,GADQ,IAEXM,OAAQN,EAAQO,OAASF,EAAO,OAGpCsG,gBAAiB,SAACa,EAAIf,GACpB,+BAAA5G,EAAc,EAAD,KAAMG,GAAN,IAAeO,MAAOkG,EAASnG,OAAQ,MAEtDuH,SAAQ,iCACRV,QAASW,EAAAA,kBAAAA,c,i3BAQrB7I,EAAkB8I,UAAY,CAC5B7I,MAAO8I,IAAAA,OAAAA,Y,eCjTT,QANiC,WAAM,WACrC,IAAM9I,GAAK,YAAG+I,EAAAA,EAAAA,OAEd,OAHqC,WAG9B,kBAAChJ,EAAD,CAAmBC,MAAOA,K,46BC2BnC,QAvBqB,WAAM,WACzB,IAAMO,GAAI,YAAGC,EAAAA,EAAAA,MAMb,OAPyB,WAGzBwI,SAASC,MAAQ1I,EAAK6E,cAAcC,EAAAA,EAAAA,cAAwB,CAC1D6D,OAAQ,aAJe,WAQvB,kBAAC,aAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,UAAU,yBACpB,kBAACC,EAAA,EAAD,CACEJ,MAAK,UAAK1I,EAAK6E,cAAcC,EAAAA,EAAAA,gBAAxB,YAAoD9E,EACtD6E,cAAcC,EAAAA,EAAAA,UACdC,kBAGP,kBAACgE,EAAA,EAAD,KACE,kBAAC,EAAD","sources":["webpack:///./src/Components/ClustersListTable/ClustersListTable.js","webpack:///./src/Components/ClustersListTable/index.js","webpack:///./src/Components/ClustersList/index.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { useDispatch, useSelector } from 'react-redux';\nimport isEqual from 'lodash/isEqual';\nimport { useLocation } from 'react-router-dom';\n\nimport {\n  SortByDirection,\n  Table,\n  TableBody,\n  TableHeader,\n  TableVariant,\n} from '@patternfly/react-table';\nimport { Card, CardBody } from '@patternfly/react-core/dist/js/components/Card';\nimport { Bullseye } from '@patternfly/react-core/dist/js/layouts/Bullseye';\nimport { Spinner } from '@patternfly/react-core/dist/js/components/Spinner';\nimport {\n  Pagination,\n  PaginationVariant,\n} from '@patternfly/react-core/dist/js/components/Pagination';\nimport PrimaryToolbar from '@redhat-cloud-services/frontend-components/PrimaryToolbar/PrimaryToolbar';\n\nimport {\n  CLUSTERS_LIST_INITIAL_STATE,\n  updateClustersListFilters,\n} from '../../Services/Filters';\nimport {\n  CLUSTERS_LIST_COLUMNS,\n  CLUSTERS_LIST_COLUMNS_KEYS,\n  CLUSTER_FILTER_CATEGORIES,\n  CLUSTER_LAST_CHECKED_CELL,\n  CLUSTER_NAME_CELL,\n} from '../../AppConstants';\nimport {\n  buildFilterChips,\n  mapClustersToRows,\n  paramParser,\n  passFiltersCluster,\n  translateSortParams,\n  updateSearchParams,\n} from '../Common/Tables';\nimport Loading from '../Loading/Loading';\nimport messages from '../../Messages';\nimport {\n  ErrorState,\n  NoMatchingClusters,\n  NoRecsForClusters,\n} from '../MessageState/EmptyStates';\n\nconst ClustersListTable = ({\n  query: { isError, isUninitialized, isFetching, isSuccess, data, refetch },\n}) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const updateFilters = (payload) =>\n    dispatch(updateClustersListFilters(payload));\n  const filters = useSelector(({ filters }) => filters.clustersListState);\n\n  const clusters = data?.data || [];\n  const page = filters.offset / filters.limit + 1;\n\n  const [filteredRows, setFilteredRows] = useState([]);\n  const [displayedRows, setDisplayedRows] = useState([]);\n  // helps to distinguish the state when the API data received but not yet filtered\n  const [rowsFiltered, setRowsFiltered] = useState(false);\n  const [filterBuilding, setFilterBuilding] = useState(true);\n  const { search } = useLocation();\n  const loadingState = isUninitialized || isFetching || !rowsFiltered;\n  const errorState = isError;\n  const successState = isSuccess;\n\n  useEffect(() => {\n    setDisplayedRows(\n      buildDisplayedRows(filteredRows, filters.sortIndex, filters.sortDirection)\n    );\n  }, [\n    filteredRows,\n    filters.sortIndex,\n    filters.sortDirection,\n    filters.limit,\n    filters.offset,\n  ]);\n\n  useEffect(() => {\n    setFilteredRows(buildFilteredRows(clusters, filters));\n    if (isSuccess && !rowsFiltered) {\n      setRowsFiltered(true);\n    }\n  }, [data, filters.hits, filters.text]);\n\n  useEffect(() => {\n    if (search && filterBuilding) {\n      const paramsObject = paramParser(search);\n\n      if (paramsObject.sort) {\n        const sortObj = translateSortParams(paramsObject.sort);\n        paramsObject.sortIndex = CLUSTERS_LIST_COLUMNS_KEYS.indexOf(\n          sortObj.name\n        );\n        paramsObject.sortDirection = sortObj.direction;\n      }\n      paramsObject.offset &&\n        (paramsObject.offset = Number(paramsObject.offset[0]));\n      paramsObject.limit &&\n        (paramsObject.limit = Number(paramsObject.limit[0]));\n      paramsObject.impacting &&\n        !Array.isArray(paramsObject.impacting) &&\n        (paramsObject.impacting = [`${paramsObject.impacting}`]);\n      updateFilters({ ...filters, ...paramsObject });\n    }\n    setFilterBuilding(false);\n  }, []);\n\n  useEffect(() => {\n    if (!filterBuilding) {\n      updateSearchParams(filters, CLUSTERS_LIST_COLUMNS_KEYS);\n    }\n  }, [filters, filterBuilding]);\n\n  const buildFilteredRows = (allRows, filters) =>\n    mapClustersToRows(\n      allRows.filter((cluster) => passFiltersCluster(cluster, filters))\n    );\n\n  const buildDisplayedRows = (rows, index, direction) => {\n    const sorted = [...rows];\n    index !== -1 &&\n      sorted.sort((a, b) => {\n        let fst, snd;\n        const d = direction === SortByDirection.asc ? 1 : -1;\n        switch (index) {\n          case CLUSTER_NAME_CELL:\n            fst = a.cluster.cluster_name || a.cluster.cluster_id;\n            snd = b.cluster.cluster_name || b.cluster.cluster_id;\n            return fst.localeCompare(snd) ? fst.localeCompare(snd) * d : 0;\n          case CLUSTER_LAST_CHECKED_CELL:\n            fst = new Date(a.cluster.last_checked_at || 0);\n            snd = new Date(b.cluster.last_checked_at || 0);\n            return fst > snd ? d : snd > fst ? -d : 0;\n          default:\n            fst = a.cells[index];\n            snd = b.cells[index];\n            return fst > snd ? d : snd > fst ? -d : 0;\n        }\n      });\n    return sorted.slice(\n      filters.limit * (page - 1),\n      filters.limit * (page - 1) + filters.limit\n    );\n  };\n\n  const removeFilterParam = (param) => {\n    const { [param]: omitted, ...newFilters } = { ...filters, offset: 0 };\n    updateFilters({\n      ...newFilters,\n      ...(param === 'text'\n        ? { text: '' }\n        : param === 'hits'\n        ? { hits: [] }\n        : {}),\n    });\n  };\n\n  // TODO: update URL when filters changed\n  const addFilterParam = (param, values) => {\n    values.length > 0\n      ? updateFilters({ ...filters, offset: 0, ...{ [param]: values } })\n      : removeFilterParam(param);\n  };\n\n  const filterConfigItems = [\n    {\n      label: intl.formatMessage(messages.name).toLowerCase(),\n      filterValues: {\n        key: 'text-filter',\n        onChange: (_event, value) => updateFilters({ ...filters, text: value }),\n        value: filters.text,\n        placeholder: intl.formatMessage(messages.filterBy),\n      },\n    },\n    {\n      label: CLUSTER_FILTER_CATEGORIES.hits.title,\n      type: CLUSTER_FILTER_CATEGORIES.hits.type,\n      id: CLUSTER_FILTER_CATEGORIES.hits.urlParam,\n      value: `checkbox-${CLUSTER_FILTER_CATEGORIES.hits.urlParam}`,\n      filterValues: {\n        key: `${CLUSTER_FILTER_CATEGORIES.hits.urlParam}-filter`,\n        onChange: (_event, values) =>\n          addFilterParam(CLUSTER_FILTER_CATEGORIES.hits.urlParam, values),\n        value: filters.hits,\n        items: CLUSTER_FILTER_CATEGORIES.hits.values,\n      },\n    },\n  ];\n\n  const activeFiltersConfig = {\n    showDeleteButton: true,\n    deleteTitle: intl.formatMessage(messages.resetFilters),\n    filters: buildFilterChips(filters, CLUSTER_FILTER_CATEGORIES),\n    onDelete: (_event, itemsToRemove, isAll) => {\n      if (isAll) {\n        if (isEqual(filters, CLUSTERS_LIST_INITIAL_STATE)) {\n          refetch();\n        } else {\n          updateFilters(CLUSTERS_LIST_INITIAL_STATE);\n        }\n      } else {\n        itemsToRemove.map((item) => {\n          const newFilter = {\n            [item.urlParam]: Array.isArray(filters[item.urlParam])\n              ? filters[item.urlParam].filter(\n                  (value) => String(value) !== String(item.chips[0].value)\n                )\n              : '',\n          };\n          newFilter[item.urlParam].length > 0\n            ? updateFilters({ ...filters, ...newFilter })\n            : removeFilterParam(item.urlParam);\n        });\n      }\n    },\n  };\n\n  const onSort = (_e, index, direction) => {\n    updateFilters({ ...filters, sortIndex: index, sortDirection: direction });\n  };\n\n  return (\n    <>\n      {loadingState ? (\n        <Bullseye>\n          <Spinner />\n        </Bullseye>\n      ) : clusters.length === 0 ? (\n        <NoRecsForClusters />\n      ) : (\n        <div id=\"clusters-list-table\">\n          <PrimaryToolbar\n            pagination={{\n              itemCount: filteredRows.length,\n              page,\n              perPage: filters.limit,\n              onSetPage: (_event, page) =>\n                updateFilters({\n                  ...filters,\n                  offset: filters.limit * (page - 1),\n                }),\n              onPerPageSelect: (_event, perPage) =>\n                updateFilters({ ...filters, limit: perPage, offset: 0 }),\n              isCompact: true,\n              ouiaId: 'pager',\n            }}\n            filterConfig={{ items: filterConfigItems }}\n            activeFiltersConfig={activeFiltersConfig}\n          />\n          {loadingState && <Loading />}\n          {errorState && (\n            <Card ouiaId=\"error-state\">\n              <CardBody>\n                <ErrorState />\n              </CardBody>\n            </Card>\n          )}\n          {!loadingState && successState && (\n            <React.Fragment>\n              <Table\n                aria-label=\"Table of clusters\"\n                ouiaId=\"clusters\"\n                variant={TableVariant.compact}\n                cells={CLUSTERS_LIST_COLUMNS}\n                rows={displayedRows}\n                sortBy={{\n                  index: filters.sortIndex,\n                  direction: filters.sortDirection,\n                }}\n                onSort={onSort}\n                isStickyHeader\n              >\n                <TableHeader />\n                <TableBody />\n              </Table>\n              {filteredRows.length === 0 && (\n                <Card ouiaId=\"empty-state\">\n                  <CardBody>\n                    <NoMatchingClusters />\n                  </CardBody>\n                </Card>\n              )}\n            </React.Fragment>\n          )}\n          <Pagination\n            ouiaId=\"pager\"\n            itemCount={filteredRows.length}\n            page={filters.offset / filters.limit + 1}\n            perPage={Number(filters.limit)}\n            onSetPage={(_e, page) =>\n              updateFilters({\n                ...filters,\n                offset: filters.limit * (page - 1),\n              })\n            }\n            onPerPageSelect={(_e, perPage) =>\n              updateFilters({ ...filters, limit: perPage, offset: 0 })\n            }\n            widgetId={`pagination-options-menu-bottom`}\n            variant={PaginationVariant.bottom}\n          />\n        </div>\n      )}\n    </>\n  );\n};\n\nClustersListTable.propTypes = {\n  query: PropTypes.object.isRequired,\n};\n\nexport { ClustersListTable };\n","import React from 'react';\nimport { useGetClustersQuery } from '../../Services/SmartProxy';\nimport { ClustersListTable } from './ClustersListTable';\n\nconst ClustersListTableWrapper = () => {\n  const query = useGetClustersQuery();\n\n  return <ClustersListTable query={query} />;\n};\n\nexport default ClustersListTableWrapper;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\n\nimport PageHeader, {\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport Main from '@redhat-cloud-services/frontend-components/Main';\n\nimport messages from '../../Messages';\nimport ClustersListTable from '../ClustersListTable';\n\nconst ClustersList = () => {\n  const intl = useIntl();\n  // FIXME: https://consoledot.pages.redhat.com/insights-chrome/dev/api.html#_using_updatedocumenttitle_function\n  document.title = intl.formatMessage(messages.documentTitle, {\n    subnav: 'Clusters',\n  });\n\n  return (\n    <React.Fragment>\n      <PageHeader className=\"ins-c-clusters-header\">\n        <PageHeaderTitle\n          title={`${intl.formatMessage(messages.insightsHeader)} ${intl\n            .formatMessage(messages.clusters)\n            .toLowerCase()}`}\n        />\n      </PageHeader>\n      <Main>\n        <ClustersListTable />\n      </Main>\n    </React.Fragment>\n  );\n};\n\nexport default ClustersList;\n"],"names":["ClustersListTable","query","isError","isUninitialized","isFetching","isSuccess","data","refetch","intl","useIntl","dispatch","useDispatch","updateFilters","payload","updateClustersListFilters","filters","useSelector","f","clustersListState","clusters","page","offset","limit","useState","filteredRows","setFilteredRows","displayedRows","setDisplayedRows","rowsFiltered","setRowsFiltered","filterBuilding","setFilterBuilding","search","useLocation","loadingState","errorState","successState","useEffect","buildDisplayedRows","sortIndex","sortDirection","buildFilteredRows","hits","text","paramsObject","paramParser","sort","sortObj","translateSortParams","CLUSTERS_LIST_COLUMNS_KEYS","name","direction","Number","impacting","Array","isArray","updateSearchParams","allRows","mapClustersToRows","filter","cluster","passFiltersCluster","rows","index","sorted","a","b","fst","snd","d","SortByDirection","CLUSTER_NAME_CELL","cluster_name","cluster_id","localeCompare","CLUSTER_LAST_CHECKED_CELL","Date","last_checked_at","cells","slice","removeFilterParam","param","newFilters","filterConfigItems","label","formatMessage","messages","toLowerCase","filterValues","key","onChange","_event","value","placeholder","CLUSTER_FILTER_CATEGORIES","type","id","values","length","addFilterParam","items","activeFiltersConfig","showDeleteButton","deleteTitle","buildFilterChips","onDelete","itemsToRemove","isAll","isEqual","CLUSTERS_LIST_INITIAL_STATE","map","item","newFilter","urlParam","String","chips","Bullseye","Spinner","pagination","itemCount","perPage","onSetPage","onPerPageSelect","isCompact","ouiaId","filterConfig","Loading","Card","CardBody","Table","variant","TableVariant","CLUSTERS_LIST_COLUMNS","sortBy","onSort","_e","isStickyHeader","TableHeader","TableBody","Pagination","widgetId","PaginationVariant","propTypes","PropTypes","useGetClustersQuery","document","title","subnav","PageHeader","className","PageHeaderTitle","Main"],"sourceRoot":""}