{"version":3,"sources":["webpack:///./src/Routes.js","webpack:///./src/App.js","webpack:///./src/Services/SmartProxy.js","webpack:///./src/Store/index.js"],"names":["paths","title","path","component","lazy","Routes","Suspense","fallback","Bullseye","Spinner","Switch","map","Route","key","EmptyState","EmptyStateBody","InvalidObject","history","useHistory","useEffect","getRegistry","register","notifications","notificationsReducer","insights","chrome","init","identifyApp","unregister","on","event","push","navId","className","smartProxyApi","createApi","baseQuery","fetchBaseQuery","baseUrl","endpoints","builder","getClusterById","query","id","useGetClusterByIdQuery","useLogger","configureStore","reducer","middleware","getDefaultMiddleware","concat","logger"],"mappings":"4jDAiBMA,EAAQ,CACZ,CACEC,MAAO,WACPC,KAAM,uBACNC,WAVYC,WAAK,kBACnB,8EAqBWC,EAAS,kBACpB,kBAAC,EAAAC,SAAD,CACEC,SACE,kBAAC,EAAAC,SAAD,KACE,kBAAC,EAAAC,QAAD,QAIJ,kBAAC,EAAAC,OAAD,KACGV,EAAMW,KAAI,SAACT,GAAD,OACT,kBAAC,EAAAU,MAAD,CAAOC,IAAKX,EAAKD,MAAOC,KAAMA,EAAKA,KAAMC,UAAWD,EAAKC,eAG3D,kBAAC,EAAAS,MAAD,CACEV,KAAK,IACLC,UAAW,kBACT,kBAAC,EAAAW,WAAD,KACE,kBAAC,EAAAC,eAAD,KACE,kBAACC,EAAA,EAAD,cCdd,QA1BY,WACV,IAAMC,GAAUC,kBAehB,OAbAC,gBAAU,YACSC,UACRC,SAAS,CAAEC,cAAeC,OACnCC,SAASC,OAAOC,OAChBF,SAASC,OAAOE,YAAY,eAC5B,IAAMC,EAAaJ,SAASC,OAAOI,GAAG,kBAAkB,SAACC,GAAD,OACtDb,EAAQc,KAAR,WAAiBD,EAAME,WAEzB,OAAO,WACLJ,OAED,IAGD,kBAAC,aAAD,KACE,kBAAC,KAAD,MACA,yBAAKK,UAAU,eACb,kBAAC5B,EAAD,U,gFC3BK6B,GAAgBC,QAAU,CACrCC,WAAWC,QAAe,CACxBC,QAJa,wCAMfC,UAAW,SAACC,GAAD,MAAc,CACvBC,eAAgBD,EAAQE,MAAM,CAC5BA,MAAO,SAACC,GAAD,yBAAoBA,EAApB,kBAMEC,EAA2BV,EAA3BU,wB,uGCFf,QATiB,SAACC,GAAD,OACfC,QAAe,CACbC,SAAS,UAAGb,gBAA4BA,aACxCc,WAAY,SAACC,GAAD,OACVJ,EACII,IAAuBC,OAAOC,IAAQjB,gBACtCe,IAAuBC,OAAOhB","file":"js/102.9b0d5a4ea0ccd4e8dea2.js","sourcesContent":["import { Route, Switch } from 'react-router-dom';\nimport React, { Suspense, lazy } from 'react';\nimport {\n  Bullseye,\n  EmptyState,\n  EmptyStateBody,\n  Spinner,\n} from '@patternfly/react-core';\n\nimport InvalidObject from '@redhat-cloud-services/frontend-components/InvalidObject/InvalidObject';\n\nconst Cluster = lazy(() =>\n  import(\n    /* webpackChunkName: \"ClusterDetails\" */ './Components/Cluster/Cluster'\n  )\n);\n\nconst paths = [\n  {\n    title: 'Clusters',\n    path: '/clusters/:clusterId',\n    component: Cluster,\n  },\n];\n\n/**\n * the Switch component changes routes depending on the path.\n *\n * Route properties:\n *      exact - path must match exactly,\n *      path - https://prod.foo.redhat.com:1337/insights/advisor/rules\n *      component - component to be rendered when a route has been chosen.\n */\nexport const Routes = () => (\n  <Suspense\n    fallback={\n      <Bullseye>\n        <Spinner />\n      </Bullseye>\n    }\n  >\n    <Switch>\n      {paths.map((path) => (\n        <Route key={path.title} path={path.path} component={path.component} />\n      ))}\n      {/* Finally, catch all unmatched routes */}\n      <Route\n        path=\"*\"\n        component={() => (\n          <EmptyState>\n            <EmptyStateBody>\n              <InvalidObject />\n            </EmptyStateBody>\n          </EmptyState>\n        )}\n      />\n    </Switch>\n  </Suspense>\n);\n","import './App.scss';\n\nimport React, { useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport NotificationsPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry/Registry';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nimport { Routes } from './Routes';\n\nconst App = () => {\n  const history = useHistory();\n\n  useEffect(() => {\n    const registry = getRegistry();\n    registry.register({ notifications: notificationsReducer });\n    insights.chrome.init();\n    insights.chrome.identifyApp('ocp-advisor');\n    const unregister = insights.chrome.on('APP_NAVIGATION', (event) =>\n      history.push(`/${event.navId}`)\n    );\n    return () => {\n      unregister();\n    };\n  }, []);\n\n  return (\n    <React.Fragment>\n      <NotificationsPortal />\n      <div className=\"ocp-advisor\">\n        <Routes />\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\n\nconst BASE_URL = '/api/insights-results-aggregator/v1';\n\nexport const smartProxyApi = createApi({\n  baseQuery: fetchBaseQuery({\n    baseUrl: BASE_URL,\n  }),\n  endpoints: (builder) => ({\n    getClusterById: builder.query({\n      query: (id) => `clusters/${id}/report`,\n    }),\n  }),\n});\n\n// Export hooks for usage in functional components\nexport const { useGetClusterByIdQuery } = smartProxyApi;\n","import { configureStore } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\n\nimport { smartProxyApi } from '../Services/SmartProxy';\n\nconst getStore = (useLogger) =>\n  configureStore({\n    reducer: { [smartProxyApi.reducerPath]: smartProxyApi.reducer },\n    middleware: (getDefaultMiddleware) =>\n      useLogger\n        ? getDefaultMiddleware().concat(logger, smartProxyApi.middleware)\n        : getDefaultMiddleware().concat(smartProxyApi.middleware),\n  });\n\nexport default getStore;\n"],"sourceRoot":""}