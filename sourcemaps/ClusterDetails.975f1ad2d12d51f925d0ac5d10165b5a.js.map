{"version":3,"file":"js/ClusterDetails.5c59635c31f6f4702e43.js","mappings":"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","sources":["webpack:///./src/Components/ClusterHeader/ClusterHeader.js","webpack:///./src/Components/ClusterHeader/index.js","webpack:///./src/Components/ReportDetails/ReportDetails.js","webpack:///./src/Components/ClusterRules/ClusterRules.js","webpack:///./src/Components/Cluster/Cluster.js","webpack:///./src/Components/Cluster/index.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport { Grid, GridItem } from '@patternfly/react-core/dist/js/layouts/Grid';\nimport { Stack, StackItem } from '@patternfly/react-core/dist/js/layouts/Stack';\nimport { Title } from '@patternfly/react-core/dist/js/components/Title';\nimport Skeleton from '@redhat-cloud-services/frontend-components/Skeleton';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat/DateFormat';\n\nimport messages from '../../Messages';\nimport { OneLineLoader } from '../../Utilities/Loaders';\n\nexport const ClusterHeader = ({ clusterId, clusterData, displayName }) => {\n  const intl = useIntl();\n  const {\n    isUninitialized: isUninitializedDisplayName,\n    isFetching: isFetchingDisplayName,\n    data: clusterName,\n  } = displayName;\n\n  // subscribe to the cluster data query\n  const {\n    isUninitialized: isUninitializedCluster,\n    isFetching: isFetchingCluster,\n    data: cluster,\n  } = clusterData;\n\n  return (\n    <Grid id=\"cluster-header\" md={12} hasGutter>\n      <GridItem>\n        {isUninitializedDisplayName || isFetchingDisplayName ? (\n          <Skeleton size=\"sm\" />\n        ) : (\n          <Title\n            size=\"2xl\"\n            headingLevel=\"h1\"\n            id=\"cluster-header-title\"\n            ouiaId=\"cluster-name\"\n          >\n            {clusterName || clusterId}\n          </Title>\n        )}\n      </GridItem>\n      <GridItem>\n        <Stack>\n          <StackItem id=\"cluster-header-uuid\">\n            <span>UUID: </span>\n            <span>{clusterId || intl.formatMessage(messages.unknown)}</span>\n          </StackItem>\n          <StackItem id=\"cluster-header-last-seen\">\n            <span>{intl.formatMessage(messages.lastSeen)}: </span>\n            <span>\n              {isUninitializedCluster || isFetchingCluster ? (\n                <OneLineLoader />\n              ) : cluster?.report?.meta?.last_checked_at ? (\n                <DateFormat\n                  date={cluster?.report?.meta?.last_checked_at}\n                  type=\"exact\"\n                />\n              ) : (\n                intl.formatMessage(messages.unknown)\n              )}\n            </span>\n          </StackItem>\n        </Stack>\n      </GridItem>\n    </Grid>\n  );\n};\n\nClusterHeader.propTypes = {\n  clusterId: PropTypes.string.isRequired,\n  displayName: PropTypes.object.isRequired,\n  clusterData: PropTypes.object.isRequired,\n};\n","import React from 'react';\nimport { routerParams } from '@redhat-cloud-services/frontend-components-utilities/RouterParams/RouterParams';\n\nimport { useGetClusterDisplayNameByIdQuery } from '../../Services/AccountManagementService';\nimport { useGetClusterByIdQuery } from '../../Services/SmartProxy';\nimport { ClusterHeader } from './ClusterHeader';\n\nexport default routerParams(({ match }) => {\n  const clusterId = match.params.clusterId;\n  const displayName = useGetClusterDisplayNameByIdQuery(clusterId);\n  const clusterData = useGetClusterByIdQuery({\n    id: clusterId,\n    includeDisabled: false,\n  });\n\n  return (\n    <ClusterHeader\n      clusterId={clusterId}\n      displayName={displayName}\n      clusterData={clusterData}\n    />\n  );\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\n\nimport Loading from '../Loading/Loading';\n\n// Rule fields processing: https://docs.google.com/document/d/1D0ZLD6-2DZqBX1cUHJY2vL2QAD0dIAzY3O3xFNlEsVg/edit?usp=sharing\n\nconst ReportDetails = ({ report }) => {\n  return (\n    <div className=\"advisor\">\n      <AsyncComponent\n        appName=\"advisor\"\n        module=\"./AdvisorReportDetails\"\n        fallback={<Loading />}\n        // TODO: make API rename `extra_data` to `details` or modify AdvisorReportDetails property\n        report={{\n          ...report,\n          details: report.extra_data,\n          resolution: {\n            resolution: report.resolution,\n          },\n        }}\n      />\n    </div>\n  );\n};\n\nReportDetails.propTypes = {\n  report: PropTypes.object.isRequired,\n};\n\nexport default ReportDetails;\n","import './_ClusterRules.scss';\n\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport CheckIcon from '@patternfly/react-icons/dist/js/icons/check-icon';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat/DateFormat';\nimport InsightsLabel from '@redhat-cloud-services/frontend-components/InsightsLabel';\nimport {\n  SortByDirection,\n  Table,\n  TableBody,\n  TableHeader,\n  TableVariant,\n  cellWidth,\n  sortable,\n} from '@patternfly/react-table';\nimport { capitalize } from '@patternfly/react-core/dist/js/helpers/util';\nimport { Card, CardBody } from '@patternfly/react-core/dist/js/components/Card';\nimport {\n  Tooltip,\n  TooltipPosition,\n} from '@patternfly/react-core/dist/js/components/Tooltip';\nimport PrimaryToolbar from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\n\nimport messages from '../../Messages';\nimport MessageState from '../MessageState/MessageState';\nimport {\n  IMPACT_LABEL,\n  LIKELIHOOD_LABEL,\n  FILTER_CATEGORIES as FC,\n  RULE_CATEGORIES,\n} from '../../AppConstants';\nimport ReportDetails from '../ReportDetails/ReportDetails';\nimport RuleLabels from '../Labels/RuleLabels';\nimport { NoMatchingRecs } from '../MessageState/EmptyStates';\n\nconst ClusterRules = ({ reports }) => {\n  const intl = useIntl();\n  const [activeReports, setActiveReports] = useState([]);\n  const [sortBy, setSortBy] = useState({});\n  const [filters, setFilters] = useState({});\n  const [searchValue, setSearchValue] = useState('');\n  const [rows, setRows] = useState([]);\n  const [isAllExpanded, setIsAllExpanded] = useState(false);\n  const results = rows ? rows.length / 2 : 0;\n\n  const cols = [\n    {\n      title: intl.formatMessage(messages.description),\n      transforms: [sortable],\n    },\n    {\n      title: intl.formatMessage(messages.added),\n      transforms: [sortable, cellWidth(15)],\n    },\n    {\n      title: intl.formatMessage(messages.totalRisk),\n      transforms: [sortable, cellWidth(15)],\n    },\n  ];\n\n  const handleOnCollapse = (_e, rowId, isOpen) => {\n    const collapseRows = [...rows];\n    collapseRows[rowId] = { ...collapseRows[rowId], isOpen };\n    setRows(collapseRows);\n  };\n\n  const buildRows = (activeReports, filters, rows, searchValue = '') => {\n    const builtRows = activeReports.flatMap((value, key) => {\n      const rule = value;\n      const resolution = value.resolution;\n      const entity = rows.filter(\n        (rowVal, rowKey) =>\n          rowKey % 2 === 0 && rowVal.rule.rule_id === rule.rule_id && rowVal\n      );\n      const isOpen = rows.length\n        ? entity.length\n          ? entity[0].isOpen\n          : false\n        : key === 0\n        ? true\n        : false;\n\n      const reportRow = [\n        {\n          rule,\n          resolution,\n          isOpen,\n          cells: [\n            {\n              title: (\n                <div>\n                  {rule.description} <RuleLabels rule={value} />\n                </div>\n              ),\n            },\n            {\n              title: (\n                <div key={key}>\n                  <DateFormat\n                    date={rule.created_at}\n                    type=\"relative\"\n                    tooltipProps={{ position: TooltipPosition.bottom }}\n                  />\n                </div>\n              ),\n            },\n            {\n              title: (\n                <div key={key} style={{ verticalAlign: 'top' }}>\n                  {rule?.likelihood && rule?.impact ? (\n                    <Tooltip\n                      key={key}\n                      position={TooltipPosition.bottom}\n                      content={\n                        // TODO: refine fields lookup\n                        <span>\n                          The <strong>likelihood</strong> that this will be a\n                          problem is{' '}\n                          {rule.likelihood\n                            ? LIKELIHOOD_LABEL[rule.likelihood]\n                            : 'unknown'}\n                          . The <strong>impact</strong> of the problem would be{' '}\n                          {rule.impact ? IMPACT_LABEL[rule.impact] : 'unknown'}{' '}\n                          if it occurred.\n                        </span>\n                      }\n                    >\n                      <InsightsLabel value={rule.total_risk} />\n                    </Tooltip>\n                  ) : (\n                    <InsightsLabel value={rule.total_risk} />\n                  )}\n                </div>\n              ),\n            },\n          ],\n        },\n        {\n          parent: key,\n          fullWidth: true,\n          cells: [\n            {\n              title: <ReportDetails key={`child-${key}`} report={value} />,\n            },\n          ],\n        },\n      ];\n      const isValidSearchValue =\n        searchValue.length === 0 ||\n        rule.description.toLowerCase().includes(searchValue.toLowerCase());\n      const isValidFilterValue =\n        Object.keys(filters).length === 0 ||\n        Object.keys(filters)\n          .map((key) => {\n            const filterValues = filters[key];\n            const rowValue = {\n              created_at: rule.created_at,\n              total_risk: rule.total_risk,\n              category: rule.tags,\n            };\n            if (key === 'category') {\n              // in that case, rowValue['category'] is an array of categories (or \"tags\" in the back-end implementation)\n              // e.g. ['security', 'fault_tolerance']\n              return rowValue[key].find((categoryName) =>\n                filterValues.includes(String(RULE_CATEGORIES[categoryName]))\n              );\n            }\n            return filterValues.find(\n              (value) => String(value) === String(rowValue[key])\n            );\n          })\n          .every((x) => x);\n\n      return isValidSearchValue && isValidFilterValue ? reportRow : [];\n    });\n    // must recalculate parent for expandable table content whenever the array size changes\n    builtRows.forEach((row, index) =>\n      row.parent ? (row.parent = index - 1) : null\n    );\n\n    return builtRows;\n  };\n\n  const onSort = (_e, index, direction) => {\n    const sortedReports = {\n      1: 'description',\n      2: 'created_at',\n      3: 'total_risk',\n    };\n    const sort = () =>\n      activeReports\n        .concat()\n        .sort((firstItem, secondItem) =>\n          firstItem[sortedReports[index]] > secondItem[sortedReports[index]]\n            ? 1\n            : secondItem[sortedReports[index]] > firstItem[sortedReports[index]]\n            ? -1\n            : 0\n        );\n    const sortedReportsDirectional =\n      direction === SortByDirection.asc ? sort() : sort().reverse();\n\n    setActiveReports(sortedReportsDirectional);\n    setSortBy({\n      index,\n      direction,\n    });\n    setRows(buildRows(sortedReportsDirectional, filters, rows, searchValue));\n  };\n\n  const onInputChange = (value) => {\n    const builtRows = buildRows(activeReports, filters, rows, value);\n    setSearchValue(value);\n    setRows(builtRows);\n  };\n\n  const onFilterChange = (param, values) => {\n    const removeFilterParam = (param) => {\n      const filter = { ...filters };\n      delete filter[param];\n      return filter;\n    };\n\n    const newFilters =\n      values.length > 0\n        ? { ...filters, ...{ [param]: values } }\n        : removeFilterParam(param);\n    setRows(buildRows(activeReports, newFilters, rows, searchValue));\n    setFilters(newFilters);\n  };\n\n  const filterConfigItems = [\n    {\n      label: 'description',\n      filterValues: {\n        key: 'text-filter',\n        onChange: (_e, value) => onInputChange(value),\n        value: searchValue,\n      },\n    },\n    {\n      label: FC.total_risk.title,\n      type: FC.total_risk.type,\n      id: FC.total_risk.urlParam,\n      value: `checkbox-${FC.total_risk.urlParam}`,\n      filterValues: {\n        key: `${FC.total_risk.urlParam}-filter`,\n        onChange: (_e, values) =>\n          onFilterChange(FC.total_risk.urlParam, values),\n        value: filters.total_risk,\n        items: FC.total_risk.values,\n      },\n    },\n    {\n      label: FC.category.title,\n      type: FC.category.type,\n      id: FC.category.urlParam,\n      value: `checkbox-${FC.category.urlParam}`,\n      filterValues: {\n        key: `${FC.category.urlParam}-filter`,\n        onChange: (_e, values) => onFilterChange(FC.category.urlParam, values),\n        value: filters.category,\n        items: FC.category.values,\n      },\n    },\n  ];\n\n  const buildFilterChips = () => {\n    const prunedFilters = Object.entries(filters);\n    let chips =\n      filters && prunedFilters.length > 0\n        ? prunedFilters.map((item) => {\n            const category = FC[item[0]];\n            const chips = Array.isArray(item[1])\n              ? item[1].map((value) => ({\n                  name: category.values.find(\n                    (values) => values.value === String(value)\n                  ).label,\n                  value,\n                }))\n              : [\n                  {\n                    name: category.values.find(\n                      (values) => values.value === String(item[1])\n                    ).label,\n                    value: item[1],\n                  },\n                ];\n            return {\n              category: capitalize(category.title),\n              chips,\n              urlParam: category.urlParam,\n            };\n          })\n        : [];\n    searchValue.length > 0 &&\n      chips.push({\n        category: 'Description',\n        chips: [{ name: searchValue, value: searchValue }],\n      });\n    return chips;\n  };\n\n  const onChipDelete = (_e, itemsToRemove, isAll) => {\n    if (isAll) {\n      setRows(buildRows(activeReports, {}, rows, ''));\n      setFilters({});\n      setSearchValue('');\n    } else {\n      itemsToRemove.map((item) => {\n        switch (item.category) {\n          case 'Description':\n            setRows(buildRows(activeReports, filters, rows, ''));\n            setSearchValue('');\n            break;\n          default:\n            onFilterChange(\n              item.urlParam,\n              filters[item.urlParam].filter(\n                (value) => String(value) !== String(item.chips[0].value)\n              )\n            );\n        }\n      });\n    }\n  };\n\n  const activeFiltersConfig = {\n    deleteTitle: intl.formatMessage(messages.resetFilters),\n    filters: buildFilterChips(),\n    onDelete: onChipDelete,\n  };\n\n  const onExpandAllClick = (_e, isOpen) => {\n    setIsAllExpanded(isOpen);\n    const allRows = [...rows];\n\n    allRows.map((row) => {\n      if (Object.prototype.hasOwnProperty.call(row, 'isOpen')) {\n        row.isOpen = isOpen;\n      }\n    });\n\n    setRows(allRows);\n  };\n\n  useEffect(() => {\n    const activeReportsData = reports;\n    setActiveReports(activeReportsData);\n    setRows(buildRows(activeReportsData, filters, rows, searchValue));\n  }, []);\n\n  return (\n    <div id=\"cluster-recs-list-table\">\n      <PrimaryToolbar\n        expandAll={{ isAllExpanded, onClick: onExpandAllClick }}\n        filterConfig={{\n          items: filterConfigItems,\n          isDisabled: activeReports.length === 0,\n        }}\n        pagination={\n          <React.Fragment>\n            {results === 1\n              ? `${results} ${intl.formatMessage(messages.recommendation)}`\n              : `${results} ${intl.formatMessage(messages.recommendations)}`}\n          </React.Fragment>\n        }\n        activeFiltersConfig={\n          activeReports.length === 0 ? undefined : activeFiltersConfig\n        }\n      />\n      {activeReports.length > 0 ? (\n        <React.Fragment>\n          <Table\n            aria-label={'Cluster recommendations table'}\n            ouiaId=\"recommendations\"\n            onCollapse={handleOnCollapse}\n            rows={rows}\n            cells={cols}\n            sortBy={sortBy}\n            onSort={onSort}\n            variant={TableVariant.compact}\n            isStickyHeader\n          >\n            <TableHeader />\n            <TableBody />\n          </Table>\n          {results === 0 && (\n            <Card ouiaId=\"empty-state\">\n              <CardBody>\n                <NoMatchingRecs />\n              </CardBody>\n            </Card>\n          )}\n        </React.Fragment>\n      ) : (\n        // ? Welcome to Insights feature for novice clusters with disabled Insights?\n        <Card ouiaId=\"no-recommendations\">\n          <CardBody>\n            <MessageState\n              icon={CheckIcon}\n              iconClass=\"ins-c-insights__check\"\n              title={intl.formatMessage(messages.noRecommendations)}\n              text={intl.formatMessage(messages.noRecommendationsDesc)}\n            />\n          </CardBody>\n        </Card>\n      )}\n    </div>\n  );\n};\n\nClusterRules.propTypes = {\n  reports: PropTypes.array.isRequired,\n};\n\nClusterRules.defaultProps = {\n  reports: [],\n};\n\nexport default ClusterRules;\n","import './_Cluster.scss';\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport { Grid, GridItem } from '@patternfly/react-core/dist/js/layouts/Grid';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\nimport InfoCircleIcon from '@patternfly/react-icons/dist/js/icons/info-circle-icon';\nimport PageHeader from '@redhat-cloud-services/frontend-components/PageHeader';\nimport Main from '@redhat-cloud-services/frontend-components/Main';\nimport { global_danger_color_100 as globalDangerColor100 } from '@patternfly/react-tokens/dist/js/global_danger_color_100';\nimport { global_info_color_100 as globalInfoColor100 } from '@patternfly/react-tokens/dist/js/global_info_color_100.js';\n\nimport ClusterHeader from '../ClusterHeader';\nimport ClusterRules from '../ClusterRules/ClusterRules';\nimport Breadcrumbs from '../Breadcrumbs';\nimport MessageState from '../MessageState/MessageState';\nimport Loading from '../Loading/Loading';\nimport messages from '../../Messages';\n\nexport const Cluster = ({ cluster, displayName, match }) => {\n  const intl = useIntl();\n  const {\n    isError,\n    isUninitialized,\n    isLoading,\n    isFetching,\n    isSuccess,\n    data,\n    error,\n  } = cluster;\n  const { data: clusterDisplayName } = displayName;\n\n  return (\n    <React.Fragment>\n      <PageHeader className=\"pf-m-light ins-inventory-detail\">\n        <Breadcrumbs\n          current={clusterDisplayName || match.params.clusterId}\n          match={match}\n        />\n        <ClusterHeader />\n      </PageHeader>\n      {(isUninitialized || isLoading || isFetching) && (\n        <Main id=\"loading-skeleton\">\n          <Loading />\n        </Main>\n      )}\n      {isError &&\n        (error?.status === 404 ? (\n          <Main>\n            <MessageState\n              title={intl.formatMessage(messages.noRecsFoundError)}\n              text={\n                <React.Fragment>\n                  {intl.formatMessage(messages.noRecsFoundErrorDesc)}\n                  <a href=\"https://docs.openshift.com/container-platform/latest/support/getting-support.html\">\n                    {' '}\n                    OpenShift documentation.\n                  </a>\n                </React.Fragment>\n              }\n              icon={InfoCircleIcon}\n              iconStyle={{ color: globalInfoColor100.value }}\n              variant=\"large\"\n            />\n          </Main>\n        ) : (\n          <Main>\n            <MessageState\n              title={intl.formatMessage(messages.noRecsError)}\n              text={intl.formatMessage(messages.noRecsErrorDesc)}\n              icon={ExclamationCircleIcon}\n              iconStyle={{ color: globalDangerColor100.value }}\n            />\n          </Main>\n        ))}\n      {isSuccess && (\n        <React.Fragment>\n          <Main>\n            <React.Fragment>\n              <Grid hasGutter>\n                <GridItem span={12}>\n                  <ClusterRules reports={data?.report?.data || []} />\n                </GridItem>\n              </Grid>\n            </React.Fragment>\n          </Main>\n        </React.Fragment>\n      )}\n    </React.Fragment>\n  );\n};\n\nCluster.propTypes = {\n  cluster: PropTypes.object.isRequired,\n  displayName: PropTypes.object.isRequired,\n  match: PropTypes.object.isRequired,\n};\n","import React, { useEffect } from 'react';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/RouterParams';\nimport { useIntl } from 'react-intl';\n\nimport { useGetClusterByIdQuery } from '../../Services/SmartProxy';\nimport messages from '../../Messages';\nimport { Cluster } from './Cluster';\nimport { useGetClusterDisplayNameByIdQuery } from '../../Services/AccountManagementService';\n\nexport default routerParams(({ match }) => {\n  const intl = useIntl();\n  const cluster = useGetClusterByIdQuery({\n    id: match.params.clusterId,\n    includeDisabled: false,\n  });\n  const displayName = useGetClusterDisplayNameByIdQuery(match.params.clusterId);\n\n  useEffect(() => {\n    cluster.refetch();\n  }, [match.params.clusterId]);\n\n  useEffect(() => {\n    if (match.params.clusterId) {\n      const subnav = `${match.params.clusterId} - ${intl.formatMessage(\n        messages.clusters\n      )}`;\n      document.title = intl.formatMessage(messages.documentTitle, { subnav });\n    }\n  }, [match.params.clusterId]);\n\n  return <Cluster cluster={cluster} displayName={displayName} match={match} />;\n});\n"],"names":["ClusterHeader","clusterId","clusterData","displayName","intl","useIntl","isUninitializedDisplayName","isUninitialized","isFetchingDisplayName","isFetching","clusterName","data","isUninitializedCluster","isFetchingCluster","cluster","Grid","id","md","hasGutter","GridItem","Skeleton","size","Title","headingLevel","ouiaId","Stack","StackItem","formatMessage","messages","report","meta","last_checked_at","DateFormat","date","type","propTypes","PropTypes","routerParams","match","params","useGetClusterDisplayNameByIdQuery","useGetClusterByIdQuery","includeDisabled","ReportDetails","className","AsyncComponent","appName","module","fallback","Loading","details","extra_data","resolution","ClusterRules","prunedFilters","chips","reports","useState","activeReports","setActiveReports","sortBy","setSortBy","filters","setFilters","searchValue","setSearchValue","rows","setRows","isAllExpanded","setIsAllExpanded","results","length","cols","title","transforms","sortable","cellWidth","buildRows","builtRows","flatMap","value","key","rule","entity","filter","rowVal","rowKey","rule_id","isOpen","reportRow","cells","description","RuleLabels","created_at","tooltipProps","position","TooltipPosition","style","verticalAlign","likelihood","impact","Tooltip","content","LIKELIHOOD_LABEL","IMPACT_LABEL","InsightsLabel","total_risk","parent","fullWidth","isValidSearchValue","toLowerCase","includes","isValidFilterValue","Object","keys","map","filterValues","rowValue","category","tags","find","categoryName","String","RULE_CATEGORIES","every","x","forEach","row","index","onFilterChange","param","values","newFilters","removeFilterParam","filterConfigItems","label","onChange","_e","onInputChange","FC","items","activeFiltersConfig","deleteTitle","entries","item","Array","isArray","name","capitalize","urlParam","push","onDelete","itemsToRemove","isAll","useEffect","activeReportsData","PrimaryToolbar","expandAll","onClick","allRows","prototype","hasOwnProperty","call","filterConfig","isDisabled","pagination","undefined","Table","onCollapse","rowId","collapseRows","onSort","direction","sortedReports","sort","concat","firstItem","secondItem","sortedReportsDirectional","SortByDirection","reverse","variant","TableVariant","isStickyHeader","TableHeader","TableBody","Card","CardBody","MessageState","icon","CheckIcon","iconClass","text","defaultProps","Cluster","isError","isLoading","isSuccess","error","clusterDisplayName","PageHeader","Breadcrumbs","current","Main","status","href","InfoCircleIcon","iconStyle","color","globalInfoColor100","ExclamationCircleIcon","globalDangerColor100","span","refetch","subnav","document"],"sourceRoot":""}