{"version":3,"file":"js/ClusterDetails.8b0aa9145cd03520fd65.js","mappings":"wYAaaA,EAAgB,SAAC,GAA4C,YAA1CC,EAA0C,EAA1CA,UAAWC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,YAChDC,GAAOC,EAAAA,EAAAA,KAEMC,EAGfH,EAHFI,gBACYC,EAEVL,EAFFM,WACMC,EACJP,EADFQ,KAKiBC,EAGfV,EAHFK,gBACYM,EAEVX,EAFFO,WACMK,EACJZ,EADFS,KAGF,OACE,kBAACI,EAAAA,KAAD,CAAMC,GAAG,iBAAiBC,GAAI,GAAIC,WAAS,GACzC,kBAACH,EAAAI,SAAD,KACGb,GAA8BE,EAC7B,kBAACY,EAAA,EAAD,CAAUC,KAAK,OAEf,kBAACC,EAAAA,MAAD,CAAOD,KAAK,MAAME,aAAa,KAAKP,GAAG,wBACpCN,GAAeT,IAItB,kBAACc,EAAAI,SAAD,KACE,kBAACK,EAAAA,MAAD,KACE,kBAACA,EAAAC,UAAD,CAAWT,GAAG,uBACZ,wCACA,8BAAOf,GAAaG,EAAKsB,cAAcC,EAAAA,EAAAA,WAEzC,kBAACH,EAAAC,UAAD,CAAWT,GAAG,4BACZ,8BAAOZ,EAAKsB,cAAcC,EAAAA,EAAAA,UAA1B,MACA,8BACGf,GAA0BC,EACzB,kBAAC,IAAD,MACEC,MAAAA,GAAA,UAAAA,EAASc,cAAT,mBAAiBC,YAAjB,SAAuBC,gBACzB,kBAACC,EAAA,EAAD,CACEC,KAAMlB,MAAAA,GAAF,UAAEA,EAASc,cAAX,iBAAE,EAAiBC,YAAnB,aAAE,EAAuBC,gBAC7BG,KAAK,UAGP7B,EAAKsB,cAAcC,EAAAA,EAAAA,eAUnC3B,EAAckC,UAAY,CACxBjC,UAAWkC,IAAAA,OAAAA,WACXhC,YAAagC,IAAAA,OAAAA,WACbjC,YAAaiC,IAAAA,OAAAA,YC9Df,SAAeC,EAAAA,EAAAA,KAAa,YAAe,IACnCnC,EADmC,EAAZoC,MACLC,OAAOrC,UACzBE,GAAcoC,EAAAA,EAAAA,GAAkCtC,GAChDC,GAAcsC,EAAAA,EAAAA,IAAuB,CACzCxB,GAAIf,EACJwC,iBAAiB,IAGnB,OACE,kBAACzC,EAAD,CACEC,UAAWA,EACXE,YAAaA,EACbD,YAAaA,O,iuBCVnB,IAAMwC,EAAgB,SAAC,GAAe,IAAbd,EAAa,EAAbA,OACvB,OACE,yBAAKe,UAAU,WACb,kBAACC,EAAA,EAAD,CACEC,QAAQ,UACRC,OAAO,yBACPC,SAAU,kBAACC,EAAA,EAAD,MAEVpB,OAAM,OACDA,GADC,IAEJqB,QAASrB,EAAOsB,WAChBC,WAAY,CACVA,WAAYvB,EAAOuB,kBAQ/BT,EAAcR,UAAY,CACxBN,OAAQO,IAAAA,OAAAA,YAGV,U,+lBCKA,IAAMiB,EAAe,SAAC,GAAgB,IAiQ5BC,EACFC,EAlQgBC,EAAc,EAAdA,QAChBnD,GAAOC,EAAAA,EAAAA,KACb,GAA0CmD,EAAAA,EAAAA,UAAS,IAAnD,eAAOC,EAAP,KAAsBC,EAAtB,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KACA,GAA8BJ,EAAAA,EAAAA,UAAS,IAAvC,eAAOK,EAAP,KAAgBC,EAAhB,KACA,GAAsCN,EAAAA,EAAAA,UAAS,IAA/C,eAAOO,EAAP,KAAoBC,EAApB,KACA,GAAwBR,EAAAA,EAAAA,UAAS,IAAjC,eAAOS,EAAP,KAAaC,EAAb,KACMC,EAAUF,EAAOA,EAAKG,OAAS,EAAI,EAEnCC,EAAO,CACX,CACEC,MAAOlE,EAAKsB,cAAcC,EAAAA,EAAAA,aAC1B4C,WAAY,CAACC,EAAAA,WAEf,CACEF,MAAOlE,EAAKsB,cAAcC,EAAAA,EAAAA,OAC1B4C,WAAY,CAACC,EAAAA,UAAUC,EAAAA,EAAAA,WAAU,MAEnC,CACEH,MAAOlE,EAAKsB,cAAcC,EAAAA,EAAAA,WAC1B4C,WAAY,CAACC,EAAAA,UAAUC,EAAAA,EAAAA,WAAU,OAI/BC,EAAmB,SAACC,EAAIC,EAAOC,GACnC,IAAMC,GAAe,OAAIb,GACzBa,EAAaF,GAAb,OAA2BE,EAAaF,IAAxC,IAAgDC,OAAAA,IAChDX,EAAQY,IAGJC,EAAe,SAACC,GACpB,IAAMH,EAAoB,wBAAXG,EACTC,GAAU,OAAIhB,GAEpBgB,EAAQC,KAAI,SAACC,EAAKC,GACZC,OAAOC,UAAUC,eAAeC,KAAKL,EAAK,YAC5CA,EAAIN,OAASA,EACbA,GAAUH,EAAiB,EAAMU,EAAKP,OAI1CX,EAAQe,IAGJQ,EAAU,CACd,CACEC,MAAO,eACPC,QAAS,kBAAMZ,EAAa,2BAE9B,CACEW,MAAO,aACPC,QAAS,kBAAMZ,EAAa,0BAI1Ba,EAAY,SAACnC,EAAeI,EAASI,GAA2B,IAArBF,EAAqB,uDAAP,GACvD8B,EAAYpC,EAAcqC,SAAQ,SAACC,EAAOX,GAC9C,IAAMY,EAAOD,EACP5C,EAAa4C,EAAM5C,WACnB8C,EAAShC,EAAKiC,QAClB,SAACC,EAAQC,GAAT,OACEA,EAAS,GAAM,GAAKD,EAAOH,KAAKK,UAAYL,EAAKK,SAAWF,KAE1DtB,EAASZ,EAAKG,SAChB6B,EAAO7B,QACL6B,EAAO,GAAGpB,OAEJ,IAARO,EAIEkB,EAAY,CAChB,CACEN,KAAAA,EACA7C,WAAAA,EACA0B,OAAAA,EACA0B,MAAO,CACL,CACEjC,MACE,6BACG0B,EAAKQ,YADR,IACqB,kBAACC,EAAA,EAAD,CAAYT,KAAMD,MAI3C,CACEzB,MACE,yBAAKc,IAAKA,GACR,kBAACrD,EAAA,EAAD,CACEC,KAAMgE,EAAKU,WACXzE,KAAK,WACL0E,aAAc,CAAEC,SAAUC,EAAAA,gBAAAA,YAKlC,CACEvC,MACE,yBAAKc,IAAKA,EAAK0B,MAAO,CAAEC,cAAe,QACpCf,MAAAA,GAAAA,EAAMgB,YAANhB,MAAoBA,GAAAA,EAAMiB,OACzB,kBAACC,EAAAA,QAAD,CACE9B,IAAKA,EACLwB,SAAUC,EAAAA,gBAAAA,OACVM,QAEE,qCACM,8CADN,kCAEa,IACVnB,EAAKgB,WACFI,EAAAA,GAAiBpB,EAAKgB,YACtB,UALN,SAMQ,0CANR,2BAMwD,IACrDhB,EAAKiB,OAASI,EAAAA,GAAarB,EAAKiB,QAAU,UAAW,IAPxD,oBAYF,kBAACK,EAAA,EAAD,CAAevB,MAAOC,EAAKuB,cAG7B,kBAACD,EAAA,EAAD,CAAevB,MAAOC,EAAKuB,iBAOvC,CACEC,OAAQpC,EACRqC,WAAW,EACXlB,MAAO,CACL,CACEjC,MAAO,kBAAC,EAAD,CAAec,IAAG,gBAAWA,GAAOxD,OAAQmE,QAKrD2B,EACmB,IAAvB3D,EAAYK,QACZ4B,EAAKQ,YAAYmB,cAAcC,SAAS7D,EAAY4D,eAChDE,EAC4B,IAAhCxC,OAAOyC,KAAKjE,GAASO,QACrBiB,OAAOyC,KAAKjE,GACTqB,KAAI,SAACE,GACJ,IAAM2C,EAAelE,EAAQuB,GACvB4C,EAAW,CACftB,WAAYV,EAAKU,WACjBa,WAAYvB,EAAKuB,WACjBU,SAAUjC,EAAKkC,MAEjB,MAAY,aAAR9C,EAGK4C,EAAS5C,GAAK+C,MAAK,SAACC,GAAD,OACxBL,EAAaH,SAASS,OAAOC,EAAAA,GAAgBF,QAG1CL,EAAaI,MAClB,SAACpC,GAAD,OAAWsC,OAAOtC,KAAWsC,OAAOL,EAAS5C,UAGhDmD,OAAM,SAACC,GAAD,OAAOA,KAElB,OAAOd,GAAsBG,EAAqBvB,EAAY,MAOhE,OAJAT,EAAU4C,SAAQ,SAACtD,EAAKuD,GAAN,OAChBvD,EAAIqC,OAAUrC,EAAIqC,OAASkB,EAAQ,EAAK,QAGnC7C,GAoCH8C,EAAiB,SAACC,EAAOC,GAC7B,IAMMC,EACJD,EAAOzE,OAAS,EAAhB,OACSP,IADT,UACwB+E,EAAQC,IARR,SAACD,GACzB,IAAM1C,EAAS,KAAKrC,GAEpB,cADOqC,EAAO0C,GACP1C,EAMH6C,CAAkBH,GACxB1E,EAAQ0B,EAAUnC,EAAeqF,EAAY7E,EAAMF,IACnDD,EAAWgF,IAGPE,EAAoB,CACxB,CACEtD,MAAO,cACPqC,aAAc,CACZ3C,IAAK,cACL6D,SAAU,SAACtE,EAAIoB,GAAL,OA1BM,SAACA,GACrB,IAAMF,EAAYD,EAAUnC,EAAeI,EAASI,EAAM8B,GAC1D/B,EAAe+B,GACf7B,EAAQ2B,GAuBqBqD,CAAcnD,IACvCA,MAAOhC,IAGX,CACE2B,MAAOyD,EAAAA,GAAAA,WAAAA,MACPlH,KAAMkH,EAAAA,GAAAA,WAAAA,KACNnI,GAAImI,EAAAA,GAAAA,WAAAA,SACJpD,MAAO,YAAF,OAAcoD,EAAAA,GAAAA,WAAAA,UACnBpB,aAAc,CACZ3C,IAAK,GAAF,OAAK+D,EAAAA,GAAAA,WAAAA,SAAL,WACHF,SAAU,SAACtE,EAAIkE,GAAL,OACRF,EAAeQ,EAAAA,GAAAA,WAAAA,SAAwBN,IACzC9C,MAAOlC,EAAQ0D,WACf6B,MAAOD,EAAAA,GAAAA,WAAAA,SAGX,CACEzD,MAAOyD,EAAAA,GAAAA,SAAAA,MACPlH,KAAMkH,EAAAA,GAAAA,SAAAA,KACNnI,GAAImI,EAAAA,GAAAA,SAAAA,SACJpD,MAAO,YAAF,OAAcoD,EAAAA,GAAAA,SAAAA,UACnBpB,aAAc,CACZ3C,IAAK,GAAF,OAAK+D,EAAAA,GAAAA,SAAAA,SAAL,WACHF,SAAU,SAACtE,EAAIkE,GAAL,OAAgBF,EAAeQ,EAAAA,GAAAA,SAAAA,SAAsBN,IAC/D9C,MAAOlC,EAAQoE,SACfmB,MAAOD,EAAAA,GAAAA,SAAAA,UAiEPE,GAAsB,CAC1BC,YAAalJ,EAAKsB,cAAcC,EAAAA,EAAAA,cAChCkC,SA7DMR,EAAgBgC,OAAOkE,QAAQ1F,GACjCP,EACFO,GAAWR,EAAce,OAAS,EAC9Bf,EAAc6B,KAAI,SAACsE,GACjB,IAAMvB,EAAWkB,EAAAA,GAAGK,EAAK,IACnBlG,EAAQmG,MAAMC,QAAQF,EAAK,IAC7BA,EAAK,GAAGtE,KAAI,SAACa,GAAD,MAAY,CACtB4D,KAAM1B,EAASY,OAAOV,MACpB,SAACU,GAAD,OAAYA,EAAO9C,QAAUsC,OAAOtC,MACpCL,MACFK,MAAAA,MAEF,CACE,CACE4D,KAAM1B,EAASY,OAAOV,MACpB,SAACU,GAAD,OAAYA,EAAO9C,QAAUsC,OAAOmB,EAAK,OACzC9D,MACFK,MAAOyD,EAAK,KAGpB,MAAO,CACLvB,UAAU2B,EAAAA,EAAAA,YAAW3B,EAAS3D,OAC9BhB,MAAAA,EACAuG,SAAU5B,EAAS4B,aAGvB,GACN9F,EAAYK,OAAS,GACnBd,EAAMwG,KAAK,CACT7B,SAAU,cACV3E,MAAO,CAAC,CAAEqG,KAAM5F,EAAagC,MAAOhC,MAEjCT,GA8BPyG,SA3BmB,SAACpF,EAAIqF,EAAeC,GACnCA,GACF/F,EAAQ0B,EAAUnC,EAAe,GAAIQ,EAAM,KAC3CH,EAAW,IACXE,EAAe,KAEfgG,EAAc9E,KAAI,SAACsE,GAEV,gBADCA,EAAKvB,UAET/D,EAAQ0B,EAAUnC,EAAeI,EAASI,EAAM,KAChDD,EAAe,KAGf2E,EACEa,EAAKK,SACLhG,EAAQ2F,EAAKK,UAAU3D,QACrB,SAACH,GAAD,OAAWsC,OAAOtC,KAAWsC,OAAOmB,EAAKlG,MAAM,GAAGyC,gBAoBhE,OANAmE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAoB5G,EAC1BG,EAAiByG,GACjBjG,EAAQ0B,EAAUuE,EAAmBtG,EAASI,EAAMF,MACnD,IAGD,yBAAK/C,GAAG,2BACN,kBAACoJ,EAAA,EAAD,CACEC,cAAe,CAAE5E,QAAAA,GACjB6E,aAAc,CACZlB,MAAOJ,EACPuB,WAAqC,IAAzB9G,EAAcW,QAE5BoG,WACE,kBAAC,aAAD,KACe,IAAZrG,EAAA,UACMA,EADN,YACiB/D,EAAKsB,cAAcC,EAAAA,EAAAA,iBADpC,UAEMwC,EAFN,YAEiB/D,EAAKsB,cAAcC,EAAAA,EAAAA,mBAGzC0H,oBAC2B,IAAzB5F,EAAcW,YAAeqG,EAAYpB,KAG5C5F,EAAcW,OAAS,EACtB,kBAAC,aAAD,KACE,kBAAC,EAAAsG,MAAD,CACE,aAAY,gCACZC,OAAQ,0BACRC,WAAYlG,EACZT,KAAMA,EACNsC,MAAOlC,EACPV,OAAQA,EACRkH,OAxLK,SAAClG,EAAI+D,EAAOoC,GACzB,IAAMC,EAAgB,CACpB,EAAG,cACH,EAAG,aACH,EAAG,cAECC,EAAO,kBACXvH,EACGwH,SACAD,MAAK,SAACE,EAAWC,GAAZ,OACJD,EAAUH,EAAcrC,IAAUyC,EAAWJ,EAAcrC,IACvD,EACAyC,EAAWJ,EAAcrC,IAAUwC,EAAUH,EAAcrC,KAC1D,EACD,MAEJ0C,EACJN,IAAcO,EAAAA,gBAAAA,IAAsBL,IAASA,IAAOM,UAEtD5H,EAAiB0H,GACjBxH,EAAU,CACR8E,MAAAA,EACAoC,UAAAA,IAEF5G,EAAQ0B,EAAUwF,EAA0BvH,EAASI,EAAMF,KAiKnDwH,QAASC,EAAAA,aAAAA,QACTC,gBAAc,GAEd,kBAAC,EAAAC,YAAD,MACA,kBAAC,EAAAC,UAAD,OAEW,IAAZxH,GACC,kBAACyH,EAAAA,KAAD,CAAMjB,OAAQ,yBACZ,kBAACiB,EAAAC,SAAD,KACE,kBAAC,KAAD,SAOR,kBAACD,EAAAA,KAAD,KACE,kBAACA,EAAAC,SAAD,KACE,kBAACC,EAAA,EAAD,CACEC,KAAMC,EAAAA,QACNC,UAAU,wBACV3H,MAAOlE,EAAKsB,cAAcC,EAAAA,EAAAA,mBAC1BuK,KAAM9L,EAAKsB,cAAcC,EAAAA,EAAAA,6BASvCyB,EAAalB,UAAY,CACvBqB,QAASpB,IAAAA,MAAAA,YAGXiB,EAAa+I,aAAe,CAC1B5I,QAAS,IAGX,U,eC7Za6I,EAAU,SAAC,GAAoC,MAAlCtL,EAAkC,EAAlCA,QAASX,EAAyB,EAAzBA,YAAakC,EAAY,EAAZA,MACxCjC,GAAOC,EAAAA,EAAAA,KAEXgM,EAOEvL,EAPFuL,QACA9L,EAMEO,EANFP,gBACA+L,EAKExL,EALFwL,UACA7L,EAIEK,EAJFL,WACA8L,EAGEzL,EAHFyL,UACA5L,EAEEG,EAFFH,KACA6L,EACE1L,EADF0L,MAEYC,EAAuBtM,EAA7BQ,KAER,OACE,kBAAC,aAAD,KACE,kBAAC+L,EAAA,EAAD,CAAY/J,UAAU,mCACpB,kBAACgK,EAAA,EAAD,CACEC,QAASH,GAAsBpK,EAAMC,OAAOrC,UAC5CoC,MAAOA,IAET,kBAAC,EAAD,QAEA9B,GAAmB+L,GAAa7L,IAChC,kBAACoM,EAAA,EAAD,CAAM7L,GAAG,oBACP,kBAACgC,EAAA,EAAD,OAGHqJ,IACoB,OAAlBG,MAAAA,OAAA,EAAAA,EAAOM,QACN,kBAACD,EAAA,EAAD,KACE,kBAACf,EAAA,EAAD,CACExH,MAAOlE,EAAKsB,cAAcC,EAAAA,EAAAA,kBAC1BuK,KACE,kBAAC,aAAD,KACG9L,EAAKsB,cAAcC,EAAAA,EAAAA,sBACpB,uBAAGoL,KAAK,qFACL,IADH,6BAMJhB,KAAMiB,EAAAA,QACNC,UAAW,CAAEC,MAAOC,EAAAA,GAAAA,OACpB5B,QAAQ,WAIZ,kBAACsB,EAAA,EAAD,KACE,kBAACf,EAAA,EAAD,CACExH,MAAOlE,EAAKsB,cAAcC,EAAAA,EAAAA,aAC1BuK,KAAM9L,EAAKsB,cAAcC,EAAAA,EAAAA,iBACzBoK,KAAMqB,EAAAA,QACNH,UAAW,CAAEC,MAAOG,EAAAA,GAAAA,WAI3Bd,GACC,kBAAC,aAAD,KACE,kBAACM,EAAA,EAAD,KACE,kBAAC,aAAD,KACE,kBAAC9L,EAAAA,KAAD,CAAMG,WAAS,GACb,kBAACH,EAAAI,SAAD,CAAUmM,KAAM,IACd,kBAAC,EAAD,CAAc/J,SAAS5C,MAAAA,GAAA,UAAAA,EAAMiB,cAAN,eAAcjB,OAAQ,YAW/DyL,EAAQlK,UAAY,CAClBpB,QAASqB,IAAAA,OAAAA,WACThC,YAAagC,IAAAA,OAAAA,WACbE,MAAOF,IAAAA,OAAAA,YCxFT,SAAeC,EAAAA,EAAAA,IAAa,YAAe,IAAZC,EAAY,EAAZA,MACvBjC,GAAOC,EAAAA,EAAAA,KACPS,GAAU0B,EAAAA,EAAAA,IAAuB,CACrCxB,GAAIqB,EAAMC,OAAOrC,UACjBwC,iBAAiB,IAEbtC,GAAcoC,EAAAA,EAAAA,GAAkCF,EAAMC,OAAOrC,WAenE,OAbAiK,EAAAA,EAAAA,YAAU,WACRpJ,EAAQyM,YACP,CAAClL,EAAMC,OAAOrC,aAEjBiK,EAAAA,EAAAA,YAAU,WACR,GAAI7H,EAAMC,OAAOrC,UAAW,CAC1B,IAAMuN,EAAS,GAAH,OAAMnL,EAAMC,OAAOrC,UAAnB,cAAkCG,EAAKsB,cACjDC,EAAAA,EAAAA,WAEF8L,SAASnJ,MAAQlE,EAAKsB,cAAcC,EAAAA,EAAAA,cAAwB,CAAE6L,OAAAA,OAE/D,CAACnL,EAAMC,OAAOrC,YAEV,kBAACmM,EAAD,CAAStL,QAASA,EAASX,YAAaA,EAAakC,MAAOA","sources":["webpack:///./src/Components/ClusterHeader/ClusterHeader.js","webpack:///./src/Components/ClusterHeader/index.js","webpack:///./src/Components/ReportDetails/ReportDetails.js","webpack:///./src/Components/ClusterRules/ClusterRules.js","webpack:///./src/Components/Cluster/Cluster.js","webpack:///./src/Components/Cluster/index.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport { Grid, GridItem } from '@patternfly/react-core/dist/js/layouts/Grid';\nimport { Stack, StackItem } from '@patternfly/react-core/dist/js/layouts/Stack';\nimport { Title } from '@patternfly/react-core/dist/js/components/Title';\nimport Skeleton from '@redhat-cloud-services/frontend-components/Skeleton';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat/DateFormat';\n\nimport messages from '../../Messages';\nimport { OneLineLoader } from '../../Utilities/Loaders';\n\nexport const ClusterHeader = ({ clusterId, clusterData, displayName }) => {\n  const intl = useIntl();\n  const {\n    isUninitialized: isUninitializedDisplayName,\n    isFetching: isFetchingDisplayName,\n    data: clusterName,\n  } = displayName;\n\n  // subscribe to the cluster data query\n  const {\n    isUninitialized: isUninitializedCluster,\n    isFetching: isFetchingCluster,\n    data: cluster,\n  } = clusterData;\n\n  return (\n    <Grid id=\"cluster-header\" md={12} hasGutter>\n      <GridItem>\n        {isUninitializedDisplayName || isFetchingDisplayName ? (\n          <Skeleton size=\"sm\" />\n        ) : (\n          <Title size=\"2xl\" headingLevel=\"h1\" id=\"cluster-header-title\">\n            {clusterName || clusterId}\n          </Title>\n        )}\n      </GridItem>\n      <GridItem>\n        <Stack>\n          <StackItem id=\"cluster-header-uuid\">\n            <span>UUID: </span>\n            <span>{clusterId || intl.formatMessage(messages.unknown)}</span>\n          </StackItem>\n          <StackItem id=\"cluster-header-last-seen\">\n            <span>{intl.formatMessage(messages.lastSeen)}: </span>\n            <span>\n              {isUninitializedCluster || isFetchingCluster ? (\n                <OneLineLoader />\n              ) : cluster?.report?.meta?.last_checked_at ? (\n                <DateFormat\n                  date={cluster?.report?.meta?.last_checked_at}\n                  type=\"exact\"\n                />\n              ) : (\n                intl.formatMessage(messages.unknown)\n              )}\n            </span>\n          </StackItem>\n        </Stack>\n      </GridItem>\n    </Grid>\n  );\n};\n\nClusterHeader.propTypes = {\n  clusterId: PropTypes.string.isRequired,\n  displayName: PropTypes.object.isRequired,\n  clusterData: PropTypes.object.isRequired,\n};\n","import React from 'react';\nimport { routerParams } from '@redhat-cloud-services/frontend-components-utilities/RouterParams/RouterParams';\n\nimport { useGetClusterDisplayNameByIdQuery } from '../../Services/AccountManagementService';\nimport { useGetClusterByIdQuery } from '../../Services/SmartProxy';\nimport { ClusterHeader } from './ClusterHeader';\n\nexport default routerParams(({ match }) => {\n  const clusterId = match.params.clusterId;\n  const displayName = useGetClusterDisplayNameByIdQuery(clusterId);\n  const clusterData = useGetClusterByIdQuery({\n    id: clusterId,\n    includeDisabled: false,\n  });\n\n  return (\n    <ClusterHeader\n      clusterId={clusterId}\n      displayName={displayName}\n      clusterData={clusterData}\n    />\n  );\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\n\nimport Loading from '../Loading/Loading';\n\n// Rule fields processing: https://docs.google.com/document/d/1D0ZLD6-2DZqBX1cUHJY2vL2QAD0dIAzY3O3xFNlEsVg/edit?usp=sharing\n\nconst ReportDetails = ({ report }) => {\n  return (\n    <div className=\"advisor\">\n      <AsyncComponent\n        appName=\"advisor\"\n        module=\"./AdvisorReportDetails\"\n        fallback={<Loading />}\n        // TODO: make API rename `extra_data` to `details` or modify AdvisorReportDetails property\n        report={{\n          ...report,\n          details: report.extra_data,\n          resolution: {\n            resolution: report.resolution,\n          },\n        }}\n      />\n    </div>\n  );\n};\n\nReportDetails.propTypes = {\n  report: PropTypes.object.isRequired,\n};\n\nexport default ReportDetails;\n","import './_ClusterRules.scss';\n\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport CheckIcon from '@patternfly/react-icons/dist/js/icons/check-icon';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat/DateFormat';\nimport InsightsLabel from '@redhat-cloud-services/frontend-components/InsightsLabel';\nimport {\n  SortByDirection,\n  Table,\n  TableBody,\n  TableHeader,\n  TableVariant,\n  cellWidth,\n  sortable,\n} from '@patternfly/react-table';\nimport { capitalize } from '@patternfly/react-core/dist/js/helpers/util';\nimport { Card, CardBody } from '@patternfly/react-core/dist/js/components/Card';\nimport {\n  Tooltip,\n  TooltipPosition,\n} from '@patternfly/react-core/dist/js/components/Tooltip';\nimport PrimaryToolbar from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\n\nimport messages from '../../Messages';\nimport MessageState from '../MessageState/MessageState';\nimport {\n  IMPACT_LABEL,\n  LIKELIHOOD_LABEL,\n  FILTER_CATEGORIES as FC,\n  RULE_CATEGORIES,\n} from '../../AppConstants';\nimport ReportDetails from '../ReportDetails/ReportDetails';\nimport RuleLabels from '../Labels/RuleLabels';\nimport { NoMatchingRecs } from '../MessageState/EmptyStates';\n\nconst ClusterRules = ({ reports }) => {\n  const intl = useIntl();\n  const [activeReports, setActiveReports] = useState([]);\n  const [sortBy, setSortBy] = useState({});\n  const [filters, setFilters] = useState({});\n  const [searchValue, setSearchValue] = useState('');\n  const [rows, setRows] = useState([]);\n  const results = rows ? rows.length / 2 : 0;\n\n  const cols = [\n    {\n      title: intl.formatMessage(messages.description),\n      transforms: [sortable],\n    },\n    {\n      title: intl.formatMessage(messages.added),\n      transforms: [sortable, cellWidth(15)],\n    },\n    {\n      title: intl.formatMessage(messages.totalRisk),\n      transforms: [sortable, cellWidth(15)],\n    },\n  ];\n\n  const handleOnCollapse = (_e, rowId, isOpen) => {\n    const collapseRows = [...rows];\n    collapseRows[rowId] = { ...collapseRows[rowId], isOpen };\n    setRows(collapseRows);\n  };\n\n  const onKebabClick = (action) => {\n    const isOpen = action === 'insights-expand-all';\n    const allRows = [...rows];\n\n    allRows.map((row, key) => {\n      if (Object.prototype.hasOwnProperty.call(row, 'isOpen')) {\n        row.isOpen = isOpen;\n        isOpen && handleOnCollapse(null, key, isOpen);\n      }\n    });\n\n    setRows(allRows);\n  };\n\n  const actions = [\n    {\n      label: 'Collapse all',\n      onClick: () => onKebabClick('insights-collapse-all'),\n    },\n    {\n      label: 'Expand all',\n      onClick: () => onKebabClick('insights-expand-all'),\n    },\n  ];\n\n  const buildRows = (activeReports, filters, rows, searchValue = '') => {\n    const builtRows = activeReports.flatMap((value, key) => {\n      const rule = value;\n      const resolution = value.resolution;\n      const entity = rows.filter(\n        (rowVal, rowKey) =>\n          rowKey % 2 === 0 && rowVal.rule.rule_id === rule.rule_id && rowVal\n      );\n      const isOpen = rows.length\n        ? entity.length\n          ? entity[0].isOpen\n          : false\n        : key === 0\n        ? true\n        : false;\n\n      const reportRow = [\n        {\n          rule,\n          resolution,\n          isOpen,\n          cells: [\n            {\n              title: (\n                <div>\n                  {rule.description} <RuleLabels rule={value} />\n                </div>\n              ),\n            },\n            {\n              title: (\n                <div key={key}>\n                  <DateFormat\n                    date={rule.created_at}\n                    type=\"relative\"\n                    tooltipProps={{ position: TooltipPosition.bottom }}\n                  />\n                </div>\n              ),\n            },\n            {\n              title: (\n                <div key={key} style={{ verticalAlign: 'top' }}>\n                  {rule?.likelihood && rule?.impact ? (\n                    <Tooltip\n                      key={key}\n                      position={TooltipPosition.bottom}\n                      content={\n                        // TODO: refine fields lookup\n                        <span>\n                          The <strong>likelihood</strong> that this will be a\n                          problem is{' '}\n                          {rule.likelihood\n                            ? LIKELIHOOD_LABEL[rule.likelihood]\n                            : 'unknown'}\n                          . The <strong>impact</strong> of the problem would be{' '}\n                          {rule.impact ? IMPACT_LABEL[rule.impact] : 'unknown'}{' '}\n                          if it occurred.\n                        </span>\n                      }\n                    >\n                      <InsightsLabel value={rule.total_risk} />\n                    </Tooltip>\n                  ) : (\n                    <InsightsLabel value={rule.total_risk} />\n                  )}\n                </div>\n              ),\n            },\n          ],\n        },\n        {\n          parent: key,\n          fullWidth: true,\n          cells: [\n            {\n              title: <ReportDetails key={`child-${key}`} report={value} />,\n            },\n          ],\n        },\n      ];\n      const isValidSearchValue =\n        searchValue.length === 0 ||\n        rule.description.toLowerCase().includes(searchValue.toLowerCase());\n      const isValidFilterValue =\n        Object.keys(filters).length === 0 ||\n        Object.keys(filters)\n          .map((key) => {\n            const filterValues = filters[key];\n            const rowValue = {\n              created_at: rule.created_at,\n              total_risk: rule.total_risk,\n              category: rule.tags,\n            };\n            if (key === 'category') {\n              // in that case, rowValue['category'] is an array of categories (or \"tags\" in the back-end implementation)\n              // e.g. ['security', 'fault_tolerance']\n              return rowValue[key].find((categoryName) =>\n                filterValues.includes(String(RULE_CATEGORIES[categoryName]))\n              );\n            }\n            return filterValues.find(\n              (value) => String(value) === String(rowValue[key])\n            );\n          })\n          .every((x) => x);\n\n      return isValidSearchValue && isValidFilterValue ? reportRow : [];\n    });\n    // must recalculate parent for expandable table content whenever the array size changes\n    builtRows.forEach((row, index) =>\n      row.parent ? (row.parent = index - 1) : null\n    );\n\n    return builtRows;\n  };\n\n  const onSort = (_e, index, direction) => {\n    const sortedReports = {\n      1: 'description',\n      2: 'created_at',\n      3: 'total_risk',\n    };\n    const sort = () =>\n      activeReports\n        .concat()\n        .sort((firstItem, secondItem) =>\n          firstItem[sortedReports[index]] > secondItem[sortedReports[index]]\n            ? 1\n            : secondItem[sortedReports[index]] > firstItem[sortedReports[index]]\n            ? -1\n            : 0\n        );\n    const sortedReportsDirectional =\n      direction === SortByDirection.asc ? sort() : sort().reverse();\n\n    setActiveReports(sortedReportsDirectional);\n    setSortBy({\n      index,\n      direction,\n    });\n    setRows(buildRows(sortedReportsDirectional, filters, rows, searchValue));\n  };\n\n  const onInputChange = (value) => {\n    const builtRows = buildRows(activeReports, filters, rows, value);\n    setSearchValue(value);\n    setRows(builtRows);\n  };\n\n  const onFilterChange = (param, values) => {\n    const removeFilterParam = (param) => {\n      const filter = { ...filters };\n      delete filter[param];\n      return filter;\n    };\n\n    const newFilters =\n      values.length > 0\n        ? { ...filters, ...{ [param]: values } }\n        : removeFilterParam(param);\n    setRows(buildRows(activeReports, newFilters, rows, searchValue));\n    setFilters(newFilters);\n  };\n\n  const filterConfigItems = [\n    {\n      label: 'description',\n      filterValues: {\n        key: 'text-filter',\n        onChange: (_e, value) => onInputChange(value),\n        value: searchValue,\n      },\n    },\n    {\n      label: FC.total_risk.title,\n      type: FC.total_risk.type,\n      id: FC.total_risk.urlParam,\n      value: `checkbox-${FC.total_risk.urlParam}`,\n      filterValues: {\n        key: `${FC.total_risk.urlParam}-filter`,\n        onChange: (_e, values) =>\n          onFilterChange(FC.total_risk.urlParam, values),\n        value: filters.total_risk,\n        items: FC.total_risk.values,\n      },\n    },\n    {\n      label: FC.category.title,\n      type: FC.category.type,\n      id: FC.category.urlParam,\n      value: `checkbox-${FC.category.urlParam}`,\n      filterValues: {\n        key: `${FC.category.urlParam}-filter`,\n        onChange: (_e, values) => onFilterChange(FC.category.urlParam, values),\n        value: filters.category,\n        items: FC.category.values,\n      },\n    },\n  ];\n\n  const buildFilterChips = () => {\n    const prunedFilters = Object.entries(filters);\n    let chips =\n      filters && prunedFilters.length > 0\n        ? prunedFilters.map((item) => {\n            const category = FC[item[0]];\n            const chips = Array.isArray(item[1])\n              ? item[1].map((value) => ({\n                  name: category.values.find(\n                    (values) => values.value === String(value)\n                  ).label,\n                  value,\n                }))\n              : [\n                  {\n                    name: category.values.find(\n                      (values) => values.value === String(item[1])\n                    ).label,\n                    value: item[1],\n                  },\n                ];\n            return {\n              category: capitalize(category.title),\n              chips,\n              urlParam: category.urlParam,\n            };\n          })\n        : [];\n    searchValue.length > 0 &&\n      chips.push({\n        category: 'Description',\n        chips: [{ name: searchValue, value: searchValue }],\n      });\n    return chips;\n  };\n\n  const onChipDelete = (_e, itemsToRemove, isAll) => {\n    if (isAll) {\n      setRows(buildRows(activeReports, {}, rows, ''));\n      setFilters({});\n      setSearchValue('');\n    } else {\n      itemsToRemove.map((item) => {\n        switch (item.category) {\n          case 'Description':\n            setRows(buildRows(activeReports, filters, rows, ''));\n            setSearchValue('');\n            break;\n          default:\n            onFilterChange(\n              item.urlParam,\n              filters[item.urlParam].filter(\n                (value) => String(value) !== String(item.chips[0].value)\n              )\n            );\n        }\n      });\n    }\n  };\n\n  const activeFiltersConfig = {\n    deleteTitle: intl.formatMessage(messages.resetFilters),\n    filters: buildFilterChips(),\n    onDelete: onChipDelete,\n  };\n\n  useEffect(() => {\n    const activeReportsData = reports;\n    setActiveReports(activeReportsData);\n    setRows(buildRows(activeReportsData, filters, rows, searchValue));\n  }, []);\n\n  return (\n    <div id=\"cluster-recs-list-table\">\n      <PrimaryToolbar\n        actionsConfig={{ actions }}\n        filterConfig={{\n          items: filterConfigItems,\n          isDisabled: activeReports.length === 0,\n        }}\n        pagination={\n          <React.Fragment>\n            {results === 1\n              ? `${results} ${intl.formatMessage(messages.recommendation)}`\n              : `${results} ${intl.formatMessage(messages.recommendations)}`}\n          </React.Fragment>\n        }\n        activeFiltersConfig={\n          activeReports.length === 0 ? undefined : activeFiltersConfig\n        }\n      />\n      {activeReports.length > 0 ? (\n        <React.Fragment>\n          <Table\n            aria-label={'Cluster recommendations table'}\n            ouiaId={'cluster-recommendations'}\n            onCollapse={handleOnCollapse}\n            rows={rows}\n            cells={cols}\n            sortBy={sortBy}\n            onSort={onSort}\n            variant={TableVariant.compact}\n            isStickyHeader\n          >\n            <TableHeader />\n            <TableBody />\n          </Table>\n          {results === 0 && (\n            <Card ouiaId={'empty-recommendations'}>\n              <CardBody>\n                <NoMatchingRecs />\n              </CardBody>\n            </Card>\n          )}\n        </React.Fragment>\n      ) : (\n        // ? Welcome to Insights feature for novice clusters with disabled Insights?\n        <Card>\n          <CardBody>\n            <MessageState\n              icon={CheckIcon}\n              iconClass=\"ins-c-insights__check\"\n              title={intl.formatMessage(messages.noRecommendations)}\n              text={intl.formatMessage(messages.noRecommendationsDesc)}\n            />\n          </CardBody>\n        </Card>\n      )}\n    </div>\n  );\n};\n\nClusterRules.propTypes = {\n  reports: PropTypes.array.isRequired,\n};\n\nClusterRules.defaultProps = {\n  reports: [],\n};\n\nexport default ClusterRules;\n","import './_Cluster.scss';\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport { Grid, GridItem } from '@patternfly/react-core/dist/js/layouts/Grid';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\nimport InfoCircleIcon from '@patternfly/react-icons/dist/js/icons/info-circle-icon';\nimport PageHeader from '@redhat-cloud-services/frontend-components/PageHeader';\nimport Main from '@redhat-cloud-services/frontend-components/Main';\nimport { global_danger_color_100 as globalDangerColor100 } from '@patternfly/react-tokens/dist/js/global_danger_color_100';\nimport { global_info_color_100 as globalInfoColor100 } from '@patternfly/react-tokens/dist/js/global_info_color_100.js';\n\nimport ClusterHeader from '../ClusterHeader';\nimport ClusterRules from '../ClusterRules/ClusterRules';\nimport Breadcrumbs from '../Breadcrumbs';\nimport MessageState from '../MessageState/MessageState';\nimport Loading from '../Loading/Loading';\nimport messages from '../../Messages';\n\nexport const Cluster = ({ cluster, displayName, match }) => {\n  const intl = useIntl();\n  const {\n    isError,\n    isUninitialized,\n    isLoading,\n    isFetching,\n    isSuccess,\n    data,\n    error,\n  } = cluster;\n  const { data: clusterDisplayName } = displayName;\n\n  return (\n    <React.Fragment>\n      <PageHeader className=\"pf-m-light ins-inventory-detail\">\n        <Breadcrumbs\n          current={clusterDisplayName || match.params.clusterId}\n          match={match}\n        />\n        <ClusterHeader />\n      </PageHeader>\n      {(isUninitialized || isLoading || isFetching) && (\n        <Main id=\"loading-skeleton\">\n          <Loading />\n        </Main>\n      )}\n      {isError &&\n        (error?.status === 404 ? (\n          <Main>\n            <MessageState\n              title={intl.formatMessage(messages.noRecsFoundError)}\n              text={\n                <React.Fragment>\n                  {intl.formatMessage(messages.noRecsFoundErrorDesc)}\n                  <a href=\"https://docs.openshift.com/container-platform/latest/support/getting-support.html\">\n                    {' '}\n                    OpenShift documentation.\n                  </a>\n                </React.Fragment>\n              }\n              icon={InfoCircleIcon}\n              iconStyle={{ color: globalInfoColor100.value }}\n              variant=\"large\"\n            />\n          </Main>\n        ) : (\n          <Main>\n            <MessageState\n              title={intl.formatMessage(messages.noRecsError)}\n              text={intl.formatMessage(messages.noRecsErrorDesc)}\n              icon={ExclamationCircleIcon}\n              iconStyle={{ color: globalDangerColor100.value }}\n            />\n          </Main>\n        ))}\n      {isSuccess && (\n        <React.Fragment>\n          <Main>\n            <React.Fragment>\n              <Grid hasGutter>\n                <GridItem span={12}>\n                  <ClusterRules reports={data?.report?.data || []} />\n                </GridItem>\n              </Grid>\n            </React.Fragment>\n          </Main>\n        </React.Fragment>\n      )}\n    </React.Fragment>\n  );\n};\n\nCluster.propTypes = {\n  cluster: PropTypes.object.isRequired,\n  displayName: PropTypes.object.isRequired,\n  match: PropTypes.object.isRequired,\n};\n","import React, { useEffect } from 'react';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/RouterParams';\nimport { useIntl } from 'react-intl';\n\nimport { useGetClusterByIdQuery } from '../../Services/SmartProxy';\nimport messages from '../../Messages';\nimport { Cluster } from './Cluster';\nimport { useGetClusterDisplayNameByIdQuery } from '../../Services/AccountManagementService';\n\nexport default routerParams(({ match }) => {\n  const intl = useIntl();\n  const cluster = useGetClusterByIdQuery({\n    id: match.params.clusterId,\n    includeDisabled: false,\n  });\n  const displayName = useGetClusterDisplayNameByIdQuery(match.params.clusterId);\n\n  useEffect(() => {\n    cluster.refetch();\n  }, [match.params.clusterId]);\n\n  useEffect(() => {\n    if (match.params.clusterId) {\n      const subnav = `${match.params.clusterId} - ${intl.formatMessage(\n        messages.clusters\n      )}`;\n      document.title = intl.formatMessage(messages.documentTitle, { subnav });\n    }\n  }, [match.params.clusterId]);\n\n  return <Cluster cluster={cluster} displayName={displayName} match={match} />;\n});\n"],"names":["ClusterHeader","clusterId","clusterData","displayName","intl","useIntl","isUninitializedDisplayName","isUninitialized","isFetchingDisplayName","isFetching","clusterName","data","isUninitializedCluster","isFetchingCluster","cluster","Grid","id","md","hasGutter","GridItem","Skeleton","size","Title","headingLevel","Stack","StackItem","formatMessage","messages","report","meta","last_checked_at","DateFormat","date","type","propTypes","PropTypes","routerParams","match","params","useGetClusterDisplayNameByIdQuery","useGetClusterByIdQuery","includeDisabled","ReportDetails","className","AsyncComponent","appName","module","fallback","Loading","details","extra_data","resolution","ClusterRules","prunedFilters","chips","reports","useState","activeReports","setActiveReports","sortBy","setSortBy","filters","setFilters","searchValue","setSearchValue","rows","setRows","results","length","cols","title","transforms","sortable","cellWidth","handleOnCollapse","_e","rowId","isOpen","collapseRows","onKebabClick","action","allRows","map","row","key","Object","prototype","hasOwnProperty","call","actions","label","onClick","buildRows","builtRows","flatMap","value","rule","entity","filter","rowVal","rowKey","rule_id","reportRow","cells","description","RuleLabels","created_at","tooltipProps","position","TooltipPosition","style","verticalAlign","likelihood","impact","Tooltip","content","LIKELIHOOD_LABEL","IMPACT_LABEL","InsightsLabel","total_risk","parent","fullWidth","isValidSearchValue","toLowerCase","includes","isValidFilterValue","keys","filterValues","rowValue","category","tags","find","categoryName","String","RULE_CATEGORIES","every","x","forEach","index","onFilterChange","param","values","newFilters","removeFilterParam","filterConfigItems","onChange","onInputChange","FC","items","activeFiltersConfig","deleteTitle","entries","item","Array","isArray","name","capitalize","urlParam","push","onDelete","itemsToRemove","isAll","useEffect","activeReportsData","PrimaryToolbar","actionsConfig","filterConfig","isDisabled","pagination","undefined","Table","ouiaId","onCollapse","onSort","direction","sortedReports","sort","concat","firstItem","secondItem","sortedReportsDirectional","SortByDirection","reverse","variant","TableVariant","isStickyHeader","TableHeader","TableBody","Card","CardBody","MessageState","icon","CheckIcon","iconClass","text","defaultProps","Cluster","isError","isLoading","isSuccess","error","clusterDisplayName","PageHeader","Breadcrumbs","current","Main","status","href","InfoCircleIcon","iconStyle","color","globalInfoColor100","ExclamationCircleIcon","globalDangerColor100","span","refetch","subnav","document"],"sourceRoot":""}