{"version":3,"file":"js/Workload.12492505113073fdda0e.js","mappings":"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","sources":["webpack:///./src/Components/Breadcrumbs/index.js","webpack:///./src/Components/WorkloadHeader/WorkloadHeader.js","webpack:///./src/Components/WorkloadHeader/index.js","webpack:///./src/Components/ExpandedRulesDetails.js/ExpandedRulesDetails.js","webpack:///./src/Components/WorkloadRules/WorkloadRules.js","webpack:///./src/Components/Workload/Workload.js","webpack:///./src/Components/Workload/index.js","webpack:///./src/Utilities/Loaders.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { Link, useLocation } from 'react-router-dom';\n\nimport { Breadcrumb, BreadcrumbItem } from '@patternfly/react-core';\n\nimport messages from '../../Messages';\n\nconst Breadcrumbs = ({ current }) => {\n  const intl = useIntl();\n  const location = useLocation();\n  const splitUrl = location.pathname.split('/');\n\n  return (\n    <div>\n      <Breadcrumb ouiaId=\"detail\">\n        <BreadcrumbItem className=\"breadcrumb-item\">\n          <Link to={`..`} relative=\"path\">\n            {`${intl.formatMessage(messages.insightsHeader)} ${splitUrl[4]}`}\n          </Link>\n        </BreadcrumbItem>\n        <BreadcrumbItem className=\"breadcrumb-item\" isActive>\n          {current}\n        </BreadcrumbItem>\n      </Breadcrumb>\n    </div>\n  );\n};\n\nBreadcrumbs.propTypes = {\n  current: PropTypes.string,\n};\n\nexport default Breadcrumbs;\n","import React from 'react';\n\nimport {\n  Grid,\n  GridItem,\n  Stack,\n  StackItem,\n  Title,\n} from '@patternfly/react-core';\nimport Skeleton from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { OneLineLoader } from '../../Utilities/Loaders';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport PropTypes from 'prop-types';\n\nexport const WorkloadHeader = ({ workloadData, namespaceId, clusterId }) => {\n  const { isUninitialized, isFetching, data: workload } = workloadData;\n  return (\n    <Grid id=\"workload-header\" md={12} hasGutter>\n      <GridItem span={8}>\n        <Title\n          size=\"2xl\"\n          headingLevel=\"h1\"\n          id=\"cluster-header-title\"\n          ouiaId=\"cluster-name\"\n        >\n          {isUninitialized || isFetching ? (\n            <>\n              <Skeleton size=\"sm\" />\n              <Skeleton size=\"sm\" />\n            </>\n          ) : (\n            <>\n              <p>{workload.cluster.display_name}</p>\n              <p>{workload.namespace.name}</p>\n            </>\n          )}\n        </Title>\n      </GridItem>\n      <GridItem>\n        <Stack>\n          <StackItem id=\"workload-header-uuid\">\n            <span>Cluster UUID:</span> <span>{clusterId}</span>{' '}\n            <span>Namespace UUID:</span> <span>{namespaceId}</span>\n          </StackItem>\n          <StackItem id=\"workload-header-last-seen\">\n            <span>Last seen: </span>\n            <span>\n              {isUninitialized || isFetching ? (\n                <OneLineLoader />\n              ) : workload?.metadata?.last_checked_at ? (\n                <DateFormat\n                  date={workload.metadata.last_checked_at}\n                  type=\"exact\"\n                />\n              ) : (\n                <>Unknown</>\n              )}\n            </span>\n          </StackItem>\n        </Stack>\n      </GridItem>\n    </Grid>\n  );\n};\n\nWorkloadHeader.propTypes = {\n  clusterId: PropTypes.string.isRequired,\n  namespaceId: PropTypes.string.isRequired,\n  workloadData: PropTypes.shape({\n    isUninitialized: PropTypes.bool.isRequired,\n    isFetching: PropTypes.bool.isRequired,\n    data: PropTypes.shape({\n      namespace: PropTypes.shape({\n        uuid: PropTypes.string,\n        name: PropTypes.string,\n      }),\n      cluster: PropTypes.shape({\n        uuid: PropTypes.string,\n        display_name: PropTypes.string,\n      }),\n      status: PropTypes.string,\n    }),\n  }),\n};\n","import React from 'react';\nimport { WorkloadHeader } from './WorkloadHeader';\nimport { useParams } from 'react-router-dom';\nimport { useGetWorkloadByIdQuery } from '../../Services/SmartProxy';\n\nconst WorkloadsHeaderWrapper = () => {\n  const { namespaceId, clusterId } = useParams();\n  const workloadData = useGetWorkloadByIdQuery({\n    namespaceId,\n    clusterId,\n  });\n\n  return (\n    <WorkloadHeader\n      workloadData={workloadData}\n      namespaceId={namespaceId}\n      clusterId={clusterId}\n    />\n  );\n};\n\nexport default WorkloadsHeaderWrapper;\n","import React from 'react';\nimport {\n  BullseyeIcon,\n  InfoCircleIcon,\n  ThumbsUpIcon,\n} from '@patternfly/react-icons';\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  CodeBlock,\n  Divider,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\nimport { Table, Tbody, Td, Th, Thead, Tr } from '@patternfly/react-table';\nimport PropTypes from 'prop-types';\nimport TemplateProcessor from '@redhat-cloud-services/frontend-components-advisor-components/TemplateProcessor/TemplateProcessor';\n\nconst columnNames = {\n  object: 'Object ID',\n  kind: 'Kind',\n};\nconst code = `oc get namespace -o jsonpath={range .items[*]}{.metadata.name}{\"\\t\"}{.metadata.uid}{\"\\n\"}{end}\n  oc -n <namespace> get <resourceKind> -o jsonpath={range .items[*]}{.metadata.name}{\"\\t\"}{.metadata.uid}{\"\\n\"}{end}`;\n\nconst ExpandedRulesDetails = ({ more_info, resolution, objects }) => {\n  return (\n    <Card className=\"ins-c-report-details\" style={{ boxShadow: 'none' }}>\n      <CardBody>\n        <Stack\n          className=\"ins-c-report-details__cards-stack\"\n          widget-type=\"InsightsRulesCard\"\n          hasGutter\n        >\n          <StackItem>\n            <Card isCompact isPlain>\n              <CardHeader>\n                <BullseyeIcon className=\"ins-c-report-details__icon\" />\n                <strong>Detected issues</strong>\n              </CardHeader>\n              <CardBody>\n                This should be a reason field and extradata should provide us an\n                array of reasons to list here\n              </CardBody>\n            </Card>\n          </StackItem>\n          <Divider />\n          <StackItem>\n            <Card isCompact isPlain>\n              <CardHeader>\n                <ThumbsUpIcon className=\"ins-c-report-details__icon\" />\n                <strong>Steps to resolve</strong>\n              </CardHeader>\n              <CardBody>\n                <TemplateProcessor template={resolution} />\n              </CardBody>\n            </Card>\n          </StackItem>\n          <Table borders={'compactBorderless'}>\n            <Thead>\n              <Tr>\n                <Th modifier=\"fitContent\">{columnNames.object}</Th>\n                <Th modifier=\"fitContent\">{columnNames.kind}</Th>\n              </Tr>\n            </Thead>\n            <Tbody>\n              {objects.slice(0, 3).map((object, key) => (\n                <Tr key={key}>\n                  <Td dataLabel={columnNames.object}>{object.uid}</Td>\n                  <Td dataLabel={columnNames.kind}>{object.kind}</Td>\n                </Tr>\n              ))}\n            </Tbody>\n          </Table>\n          <Button variant=\"link\" isInline>\n            View all objects\n          </Button>\n          <br />\n          <CardHeader>\n            <strong>Note:</strong>\n          </CardHeader>\n          <CardBody>\n            Red Hat avoids gathering and processing namespace and resource names\n            as these may reveal confidential information. Namespaces and\n            resources are identified by their UIDs instead. You can use\n            in-cluster commands like the ones below to translate UIDs of\n            affected resources to their names.\n            <CodeBlock>{code}</CodeBlock>\n          </CardBody>\n          <React.Fragment>\n            <Divider />\n            <StackItem>\n              <Card isCompact isPlain>\n                <CardHeader>\n                  <InfoCircleIcon className=\"ins-c-report-details__icon\" />\n                  <strong>Additional info</strong>\n                </CardHeader>\n                <CardBody>{more_info}</CardBody>\n              </Card>\n            </StackItem>\n          </React.Fragment>\n        </Stack>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default ExpandedRulesDetails;\n\nExpandedRulesDetails.propTypes = {\n  extra_data: PropTypes.string.isRequired,\n  more_info: PropTypes.string.isRequired,\n  resolution: PropTypes.string.isRequired,\n  objects: PropTypes.arrayOf({\n    kind: PropTypes.string,\n    uid: PropTypes.string,\n  }),\n};\n","import React, { useEffect, useState } from 'react';\nimport {\n  Table,\n  TableBody,\n  TableHeader,\n  TableVariant,\n} from '@patternfly/react-table';\nimport PrimaryToolbar from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport {\n  WORKLOADS_RULES_FILTER_CONFIG,\n  WORKLOAD_RULES_COLUMNS,\n  WORKLOAD_RULES_FILTER_CATEGORIES,\n} from '../../AppConstants';\nimport PropTypes from 'prop-types';\nimport Loading from '../Loading/Loading';\nimport {\n  ErrorState,\n  NoRecsForWorkloadsDetails,\n  NoWorkloadsRecsAvailable,\n} from '../MessageState/EmptyStates';\n// import DateFormat from '@redhat-cloud-services/frontend-components/DateFormat/DateFormat';\nimport InsightsLabel from '@redhat-cloud-services/frontend-components/InsightsLabel';\nimport ExpandedRulesDetails from '../ExpandedRulesDetails.js/ExpandedRulesDetails';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  WORKLOADS_RECS_TABLE_INITIAL_STATE,\n  resetFilters,\n  updateWorkloadsRecsListFilters,\n} from '../../Services/Filters';\nimport {\n  addFilterParam as _addFilterParam,\n  passFilterWorkloadsRecs,\n  removeFilterParam as _removeFilterParam,\n} from '../Common/Tables';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport {\n  filtersAreApplied,\n  flatMapRows,\n  pruneWorkloadsRulesFilters,\n  sortWithSwitch,\n} from '../../Utilities/Workloads';\n\nconst WorkloadRules = ({ workload }) => {\n  const dispatch = useDispatch();\n  const { isError, isUninitialized, isFetching, isSuccess, data } = workload;\n  const recommendations = data?.recommendations || [];\n  const errorState = isError;\n  const successState = isSuccess;\n  const noInput = successState && recommendations.length === 0;\n  const [isAllExpanded, setIsAllExpanded] = useState(false);\n  const [filteredRows, setFilteredRows] = useState([]);\n  const [displayedRows, setDisplayedRows] = useState([]);\n  const [rowsFiltered, setRowsFiltered] = useState(false);\n  const [filtersApplied, setFiltersApplied] = useState(false);\n  const [expandFirst, setExpandFirst] = useState(true);\n  const loadingState = isUninitialized || isFetching || !rowsFiltered;\n  //FILTERS\n  const filters = useSelector(({ filters }) => filters.workloadsRecsListState);\n\n  const updateFilters = (payload) =>\n    dispatch(updateWorkloadsRecsListFilters(payload));\n\n  const addFilterParam = (param, values) => {\n    setExpandFirst(false);\n    return _addFilterParam(filters, updateFilters, param, values);\n  };\n  const removeFilterParam = (param) =>\n    _removeFilterParam(filters, updateFilters, param);\n\n  useEffect(() => {\n    setFilteredRows(buildFilteredRows(recommendations, filters));\n  }, [data, filters]);\n\n  useEffect(() => {\n    setDisplayedRows(\n      buildDisplayedRows(filteredRows, filters.sortIndex, filters.sortDirection)\n    );\n    setFiltersApplied(filtersAreApplied(filters));\n    setRowsFiltered(true);\n  }, [filteredRows]);\n\n  const filterConfigItems = WORKLOADS_RULES_FILTER_CONFIG(\n    filters,\n    addFilterParam\n  );\n\n  const buildDisplayedRows = (filteredRows, sortIndex, sortDirection) => {\n    const sortingRows = sortWithSwitch(sortIndex, sortDirection, filteredRows);\n    return flatMapRows(sortingRows, expandFirst);\n  };\n\n  const handleOnCollapse = (_e, rowId, isOpen) => {\n    if (rowId === undefined) {\n      // if undefined, all rows are affected\n      setIsAllExpanded(isOpen);\n      setDisplayedRows(\n        displayedRows.map((row) => ({\n          ...row,\n          // Don't show expand button for expanded content\n          ...(Object.hasOwn(row, 'parent') ? null : { isOpen }),\n        }))\n      );\n    } else {\n      setDisplayedRows(\n        displayedRows.map((row, index) =>\n          index === rowId ? { ...row, isOpen } : row\n        )\n      );\n    }\n  };\n\n  const buildFilteredRows = (allRows, filters) => {\n    setRowsFiltered(false);\n    const noFilters = filtersAreApplied(filters);\n    return allRows\n      .filter((recs) =>\n        noFilters ? passFilterWorkloadsRecs(recs, filters) : true\n      )\n      .map((value, key) => [\n        {\n          rule: value,\n          isOpen: isAllExpanded,\n          cells: [\n            {\n              title: value.details,\n            },\n            {\n              title: (\n                <div key={key}>\n                  <InsightsLabel value={4} rest={{ isCompact: true }} />\n                </div>\n              ),\n            },\n            {\n              title: value.objects.length,\n            },\n            {\n              title: (\n                <div key={key}>\n                  <DateFormat date={value.modified} type=\"relative\" />\n                </div>\n              ),\n            },\n          ],\n        },\n        {\n          cells: [\n            {\n              title: (\n                <ExpandedRulesDetails\n                  extra_data={value.extra_data}\n                  more_info={value.more_info}\n                  resolution={value.resolution}\n                  objects={value.objects}\n                />\n              ),\n            },\n          ],\n        },\n      ]);\n  };\n\n  const buildFilterChips = () => {\n    const localFilters = { ...filters };\n    delete localFilters.sortIndex;\n    delete localFilters.sortDirection;\n    return pruneWorkloadsRulesFilters(\n      localFilters,\n      WORKLOAD_RULES_FILTER_CATEGORIES\n    );\n  };\n\n  const activeFiltersConfig = {\n    showDeleteButton: filtersApplied ? true : false,\n    deleteTitle: 'Reset filters',\n    filters: buildFilterChips(),\n    onDelete: (_event, itemsToRemove, isAll) => {\n      if (isAll) {\n        resetFilters(\n          filters,\n          WORKLOADS_RECS_TABLE_INITIAL_STATE,\n          updateFilters\n        );\n      } else {\n        itemsToRemove.map((item) => {\n          const newFilter = {\n            [item.urlParam]: Array.isArray(filters[item.urlParam])\n              ? filters[item.urlParam].filter(\n                  (value) => String(value) !== String(item.chips[0].value)\n                )\n              : '',\n          };\n          newFilter[item.urlParam].length > 0\n            ? updateFilters({ ...filters, ...newFilter })\n            : removeFilterParam(item.urlParam);\n        });\n      }\n    },\n  };\n\n  const onSort = (_e, index, direction) => {\n    setRowsFiltered(false);\n    setExpandFirst(false);\n    updateFilters({\n      ...filters,\n      sortIndex: index,\n      sortDirection: direction,\n    });\n  };\n\n  return (\n    <div id=\"workload-recs-list-table\">\n      <PrimaryToolbar\n        filterConfig={{\n          items: filterConfigItems,\n          isDisabled:\n            loadingState ||\n            errorState ||\n            noInput ||\n            recommendations.length === 0,\n        }}\n        pagination={\n          <span className=\"pf-u-font-weight-bold\">\n            {filteredRows?.length === 1\n              ? `${filteredRows.length} Recommendation`\n              : `${filteredRows.length} Recommendations`}\n          </span>\n        }\n        activeFiltersConfig={\n          loadingState || errorState || noInput || recommendations.length === 0\n            ? undefined\n            : activeFiltersConfig\n        }\n      />\n      <Table\n        aria-label={'Workload recommendations table'}\n        ouiaId=\"workload-recommendations\"\n        cells={WORKLOAD_RULES_COLUMNS}\n        ouiaSafe={!loadingState}\n        onCollapse={handleOnCollapse} // TODO: set undefined when there is an empty state\n        rows={\n          errorState || loadingState || noInput ? (\n            [\n              {\n                fullWidth: true,\n                cells: [\n                  {\n                    props: {\n                      colSpan: WORKLOAD_RULES_COLUMNS.length + 1,\n                    },\n                    title: errorState ? (\n                      <NoWorkloadsRecsAvailable />\n                    ) : loadingState ? (\n                      <Loading />\n                    ) : (\n                      <NoRecsForWorkloadsDetails />\n                    ),\n                  },\n                ],\n              },\n            ]\n          ) : successState ? (\n            displayedRows\n          ) : (\n            <ErrorState />\n          )\n        }\n        variant={TableVariant.compact}\n        isStickyHeader\n        canCollapseAll\n        sortBy={{\n          index: filters.sortIndex,\n          direction: filters.sortDirection,\n        }}\n        onSort={onSort}\n      >\n        <TableHeader />\n        <TableBody />\n      </Table>\n    </div>\n  );\n};\n\nexport default WorkloadRules;\n\nWorkloadRules.propTypes = {\n  workload: PropTypes.shape({\n    isUninitialized: PropTypes.bool.isRequired,\n    isFetching: PropTypes.bool.isRequired,\n    isError: PropTypes.bool.isRequired,\n    isSuccess: PropTypes.bool.isRequired,\n    error: PropTypes.object,\n    data: PropTypes.shape({\n      namespace: PropTypes.shape({\n        uuid: PropTypes.string,\n        name: PropTypes.string,\n      }),\n      cluster: PropTypes.shape({\n        uuid: PropTypes.string,\n        display_name: PropTypes.string,\n      }),\n      status: PropTypes.string,\n      recommendations: PropTypes.arrayOf(\n        PropTypes.shape({\n          check: PropTypes.string,\n          description: PropTypes.string,\n          objects: PropTypes.arrayOf(\n            PropTypes.shape({\n              kind: PropTypes.string,\n              uid: PropTypes.string,\n            })\n          ),\n          remediation: PropTypes.string,\n        })\n      ),\n    }),\n  }),\n};\n","import React from 'react';\nimport PageHeader from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Flex, FlexItem, PageSection, Title } from '@patternfly/react-core';\nimport Breadcrumbs from '../Breadcrumbs';\nimport WorkloadsHeader from '../WorkloadHeader';\nimport PropTypes from 'prop-types';\nimport WorkloadRules from '../WorkloadRules/WorkloadRules';\n\nexport const Workload = ({ workload, namespaceId, clusterId }) => {\n  return (\n    <React.Fragment>\n      <PageHeader className=\"pf-m-light ins-inventory-detail\">\n        <Flex direction={{ default: 'column' }}>\n          <FlexItem>\n            <Breadcrumbs\n              current={\n                workload?.data?.status === 'ok'\n                  ? `${workload.data.cluster.display_name} | ${workload.data.namespace.name}`\n                  : `${clusterId} | ${namespaceId}`\n              }\n            />\n            <WorkloadsHeader />\n          </FlexItem>\n        </Flex>\n      </PageHeader>\n      <PageSection>\n        <Title className=\"pf-u-mb-lg\" headingLevel=\"h3\" size=\"2xl\">\n          Recommendations\n        </Title>\n        <WorkloadRules workload={workload} />\n      </PageSection>\n    </React.Fragment>\n  );\n};\n\nWorkload.propTypes = {\n  clusterId: PropTypes.string.isRequired,\n  namespaceId: PropTypes.string.isRequired,\n  workload: PropTypes.shape({\n    isUninitialized: PropTypes.bool.isRequired,\n    isFetching: PropTypes.bool.isRequired,\n    data: PropTypes.shape({\n      namespace: PropTypes.shape({\n        uuid: PropTypes.string,\n        name: PropTypes.string,\n      }),\n      cluster: PropTypes.shape({\n        uuid: PropTypes.string,\n        display_name: PropTypes.string,\n      }),\n      status: PropTypes.string,\n    }),\n  }),\n};\n","import React, { useEffect } from 'react';\nimport { Workload } from './Workload';\nimport { useParams } from 'react-router-dom';\nimport { useGetWorkloadByIdQuery } from '../../Services/SmartProxy';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\n\nconst WorkloadWrapper = () => {\n  const chrome = useChrome();\n  const { namespaceId, clusterId } = useParams();\n  const workload = useGetWorkloadByIdQuery({\n    namespaceId,\n    clusterId,\n  });\n\n  useEffect(() => {\n    workload.refetch();\n  }, [namespaceId, clusterId]);\n\n  useEffect(() => {\n    const subnav = `${\n      workload?.data?.status === 'ok'\n        ? `${workload?.data?.cluster.display_name} | ${workload?.data?.namespace.name} - Workloads`\n        : `${clusterId} | ${namespaceId} - Workloads`\n    }`;\n    chrome.updateDocumentTitle(`${subnav} - OCP Advisor | Red Hat Insights`);\n  }, [workload, namespaceId, clusterId]);\n\n  return (\n    <Workload\n      workload={workload}\n      namespaceId={namespaceId}\n      clusterId={clusterId}\n    />\n  );\n};\n\nexport default WorkloadWrapper;\n","import React from 'react';\nimport ContentLoader from 'react-content-loader';\n\nconst OneLineLoader = () => (\n  <ContentLoader height={20}>\n    <rect x=\"0\" y=\"0\" rx=\"4\" ry=\"4\" width=\"300\" height=\"20\" />\n  </ContentLoader>\n);\n\nexport { OneLineLoader };\n"],"names":["Breadcrumbs","current","intl","useIntl","splitUrl","useLocation","pathname","split","ouiaId","className","Link","to","relative","formatMessage","messages","insightsHeader","isActive","propTypes","PropTypes","WorkloadHeader","workloadData","namespaceId","clusterId","isUninitialized","isFetching","workload","data","Grid","id","md","hasGutter","GridItem","span","Title","size","headingLevel","Skeleton","cluster","display_name","namespace","name","Stack","StackItem","metadata","last_checked_at","DateFormat","date","type","isRequired","uuid","status","useParams","useGetWorkloadByIdQuery","columnNames","ExpandedRulesDetails","more_info","resolution","objects","Card","style","boxShadow","CardBody","isCompact","isPlain","CardHeader","Divider","template","Table","borders","Thead","Tr","Th","modifier","Tbody","slice","map","object","key","Td","dataLabel","uid","kind","Button","variant","isInline","CodeBlock","extra_data","WorkloadRules","dispatch","useDispatch","isError","isSuccess","recommendations","errorState","successState","noInput","length","useState","isAllExpanded","setIsAllExpanded","filteredRows","setFilteredRows","displayedRows","setDisplayedRows","rowsFiltered","setRowsFiltered","filtersApplied","setFiltersApplied","expandFirst","setExpandFirst","loadingState","filters","useSelector","workloadsRecsListState","updateFilters","payload","updateWorkloadsRecsListFilters","useEffect","buildFilteredRows","buildDisplayedRows","sortIndex","sortDirection","filtersAreApplied","localFilters","filterConfigItems","WORKLOADS_RULES_FILTER_CONFIG","param","values","_addFilterParam","sortingRows","sortWithSwitch","flatMapRows","allRows","noFilters","filter","recs","passFilterWorkloadsRecs","value","rule","isOpen","cells","title","details","InsightsLabel","rest","modified","activeFiltersConfig","showDeleteButton","deleteTitle","pruneWorkloadsRulesFilters","WORKLOAD_RULES_FILTER_CATEGORIES","onDelete","_event","itemsToRemove","isAll","resetFilters","WORKLOADS_RECS_TABLE_INITIAL_STATE","item","newFilter","urlParam","Array","isArray","String","chips","_removeFilterParam","PrimaryToolbar","filterConfig","items","isDisabled","pagination","undefined","WORKLOAD_RULES_COLUMNS","ouiaSafe","onCollapse","_e","rowId","row","Object","hasOwn","index","rows","fullWidth","props","colSpan","Loading","TableVariant","compact","isStickyHeader","canCollapseAll","sortBy","direction","onSort","TableHeader","TableBody","error","check","description","remediation","Workload","PageHeader","Flex","default","FlexItem","PageSection","chrome","useChrome","refetch","subnav","updateDocumentTitle","OneLineLoader","height","x","y","rx","ry","width"],"sourceRoot":""}