{"version":3,"file":"js/ClusterDetails.ff44a355cd3c54ecbe0d.js","mappings":"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","sources":["webpack:///./src/Components/ClusterHeader/ClusterHeader.js","webpack:///./src/Components/ClusterHeader/index.js","webpack:///./src/Components/ReportDetails/ReportDetails.js","webpack:///./src/Components/ClusterRules/ClusterRules.js","webpack:///./src/Components/Cluster/Cluster.js","webpack:///./src/Components/Cluster/index.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport { Grid, GridItem } from '@patternfly/react-core/dist/js/layouts/Grid';\nimport { Stack, StackItem } from '@patternfly/react-core/dist/js/layouts/Stack';\nimport { Title } from '@patternfly/react-core/dist/js/components/Title';\nimport Skeleton from '@redhat-cloud-services/frontend-components/Skeleton';\n\nimport messages from '../../Messages';\n\nexport const ClusterHeader = ({ clusterId, lastSeen, displayName }) => {\n  const intl = useIntl();\n  const {\n    isUninitialized,\n    isLoading,\n    isFetching,\n    data: clusterName,\n  } = displayName;\n\n  return (\n    <React.Fragment>\n      <Grid md={12} hasGutter>\n        <GridItem>\n          {isUninitialized || isLoading || isFetching ? (\n            <Skeleton size=\"sm\" />\n          ) : (\n            <Title size=\"2xl\" headingLevel=\"h1\">\n              {clusterName || clusterId}\n            </Title>\n          )}\n        </GridItem>\n        <GridItem>\n          <Stack>\n            <StackItem>\n              <span>UUID: </span>\n              <span>{clusterId || intl.formatMessage(messages.unknown)}</span>\n            </StackItem>\n            {lastSeen && (\n              <StackItem>\n                <span>{intl.formatMessage(messages.lastSeen)}: </span>\n                <span>{lastSeen || intl.formatMessage(messages.unknown)}</span>\n              </StackItem>\n            )}\n          </Stack>\n        </GridItem>\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nClusterHeader.propTypes = {\n  clusterId: PropTypes.string.isRequired,\n  displayName: PropTypes.object.isRequired,\n  lastSeen: PropTypes.string,\n};\n","import React from 'react';\nimport { routerParams } from '@redhat-cloud-services/frontend-components-utilities/RouterParams/RouterParams';\n\nimport { useGetClusterDisplayNameByIdQuery } from '../../Services/AccountManagementService';\nimport { useLazyGetClusterByIdQuery } from '../../Services/SmartProxy';\nimport { ClusterHeader } from './ClusterHeader';\n\nexport default routerParams(({ match }) => {\n  const clusterId = match.params.clusterId;\n  const displayName = useGetClusterDisplayNameByIdQuery(clusterId);\n  const { data } = useLazyGetClusterByIdQuery(clusterId);\n\n  return (\n    <ClusterHeader\n      clusterId={clusterId}\n      displayName={displayName}\n      lastSeen={data?.report?.lastSeen}\n    />\n  );\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\n\nimport Loading from '../Loading/Loading';\n\n// Rule fields processing: https://docs.google.com/document/d/1D0ZLD6-2DZqBX1cUHJY2vL2QAD0dIAzY3O3xFNlEsVg/edit?usp=sharing\n\nconst ReportDetails = ({ report }) => {\n  return (\n    <div className=\"advisor\">\n      <AsyncComponent\n        appName=\"advisor\"\n        module=\"./AdvisorReportDetails\"\n        fallback={<Loading />}\n        // TODO: make API rename `extra_data` to `details` or modify AdvisorReportDetails property\n        report={{\n          ...report,\n          details: report.extra_data,\n          resolution: {\n            resolution: report.resolution,\n          },\n        }}\n      />\n    </div>\n  );\n};\n\nReportDetails.propTypes = {\n  report: PropTypes.object.isRequired,\n};\n\nexport default ReportDetails;\n","import './_ClusterRules.scss';\n\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport CheckIcon from '@patternfly/react-icons/dist/js/icons/check-icon';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat/DateFormat';\nimport InsightsLabel from '@redhat-cloud-services/frontend-components/InsightsLabel';\nimport {\n  SortByDirection,\n  Table,\n  TableBody,\n  TableHeader,\n  TableVariant,\n  cellWidth,\n  sortable,\n} from '@patternfly/react-table';\nimport { capitalize } from '@patternfly/react-core/dist/js/helpers/util';\nimport { Card, CardBody } from '@patternfly/react-core/dist/js/components/Card';\nimport {\n  Tooltip,\n  TooltipPosition,\n} from '@patternfly/react-core/dist/js/components/Tooltip';\nimport PrimaryToolbar from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\n\nimport messages from '../../Messages';\nimport MessageState from '../MessageState/MessageState';\nimport {\n  IMPACT_LABEL,\n  LIKELIHOOD_LABEL,\n  FILTER_CATEGORIES as FC,\n  RULE_CATEGORIES,\n  DEFAULT_CLUSTER_RULES_FILTERS,\n} from '../../AppConstants';\nimport ReportDetails from '../ReportDetails/ReportDetails';\nimport RuleLabels from '../RuleLabels/RuleLabels';\nimport { NoMatchingRecs } from '../MessageState/EmptyStates';\n\nconst ClusterRules = ({ reports }) => {\n  const intl = useIntl();\n  const [activeReports, setActiveReports] = useState([]);\n  const [sortBy, setSortBy] = useState({});\n  const [filters, setFilters] = useState(DEFAULT_CLUSTER_RULES_FILTERS);\n  const [searchValue, setSearchValue] = useState('');\n  const [isSelected, setIsSelected] = useState(false);\n  const [rows, setRows] = useState([]);\n  const results = rows ? rows.length / 2 : 0;\n\n  const cols = [\n    {\n      title: intl.formatMessage(messages.description),\n      transforms: [sortable],\n    },\n    {\n      title: intl.formatMessage(messages.added),\n      transforms: [sortable, cellWidth(15)],\n    },\n    {\n      title: intl.formatMessage(messages.totalRisk),\n      transforms: [sortable, cellWidth(15)],\n    },\n  ];\n\n  const handleOnCollapse = (_e, rowId, isOpen) => {\n    const collapseRows = [...rows];\n    collapseRows[rowId] = { ...collapseRows[rowId], isOpen };\n    setRows(collapseRows);\n  };\n\n  const onKebabClick = (action) => {\n    const isOpen = action === 'insights-expand-all';\n    const allRows = [...rows];\n\n    allRows.map((row, key) => {\n      if (Object.prototype.hasOwnProperty.call(row, 'isOpen')) {\n        row.isOpen = isOpen;\n        isOpen && handleOnCollapse(null, key, isOpen);\n      }\n    });\n\n    setRows(allRows);\n  };\n\n  const actions = [\n    {\n      label: 'Collapse all',\n      onClick: () => onKebabClick('insights-collapse-all'),\n    },\n    {\n      label: 'Expand all',\n      onClick: () => onKebabClick('insights-expand-all'),\n    },\n  ];\n\n  const buildRows = (activeReports, filters, rows, searchValue = '') => {\n    const builtRows = activeReports.flatMap((value, key) => {\n      const rule = value;\n      const resolution = value.resolution;\n      const entity = rows.filter(\n        (rowVal, rowKey) =>\n          rowKey % 2 === 0 && rowVal.rule.rule_id === rule.rule_id && rowVal\n      );\n      const selected = entity.length ? entity[0].selected : false;\n      const isOpen = rows.length\n        ? entity.length\n          ? entity[0].isOpen\n          : false\n        : key === 0\n        ? true\n        : false;\n\n      const reportRow = [\n        {\n          rule,\n          resolution,\n          isOpen,\n          selected,\n          cells: [\n            {\n              title: (\n                <div>\n                  {rule.description} <RuleLabels rule={value} />\n                </div>\n              ),\n            },\n            {\n              title: (\n                <div key={key}>\n                  <DateFormat\n                    date={rule.created_at}\n                    type=\"relative\"\n                    tooltipProps={{ position: TooltipPosition.bottom }}\n                  />\n                </div>\n              ),\n            },\n            {\n              title: (\n                <div key={key} style={{ verticalAlign: 'top' }}>\n                  {rule?.likelihood && rule?.impact ? (\n                    <Tooltip\n                      key={key}\n                      position={TooltipPosition.bottom}\n                      content={\n                        // TODO: refine fields lookup\n                        <span>\n                          The <strong>likelihood</strong> that this will be a\n                          problem is{' '}\n                          {rule.likelihood\n                            ? LIKELIHOOD_LABEL[rule.likelihood]\n                            : 'unknown'}\n                          . The <strong>impact</strong> of the problem would be{' '}\n                          {rule.impact ? IMPACT_LABEL[rule.impact] : 'unknown'}{' '}\n                          if it occurred.\n                        </span>\n                      }\n                    >\n                      <InsightsLabel value={rule.total_risk} />\n                    </Tooltip>\n                  ) : (\n                    <InsightsLabel value={rule.total_risk} />\n                  )}\n                </div>\n              ),\n            },\n          ],\n        },\n        {\n          parent: key,\n          fullWidth: true,\n          cells: [\n            {\n              title: <ReportDetails key={`child-${key}`} report={value} />,\n            },\n          ],\n        },\n      ];\n      const isValidSearchValue =\n        searchValue.length === 0 ||\n        rule.description.toLowerCase().includes(searchValue.toLowerCase());\n      const isValidFilterValue =\n        Object.keys(filters).length === 0 ||\n        Object.keys(filters)\n          .map((key) => {\n            const filterValues = filters[key];\n            const rowValue = {\n              created_at: rule.created_at,\n              total_risk: rule.total_risk,\n              category: rule.tags,\n              rule_status: rule.disabled ? 'disabled' : 'enabled',\n            };\n            if (key === 'category') {\n              // in that case, rowValue['category'] is an array of categories (or \"tags\" in the back-end implementation)\n              // e.g. ['security', 'fault_tolerance']\n              return rowValue[key].find((categoryName) =>\n                filterValues.includes(String(RULE_CATEGORIES[categoryName]))\n              );\n            }\n            if (key === 'rule_status') {\n              return filterValues === 'all' || rowValue[key] === filterValues;\n            }\n            return filterValues.find(\n              (value) => String(value) === String(rowValue[key])\n            );\n          })\n          .every((x) => x);\n\n      return isValidSearchValue && isValidFilterValue ? reportRow : [];\n    });\n    // must recalculate parent for expandable table content whenever the array size changes\n    builtRows.forEach((row, index) =>\n      row.parent ? (row.parent = index - 1) : null\n    );\n\n    return builtRows;\n  };\n\n  const onSort = (_e, index, direction) => {\n    const sortedReports = {\n      2: 'description',\n      3: 'created_at',\n      4: 'total_risk',\n    };\n    const sort = () =>\n      activeReports\n        .concat()\n        .sort((firstItem, secondItem) =>\n          firstItem[sortedReports[index]] > secondItem[sortedReports[index]]\n            ? 1\n            : secondItem[sortedReports[index]] > firstItem[sortedReports[index]]\n            ? -1\n            : 0\n        );\n    const sortedReportsDirectional =\n      direction === SortByDirection.asc ? sort() : sort().reverse();\n\n    setActiveReports(sortedReportsDirectional);\n    setSortBy({\n      index,\n      direction,\n    });\n    setRows(buildRows(sortedReportsDirectional, filters, rows, searchValue));\n  };\n\n  const onRowSelect = (_e, isSelected, rowId) =>\n    setRows(\n      buildRows(\n        activeReports,\n        filters,\n        rows.map((row, index) =>\n          index === rowId ? { ...row, selected: isSelected } : row\n        ),\n        searchValue\n      )\n    );\n\n  const getSelectedItems = (rows) => rows.filter((entity) => entity.selected);\n  const selectedItemsLength = getSelectedItems(rows).length;\n\n  const onBulkSelect = (isSelected) => {\n    setIsSelected(isSelected);\n    setRows(\n      buildRows(\n        activeReports,\n        filters,\n        rows.map((row, index) =>\n          index % 2 === 0 ? { ...row, selected: isSelected } : row\n        ),\n        searchValue\n      )\n    );\n  };\n\n  const bulkSelect = {\n    items: [\n      {\n        title: 'Select none',\n        onClick: () => onBulkSelect(false),\n      },\n      {\n        title: 'Select all',\n        onClick: () => onBulkSelect(true),\n      },\n    ],\n    count: selectedItemsLength,\n    checked: isSelected,\n    onSelect: () => onBulkSelect(!isSelected),\n    ouiaId: 'bulk-selector',\n  };\n\n  const onInputChange = (value) => {\n    const builtRows = buildRows(activeReports, filters, rows, value);\n    setSearchValue(value);\n    setRows(builtRows);\n  };\n\n  const onFilterChange = (param, values) => {\n    const removeFilterParam = (param) => {\n      const filter = { ...filters };\n      delete filter[param];\n      return filter;\n    };\n\n    const newFilters =\n      values.length > 0\n        ? { ...filters, ...{ [param]: values } }\n        : removeFilterParam(param);\n    setRows(buildRows(activeReports, newFilters, rows, searchValue));\n    setFilters(newFilters);\n  };\n\n  const toggleRulesDisabled = (rule_status) => {\n    const newFilters = { ...filters, rule_status };\n    setRows(buildRows(activeReports, newFilters, rows, searchValue));\n    setFilters(newFilters);\n  };\n\n  const filterConfigItems = [\n    {\n      label: 'description',\n      filterValues: {\n        key: 'text-filter',\n        onChange: (_e, value) => onInputChange(value),\n        value: searchValue,\n      },\n    },\n    {\n      label: FC.total_risk.title,\n      type: FC.total_risk.type,\n      id: FC.total_risk.urlParam,\n      value: `checkbox-${FC.total_risk.urlParam}`,\n      filterValues: {\n        key: `${FC.total_risk.urlParam}-filter`,\n        onChange: (_e, values) =>\n          onFilterChange(FC.total_risk.urlParam, values),\n        value: filters.total_risk,\n        items: FC.total_risk.values,\n      },\n    },\n    {\n      label: FC.category.title,\n      type: FC.category.type,\n      id: FC.category.urlParam,\n      value: `checkbox-${FC.category.urlParam}`,\n      filterValues: {\n        key: `${FC.category.urlParam}-filter`,\n        onChange: (_e, values) => onFilterChange(FC.category.urlParam, values),\n        value: filters.category,\n        items: FC.category.values,\n      },\n    },\n    {\n      label: FC.rule_status.title,\n      type: FC.rule_status.type,\n      id: FC.rule_status.urlParam,\n      value: `radio-${FC.rule_status.urlParam}`,\n      filterValues: {\n        key: `${FC.rule_status.urlParam}-filter`,\n        onChange: (_e, value) => toggleRulesDisabled(value),\n        value: filters.rule_status,\n        items: FC.rule_status.values,\n      },\n    },\n  ];\n\n  const buildFilterChips = () => {\n    const prunedFilters = Object.entries(filters);\n    let chips =\n      filters && prunedFilters.length > 0\n        ? prunedFilters.map((item) => {\n            const category = FC[item[0]];\n            const chips = Array.isArray(item[1])\n              ? item[1].map((value) => ({\n                  name: category.values.find(\n                    (values) => values.value === String(value)\n                  ).label,\n                  value,\n                }))\n              : [\n                  {\n                    name: category.values.find(\n                      (values) => values.value === String(item[1])\n                    ).label,\n                    value: item[1],\n                  },\n                ];\n            return {\n              category: capitalize(category.title),\n              chips,\n              urlParam: category.urlParam,\n            };\n          })\n        : [];\n    searchValue.length > 0 &&\n      chips.push({\n        category: 'Description',\n        chips: [{ name: searchValue, value: searchValue }],\n      });\n    return chips;\n  };\n\n  const onChipDelete = (_e, itemsToRemove, isAll) => {\n    if (isAll) {\n      setRows(buildRows(activeReports, {}, rows, ''));\n      setFilters(DEFAULT_CLUSTER_RULES_FILTERS);\n      setSearchValue('');\n    } else {\n      itemsToRemove.map((item) => {\n        switch (item.category) {\n          case 'Description':\n            setRows(buildRows(activeReports, filters, rows, ''));\n            setSearchValue('');\n            break;\n          case 'Status':\n            onFilterChange(item.urlParam, []);\n            break;\n          default:\n            onFilterChange(\n              item.urlParam,\n              filters[item.urlParam].filter(\n                (value) => String(value) !== String(item.chips[0].value)\n              )\n            );\n        }\n      });\n    }\n  };\n\n  const activeFiltersConfig = {\n    deleteTitle: intl.formatMessage(messages.resetFilters),\n    filters: buildFilterChips(),\n    onDelete: onChipDelete,\n  };\n\n  useEffect(() => {\n    const activeReportsData = reports;\n    setActiveReports(activeReportsData);\n    setRows(buildRows(activeReportsData, filters, rows, searchValue));\n  }, []);\n\n  return (\n    <div>\n      <PrimaryToolbar\n        actionsConfig={{ actions }}\n        bulkSelect={bulkSelect}\n        filterConfig={{ items: filterConfigItems, isDisabled: results === 0 }}\n        pagination={\n          <React.Fragment>\n            {results === 1\n              ? `${results} ${intl.formatMessage(messages.recommendation)}`\n              : `${results} ${intl.formatMessage(messages.recommendations)}`}\n          </React.Fragment>\n        }\n        activeFiltersConfig={results === 0 ? undefined : activeFiltersConfig}\n      />\n      {activeReports.length > 0 ? (\n        <React.Fragment>\n          <Table\n            aria-label={'Cluster recommendations table'}\n            ouiaId={'cluster-recommendations'}\n            onSelect={onRowSelect}\n            onCollapse={handleOnCollapse}\n            rows={rows}\n            cells={cols}\n            sortBy={sortBy}\n            canSelectAll={false}\n            onSort={onSort}\n            variant={TableVariant.compact}\n            isStickyHeader\n          >\n            <TableHeader />\n            <TableBody />\n          </Table>\n          {results === 0 && (\n            <Card ouiaId={'empty-recommendations'}>\n              <CardBody>\n                <NoMatchingRecs />\n              </CardBody>\n            </Card>\n          )}\n        </React.Fragment>\n      ) : (\n        // ? Welcome to Insights feature for novice clusters with disabled Insights?\n        <Card>\n          <CardBody>\n            <MessageState\n              icon={CheckIcon}\n              iconClass=\"ins-c-insights__check\"\n              title={intl.formatMessage(messages.noRecommendations)}\n              text={intl.formatMessage(messages.noRecommendationsDesc)}\n            />\n          </CardBody>\n        </Card>\n      )}\n    </div>\n  );\n};\n\nClusterRules.propTypes = {\n  reports: PropTypes.array.isRequired,\n};\n\nClusterRules.defaultProps = {\n  reports: [],\n};\n\nexport default ClusterRules;\n","import './_Cluster.scss';\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport { Grid, GridItem } from '@patternfly/react-core/dist/js/layouts/Grid';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\nimport PageHeader from '@redhat-cloud-services/frontend-components/PageHeader';\nimport Main from '@redhat-cloud-services/frontend-components/Main';\nimport { global_danger_color_100 as globalDangerColor100 } from '@patternfly/react-tokens/dist/js/global_danger_color_100';\n\nimport ClusterHeader from '../ClusterHeader';\nimport ClusterRules from '../ClusterRules/ClusterRules';\nimport Breadcrumbs from '../Breadcrumbs';\nimport MessageState from '../MessageState/MessageState';\nimport Loading from '../Loading/Loading';\nimport messages from '../../Messages';\n\nexport const Cluster = ({ cluster, match }) => {\n  const intl = useIntl();\n  const { isError, isUninitialized, isLoading, isFetching, isSuccess, data } =\n    cluster;\n\n  return (\n    <React.Fragment>\n      {(isUninitialized || isLoading || isFetching) && (\n        <Main>\n          <Loading />\n        </Main>\n      )}\n      {isError && (\n        <Main>\n          <MessageState\n            title={intl.formatMessage(messages.noRecsError)}\n            text={intl.formatMessage(messages.noRecsErrorDesc)}\n            icon={ExclamationCircleIcon}\n            iconStyle={{ color: globalDangerColor100.value }}\n          />\n        </Main>\n      )}\n      {isSuccess && (\n        <React.Fragment>\n          <PageHeader className=\"pf-m-light ins-inventory-detail\">\n            <Breadcrumbs current={match.params.clusterId} match={match} />\n            <ClusterHeader />\n          </PageHeader>\n          <Main>\n            <React.Fragment>\n              <Grid hasGutter>\n                <GridItem span={12}>\n                  <ClusterRules reports={data?.report?.data || []} />\n                </GridItem>\n              </Grid>\n            </React.Fragment>\n          </Main>\n        </React.Fragment>\n      )}\n    </React.Fragment>\n  );\n};\n\nCluster.propTypes = {\n  cluster: PropTypes.object.isRequired,\n  match: PropTypes.object.isRequired,\n};\n","import React, { useEffect } from 'react';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/RouterParams';\nimport { useIntl } from 'react-intl';\n\nimport { useGetClusterByIdQuery } from '../../Services/SmartProxy';\nimport messages from '../../Messages';\nimport { Cluster } from './Cluster';\n\nexport default routerParams(({ match }) => {\n  const intl = useIntl();\n  const cluster = useGetClusterByIdQuery(match.params.clusterId);\n\n  useEffect(() => {\n    cluster.refetch();\n  }, [match.params.clusterId]);\n\n  useEffect(() => {\n    if (match.params.clusterId) {\n      const subnav = `${match.params.clusterId} - ${intl.formatMessage(\n        messages.clusters\n      )}`;\n      document.title = intl.formatMessage(messages.documentTitle, { subnav });\n    }\n  }, [match.params.clusterId]);\n\n  return <Cluster cluster={cluster} match={match} />;\n});\n"],"names":["ClusterHeader","clusterId","lastSeen","displayName","intl","useIntl","isUninitialized","isLoading","isFetching","clusterName","data","Grid","md","hasGutter","GridItem","Skeleton","size","Title","headingLevel","Stack","StackItem","formatMessage","messages","propTypes","PropTypes","routerParams","match","params","useGetClusterDisplayNameByIdQuery","useLazyGetClusterByIdQuery","report","ReportDetails","className","AsyncComponent","appName","module","fallback","Loading","details","extra_data","resolution","ClusterRules","prunedFilters","chips","reports","useState","activeReports","setActiveReports","sortBy","setSortBy","DEFAULT_CLUSTER_RULES_FILTERS","filters","setFilters","searchValue","setSearchValue","isSelected","setIsSelected","rows","setRows","results","length","cols","title","transforms","sortable","cellWidth","handleOnCollapse","_e","rowId","isOpen","collapseRows","onKebabClick","action","allRows","map","row","key","Object","prototype","hasOwnProperty","call","actions","label","onClick","buildRows","builtRows","flatMap","value","rule","entity","filter","rowVal","rowKey","rule_id","selected","reportRow","cells","description","RuleLabels","DateFormat","date","created_at","type","tooltipProps","position","TooltipPosition","style","verticalAlign","likelihood","impact","Tooltip","content","LIKELIHOOD_LABEL","IMPACT_LABEL","InsightsLabel","total_risk","parent","fullWidth","isValidSearchValue","toLowerCase","includes","isValidFilterValue","keys","filterValues","rowValue","category","tags","rule_status","disabled","find","categoryName","String","RULE_CATEGORIES","every","x","forEach","index","selectedItemsLength","getSelectedItems","onBulkSelect","bulkSelect","items","count","checked","onSelect","ouiaId","onFilterChange","param","values","newFilters","removeFilterParam","filterConfigItems","onChange","onInputChange","FC","id","activeFiltersConfig","deleteTitle","entries","item","Array","isArray","name","capitalize","urlParam","push","onDelete","itemsToRemove","isAll","useEffect","activeReportsData","PrimaryToolbar","actionsConfig","filterConfig","isDisabled","pagination","undefined","Table","onCollapse","canSelectAll","onSort","direction","sortedReports","sort","concat","firstItem","secondItem","sortedReportsDirectional","SortByDirection","reverse","variant","TableVariant","isStickyHeader","TableHeader","TableBody","Card","CardBody","MessageState","icon","CheckIcon","iconClass","text","defaultProps","Cluster","cluster","isError","isSuccess","Main","ExclamationCircleIcon","iconStyle","color","globalDangerColor100","PageHeader","Breadcrumbs","current","span","useGetClusterByIdQuery","refetch","subnav","document"],"sourceRoot":""}