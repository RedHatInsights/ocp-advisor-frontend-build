{"version":3,"file":"js/RulesTable.87c71ae8a5696d7cf5b6.js","mappings":"qfAiBMA,EAAc,SAAC,GAAsD,IAApDC,EAAoD,EAApDA,YAAaC,EAAuC,EAAvCA,kBAAmBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,QACrDC,GAAOC,EAAAA,EAAAA,KACb,GAAyCC,EAAAA,EAAAA,UAAS,IAAlD,eAAOC,EAAP,KAAsBC,EAAtB,KACA,GAAiBC,EAAAA,EAAAA,KAAVC,GAAP,eACMC,GAAWC,EAAAA,EAAAA,eACXC,EAAe,SAACC,GAAD,OAAUH,GAASI,EAAAA,EAAAA,IAAgBD,KAElDE,EAAW,mCAAG,2FACZC,EAAU,CACdC,QAAShB,EAAKgB,QACdX,cAAAA,GAHgB,kBAMVG,EAAOO,GAASE,SANN,OAOhBN,EAAa,CACXO,QAAS,UACTC,SAAS,EACTC,aAAa,EACbC,MAAOnB,EAAKoB,cAAcC,EAAAA,EAAAA,2BAE5BjB,EAAgB,IAChBL,GAAWA,IAdK,gDAgBhBU,EAAa,CACXO,QAAS,SACTE,aAAa,EACbC,MAAOnB,EAAKoB,cAAcC,EAAAA,EAAAA,OAC1BC,YAAa,GAAF,eApBG,QAuBlBzB,GAAkB,GAvBA,yDAAH,qDAyBjB,OACE,kBAAC,EAAA0B,MAAD,CACEP,QAAQ,QACRG,MAAOnB,EAAKoB,cAAcC,EAAAA,EAAAA,aAC1BG,OAAQ5B,EACR6B,QAAS,WACP5B,IACAO,EAAgB,KAElBsB,QAAS,CACP,kBAAC,EAAAC,OAAD,CACEC,IAAI,UACJZ,QAAQ,UACRa,QAAS,kBAAMjB,KACfkB,OAAO,WAEN9B,EAAKoB,cAAcC,EAAAA,EAAAA,OAEtB,kBAAC,EAAAM,OAAD,CACEC,IAAI,SACJZ,QAAQ,OACRa,QAAS,WACPhC,GAAkB,GAClBO,EAAgB,KAElB0B,OAAO,UAEN9B,EAAKoB,cAAcC,EAAAA,EAAAA,WAIvBrB,EAAKoB,cAAcC,EAAAA,EAAAA,iBACpB,kBAAC,EAAAU,KAAD,KACE,kBAAC,EAAAC,UAAD,CAAWC,QAAQ,eACnB,kBAAC,EAAAD,UAAD,CACEE,MAAOlC,EAAKoB,cAAcC,EAAAA,EAAAA,mBAC1BY,QAAQ,8BAER,kBAAC,EAAAE,UAAD,CACEC,KAAK,OACLC,GAAG,6BACH,mBAAiB,6BACjBC,MAAOnC,EACPoC,SAAU,SAACC,GAAD,OAAUpC,EAAgBoC,IACpCC,UAAW,SAACC,GAAD,MACC,UAAVA,EAAEd,MAAoBc,EAAEC,iBAAkB/B,YASxDjB,EAAYiD,UAAY,CACtBhD,YAAaiD,IAAAA,KACb/C,KAAM+C,IAAAA,OACNhD,kBAAmBgD,IAAAA,KACnB9C,QAAS8C,IAAAA,MAGXlD,EAAYmD,aAAe,CACzBlD,aAAa,EACbE,KAAM,GACND,kBAAmB,aACnBE,QAAS,cAGX,U,+lBCpEA,IAAMgD,EAAgB,SAAC,GAAc,IAAZC,EAAY,EAAZA,MACjBhD,GAAOC,EAAAA,EAAAA,KACPM,GAAWC,EAAAA,EAAAA,eACXyC,GAAUC,EAAAA,EAAAA,cAAY,qBAAGD,QAAsBE,iBAC7CC,EACNJ,EADMI,QAASC,EACfL,EADeK,gBAAiBC,EAChCN,EADgCM,WAAYC,EAC5CP,EAD4CO,UAAW7C,EACvDsC,EADuDtC,KAAM8C,EAC7DR,EAD6DQ,QAEzDC,GAAO/C,MAAAA,OAAA,EAAAA,EAAMgD,kBAAmB,GAChCC,EAAOV,EAAQW,OAASX,EAAQY,MAAQ,EAC9C,GAAwC3D,EAAAA,EAAAA,UAAS,IAAjD,eAAO4D,EAAP,KAAqBC,EAArB,KACA,GAA0C7D,EAAAA,EAAAA,UAAS,IAAnD,eAAO8D,EAAP,KAAsBC,EAAtB,KACA,GAA8C/D,EAAAA,EAAAA,WAAS,GAAvD,eAAOgE,GAAP,KAAwBC,GAAxB,KACA,IAAwCjE,EAAAA,EAAAA,UAAS,IAAjD,iBAAOkE,GAAP,MAAqBC,GAArB,MACMC,GAAS,SAAC5D,GAAD,OAAUH,GAASI,EAAAA,EAAAA,IAAgBD,MAElD6D,EAAAA,EAAAA,YAAU,WACRN,EACEO,GAAmBV,EAAcb,EAAQwB,UAAWxB,EAAQyB,kBAE7D,CACDZ,EACAb,EAAQY,MACRZ,EAAQW,OACRX,EAAQwB,UACRxB,EAAQyB,iBAGVH,EAAAA,EAAAA,YAAU,WACRR,EAAgBY,GAAkBlB,EAAMR,MACvC,CAACvC,EAAMuC,IAGV,IAqTQ2B,GArTFD,GAAoB,SAACE,EAAS5B,GAClC,OAAO4B,EACJC,QAAO,SAAChF,GAAD,OChFM,SAACA,EAAMmD,GAAP,OAClB8B,OAAOC,QAAQ/B,GAASgC,OAAM,YAA8B,mBAA5BC,EAA4B,KAAjBC,EAAiB,KAC1D,OAAQD,GACN,IAAK,OACH,OAAOpF,EAAKwB,YACT8D,cACAC,SAASF,EAAYC,eAC1B,KAAKE,EAAAA,GAAAA,WAAAA,SACH,OAAOH,EAAYE,SAASE,OAAOzF,EAAK0F,aAC1C,KAAKF,EAAAA,GAAAA,SAAAA,SACH,OAAOxF,EAAK2F,KAAKC,MAAK,SAACC,GAAD,OACpBR,EAAYE,SAASE,OAAOK,EAAAA,GAAgBD,QAEhD,KAAKL,EAAAA,GAAAA,OAAAA,SACH,OAAOH,EAAYE,SAASE,OAAOzF,EAAK+F,SAC1C,KAAKP,EAAAA,GAAAA,UAAAA,SACH,QAAOH,EAAYW,OAAS,IACxBX,EAAYY,MAAK,SAACC,GAChB,MAAU,SAANA,EACKlG,EAAKmG,wBAA0B,EAE9B,UAAND,EACsC,IAAjClG,EAAKmG,6BADd,KAKR,KAAKX,EAAAA,GAAAA,WAAAA,SACH,OAAOH,EAAYE,SAASE,OAAOzF,EAAKoG,aAC1C,KAAKZ,EAAAA,GAAAA,YAAAA,SACH,MACkB,QAAhBH,GACiB,aAAhBA,GAA8BrF,EAAKqG,UACnB,YAAhBhB,IAA8BrF,EAAKqG,SAExC,QACE,OAAO,MD6CSC,CAAYtG,EAAMmD,MACnCoD,KAAI,SAAC/D,EAAOV,GAAR,MAAgB,CACnB,CACEJ,QAAQ,EACR1B,KAAMwC,EACNgE,MAAO,CACL,CACEnF,MACE,0BAAMS,IAAKA,GACT,kBAAC,EAAA2E,KAAD,CACE3E,IAAKA,EAEL4E,GAAE,2BAGIlE,EAAMxB,UAGX,KACAwB,MAAAA,OAAA,EAAAA,EAAOhB,eAAegB,MAAAA,OAAtB,EAAsBA,EAAOxB,SAAS,KAEzC,kBAAC2F,EAAA,EAAD,CAAY3G,KAAMwC,MAIxB,CACEnB,MAAOmB,MAAAA,GAAAA,EAAOoE,aACZ,kBAACC,EAAA,EAAD,CACE/E,IAAKA,EACLgF,KAAMtE,EAAMoE,aACZ1F,QAAQ,aAGVhB,EAAKoB,cAAcC,EAAAA,EAAAA,KAGvB,CACEF,MACE,yBAAKS,IAAKA,GACR,kBAACiF,EAAAA,QAAD,CACEjF,IAAKA,EACLkF,SAAUC,EAAAA,gBAAAA,OACVC,QAAShH,EAAKoB,cACZC,EAAAA,EAAAA,0BACA,CACE4F,KACEC,EAAAA,GAAuB5E,EAAMkD,aAC7BxF,EAAKoB,cAAcC,EAAAA,EAAAA,WACrB8F,OAAQ,SAACC,GAAD,OAASD,EAAAA,EAAAA,GAAOC,OAI3B9E,MAAAA,GAAAA,EAAOkD,WACN,kBAAC6B,EAAA,EAAD,CAAe/E,MAAOA,EAAMkD,aAE5BxF,EAAKoB,cAAcC,EAAAA,EAAAA,OAM7B,CACEF,MACE,yBAAKS,IAAKA,GAAV,eACqC0F,KAAnChF,MAAAA,OAAA,EAAAA,EAAO2D,yBACH3D,EAAM2D,wBAAwBsB,iBAC9BvH,EAAKoB,cAAcC,EAAAA,EAAAA,SAMjC,CACEmG,WAAW,EACXlB,MAAO,CACL,CACEnF,MACE,6BAASsG,UAAU,8DACjB,kBAACC,EAAAA,MAAD,CAAOC,WAAS,GACd,kBAACC,EAAA,EAAD,CACE9H,KAAI,OACCwC,GADD,IAEFuD,OAAQ,CAAEA,OAAQvD,EAAMuD,QAExBI,6BAAyBqB,IAE3BO,eAAe,cAW7BrD,GAAqB,SAACsD,EAAMC,EAAOC,GACvC,IAAMC,EAAwB,CAC5B,cACA,eACA,aACA,2BAEIC,GAAc,OAAIJ,GAAMK,MAAK,SAACC,EAAWC,GAC7C,IAAMC,EAAMF,EAAU,GAAGtI,KAAKmI,EAAsBF,EAAQ,IACtDQ,EAAMF,EAAW,GAAGvI,KAAKmI,EAAsBF,EAAQ,IAC7D,OAAOO,EAAMC,EAAM,EAAIA,EAAMD,GAAO,EAAI,KAK1C,OAHIN,IAAcQ,EAAAA,gBAAAA,MAChBN,EAAYO,UAEPP,EACJQ,MACCzF,EAAQY,OAASF,EAAO,GACxBV,EAAQY,OAASF,EAAO,GAAKV,EAAQY,OAEtC8E,SAAQ,SAACC,EAAKb,GACb,IAAMc,GAAa,OAAID,GAEvB,OADAA,EAAI,GAAGE,OAAiB,EAARf,EACTc,MAIPE,GAAoB,SAACC,GACzB,IAAMlE,EAAS,EAAH,KAAQ7B,GAAR,IAAiBW,OAAQ,WAC9BkB,EAAOkE,GACdzI,GACE0I,EAAAA,EAAAA,IAAc,EAAD,KAAMnE,GAAsB,SAAVkE,EAAmB,CAAExG,KAAM,IAAO,OAK/D0G,GAAiB,SAACF,EAAOG,GAC7BA,EAAOrD,OAAS,EACZvF,GACE0I,EAAAA,EAAAA,IAAc,EAAD,KAAMhG,GAAN,IAAeW,OAAQ,IAAvB,UAAgCoF,EAAQG,MAEvDJ,GAAkBC,IAclBI,GAAoB,CACxB,CACElH,MAAOlC,EAAKoB,cAAcC,EAAAA,EAAAA,MAAe+D,cACzCiE,aAAc,CACZzH,IAAK,cACLW,SAAU,SAAC+G,EAAQhH,GAAT,OACR/B,GAAS0I,EAAAA,EAAAA,IAAc,EAAD,KAAMhG,GAAN,IAAeT,KAAMF,OAC7CA,MAAOW,EAAQT,KACf+G,YAAavJ,EAAKoB,cAAcC,EAAAA,EAAAA,YAGpC,CACEa,MAAOoD,EAAAA,GAAAA,WAAAA,MACPlD,KAAMkD,EAAAA,GAAAA,WAAAA,KACNjD,GAAIiD,EAAAA,GAAAA,WAAAA,SACJhD,MAAO,YAAF,OAAcgD,EAAAA,GAAAA,WAAAA,UACnB+D,aAAc,CACZzH,IAAK,GAAF,OAAK0D,EAAAA,GAAAA,WAAAA,SAAL,WACH/C,SAAU,SAAC+G,EAAQH,GAAT,OACRD,GAAe5D,EAAAA,GAAAA,WAAAA,SAAuC6D,IACxD7G,MAAOW,EAAQuC,WACfgE,MAAOlE,EAAAA,GAAAA,WAAAA,SAGX,CACEpD,MAAOoD,EAAAA,GAAAA,OAAAA,MACPlD,KAAMkD,EAAAA,GAAAA,OAAAA,KACNjD,GAAIiD,EAAAA,GAAAA,OAAAA,SACJhD,MAAO,YAAF,OAAcgD,EAAAA,GAAAA,OAAAA,UACnB+D,aAAc,CACZzH,IAAK,GAAF,OAAK0D,EAAAA,GAAAA,OAAAA,SAAL,WACH/C,SAAU,SAAC+G,EAAQH,GAAT,OACRD,GAAe5D,EAAAA,GAAAA,OAAAA,SAAmC6D,IACpD7G,MAAOW,EAAQ4C,OACf2D,MAAOlE,EAAAA,GAAAA,OAAAA,SAGX,CACEpD,MAAOoD,EAAAA,GAAAA,WAAAA,MACPlD,KAAMkD,EAAAA,GAAAA,WAAAA,KACNjD,GAAIiD,EAAAA,GAAAA,WAAAA,SACJhD,MAAO,YAAF,OAAcgD,EAAAA,GAAAA,WAAAA,UACnB+D,aAAc,CACZzH,IAAK,GAAF,OAAK0D,EAAAA,GAAAA,WAAAA,SAAL,WACH/C,SAAU,SAAC+G,EAAQH,GAAT,OACRD,GAAe5D,EAAAA,GAAAA,WAAAA,SAAuC6D,IACxD7G,MAAOW,EAAQiD,WACfsD,MAAOlE,EAAAA,GAAAA,WAAAA,SAGX,CACEpD,MAAOoD,EAAAA,GAAAA,SAAAA,MACPlD,KAAMkD,EAAAA,GAAAA,SAAAA,KACNjD,GAAIiD,EAAAA,GAAAA,SAAAA,SACJhD,MAAO,YAAF,OAAcgD,EAAAA,GAAAA,SAAAA,UACnB+D,aAAc,CACZzH,IAAK,GAAF,OAAK0D,EAAAA,GAAAA,SAAAA,SAAL,WACH/C,SAAU,SAAC+G,EAAQH,GAAT,OACRD,GAAe5D,EAAAA,GAAAA,SAAAA,SAAqC6D,IACtD7G,MAAOW,EAAQwG,SACfD,MAAOlE,EAAAA,GAAAA,SAAAA,SAGX,CACEpD,MAAOoD,EAAAA,GAAAA,YAAAA,MACPlD,KAAMkD,EAAAA,GAAAA,YAAAA,KACNjD,GAAIiD,EAAAA,GAAAA,YAAAA,SACJhD,MAAO,SAAF,OAAWgD,EAAAA,GAAAA,YAAAA,UAChB+D,aAAc,CACZzH,IAAK,GAAF,OAAK0D,EAAAA,GAAAA,YAAAA,SAAL,WACH/C,SAAU,SAAC+G,EAAQhH,GAAT,OAjFaoH,EAiF0BpH,OAhFrD/B,GACE0I,EAAAA,EAAAA,IAAc,EAAD,KACRhG,GADQ,IAEXyG,YAAAA,EACA9F,OAAQ,GACY,YAAhB8F,GAA6B,CAAEC,UAAW,CAAC,aANzB,IAACD,GAkFvBpH,MAAO,GAAF,OAAKW,EAAQyG,aAClBF,MAAOlE,EAAAA,GAAAA,YAAAA,SAGX,CACEpD,MAAOoD,EAAAA,GAAAA,UAAAA,MACPlD,KAAMkD,EAAAA,GAAAA,UAAAA,KACNjD,GAAIiD,EAAAA,GAAAA,UAAAA,SACJhD,MAAO,YAAF,OAAcgD,EAAAA,GAAAA,UAAAA,UACnB+D,aAAc,CACZzH,IAAK,GAAF,OAAK0D,EAAAA,GAAAA,UAAAA,SAAL,WACH/C,SAAU,SAACG,EAAGyG,GAAJ,OACRD,GAAe5D,EAAAA,GAAAA,UAAAA,SAAsC6D,IACvD7G,MAAOW,EAAQ0G,UACfH,MAAOlE,EAAAA,GAAAA,UAAAA,UA8EPsE,GAAsB,CAC1BC,YAAa7J,EAAKoB,cAAcC,EAAAA,EAAAA,cAChC4B,SAVM2B,GAAe,EAAH,GAAQ3B,UACnB2B,GAAaH,iBACbG,GAAaF,qBACbE,GAAahB,cACbgB,GAAaf,MA7DD,SAACe,EAAckF,GAClC,IAAMC,EAAgBhF,OAAOC,QAAQJ,GACrC,OAAOmF,EAAcjE,OAAS,EAC1BiE,EAAcC,QAAO,SAACC,EAAKC,GACzB,GAAIJ,EAAiBI,EAAK,IAAK,CAC7B,IAAMT,EAAWK,EAAiBI,EAAK,IACjCC,EAAQC,MAAMC,QAAQH,EAAK,IAC7BA,EAAK,GAAG7D,KAAI,SAAC/D,GACX,IAAMgI,EAAwBb,EAASN,OAAOzD,MAC5C,SAACyD,GAAD,OAAYA,EAAO7G,QAAUiD,OAAOjD,MAEtC,OAAOgI,EACH,CACEC,KACED,EAAsB9H,MACtB8H,EAAsBpI,MACxBI,MAAAA,GAEF,CAAEiI,KAAMjI,EAAOA,MAAAA,MAErB,CACE,CACEiI,KAAMd,EAASN,OAAOzD,MACpB,SAACyD,GAAD,OAAYA,EAAO7G,QAAUiD,OAAO2E,EAAK,OACzChI,MACFI,MAAO4H,EAAK,KAGpB,wBACKD,GADL,CAEE,CACER,UAjCMe,EAiCef,EAAStI,MAjCbqJ,EAAO,GAAGC,cAAgBD,EAAOE,UAAU,IAkC5DP,MAAAA,EACAQ,SAAUlB,EAASkB,YAGlB,MAAgB,SAAZT,EAAK,GACd,kBACKD,IADL,OAEMC,EAAK,GAAGpE,OAAS,EACjB,CACE,CACE2D,SAAU,OACVU,MAAO,CAAC,CAAEI,KAAML,EAAK,GAAI5H,MAAO4H,EAAK,KACrCS,SAAUT,EAAK,KAGnB,KAGCD,EApDE,IAACO,IAsDX,IACH,GASGI,CAAahG,GAAcU,EAAAA,KAMlCuF,SAAU,SAACvB,EAAQwB,EAAeC,GAC5BA,EACFxK,GAAS0I,EAAAA,EAAAA,IAAc+B,EAAAA,KAEvBF,EAAczE,KAAI,SAAC6D,GACjB,IAAMe,GAAY,UACff,EAAKS,SAAWP,MAAMC,QAAQpH,EAAQiH,EAAKS,WACxC1H,EAAQiH,EAAKS,UAAU7F,QACrB,SAACxC,GAAD,OAAWiD,OAAOjD,KAAWiD,OAAO2E,EAAKC,MAAM,GAAG7H,UAEpD,IAEN2I,EAAUf,EAAKS,UAAU7E,OAAS,EAC9BvF,GAAS0I,EAAAA,EAAAA,IAAc,EAAD,KAAMhG,GAAYgI,KACxClC,GAAkBmB,EAAKS,eAY7BO,GAAO,mCAAG,WAAOC,GAAP,0EACRrL,EAAOkE,EAAcmH,GAAOrL,KADpB,SAIPA,EAAKqG,SAJE,gBAMV9B,GAAgBvE,GAChBqE,IAAmB,GAPT,kDAUFiH,EAAAA,EAAAA,GAAO,GAAD,OAAIC,EAAAA,GAAJ,mBAAuBvL,EAAKgB,QAA5B,MAVJ,QAWRwD,GAAO,CACLtD,QAAS,UACTC,SAAS,EACTC,aAAa,EACbC,MAAOnB,EAAKoB,cAAcC,EAAAA,EAAAA,0BAE5BmC,IAjBQ,kDAmBRc,GAAO,CACLtD,QAAS,SACTE,aAAa,EACbC,MAAOnB,EAAKoB,cAAcC,EAAAA,EAAAA,OAC1BC,YAAa,GAAF,eAvBL,0DA4BZgD,GAAO,CACLtD,QAAS,SACTE,aAAa,EACbC,MAAOrB,EAAKqG,SACRnG,EAAKoB,cAAcC,EAAAA,EAAAA,wBACnBrB,EAAKoB,cAAcC,EAAAA,EAAAA,yBACvBC,YAAa,GAAF,eAlCD,iEAAH,sDA8Db,OACE,yBAAKe,GAAG,mBACL6B,IACC,kBAAC,EAAD,CACErE,kBAAmBsE,GACnBvE,YAAasE,GACbpE,KAAMsE,GACNrE,QAASyD,IAGb,kBAAC8H,EAAA,EAAD,CACEC,WAAY,CACVC,UAAW1H,EAAagC,OACxBnC,KAAMV,EAAQW,OAASX,EAAQY,MAAQ,EACvC4H,QAASC,OAAOzI,EAAQY,OACxB8H,UAJU,SAIArC,EAAQ3F,GAChBpD,GACE0I,EAAAA,EAAAA,IAAc,EAAD,KACRhG,GADQ,IAEXW,OAAQX,EAAQY,OAASF,EAAO,QAItCiI,gBAZU,SAYMtC,EAAQmC,GACtBlL,GAAS0I,EAAAA,EAAAA,IAAc,EAAD,KAAMhG,GAAN,IAAeY,MAAO4H,EAAS7H,OAAQ,OAE/DiI,WAAW,GAEbC,aAAc,CAAEtC,MAAOJ,IACvBQ,oBAAqBA,MAErBvG,GAAmBC,IAAe,kBAACyI,EAAA,EAAD,OAClC3I,GAAYG,GAA6B,IAAhBE,EAAKqC,SAC9B,kBAACkG,EAAAA,KAAD,KACE,kBAACA,EAAAC,SAAD,KACE,kBAAC,KAAD,UAIH5I,GAAmBC,IAAeC,GAAaE,EAAKqC,OAAS,GAC9D,kBAAC,aAAD,KACE,kBAAC,EAAAoG,MAAD,CACE,aAAW,2BACXpK,OAAO,gBACPd,QAASmL,EAAAA,aAAAA,QACT7F,MAAO8F,EAAAA,GACPtE,KAAM9D,EACNqI,WAnHe,SAACC,EAAInB,EAAO3J,GACnC,IAAM+K,GAAe,OAAIvI,GACzBuI,EAAapB,GAAb,OAA2BoB,EAAapB,IAAxC,IAAgD3J,OAAAA,IAChDyC,EAAiBsI,IAiHTC,OAAQ,CACNzE,MAAO9E,EAAQwB,UACfuD,UAAW/E,EAAQyB,eAErB+H,OAxNK,SAACH,EAAIvE,EAAOC,GACzBzH,GACE0I,EAAAA,EAAAA,IAAc,EAAD,KAAMhG,GAAN,IAAewB,UAAWsD,EAAOrD,cAAesD,OAuNvD0E,eA5Ea,SAACC,EAAD,GAA2B,IAAfC,EAAe,EAAfA,SAC3B9M,EAAOkE,EAAc4I,GAAU9M,KACjCkE,EAAc4I,GAAU9M,KACxB,KACJ,OAAI8M,EAAW,GAAM,GAAM9M,EAIpBA,IAASA,EAAKqG,SACjB,CACE,CACEhF,MAAOnB,EAAKoB,cAAcC,EAAAA,EAAAA,aAC1BQ,QAAS,SAACyH,EAAQ6B,GAAT,OAAmBD,GAAQC,MAGxC,CACE,CACEhK,MAAOnB,EAAKoB,cAAcC,EAAAA,EAAAA,YAC1BQ,QAAS,SAACyH,EAAQ6B,GAAT,OAAmBD,GAAQC,MAbnC,OAyED,kBAAC,EAAA0B,YAAD,MACA,kBAAC,EAAAC,UAAD,OAEDrJ,EAAKqC,OAAS,GAA6B,IAAxBhC,EAAagC,QAC/B,kBAACkG,EAAAA,KAAD,CAAMlK,OAAQ,yBACZ,kBAACkK,EAAAC,SAAD,KACE,kBAAC,KAAD,SAMV,kBAACc,EAAAA,WAAD,CACEjL,OAAO,8BACP0J,UAAW1H,EAAagC,OACxBnC,KAAMV,EAAQW,OAASX,EAAQY,MAAQ,EACvC4H,QAASC,OAAOzI,EAAQY,OACxB8H,UAAW,SAACW,EAAI3I,GACdpD,GACE0I,EAAAA,EAAAA,IAAc,EAAD,KACRhG,GADQ,IAEXW,OAAQX,EAAQY,OAASF,EAAO,QAItCiI,gBAAiB,SAACU,EAAIb,GACpBlL,GAAS0I,EAAAA,EAAAA,IAAc,EAAD,KAAMhG,GAAN,IAAeY,MAAO4H,EAAS7H,OAAQ,OAE/DoJ,SAAQ,iCACRhM,QAASiM,EAAAA,kBAAAA,WAMjBlK,EAAcH,UAAY,CACxBI,MAAOH,IAAAA,MAAgB,CACrBO,QAASP,IAAAA,KAAAA,WACTQ,gBAAiBR,IAAAA,KAAAA,WACjBS,WAAYT,IAAAA,KAAAA,WACZU,UAAWV,IAAAA,KAAAA,WACXnC,KAAMmC,IAAAA,MACNW,QAASX,IAAAA,QE9jBb,QAN6B,WAC3B,IAAMG,GAAQkK,EAAAA,EAAAA,MAEd,OAAO,kBAACnK,EAAD,CAAeC,MAAOA","sources":["webpack:///./src/Components/Modals/DisableRule.js","webpack:///./src/Components/RecsListTable/RecsListTable.js","webpack:///./src/Components/Common/Tables.js","webpack:///./src/Components/RecsListTable/index.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\n\nimport {\n  Button,\n  Form,\n  FormGroup,\n  Modal,\n  TextInput,\n} from '@patternfly/react-core';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\n\nimport messages from '../../Messages';\nimport { useSetAckMutation } from '../../Services/Acks';\n\nconst DisableRule = ({ isModalOpen, handleModalToggle, rule, afterFn }) => {\n  const intl = useIntl();\n  const [justification, setJustificaton] = useState('');\n  const [setAck] = useSetAckMutation();\n  const dispatch = useDispatch();\n  const notification = (data) => dispatch(addNotification(data));\n\n  const disableRule = async () => {\n    const options = {\n      rule_id: rule.rule_id,\n      justification,\n    };\n    try {\n      await setAck(options).unwrap();\n      notification({\n        variant: 'success',\n        timeout: true,\n        dismissable: true,\n        title: intl.formatMessage(messages.recSuccessfullyDisabled),\n      });\n      setJustificaton('');\n      afterFn && afterFn();\n    } catch (error) {\n      notification({\n        variant: 'danger',\n        dismissable: true,\n        title: intl.formatMessage(messages.error),\n        description: `${error}`,\n      });\n    }\n    handleModalToggle(false);\n  };\n  return (\n    <Modal\n      variant=\"small\"\n      title={intl.formatMessage(messages.disableRule)}\n      isOpen={isModalOpen}\n      onClose={() => {\n        handleModalToggle();\n        setJustificaton('');\n      }}\n      actions={[\n        <Button\n          key=\"confirm\"\n          variant=\"primary\"\n          onClick={() => disableRule()}\n          ouiaId=\"confirm\"\n        >\n          {intl.formatMessage(messages.save)}\n        </Button>,\n        <Button\n          key=\"cancel\"\n          variant=\"link\"\n          onClick={() => {\n            handleModalToggle(false);\n            setJustificaton('');\n          }}\n          ouiaId=\"cancel\"\n        >\n          {intl.formatMessage(messages.cancel)}\n        </Button>,\n      ]}\n    >\n      {intl.formatMessage(messages.disableRuleBody)}\n      <Form>\n        <FormGroup fieldId=\"blank-form\" />\n        <FormGroup\n          label={intl.formatMessage(messages.justificationNote)}\n          fieldId=\"disable-rule-justification\"\n        >\n          <TextInput\n            type=\"text\"\n            id=\"disable-rule-justification\"\n            aria-describedby=\"disable-rule-justification\"\n            value={justification}\n            onChange={(text) => setJustificaton(text)}\n            onKeyDown={(e) =>\n              e.key === 'Enter' && (e.preventDefault(), disableRule())\n            }\n          />\n        </FormGroup>\n      </Form>\n    </Modal>\n  );\n};\n\nDisableRule.propTypes = {\n  isModalOpen: PropTypes.bool,\n  rule: PropTypes.object,\n  handleModalToggle: PropTypes.func,\n  afterFn: PropTypes.func,\n};\n\nDisableRule.defaultProps = {\n  isModalOpen: false,\n  rule: {},\n  handleModalToggle: () => undefined,\n  afterFn: () => undefined,\n};\n\nexport default DisableRule;\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport {\n  SortByDirection,\n  Table,\n  TableBody,\n  TableHeader,\n  TableVariant,\n} from '@patternfly/react-table';\nimport { Card, CardBody } from '@patternfly/react-core/dist/js/components/Card';\nimport {\n  Pagination,\n  PaginationVariant,\n} from '@patternfly/react-core/dist/js/components/Pagination';\nimport { Stack } from '@patternfly/react-core/dist/js/layouts/Stack';\nimport {\n  Tooltip,\n  TooltipPosition,\n} from '@patternfly/react-core/dist/js/components/Tooltip';\n\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { InsightsLabel } from '@redhat-cloud-services/frontend-components/InsightsLabel';\nimport PrimaryToolbar from '@redhat-cloud-services/frontend-components/PrimaryToolbar/PrimaryToolbar';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\n\nimport {\n  FILTER_CATEGORIES,\n  RECS_LIST_COLUMNS,\n  TOTAL_RISK_LABEL_LOWER,\n} from '../../AppConstants';\nimport messages from '../../Messages';\nimport {\n  RECS_LIST_INITIAL_STATE,\n  updateRecsListFilters as updateFilters,\n} from '../../Services/Filters';\nimport RuleLabels from '../RuleLabels/RuleLabels';\nimport { strong } from '../../Utilities/intlHelper';\nimport Loading from '../Loading/Loading';\nimport { ErrorState, NoMatchingRecs } from '../MessageState/EmptyStates';\nimport RuleDetails from '../Recommendation/RuleDetails';\nimport { passFilters } from '../Common/Tables';\nimport DisableRule from '../Modals/DisableRule';\nimport { Delete } from '../../Utilities/Api';\nimport { BASE_URL } from '../../Services/SmartProxy';\n\nconst RecsListTable = ({ query }) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const filters = useSelector(({ filters }) => filters.recsListState);\n  const { isError, isUninitialized, isFetching, isSuccess, data, refetch } =\n    query;\n  const recs = data?.recommendations || [];\n  const page = filters.offset / filters.limit + 1;\n  const [filteredRows, setFilteredRows] = useState([]);\n  const [displayedRows, setDisplayedRows] = useState([]);\n  const [disableRuleOpen, setDisableRuleOpen] = useState(false);\n  const [selectedRule, setSelectedRule] = useState({});\n  const notify = (data) => dispatch(addNotification(data));\n\n  useEffect(() => {\n    setDisplayedRows(\n      buildDisplayedRows(filteredRows, filters.sortIndex, filters.sortDirection)\n    );\n  }, [\n    filteredRows,\n    filters.limit,\n    filters.offset,\n    filters.sortIndex,\n    filters.sortDirection,\n  ]);\n\n  useEffect(() => {\n    setFilteredRows(buildFilteredRows(recs, filters));\n  }, [data, filters]);\n\n  // constructs array of rows (from the initial data) checking currently applied filters\n  const buildFilteredRows = (allRows, filters) => {\n    return allRows\n      .filter((rule) => passFilters(rule, filters))\n      .map((value, key) => [\n        {\n          isOpen: false,\n          rule: value,\n          cells: [\n            {\n              title: (\n                <span key={key}>\n                  <Link\n                    key={key}\n                    // https://github.com/RedHatInsights/ocp-advisor-frontend/issues/29\n                    to={`/recommendations/${\n                      process.env.NODE_ENV === 'development'\n                        ? value.rule_id.replaceAll('.', '%2E')\n                        : value.rule_id\n                    }`}\n                  >\n                    {' '}\n                    {value?.description || value?.rule_id}{' '}\n                  </Link>\n                  <RuleLabels rule={value} />\n                </span>\n              ),\n            },\n            {\n              title: value?.publish_date ? (\n                <DateFormat\n                  key={key}\n                  date={value.publish_date}\n                  variant=\"relative\"\n                />\n              ) : (\n                intl.formatMessage(messages.nA)\n              ),\n            },\n            {\n              title: (\n                <div key={key}>\n                  <Tooltip\n                    key={key}\n                    position={TooltipPosition.bottom}\n                    content={intl.formatMessage(\n                      messages.rulesDetailsTotalRiskBody,\n                      {\n                        risk:\n                          TOTAL_RISK_LABEL_LOWER[value.total_risk] ||\n                          intl.formatMessage(messages.undefined),\n                        strong: (str) => strong(str),\n                      }\n                    )}\n                  >\n                    {value?.total_risk ? (\n                      <InsightsLabel value={value.total_risk} />\n                    ) : (\n                      intl.formatMessage(messages.nA)\n                    )}\n                  </Tooltip>\n                </div>\n              ),\n            },\n            {\n              title: (\n                <div key={key}>{`${\n                  value?.impacted_clusters_count !== undefined\n                    ? value.impacted_clusters_count.toLocaleString()\n                    : intl.formatMessage(messages.nA)\n                }`}</div>\n              ),\n            },\n          ],\n        },\n        {\n          fullWidth: true,\n          cells: [\n            {\n              title: (\n                <section className=\"pf-m-light pf-l-page__main-section pf-c-page__main-section\">\n                  <Stack hasGutter>\n                    <RuleDetails\n                      rule={{\n                        ...value,\n                        impact: { impact: value.impact },\n                        // TODO: fix <Router> issue in the async component and then remove the line below\n                        impacted_clusters_count: undefined,\n                      }}\n                      isDetailsPage={false}\n                    />\n                  </Stack>\n                </section>\n              ),\n            },\n          ],\n        },\n      ]);\n  };\n\n  const buildDisplayedRows = (rows, index, direction) => {\n    const sortedRecommendations = [\n      'description',\n      'publish_date',\n      'total_risk',\n      'impacted_clusters_count',\n    ];\n    const sortingRows = [...rows].sort((firstItem, secondItem) => {\n      const fst = firstItem[0].rule[sortedRecommendations[index - 1]];\n      const snd = secondItem[0].rule[sortedRecommendations[index - 1]];\n      return fst > snd ? 1 : snd > fst ? -1 : 0;\n    });\n    if (direction === SortByDirection.desc) {\n      sortingRows.reverse();\n    }\n    return sortingRows\n      .slice(\n        filters.limit * (page - 1),\n        filters.limit * (page - 1) + filters.limit\n      )\n      .flatMap((row, index) => {\n        const updatedRow = [...row];\n        row[1].parent = index * 2;\n        return updatedRow;\n      });\n  };\n\n  const removeFilterParam = (param) => {\n    const filter = { ...filters, offset: 0 };\n    delete filter[param];\n    dispatch(\n      updateFilters({ ...filter, ...(param === 'text' ? { text: '' } : {}) })\n    );\n  };\n\n  // TODO: update URL when filters changed\n  const addFilterParam = (param, values) => {\n    values.length > 0\n      ? dispatch(\n          updateFilters({ ...filters, offset: 0, ...{ [param]: values } })\n        )\n      : removeFilterParam(param);\n  };\n\n  const toggleRulesDisabled = (rule_status) => {\n    dispatch(\n      updateFilters({\n        ...filters,\n        rule_status,\n        offset: 0,\n        ...(rule_status !== 'enabled' && { impacting: ['false'] }),\n      })\n    );\n  };\n\n  const filterConfigItems = [\n    {\n      label: intl.formatMessage(messages.name).toLowerCase(),\n      filterValues: {\n        key: 'text-filter',\n        onChange: (_event, value) =>\n          dispatch(updateFilters({ ...filters, text: value })),\n        value: filters.text,\n        placeholder: intl.formatMessage(messages.filterBy),\n      },\n    },\n    {\n      label: FILTER_CATEGORIES.total_risk.title,\n      type: FILTER_CATEGORIES.total_risk.type,\n      id: FILTER_CATEGORIES.total_risk.urlParam,\n      value: `checkbox-${FILTER_CATEGORIES.total_risk.urlParam}`,\n      filterValues: {\n        key: `${FILTER_CATEGORIES.total_risk.urlParam}-filter`,\n        onChange: (_event, values) =>\n          addFilterParam(FILTER_CATEGORIES.total_risk.urlParam, values),\n        value: filters.total_risk,\n        items: FILTER_CATEGORIES.total_risk.values,\n      },\n    },\n    {\n      label: FILTER_CATEGORIES.impact.title,\n      type: FILTER_CATEGORIES.impact.type,\n      id: FILTER_CATEGORIES.impact.urlParam,\n      value: `checkbox-${FILTER_CATEGORIES.impact.urlParam}`,\n      filterValues: {\n        key: `${FILTER_CATEGORIES.impact.urlParam}-filter`,\n        onChange: (_event, values) =>\n          addFilterParam(FILTER_CATEGORIES.impact.urlParam, values),\n        value: filters.impact,\n        items: FILTER_CATEGORIES.impact.values,\n      },\n    },\n    {\n      label: FILTER_CATEGORIES.likelihood.title,\n      type: FILTER_CATEGORIES.likelihood.type,\n      id: FILTER_CATEGORIES.likelihood.urlParam,\n      value: `checkbox-${FILTER_CATEGORIES.likelihood.urlParam}`,\n      filterValues: {\n        key: `${FILTER_CATEGORIES.likelihood.urlParam}-filter`,\n        onChange: (_event, values) =>\n          addFilterParam(FILTER_CATEGORIES.likelihood.urlParam, values),\n        value: filters.likelihood,\n        items: FILTER_CATEGORIES.likelihood.values,\n      },\n    },\n    {\n      label: FILTER_CATEGORIES.category.title,\n      type: FILTER_CATEGORIES.category.type,\n      id: FILTER_CATEGORIES.category.urlParam,\n      value: `checkbox-${FILTER_CATEGORIES.category.urlParam}`,\n      filterValues: {\n        key: `${FILTER_CATEGORIES.category.urlParam}-filter`,\n        onChange: (_event, values) =>\n          addFilterParam(FILTER_CATEGORIES.category.urlParam, values),\n        value: filters.category,\n        items: FILTER_CATEGORIES.category.values,\n      },\n    },\n    {\n      label: FILTER_CATEGORIES.rule_status.title,\n      type: FILTER_CATEGORIES.rule_status.type,\n      id: FILTER_CATEGORIES.rule_status.urlParam,\n      value: `radio-${FILTER_CATEGORIES.rule_status.urlParam}`,\n      filterValues: {\n        key: `${FILTER_CATEGORIES.rule_status.urlParam}-filter`,\n        onChange: (_event, value) => toggleRulesDisabled(value),\n        value: `${filters.rule_status}`,\n        items: FILTER_CATEGORIES.rule_status.values,\n      },\n    },\n    {\n      label: FILTER_CATEGORIES.impacting.title,\n      type: FILTER_CATEGORIES.impacting.type,\n      id: FILTER_CATEGORIES.impacting.urlParam,\n      value: `checkbox-${FILTER_CATEGORIES.impacting.urlParam}`,\n      filterValues: {\n        key: `${FILTER_CATEGORIES.impacting.urlParam}-filter`,\n        onChange: (e, values) =>\n          addFilterParam(FILTER_CATEGORIES.impacting.urlParam, values),\n        value: filters.impacting,\n        items: FILTER_CATEGORIES.impacting.values,\n      },\n    },\n  ];\n\n  const onSort = (_e, index, direction) => {\n    dispatch(\n      updateFilters({ ...filters, sortIndex: index, sortDirection: direction })\n    );\n  };\n\n  const capitalize = (string) => string[0].toUpperCase() + string.substring(1);\n\n  const pruneFilters = (localFilters, filterCategories) => {\n    const prunedFilters = Object.entries(localFilters);\n    return prunedFilters.length > 0\n      ? prunedFilters.reduce((arr, item) => {\n          if (filterCategories[item[0]]) {\n            const category = filterCategories[item[0]];\n            const chips = Array.isArray(item[1])\n              ? item[1].map((value) => {\n                  const selectedCategoryValue = category.values.find(\n                    (values) => values.value === String(value)\n                  );\n                  return selectedCategoryValue\n                    ? {\n                        name:\n                          selectedCategoryValue.text ||\n                          selectedCategoryValue.label,\n                        value,\n                      }\n                    : { name: value, value };\n                })\n              : [\n                  {\n                    name: category.values.find(\n                      (values) => values.value === String(item[1])\n                    ).label,\n                    value: item[1],\n                  },\n                ];\n            return [\n              ...arr,\n              {\n                category: capitalize(category.title),\n                chips,\n                urlParam: category.urlParam,\n              },\n            ];\n          } else if (item[0] === 'text') {\n            return [\n              ...arr,\n              ...(item[1].length > 0\n                ? [\n                    {\n                      category: 'Name',\n                      chips: [{ name: item[1], value: item[1] }],\n                      urlParam: item[0],\n                    },\n                  ]\n                : []),\n            ];\n          } else {\n            return arr;\n          }\n        }, [])\n      : [];\n  };\n\n  const buildFilterChips = () => {\n    const localFilters = { ...filters };\n    delete localFilters.sortIndex;\n    delete localFilters.sortDirection;\n    delete localFilters.offset;\n    delete localFilters.limit;\n    return pruneFilters(localFilters, FILTER_CATEGORIES);\n  };\n\n  const activeFiltersConfig = {\n    deleteTitle: intl.formatMessage(messages.resetFilters),\n    filters: buildFilterChips(),\n    onDelete: (_event, itemsToRemove, isAll) => {\n      if (isAll) {\n        dispatch(updateFilters(RECS_LIST_INITIAL_STATE));\n      } else {\n        itemsToRemove.map((item) => {\n          const newFilter = {\n            [item.urlParam]: Array.isArray(filters[item.urlParam])\n              ? filters[item.urlParam].filter(\n                  (value) => String(value) !== String(item.chips[0].value)\n                )\n              : '',\n          };\n          newFilter[item.urlParam].length > 0\n            ? dispatch(updateFilters({ ...filters, ...newFilter }))\n            : removeFilterParam(item.urlParam);\n        });\n      }\n    },\n  };\n\n  const handleOnCollapse = (_e, rowId, isOpen) => {\n    const collapseRows = [...displayedRows];\n    collapseRows[rowId] = { ...collapseRows[rowId], isOpen };\n    setDisplayedRows(collapseRows);\n  };\n\n  const ackRule = async (rowId) => {\n    const rule = displayedRows[rowId].rule;\n\n    try {\n      if (!rule.disabled) {\n        // show disable rule modal\n        setSelectedRule(rule);\n        setDisableRuleOpen(true);\n      } else {\n        try {\n          await Delete(`${BASE_URL}/v2/ack/${rule.rule_id}/`);\n          notify({\n            variant: 'success',\n            timeout: true,\n            dismissable: true,\n            title: intl.formatMessage(messages.recSuccessfullyEnabled),\n          });\n          refetch();\n        } catch (error) {\n          notify({\n            variant: 'danger',\n            dismissable: true,\n            title: intl.formatMessage(messages.error),\n            description: `${error}`,\n          });\n        }\n      }\n    } catch (error) {\n      notify({\n        variant: 'danger',\n        dismissable: true,\n        title: rule.disabled\n          ? intl.formatMessage(messages.rulesTableErrorEnabled)\n          : intl.formatMessage(messages.rulesTableErrorDisabled),\n        description: `${error}`,\n      });\n    }\n  };\n\n  const actionResolver = (rowData, { rowIndex }) => {\n    const rule = displayedRows[rowIndex].rule\n      ? displayedRows[rowIndex].rule\n      : null;\n    if (rowIndex % 2 !== 0 || !rule) {\n      return null;\n    }\n\n    return rule && !rule.disabled\n      ? [\n          {\n            title: intl.formatMessage(messages.disableRule),\n            onClick: (_event, rowId) => ackRule(rowId),\n          },\n        ]\n      : [\n          {\n            title: intl.formatMessage(messages.enableRule),\n            onClick: (_event, rowId) => ackRule(rowId),\n          },\n        ];\n  };\n\n  return (\n    <div id=\"recs-list-table\">\n      {disableRuleOpen && (\n        <DisableRule\n          handleModalToggle={setDisableRuleOpen}\n          isModalOpen={disableRuleOpen}\n          rule={selectedRule}\n          afterFn={refetch}\n        />\n      )}\n      <PrimaryToolbar\n        pagination={{\n          itemCount: filteredRows.length,\n          page: filters.offset / filters.limit + 1,\n          perPage: Number(filters.limit),\n          onSetPage(_event, page) {\n            dispatch(\n              updateFilters({\n                ...filters,\n                offset: filters.limit * (page - 1),\n              })\n            );\n          },\n          onPerPageSelect(_event, perPage) {\n            dispatch(updateFilters({ ...filters, limit: perPage, offset: 0 }));\n          },\n          isCompact: true,\n        }}\n        filterConfig={{ items: filterConfigItems }}\n        activeFiltersConfig={activeFiltersConfig}\n      />\n      {(isUninitialized || isFetching) && <Loading />}\n      {(isError || (isSuccess && recs.length === 0)) && (\n        <Card>\n          <CardBody>\n            <ErrorState />\n          </CardBody>\n        </Card>\n      )}\n      {!(isUninitialized || isFetching) && isSuccess && recs.length > 0 && (\n        <React.Fragment>\n          <Table\n            aria-label=\"Table of recommendations\"\n            ouiaId=\"recsListTable\"\n            variant={TableVariant.compact}\n            cells={RECS_LIST_COLUMNS}\n            rows={displayedRows}\n            onCollapse={handleOnCollapse}\n            sortBy={{\n              index: filters.sortIndex,\n              direction: filters.sortDirection,\n            }}\n            onSort={onSort}\n            actionResolver={actionResolver}\n          >\n            <TableHeader />\n            <TableBody />\n          </Table>\n          {recs.length > 0 && filteredRows.length === 0 && (\n            <Card ouiaId={'empty-recommendations'}>\n              <CardBody>\n                <NoMatchingRecs />\n              </CardBody>\n            </Card>\n          )}\n        </React.Fragment>\n      )}\n      <Pagination\n        ouiaId=\"recs-list-pagination-bottom\"\n        itemCount={filteredRows.length}\n        page={filters.offset / filters.limit + 1}\n        perPage={Number(filters.limit)}\n        onSetPage={(_e, page) => {\n          dispatch(\n            updateFilters({\n              ...filters,\n              offset: filters.limit * (page - 1),\n            })\n          );\n        }}\n        onPerPageSelect={(_e, perPage) => {\n          dispatch(updateFilters({ ...filters, limit: perPage, offset: 0 }));\n        }}\n        widgetId={`pagination-options-menu-bottom`}\n        variant={PaginationVariant.bottom}\n      />\n    </div>\n  );\n};\n\nRecsListTable.propTypes = {\n  query: PropTypes.shape({\n    isError: PropTypes.bool.isRequired,\n    isUninitialized: PropTypes.bool.isRequired,\n    isFetching: PropTypes.bool.isRequired,\n    isSuccess: PropTypes.bool.isRequired,\n    data: PropTypes.array,\n    refetch: PropTypes.func,\n  }),\n};\n\nexport { RecsListTable };\n","import { FILTER_CATEGORIES, RULE_CATEGORIES } from '../../AppConstants';\n\nconst passFilters = (rule, filters) =>\n  Object.entries(filters).every(([filterKey, filterValue]) => {\n    switch (filterKey) {\n      case 'text':\n        return rule.description\n          .toLowerCase()\n          .includes(filterValue.toLowerCase());\n      case FILTER_CATEGORIES.total_risk.urlParam:\n        return filterValue.includes(String(rule.total_risk));\n      case FILTER_CATEGORIES.category.urlParam:\n        return rule.tags.find((c) =>\n          filterValue.includes(String(RULE_CATEGORIES[c]))\n        );\n      case FILTER_CATEGORIES.impact.urlParam:\n        return filterValue.includes(String(rule.impact));\n      case FILTER_CATEGORIES.impacting.urlParam:\n        return filterValue.length > 0\n          ? filterValue.some((v) => {\n              if (v === 'true') {\n                return rule.impacted_clusters_count > 0;\n              }\n              if (v === 'false') {\n                return rule.impacted_clusters_count === 0;\n              }\n            })\n          : true;\n      case FILTER_CATEGORIES.likelihood.urlParam:\n        return filterValue.includes(String(rule.likelihood));\n      case FILTER_CATEGORIES.rule_status.urlParam:\n        return (\n          filterValue === 'all' ||\n          (filterValue === 'disabled' && rule.disabled) ||\n          (filterValue === 'enabled' && !rule.disabled)\n        );\n      default:\n        return true;\n    }\n  });\n\nexport { passFilters };\n","import React from 'react';\n\nimport { RecsListTable } from './RecsListTable';\nimport { useGetRecsQuery } from '../../Services/SmartProxy';\n\nconst RecsListTableWrapper = () => {\n  const query = useGetRecsQuery();\n\n  return <RecsListTable query={query} />;\n};\n\nexport default RecsListTableWrapper;\n"],"names":["DisableRule","isModalOpen","handleModalToggle","rule","afterFn","intl","useIntl","useState","justification","setJustificaton","useSetAckMutation","setAck","dispatch","useDispatch","notification","data","addNotification","disableRule","options","rule_id","unwrap","variant","timeout","dismissable","title","formatMessage","messages","description","Modal","isOpen","onClose","actions","Button","key","onClick","ouiaId","Form","FormGroup","fieldId","label","TextInput","type","id","value","onChange","text","onKeyDown","e","preventDefault","propTypes","PropTypes","defaultProps","RecsListTable","query","filters","useSelector","recsListState","isError","isUninitialized","isFetching","isSuccess","refetch","recs","recommendations","page","offset","limit","filteredRows","setFilteredRows","displayedRows","setDisplayedRows","disableRuleOpen","setDisableRuleOpen","selectedRule","setSelectedRule","notify","useEffect","buildDisplayedRows","sortIndex","sortDirection","buildFilteredRows","localFilters","allRows","filter","Object","entries","every","filterKey","filterValue","toLowerCase","includes","FILTER_CATEGORIES","String","total_risk","tags","find","c","RULE_CATEGORIES","impact","length","some","v","impacted_clusters_count","likelihood","disabled","passFilters","map","cells","Link","to","RuleLabels","publish_date","DateFormat","date","Tooltip","position","TooltipPosition","content","risk","TOTAL_RISK_LABEL_LOWER","strong","str","InsightsLabel","undefined","toLocaleString","fullWidth","className","Stack","hasGutter","RuleDetails","isDetailsPage","rows","index","direction","sortedRecommendations","sortingRows","sort","firstItem","secondItem","fst","snd","SortByDirection","reverse","slice","flatMap","row","updatedRow","parent","removeFilterParam","param","updateFilters","addFilterParam","values","filterConfigItems","filterValues","_event","placeholder","items","category","rule_status","impacting","activeFiltersConfig","deleteTitle","filterCategories","prunedFilters","reduce","arr","item","chips","Array","isArray","selectedCategoryValue","name","string","toUpperCase","substring","urlParam","pruneFilters","onDelete","itemsToRemove","isAll","RECS_LIST_INITIAL_STATE","newFilter","ackRule","rowId","Delete","BASE_URL","PrimaryToolbar","pagination","itemCount","perPage","Number","onSetPage","onPerPageSelect","isCompact","filterConfig","Loading","Card","CardBody","Table","TableVariant","RECS_LIST_COLUMNS","onCollapse","_e","collapseRows","sortBy","onSort","actionResolver","rowData","rowIndex","TableHeader","TableBody","Pagination","widgetId","PaginationVariant","useGetRecsQuery"],"sourceRoot":""}