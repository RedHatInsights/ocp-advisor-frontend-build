{"version":3,"sources":["webpack:///./src/Routes.js","webpack:///./src/App.js","webpack:///./src/Services/AccountManagementService.js","webpack:///./src/Services/SmartProxy.js","webpack:///./src/Store/index.js"],"names":["paths","title","path","component","lazy","Routes","Suspense","fallback","Bullseye","Spinner","Switch","map","Route","key","EmptyState","EmptyStateBody","InvalidObject","history","useHistory","useEffect","getRegistry","register","notifications","notificationsReducer","insights","chrome","init","identifyApp","unregister","on","event","push","navId","className","amsApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","prepareHeaders","headers","auth","getUser","getToken","token","set","endpoints","builder","getCurrentAccount","query","getClusterDisplayNameById","clusterId","transformResponse","response","items","display_name","useGetClusterDisplayNameByIdQuery","smartProxyApi","getClusterById","id","useGetClusterByIdQuery","useLazyGetClusterByIdQuery","useLogger","configureStore","reducer","middleware","getDefaultMiddleware","concat","logger"],"mappings":"4jDAeMA,EAAQ,CACZ,CACEC,MAAO,WACPC,KAAM,uBACNC,WARYC,WAAK,kBACnB,8EAmBWC,EAAS,kBACpB,kBAAC,EAAAC,SAAD,CACEC,SACE,kBAAC,EAAAC,SAAD,KACE,kBAAC,EAAAC,QAAD,QAIJ,kBAAC,EAAAC,OAAD,KACGV,EAAMW,KAAI,SAACT,GAAD,OACT,kBAAC,EAAAU,MAAD,CAAOC,IAAKX,EAAKD,MAAOC,KAAMA,EAAKA,KAAMC,UAAWD,EAAKC,eAG3D,kBAAC,EAAAS,MAAD,CACEV,KAAK,IACLC,UAAW,kBACT,kBAAC,EAAAW,WAAD,KACE,kBAAC,EAAAC,eAAD,KACE,kBAACC,EAAA,EAAD,cCZd,QA1BY,WACV,IAAMC,GAAUC,kBAehB,OAbAC,gBAAU,YACSC,UACRC,SAAS,CAAEC,cAAeC,OACnCC,SAASC,OAAOC,OAChBF,SAASC,OAAOE,YAAY,eAC5B,IAAMC,EAAaJ,SAASC,OAAOI,GAAG,kBAAkB,SAACC,GAAD,OACtDb,EAAQc,KAAR,WAAiBD,EAAME,WAEzB,OAAO,WACLJ,OAED,IAGD,kBAAC,aAAD,KACE,kBAAC,KAAD,MACA,yBAAKK,UAAU,eACb,kBAAC5B,EAAD,U,uDCvBU,E,qDAJL6B,GAASC,QAAU,CAC9BC,YAAa,MACbC,WAAWC,QAAe,CACxBC,QALa,iDAMbC,gBAAc,oBAAE,WAAOC,GAAP,uFACRjB,SAASC,OAAOiB,KAAKC,UADb,uBAEMnB,SAASC,OAAOiB,KAAKE,WAF3B,cAERC,EAFQ,SAMZJ,EAAQK,IAAI,gBAAZ,iBAAuCD,IAN3B,kBAQPJ,GARO,2CAAF,+CAWhBM,UAAW,SAACC,GAAD,MAAc,CACvBC,kBAAmBD,EAAQE,MAAM,CAC/BA,MAAO,sCAETC,0BAA2BH,EAAQE,MAAM,CACvCA,MAAO,SAACE,GAAD,yEACuDA,EADvD,0BAEPC,kBAAmB,SAACC,GAAD,eAAcA,SAAd,UAAcA,EAAUC,aAAxB,iBAAc,EAAkB,UAAhC,aAAc,EAAsBC,oBAM9CC,EAAsCvB,EAAtCuB,mC,2FC5BFC,GAAgBvB,QAAU,CACrCC,YAAa,aACbC,WAAWC,QAAe,CACxBC,QALa,wCAOfQ,UAAW,SAACC,GAAD,MAAc,CACvBW,eAAgBX,EAAQE,MAAM,CAC5BA,MAAO,SAACU,GAAD,yBAAoBA,EAApB,kBAOXC,EAEEH,EAFFG,uBACAC,EACEJ,EADFI,4B,+GCKF,QAlBiB,SAACC,GAAD,aACfC,QAAe,CACbC,SAAO,eACJP,iBAA4BA,eADxB,SAEJxB,gBAAqBA,aAFjB,GAIPgC,WAAY,SAACC,GACX,IAAMD,EAAaC,IAAuBC,OACxCV,gBACAxB,gBAKF,OAHI6B,GACFG,EAAWE,OAAOC,KAEbH","file":"js/102.0f0da33e3cb0d57fa180.js","sourcesContent":["import { Route, Switch } from 'react-router-dom';\nimport React, { Suspense, lazy } from 'react';\nimport {\n  Bullseye,\n  EmptyState,\n  EmptyStateBody,\n  Spinner,\n} from '@patternfly/react-core';\n\nimport InvalidObject from '@redhat-cloud-services/frontend-components/InvalidObject/InvalidObject';\n\nconst Cluster = lazy(() =>\n  import(/* webpackChunkName: \"ClusterDetails\" */ './Components/Cluster')\n);\n\nconst paths = [\n  {\n    title: 'Clusters',\n    path: '/clusters/:clusterId',\n    component: Cluster,\n  },\n];\n\n/**\n * the Switch component changes routes depending on the path.\n *\n * Route properties:\n *      exact - path must match exactly,\n *      path - https://prod.foo.redhat.com:1337/insights/advisor/rules\n *      component - component to be rendered when a route has been chosen.\n */\nexport const Routes = () => (\n  <Suspense\n    fallback={\n      <Bullseye>\n        <Spinner />\n      </Bullseye>\n    }\n  >\n    <Switch>\n      {paths.map((path) => (\n        <Route key={path.title} path={path.path} component={path.component} />\n      ))}\n      {/* Finally, catch all unmatched routes */}\n      <Route\n        path=\"*\"\n        component={() => (\n          <EmptyState>\n            <EmptyStateBody>\n              <InvalidObject />\n            </EmptyStateBody>\n          </EmptyState>\n        )}\n      />\n    </Switch>\n  </Suspense>\n);\n","import './App.scss';\n\nimport React, { useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport NotificationsPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry/Registry';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nimport { Routes } from './Routes';\n\nconst App = () => {\n  const history = useHistory();\n\n  useEffect(() => {\n    const registry = getRegistry();\n    registry.register({ notifications: notificationsReducer });\n    insights.chrome.init();\n    insights.chrome.identifyApp('ocp-advisor');\n    const unregister = insights.chrome.on('APP_NAVIGATION', (event) =>\n      history.push(`/${event.navId}`)\n    );\n    return () => {\n      unregister();\n    };\n  }, []);\n\n  return (\n    <React.Fragment>\n      <NotificationsPortal />\n      <div className=\"ocp-advisor\">\n        <Routes />\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\n\nconst BASE_URL = 'https://api.openshift.com/api/accounts_mgmt/v1';\n\nexport const amsApi = createApi({\n  reducerPath: 'ams',\n  baseQuery: fetchBaseQuery({\n    baseUrl: BASE_URL,\n    prepareHeaders: async (headers) => {\n      await insights.chrome.auth.getUser();\n      const token = await insights.chrome.auth.getToken();\n      if (token) {\n        /* AMS API accepts only Bearer token acquired from the production SSO.\n         If you in non-prod env, fill in your prod token instead the `token` */\n        headers.set('Authorization', `Bearer ${token}`);\n      }\n      return headers;\n    },\n  }),\n  endpoints: (builder) => ({\n    getCurrentAccount: builder.query({\n      query: () => `current_account`,\n    }),\n    getClusterDisplayNameById: builder.query({\n      query: (clusterId) =>\n        `subscriptions?page=1&size=-1&search=external_cluster_id='${clusterId}'&fields=display_name`,\n      transformResponse: (response) => response?.items?.[0]?.display_name,\n    }),\n  }),\n});\n\n// Export hooks for usage in functional components\nexport const { useGetClusterDisplayNameByIdQuery } = amsApi;\n","import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\n\nconst BASE_URL = '/api/insights-results-aggregator/v1';\n\nexport const smartProxyApi = createApi({\n  reducerPath: 'smartProxy',\n  baseQuery: fetchBaseQuery({\n    baseUrl: BASE_URL,\n  }),\n  endpoints: (builder) => ({\n    getClusterById: builder.query({\n      query: (id) => `clusters/${id}/report`,\n    }),\n  }),\n});\n\n// Export hooks for usage in functional components\nexport const {\n  useGetClusterByIdQuery,\n  useLazyGetClusterByIdQuery,\n} = smartProxyApi;\n","import { configureStore } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\n\nimport { amsApi } from '../Services/AccountManagementService';\nimport { smartProxyApi } from '../Services/SmartProxy';\n\nconst getStore = (useLogger) =>\n  configureStore({\n    reducer: {\n      [smartProxyApi.reducerPath]: smartProxyApi.reducer,\n      [amsApi.reducerPath]: amsApi.reducer,\n    },\n    middleware: (getDefaultMiddleware) => {\n      const middleware = getDefaultMiddleware().concat(\n        smartProxyApi.middleware,\n        amsApi.middleware\n      );\n      if (useLogger) {\n        middleware.concat(logger);\n      }\n      return middleware;\n    },\n  });\n\nexport default getStore;\n"],"sourceRoot":""}