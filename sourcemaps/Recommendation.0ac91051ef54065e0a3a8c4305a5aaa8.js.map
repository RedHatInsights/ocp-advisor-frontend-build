{"version":3,"file":"js/Recommendation.898e72b0ade56dc7a49b.js","mappings":"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","sources":["webpack:///./src/Components/Breadcrumbs/index.js","webpack:///./src/Components/Labels/RuleLabels.js","webpack:///./src/Components/Loading/Loading.js","webpack:///./src/Components/Modals/DisableRule.js","webpack:///./src/Components/AffectedClustersTable/AffectedClustersTable.js","webpack:///./src/Components/Modals/ViewHostAcks.js","webpack:///./src/Components/Recommendation/Recommendation.js","webpack:///./src/Components/Recommendation/index.js","webpack:///./src/Utilities/Loaders.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { Link, useLocation } from 'react-router-dom';\n\nimport { Breadcrumb, BreadcrumbItem } from '@patternfly/react-core';\n\nimport messages from '../../Messages';\n\nconst Breadcrumbs = ({ current, workloads }) => {\n  const intl = useIntl();\n  const location = useLocation();\n  const splitUrl = location.pathname.split('/');\n\n  return (\n    <div>\n      <Breadcrumb ouiaId=\"detail\" data-testid=\"breadcrumb-item\">\n        <BreadcrumbItem className=\"breadcrumb-item\">\n          <Link to={workloads ? `../..` : `..`} relative=\"path\">\n            {`${intl.formatMessage(messages.insightsHeader)} ${splitUrl[4]}`}\n          </Link>\n        </BreadcrumbItem>\n        <BreadcrumbItem className=\"breadcrumb-item\" isActive>\n          {current}\n        </BreadcrumbItem>\n      </Breadcrumb>\n    </div>\n  );\n};\n\nBreadcrumbs.propTypes = {\n  current: PropTypes.string,\n  workloads: PropTypes.boolean,\n};\n\nexport default Breadcrumbs;\n","import { TooltipPosition } from '@patternfly/react-core/dist/js/components/Tooltip/Tooltip';\nimport { Tooltip, Label } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { useIntl } from 'react-intl';\nimport messages from '../../Messages';\n\nconst RuleLabels = ({ rule }) => {\n  const intl = useIntl();\n  return (\n    <React.Fragment>\n      {rule.disabled && (\n        <Tooltip\n          content={intl.formatMessage(messages.ruleIsDisabledTooltip)}\n          position={TooltipPosition.right}\n        >\n          <Label color=\"gray\" isCompact>\n            {intl.formatMessage(messages.disabled)}\n          </Label>\n        </Tooltip>\n      )}\n    </React.Fragment>\n  );\n};\n\nRuleLabels.propTypes = {\n  rule: PropTypes.object,\n};\n\nexport default RuleLabels;\n","import React from 'react';\nimport { Card, CardBody } from '@patternfly/react-core';\nimport { List } from 'react-content-loader';\n\nconst Loading = () => (\n  <Card ouiaId=\"loading-skeleton\">\n    <CardBody>\n      <List />\n    </CardBody>\n  </Card>\n);\n\nexport default Loading;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\n\nimport {\n  Button,\n  Checkbox,\n  Form,\n  FormGroup,\n  Modal,\n  TextInput,\n} from '@patternfly/react-core';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\n\nimport messages from '../../Messages';\nimport { disableRuleForCluster, useSetAckMutation } from '../../Services/Acks';\n\nconst DisableRule = ({\n  isModalOpen,\n  handleModalToggle,\n  rule,\n  afterFn,\n  host,\n  hosts,\n}) => {\n  const intl = useIntl();\n  const [justification, setJustificaton] = useState('');\n  const [singleHost, setSingleHost] = useState(!!host);\n  const [multipleHosts, setMultipleHosts] = useState(hosts.length > 0);\n  const [setAck] = useSetAckMutation();\n  const dispatch = useDispatch();\n  const notify = (data) => dispatch(addNotification(data));\n\n  const bulkHostActions = async () => {\n    // disable for a group of hosts (clusters)\n    try {\n      const requests = hosts.map((h) =>\n        disableRuleForCluster({\n          uuid: h.id,\n          recId: rule.rule_id,\n          justification,\n        })\n      );\n      await Promise.all(requests);\n      notify({\n        variant: 'success',\n        dismissable: true,\n        timeout: true,\n        title: intl.formatMessage(messages.recSuccessfullyDisabledForCluster),\n      });\n    } catch (error) {\n      notify({\n        variant: 'danger',\n        dismissable: true,\n        title: intl.formatMessage(messages.error),\n        description: `${error}`,\n      });\n    }\n  };\n\n  const disableRule = async () => {\n    try {\n      if (singleHost) {\n        // disable the rec for this single cluster\n        await disableRuleForCluster({\n          uuid: host,\n          recId: rule.rule_id,\n          justification,\n        });\n        notify({\n          variant: 'success',\n          timeout: true,\n          dismissable: true,\n          title: intl.formatMessage(messages.recSuccessfullyDisabledForCluster),\n        });\n      } else if (multipleHosts) {\n        bulkHostActions();\n      } else {\n        // disable the whole rec\n        await setAck({\n          rule_id: rule.rule_id,\n          justification,\n        }).unwrap();\n        notify({\n          variant: 'success',\n          timeout: true,\n          dismissable: true,\n          title: intl.formatMessage(messages.recSuccessfullyDisabled),\n        });\n      }\n      setJustificaton('');\n      afterFn && afterFn();\n    } catch (error) {\n      notify({\n        variant: 'danger',\n        dismissable: true,\n        title: intl.formatMessage(messages.error),\n        description: `${error}`,\n      });\n    }\n\n    handleModalToggle(false);\n  };\n\n  return (\n    <Modal\n      variant=\"small\"\n      title={intl.formatMessage(messages.disableRule)}\n      isOpen={isModalOpen}\n      onClose={() => {\n        handleModalToggle();\n        setJustificaton('');\n      }}\n      actions={[\n        <Button\n          key=\"confirm\"\n          variant=\"primary\"\n          onClick={() => disableRule()}\n          ouiaId=\"confirm\"\n        >\n          {intl.formatMessage(messages.save)}\n        </Button>,\n        <Button\n          key=\"cancel\"\n          variant=\"link\"\n          onClick={() => {\n            handleModalToggle(false);\n            setJustificaton('');\n          }}\n          ouiaId=\"cancel\"\n        >\n          {intl.formatMessage(messages.cancel)}\n        </Button>,\n      ]}\n      ouiaId=\"recommendation-disable\"\n    >\n      {intl.formatMessage(messages.disableRuleBody)}\n      <Form>\n        <FormGroup fieldId=\"blank-form\" />\n        {(host || hosts.length > 0) && (\n          <FormGroup fieldId=\"disable-rule-one-system\">\n            <Checkbox\n              isChecked={singleHost || multipleHosts}\n              onChange={() => {\n                host\n                  ? setSingleHost(!singleHost)\n                  : setMultipleHosts(!multipleHosts);\n              }}\n              label={\n                host\n                  ? intl.formatMessage(messages.disableRuleSingleCluster)\n                  : intl.formatMessage(messages.disableRuleForClusters)\n              }\n              id=\"disable-rule-one-system\"\n              name=\"disable-rule-one-system\"\n              ouiaId=\"disable-recommendation-one-cluster\"\n            />\n          </FormGroup>\n        )}\n        <FormGroup\n          label={intl.formatMessage(messages.justificationNote)}\n          fieldId=\"disable-rule-justification\"\n        >\n          <TextInput\n            type=\"text\"\n            id=\"disable-rule-justification\"\n            aria-describedby=\"disable-rule-justification\"\n            value={justification}\n            onChange={(_event, text) => setJustificaton(text)}\n            onKeyDown={(e) =>\n              e.key === 'Enter' && (e.preventDefault(), disableRule())\n            }\n          />\n        </FormGroup>\n      </Form>\n    </Modal>\n  );\n};\n\nDisableRule.propTypes = {\n  isModalOpen: PropTypes.bool,\n  rule: PropTypes.object,\n  handleModalToggle: PropTypes.func,\n  afterFn: PropTypes.func,\n  host: PropTypes.object,\n  hosts: PropTypes.array,\n};\n\nDisableRule.defaultProps = {\n  isModalOpen: false,\n  rule: {},\n  handleModalToggle: () => undefined,\n  afterFn: () => undefined,\n  host: undefined,\n  hosts: [],\n};\n\nexport default DisableRule;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { valid } from 'semver';\nimport uniqBy from 'lodash/uniqBy';\n\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter/conditionalFilterConstants';\nimport PrimaryToolbar from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { Tooltip, Pagination } from '@patternfly/react-core';\nimport { PaginationVariant } from '@patternfly/react-core/dist/js/components/Pagination/Pagination';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n} from '@patternfly/react-table/deprecated';\n\nimport {\n  ErrorState,\n  NoAffectedClusters,\n  NoMatchingClusters,\n} from '../MessageState/EmptyStates';\nimport {\n  AFFECTED_CLUSTERS_COLUMNS,\n  AFFECTED_CLUSTERS_IMPACTED_CELL,\n  AFFECTED_CLUSTERS_LAST_SEEN_CELL,\n  AFFECTED_CLUSTERS_NAME_CELL,\n  AFFECTED_CLUSTERS_VERSION_CELL,\n  FILTER_CATEGORIES,\n} from '../../AppConstants';\nimport Loading from '../Loading/Loading';\nimport {\n  AFFECTED_CLUSTERS_INITIAL_STATE,\n  resetFilters,\n  updateAffectedClustersFilters,\n} from '../../Services/Filters';\nimport messages from '../../Messages';\nimport DisableRule from '../Modals/DisableRule';\nimport {\n  buildFilterChips,\n  compareSemVer,\n  removeFilterParam as _removeFilterParam,\n  addFilterParam as _addFilterParam,\n} from '../Common/Tables';\nimport { BASE_PATH } from '../../Routes';\n\nconst AffectedClustersTable = ({ query, rule, afterDisableFn }) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n\n  const [filteredRows, setFilteredRows] = useState([]);\n  const [displayedRows, setDisplayedRows] = useState([]);\n  const [disableRuleModalOpen, setDisableRuleModalOpen] = useState(false);\n  const [selected, setSelected] = useState([]);\n  const [host, setHost] = useState(undefined);\n\n  const {\n    isError,\n    isUninitialized,\n    isFetching,\n    isSuccess,\n    /* the response contains two lists: `disabled` has clusters\n      for which the rec is disabled (acked), and `enable` contains\n       clusters that are affected by the rec */\n    data = { disabled: [], enabled: [] },\n  } = query;\n  const rows = data?.enabled || [];\n  const filters = useSelector(({ filters }) => filters.affectedClustersState);\n  const perPage = filters.limit;\n  const page = filters.offset / filters.limit + 1;\n  const allSelected =\n    filteredRows.length !== 0 && selected.length === filteredRows.length;\n  // helps to distinguish the state when the API data received but not yet filtered\n  const [rowsFiltered, setRowsFiltered] = useState(false);\n  const loadingState = isUninitialized || isFetching || !rowsFiltered;\n  const errorState = isError;\n  const successState = isSuccess;\n  const noInput = successState && rows.length === 0;\n  const noMatch = rows.length > 0 && filteredRows.length === 0;\n\n  const updateFilters = (filters) =>\n    dispatch(updateAffectedClustersFilters(filters));\n\n  const removeFilterParam = (param) =>\n    _removeFilterParam(filters, updateFilters, param);\n\n  const addFilterParam = (param, values) =>\n    _addFilterParam(filters, updateFilters, param, values);\n\n  const filterConfig = {\n    items: [\n      {\n        label: intl.formatMessage(messages.name),\n        placeholder: intl.formatMessage(messages.filterByName),\n        type: conditionalFilterType.text,\n        filterValues: {\n          id: 'name-filter',\n          key: 'name-filter',\n          onChange: (event, value) => addFilterParam('text', value),\n          value: filters.text,\n        },\n      },\n      {\n        label: intl.formatMessage(messages.version),\n        placeholder: intl.formatMessage(messages.filterByVersion),\n        type: conditionalFilterType.checkbox,\n        filterValues: {\n          id: 'version-filter',\n          key: 'version-filter',\n          onChange: (event, value) => addFilterParam('version', value),\n          value: filters.version,\n          items: uniqBy(\n            rows\n              .filter((r) => r.meta.cluster_version !== '')\n              .map((r) => ({\n                label: r.meta.cluster_version,\n                value: r.meta.cluster_version,\n              }))\n              .sort((a, b) => compareSemVer(a.value, b.value, 1))\n              .reverse(), // should start from the latest version\n            'value'\n          ),\n        },\n      },\n    ],\n    isDisabled: isError || (rows && rows.length === 0),\n  };\n\n  const onSort = (_e, index, direction) => {\n    setRowsFiltered(false);\n    updateFilters({ ...filters, sortIndex: index, sortDirection: direction });\n  };\n\n  const onSetPage = (_e, pageNumber) => {\n    setRowsFiltered(false);\n    const newOffset = pageNumber * filters.limit - filters.limit;\n    updateFilters({ ...filters, offset: newOffset });\n  };\n\n  const onSetPerPage = (_e, perPage) => {\n    setRowsFiltered(false);\n    updateFilters({ ...filters, limit: perPage, offset: 0 });\n  };\n\n  // constructs array of rows (from the initial data) checking currently applied filters\n  const buildFilteredRows = (allRows, filters) => {\n    setRowsFiltered(false);\n    const rows = allRows.map((r) => {\n      if (r.meta.cluster_version !== '' && !valid(r.meta.cluster_version)) {\n        console.error(\n          `Cluster version ${r.meta.cluster_version} has invalid format!`\n        );\n      }\n\n      return {\n        id: r.cluster,\n        cells: [\n          '',\n          r.cluster_name || r.cluster,\n          r.meta.cluster_version,\n          r.last_checked_at,\n          r.impacted,\n        ],\n      };\n    });\n    return rows\n      .filter((row) => {\n        return (\n          row?.cells[AFFECTED_CLUSTERS_NAME_CELL].toLowerCase().includes(\n            filters.text.toLowerCase()\n          ) &&\n          (filters.version.length === 0 ||\n            filters.version.includes(row.cells[AFFECTED_CLUSTERS_VERSION_CELL]))\n        );\n      })\n      .sort((a, b) => {\n        let fst, snd;\n        const d = filters.sortDirection === 'asc' ? 1 : -1;\n        switch (filters.sortIndex) {\n          case AFFECTED_CLUSTERS_NAME_CELL:\n            return (\n              d *\n              a?.cells[AFFECTED_CLUSTERS_NAME_CELL].localeCompare(\n                b?.cells[AFFECTED_CLUSTERS_NAME_CELL]\n              )\n            );\n          case AFFECTED_CLUSTERS_VERSION_CELL:\n            return compareSemVer(\n              a.cells[AFFECTED_CLUSTERS_VERSION_CELL] || '0.0.0',\n              b.cells[AFFECTED_CLUSTERS_VERSION_CELL] || '0.0.0',\n              d\n            );\n          case AFFECTED_CLUSTERS_LAST_SEEN_CELL:\n            fst = new Date(a.cells[AFFECTED_CLUSTERS_LAST_SEEN_CELL] || 0);\n            snd = new Date(b.cells[AFFECTED_CLUSTERS_LAST_SEEN_CELL] || 0);\n            return fst > snd ? d : snd > fst ? -d : 0;\n          case AFFECTED_CLUSTERS_IMPACTED_CELL:\n            fst = new Date(a.cells[AFFECTED_CLUSTERS_IMPACTED_CELL] || 0);\n            snd = new Date(b.cells[AFFECTED_CLUSTERS_IMPACTED_CELL] || 0);\n            return fst > snd ? d : snd > fst ? -d : 0;\n        }\n      });\n  };\n\n  const buildDisplayedRows = (rows) => {\n    return rows\n      .slice(perPage * (page - 1), perPage * (page - 1) + perPage)\n      .map((r) => ({\n        ...r,\n        cells: [\n          <span key={r.id}>\n            <Link to={`${BASE_PATH}/clusters/${r.id}?first=${rule.rule_id}`}>\n              {r.cells[AFFECTED_CLUSTERS_NAME_CELL]}\n            </Link>\n          </span>,\n          <span key={r.id}>\n            {r.cells[AFFECTED_CLUSTERS_VERSION_CELL] ||\n              intl.formatMessage(messages.nA)}\n          </span>,\n          <span key={r.id}>\n            {r.cells[AFFECTED_CLUSTERS_LAST_SEEN_CELL] ? (\n              <DateFormat\n                extraTitle={`${intl.formatMessage(messages.lastSeen)}: `}\n                date={r.cells[AFFECTED_CLUSTERS_LAST_SEEN_CELL]}\n                variant=\"relative\"\n              />\n            ) : (\n              <Tooltip\n                key={r.id}\n                content={\n                  <span>\n                    {intl.formatMessage(messages.lastSeen) + ': '}\n                    {intl.formatMessage(messages.nA)}\n                  </span>\n                }\n              >\n                <span>{intl.formatMessage(messages.nA)}</span>\n              </Tooltip>\n            )}\n          </span>,\n          <span key={r.id}>\n            {r.cells[AFFECTED_CLUSTERS_IMPACTED_CELL] ? (\n              <DateFormat\n                extraTitle={`${intl.formatMessage(messages.impacted)}: `}\n                date={r.cells[AFFECTED_CLUSTERS_IMPACTED_CELL]}\n                variant=\"relative\"\n              />\n            ) : (\n              <Tooltip\n                key={r.id}\n                content={\n                  <span>\n                    {intl.formatMessage(messages.impacted) + ': '}\n                    {intl.formatMessage(messages.nA)}\n                  </span>\n                }\n              >\n                <span>{intl.formatMessage(messages.nA)}</span>\n              </Tooltip>\n            )}\n          </span>,\n        ],\n      }));\n  };\n\n  // if rowId === -1, then select all rows\n  const onSelect = (event, isSelected, rowId) => {\n    let rows;\n    rowId === -1\n      ? (rows = filteredRows.map((r) => ({ ...r, selected: isSelected })))\n      : (rows = filteredRows.map((r, i) => ({\n          ...r,\n          selected: i === rowId ? isSelected : r.selected,\n        })));\n    setSelected(rows.filter((r) => r.selected));\n    setFilteredRows(rows);\n    setDisplayedRows(buildDisplayedRows(rows));\n  };\n\n  useEffect(() => {\n    setFilteredRows(buildFilteredRows(rows, filters));\n  }, [\n    query,\n    filters.text,\n    filters.version,\n    filters.sortIndex,\n    filters.sortDirection,\n  ]);\n\n  useEffect(() => {\n    setDisplayedRows(buildDisplayedRows(filteredRows));\n    setRowsFiltered(true);\n  }, [filteredRows, filters.limit, filters.offset]);\n\n  const handleModalToggle = (disableRuleModalOpen, host = undefined) => {\n    setDisableRuleModalOpen(disableRuleModalOpen);\n    setHost(host);\n  };\n\n  return (\n    <div id=\"affected-list-table\" data-ouia-safe={!loadingState}>\n      {disableRuleModalOpen && (\n        <DisableRule\n          handleModalToggle={handleModalToggle}\n          isModalOpen={disableRuleModalOpen}\n          rule={rule}\n          afterFn={afterDisableFn}\n          hosts={host !== undefined ? [] : selected}\n          host={host}\n        />\n      )}\n      <PrimaryToolbar\n        filterConfig={filterConfig}\n        pagination={{\n          itemCount: filteredRows.length,\n          page,\n          perPage,\n          onSetPage: onSetPage,\n          onPerPageSelect: onSetPerPage,\n          ouiaId: 'pager',\n        }}\n        activeFiltersConfig={\n          isError || (rows && rows.length === 0)\n            ? undefined\n            : {\n                filters: buildFilterChips(filters, FILTER_CATEGORIES),\n                deleteTitle: intl.formatMessage(messages.resetFilters),\n                onDelete: (event, itemsToRemove, isAll) => {\n                  if (isAll) {\n                    resetFilters(\n                      filters,\n                      AFFECTED_CLUSTERS_INITIAL_STATE,\n                      updateFilters\n                    );\n                  } else {\n                    itemsToRemove.map((item) => {\n                      const newFilter = {\n                        [item.urlParam]: Array.isArray(filters[item.urlParam])\n                          ? filters[item.urlParam].filter(\n                              (value) =>\n                                String(value) !== String(item.chips[0].value)\n                            )\n                          : '',\n                      };\n                      newFilter[item.urlParam].length > 0\n                        ? updateFilters({ ...filters, ...newFilter })\n                        : removeFilterParam(item.urlParam);\n                    });\n                  }\n                },\n              }\n        }\n        bulkSelect={{\n          count: selected.length,\n          items: [\n            {\n              title: intl.formatMessage(messages.selectNone),\n              onClick: (event) => onSelect(event, false, -1),\n            },\n            {\n              title: intl.formatMessage(messages.selectAll, {\n                items: filteredRows?.length || 0,\n              }),\n              onClick: (event) => onSelect(event, true, -1),\n            },\n          ],\n          checked: allSelected,\n          onSelect: (event) =>\n            allSelected\n              ? onSelect(event, false, -1)\n              : onSelect(event, true, -1),\n          ouiaId: 'clusters-selector',\n        }}\n        actionsConfig={{\n          actions: [\n            '',\n            {\n              label: intl.formatMessage(messages.disableRuleForClusters),\n              props: { isDisabled: selected.length === 0 },\n              onClick: () => handleModalToggle(true),\n            },\n          ],\n        }}\n      />\n      <Table\n        aria-label=\"Table of affected clusters\"\n        ouiaId=\"clusters\"\n        ouiaSafe={!loadingState}\n        variant=\"compact\"\n        cells={AFFECTED_CLUSTERS_COLUMNS}\n        rows={\n          errorState || loadingState || noMatch || noInput ? (\n            [\n              {\n                fullWidth: true,\n                cells: [\n                  {\n                    props: {\n                      colSpan: AFFECTED_CLUSTERS_COLUMNS.length + 1,\n                    },\n                    title: errorState ? (\n                      <ErrorState />\n                    ) : loadingState ? (\n                      <Loading />\n                    ) : noInput ? (\n                      <NoAffectedClusters />\n                    ) : (\n                      <NoMatchingClusters />\n                    ),\n                  },\n                ],\n              },\n            ]\n          ) : successState ? (\n            displayedRows\n          ) : (\n            <ErrorState />\n          )\n        }\n        sortBy={{\n          index: filters.sortIndex,\n          direction: filters.sortDirection,\n        }}\n        onSort={onSort}\n        canSelectAll={false}\n        onSelect={displayedRows?.length > 0 ? onSelect : undefined}\n        actions={[\n          {\n            title: 'Disable recommendation for cluster',\n            onClick: (event, rowIndex) =>\n              handleModalToggle(true, filteredRows[rowIndex].id),\n          },\n        ]}\n      >\n        <TableHeader />\n        <TableBody />\n      </Table>\n      <Pagination\n        variant={PaginationVariant.bottom}\n        itemCount={filteredRows.length}\n        page={page}\n        perPage={perPage}\n        onSetPage={onSetPage}\n        onPerPageSelect={onSetPerPage}\n        onPageInput={onSetPage}\n        ouiaId=\"pager\"\n      />\n    </div>\n  );\n};\n\nAffectedClustersTable.propTypes = {\n  query: PropTypes.shape({\n    isError: PropTypes.bool.isRequired,\n    isUninitialized: PropTypes.bool.isRequired,\n    isFetching: PropTypes.bool.isRequired,\n    isSuccess: PropTypes.bool.isRequired,\n    data: PropTypes.shape({\n      enabled: PropTypes.array,\n      disabled: PropTypes.array,\n    }),\n  }),\n  rule: PropTypes.object,\n  afterDisableFn: PropTypes.func,\n};\n\nexport { AffectedClustersTable };\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { List } from 'react-content-loader';\nimport { useIntl } from 'react-intl';\nimport { useDispatch } from 'react-redux';\n\nimport { cellWidth } from '@patternfly/react-table';\nimport {\n  Table,\n  TableBody,\n  TableHeader,\n} from '@patternfly/react-table/deprecated';\nimport { Button, Icon, Modal } from '@patternfly/react-core';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport OutlinedBellIcon from '@patternfly/react-icons/dist/js/icons/outlined-bell-icon';\nimport { addNotification as notification } from '@redhat-cloud-services/frontend-components-notifications/';\n\nimport messages from '../../Messages';\nimport { enableRuleForCluster } from '../../Services/Acks';\n\nconst ViewHostAcks = ({\n  handleModalToggle,\n  isModalOpen,\n  clusters,\n  recId,\n  afterFn,\n}) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const addNotification = (data) => dispatch(notification(data));\n  const { data, isFetching, isLoading, refetch } = clusters;\n  const hostAcks = data?.disabled || [];\n  const [rows, setRows] = useState([]);\n  const [unclean, setUnclean] = useState(false);\n\n  const columns = [\n    {\n      title: intl.formatMessage(messages.clusterName),\n\n      transforms: [cellWidth(50)],\n    },\n    {\n      title: intl.formatMessage(messages.justificationNote),\n\n      transforms: [cellWidth(25)],\n    },\n    {\n      title: intl.formatMessage(messages.dateDisabled),\n\n      transforms: [cellWidth(15)],\n    },\n    '',\n  ];\n\n  const deleteAck = async (host) => {\n    try {\n      await enableRuleForCluster({ uuid: host.cluster_id, recId });\n      refetch();\n      setUnclean(true);\n    } catch (error) {\n      handleModalToggle(false);\n      addNotification({\n        variant: 'danger',\n        dismissable: true,\n        title: intl.formatMessage(messages.error),\n        description: `${error}`,\n      });\n    }\n  };\n\n  useEffect(() => {\n    const rows = hostAcks?.map((item) => ({\n      cells: [\n        item.cluster_name || item.cluster_id,\n        item.justification || intl.formatMessage(messages.none),\n        {\n          title: (\n            <DateFormat date={new Date(item.disabled_at)} type=\"onlyDate\" />\n          ),\n        },\n        {\n          title: (\n            <Button\n              key={item.cluster_id}\n              ouiaId=\"enable\"\n              isInline\n              variant=\"link\"\n              onClick={() => deleteAck(item)}\n            >\n              <Icon size=\"sm\">\n                <OutlinedBellIcon />\n              </Icon>\n              {` ${intl.formatMessage(messages.enable)}`}\n            </Button>\n          ),\n        },\n      ],\n    }));\n\n    if (!isLoading && hostAcks.length === 0) {\n      afterFn();\n      handleModalToggle(false);\n    }\n    setRows(rows);\n  }, [hostAcks]);\n\n  return (\n    <Modal\n      width={'75%'}\n      title={intl.formatMessage(messages.hostAckModalTitle)}\n      isOpen={isModalOpen}\n      onClose={() => {\n        unclean && afterFn();\n        handleModalToggle(false);\n      }}\n      ouiaId=\"hosts-disabled\"\n    >\n      {!isFetching ? (\n        <Table aria-label=\"host-ack-table\" rows={rows} cells={columns}>\n          <TableHeader />\n          <TableBody />\n        </Table>\n      ) : (\n        <Table\n          aria-label=\"host-ack-table\"\n          rows={[\n            {\n              cells: [{ props: { colSpan: 3 }, title: <List /> }],\n            },\n          ]}\n          cells={columns}\n        >\n          <TableHeader />\n          <TableBody />\n        </Table>\n      )}\n    </Modal>\n  );\n};\n\nViewHostAcks.propTypes = {\n  isModalOpen: PropTypes.bool,\n  handleModalToggle: PropTypes.func,\n  clusters: PropTypes.object,\n  recId: PropTypes.string,\n  afterFn: PropTypes.func,\n};\n\nViewHostAcks.defaultProps = {\n  isModalOpen: false,\n  handleModalToggle: () => undefined,\n  clusters: {},\n  recId: '',\n  afterFn: () => undefined,\n};\n\nexport default ViewHostAcks;\n","import './Recommendation.scss';\n\nimport React, { useMemo, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport {\n  Card,\n  CardBody,\n  CardFooter,\n  CardHeader,\n} from '@patternfly/react-core/dist/js/components/Card';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport {\n  Label,\n  Title,\n  LabelGroup,\n  Button,\n  Flex,\n  FlexItem,\n  Icon,\n  Dropdown,\n  MenuToggle,\n  DropdownItem,\n  DropdownList,\n} from '@patternfly/react-core';\nimport BellSlashIcon from '@patternfly/react-icons/dist/js/icons/bell-slash-icon';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { ErrorState } from '@redhat-cloud-services/frontend-components/ErrorState';\nimport {\n  AdvisorProduct,\n  RuleDetails,\n  RuleDetailsMessagesKeys,\n} from '@redhat-cloud-services/frontend-components-advisor-components';\n\nimport Breadcrumbs from '../Breadcrumbs';\nimport RuleLabels from '../Labels/RuleLabels';\nimport {\n  FILTER_CATEGORIES,\n  RISK_OF_CHANGE_DESC,\n  RULE_CATEGORIES,\n} from '../../AppConstants';\nimport messages from '../../Messages';\nimport Loading from '../Loading/Loading';\nimport { adjustOCPRule } from '../../Utilities/Rule';\nimport MessageState from '../MessageState/MessageState';\nimport { AffectedClustersTable } from '../AffectedClustersTable/AffectedClustersTable';\nimport { Delete, Post } from '../../Utilities/Api';\nimport { BASE_URL } from '../../Services/SmartProxy';\nimport DisableRule from '../Modals/DisableRule';\nimport ViewHostAcks from '../Modals/ViewHostAcks';\nimport { OneLineLoader } from '../../Utilities/Loaders';\nimport { enableRuleForCluster } from '../../Services/Acks';\nimport { formatMessages, mapContentToValues } from '../../Utilities/intlHelper';\nimport inRange from 'lodash/inRange';\n\nconst Recommendation = ({ rule, ack, clusters, recId }) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const notify = (data) => dispatch(addNotification(data));\n  const [disableRuleModalOpen, setDisableRuleModalOpen] = useState(false);\n  const [actionsDropdownOpen, setActionsDropdownOpen] = useState(false);\n  const [viewSystemsModalOpen, setViewSystemsModalOpen] = useState(false);\n\n  // rule's info\n  const {\n    isError,\n    isUninitialized,\n    isLoading,\n    isFetching,\n    isSuccess,\n    data,\n    refetch,\n  } = rule;\n  // justification note, last time acknowledged, etc.\n  const { data: ackData, isFetching: ackIsFetching, refetch: refetchAck } = ack;\n  const ruleDate = new Date(ackData?.updated_at || ackData?.created_at);\n  // affected and acked clusters lists\n  const {\n    data: clustersData,\n    isFetching: clustersIsFetching,\n    refetch: refetchClusters,\n  } = clusters;\n\n  const content =\n    isSuccess && data ? adjustOCPRule(data.content, recId) : undefined;\n  const ackedClusters =\n    !clustersIsFetching && clustersData ? clustersData.disabled : undefined;\n\n  const afterDisableFn = async () => {\n    refetch();\n    refetchAck();\n    refetchClusters();\n  };\n\n  const handleModalToggle = (disableRuleModalOpen) => {\n    setDisableRuleModalOpen(disableRuleModalOpen);\n  };\n\n  const enableRecForHosts = async ({ uuids }) => {\n    try {\n      const requests = uuids.map((uuid) =>\n        enableRuleForCluster({ uuid, recId })\n      );\n      await Promise.all(requests);\n      refetch();\n      refetchAck();\n      refetchClusters();\n      notify({\n        variant: 'success',\n        timeout: true,\n        dismissable: true,\n        title: intl.formatMessage(messages.recSuccessfullyEnabledForCluster),\n      });\n    } catch (error) {\n      notify({\n        variant: 'danger',\n        dismissable: true,\n        title: intl.formatMessage(messages.error),\n        description: `${error}`,\n      });\n    }\n  };\n\n  const enableRule = async (rule) => {\n    try {\n      await Delete(`${BASE_URL}/v2/ack/${rule.data.content.rule_id}`);\n      notify({\n        variant: 'success',\n        timeout: true,\n        dismissable: true,\n        title: intl.formatMessage(messages.recSuccessfullyEnabled),\n      });\n      refetch();\n    } catch (error) {\n      handleModalToggle(false);\n      notify({\n        variant: 'danger',\n        dismissable: true,\n        title: intl.formatMessage(messages.error),\n        description: `${error}`,\n      });\n    }\n  };\n\n  const messagesValues = useMemo(\n    () => (content ? mapContentToValues(intl, content) : {}),\n    [intl, content]\n  );\n\n  return (\n    <React.Fragment>\n      {viewSystemsModalOpen && (\n        <ViewHostAcks\n          handleModalToggle={(toggleModal) =>\n            setViewSystemsModalOpen(toggleModal)\n          }\n          isModalOpen={viewSystemsModalOpen}\n          clusters={clusters}\n          afterFn={() => refetchClusters()}\n          recId={recId}\n        />\n      )}\n      {disableRuleModalOpen && (\n        <DisableRule\n          handleModalToggle={handleModalToggle}\n          isModalOpen={disableRuleModalOpen}\n          rule={content}\n          afterFn={afterDisableFn}\n        />\n      )}\n      <PageHeader className=\"pageHeaderOverride\">\n        <Breadcrumbs current={content?.description || recId} />\n      </PageHeader>\n      {(isUninitialized || isLoading || isFetching) && (\n        <section className=\"pf-l-page__main-section pf-c-page__main-section pf-m-light pf-u-pt-sm\">\n          <Loading />\n        </section>\n      )}\n      {isError && (\n        <section className=\"pf-l-page__main-section pf-c-page__main-section pf-m-light pf-u-pt-sm\">\n          <ErrorState />\n        </section>\n      )}\n      {!(isUninitialized || isLoading || isFetching) && isSuccess && (\n        <React.Fragment>\n          <section className=\"pf-l-page__main-section pf-c-page__main-section pf-m-light pf-u-pt-sm\">\n            <RuleDetails\n              messages={formatMessages(\n                intl,\n                RuleDetailsMessagesKeys,\n                messagesValues\n              )}\n              product={AdvisorProduct.ocp}\n              rule={content}\n              isDetailsPage\n              header={\n                <React.Fragment>\n                  <PageHeaderTitle\n                    title={\n                      <React.Fragment>\n                        {content.description} <RuleLabels rule={content} />\n                      </React.Fragment>\n                    }\n                  />\n                  <p>\n                    {intl.formatMessage(messages.rulesDetailsModifiedDate, {\n                      date: (\n                        <DateFormat\n                          date={new Date(content.publish_date)}\n                          type=\"onlyDate\"\n                        />\n                      ),\n                    })}\n                    {content.tags &&\n                      (Array.isArray(content.tags) ? (\n                        <LabelGroup\n                          className=\"categoryLabels\"\n                          numLabels={1}\n                          isCompact\n                        >\n                          {content.tags.reduce((labels, tag) => {\n                            if (RULE_CATEGORIES[tag]) {\n                              labels.push(\n                                <Label\n                                  key={`label-${tag}`}\n                                  color=\"blue\"\n                                  isCompact\n                                >\n                                  {\n                                    FILTER_CATEGORIES.category.values[\n                                      RULE_CATEGORIES[tag] - 1\n                                    ].label\n                                  }\n                                </Label>\n                              );\n                            }\n                            return labels;\n                          }, [])}\n                        </LabelGroup>\n                      ) : (\n                        <Label isCompact>{content.tags}</Label>\n                      ))}\n                  </p>\n                </React.Fragment>\n              }\n              onVoteClick={async (rule, rating) =>\n                await Post(`${BASE_URL}/v2/rating`, {}, { rule, rating })\n              }\n              {...(inRange(content?.resolution_risk, 1, 5) // resolution risk can be 0 (not defined for particular rule)\n                ? {\n                    resolutionRisk: content?.resolution_risk,\n                    resolutionRiskDesc:\n                      RISK_OF_CHANGE_DESC[content?.resolution_risk],\n                  }\n                : {})}\n            >\n              <Flex>\n                <FlexItem align={{ default: 'alignRight' }}>\n                  <Dropdown\n                    className=\"ins-c-rec-details__actions_dropdown\"\n                    onOpenChange={(isOpen) => setActionsDropdownOpen(isOpen)}\n                    popperProps={{\n                      position: 'right',\n                    }}\n                    ouiaId=\"actions\"\n                    toggle={(toggleRef) => (\n                      <MenuToggle\n                        data-ouia-component-id=\"actions-toggle\"\n                        // ouiaId=\"actions-toggle\"\n                        ref={toggleRef}\n                        onClick={() =>\n                          setActionsDropdownOpen(!actionsDropdownOpen)\n                        }\n                      >\n                        {intl.formatMessage(messages.actions)}\n                      </MenuToggle>\n                    )}\n                    isOpen={actionsDropdownOpen}\n                  >\n                    <DropdownList>\n                      {content?.disabled ? (\n                        <DropdownItem\n                          key=\"link\"\n                          ouiaId=\"enable\"\n                          onClick={() => {\n                            enableRule(rule);\n                          }}\n                        >\n                          {intl.formatMessage(messages.enableRule)}\n                        </DropdownItem>\n                      ) : (\n                        <DropdownItem\n                          key=\"link\"\n                          ouiaId=\"disable\"\n                          onClick={() => {\n                            handleModalToggle(true);\n                          }}\n                        >\n                          {intl.formatMessage(messages.disableRule)}\n                        </DropdownItem>\n                      )}\n                    </DropdownList>\n                  </Dropdown>\n                </FlexItem>\n              </Flex>\n            </RuleDetails>\n          </section>\n          <section className=\"pf-l-page__main-section pf-c-page__main-section\">\n            <React.Fragment>\n              {(content?.hosts_acked_count ||\n                ackedClusters?.length > 0 ||\n                content?.disabled) && (\n                <Card className=\"cardOverride\" ouiaId=\"hosts-acked\">\n                  <CardHeader>\n                    <Title headingLevel=\"h4\" size=\"xl\">\n                      <Icon size=\"md\">\n                        <BellSlashIcon />\n                      </Icon>\n                      &nbsp;\n                      {intl.formatMessage(\n                        (content?.hosts_acked_count ||\n                          ackedClusters?.length > 0) &&\n                          !content?.disabled\n                          ? messages.ruleIsDisabledForClusters\n                          : messages.ruleIsDisabled\n                      )}\n                    </Title>\n                  </CardHeader>\n                  <CardBody>\n                    {(content?.hosts_acked_count ||\n                      ackedClusters?.length > 0) &&\n                    !content?.disabled ? (\n                      <React.Fragment>\n                        {intl.formatMessage(\n                          messages.ruleIsDisabledForClustersBody,\n                          {\n                            clusters: ackedClusters?.length,\n                          }\n                        )}\n                        {!clustersIsFetching && ackedClusters?.length > 0 ? (\n                          <React.Fragment>\n                            &nbsp;\n                            <Button\n                              isInline\n                              variant=\"link\"\n                              onClick={() => setViewSystemsModalOpen(true)}\n                              ouiaId=\"view-clusters\"\n                            >\n                              {intl.formatMessage(messages.viewClusters)}\n                            </Button>\n                          </React.Fragment>\n                        ) : (\n                          <OneLineLoader />\n                        )}\n                      </React.Fragment>\n                    ) : (\n                      !ackIsFetching &&\n                      ackData && (\n                        <React.Fragment>\n                          {ackData?.justification\n                            ? intl.formatMessage(\n                                messages.ruleIsDisabledWithJustificaiton,\n                                {\n                                  date: (\n                                    <span>\n                                      <DateFormat\n                                        date={ruleDate}\n                                        type=\"onlyDate\"\n                                      />\n                                    </span>\n                                  ),\n                                  reason: ackData.justification,\n                                }\n                              )\n                            : intl.formatMessage(\n                                messages.ruleIsDisabledWithoutJustificaiton,\n                                {\n                                  date: (\n                                    <span>\n                                      <DateFormat\n                                        date={ruleDate}\n                                        type=\"onlyDate\"\n                                      />\n                                    </span>\n                                  ),\n                                }\n                              )}\n                        </React.Fragment>\n                      )\n                    )}\n                  </CardBody>\n                  <CardFooter>\n                    {(content?.hosts_acked_count ||\n                      ackedClusters?.length > 0) &&\n                    !content?.disabled ? (\n                      !clustersIsFetching && ackedClusters ? (\n                        <Button\n                          isInline\n                          variant=\"link\"\n                          onClick={() =>\n                            enableRecForHosts({\n                              uuids: ackedClusters.map((c) => c.cluster_id),\n                            })\n                          }\n                          ouiaId=\"enable\"\n                        >\n                          {intl.formatMessage(messages.enableRuleForClusters)}\n                        </Button>\n                      ) : (\n                        <OneLineLoader />\n                      )\n                    ) : (\n                      <Button\n                        isInline\n                        variant=\"link\"\n                        onClick={() => enableRule(rule)}\n                        ouiaId=\"enable\"\n                      >\n                        {intl.formatMessage(messages.enableRule)}\n                      </Button>\n                    )}\n                  </CardFooter>\n                </Card>\n              )}\n              {!content?.disabled && (\n                <React.Fragment>\n                  <Title className=\"titleOverride\" headingLevel=\"h3\" size=\"2xl\">\n                    {intl.formatMessage(messages.affectedClusters)}\n                  </Title>\n                  <AffectedClustersTable\n                    query={clusters}\n                    rule={content}\n                    afterDisableFn={afterDisableFn}\n                  />\n                </React.Fragment>\n              )}\n              {content?.disabled && (\n                <MessageState\n                  icon={BellSlashIcon}\n                  title={intl.formatMessage(messages.ruleIsDisabled)}\n                  text={intl.formatMessage(messages.ruleIsDisabledBody)}\n                />\n              )}\n            </React.Fragment>\n          </section>\n        </React.Fragment>\n      )}\n    </React.Fragment>\n  );\n};\n\nRecommendation.propTypes = {\n  rule: PropTypes.object.isRequired,\n  ack: PropTypes.object.isRequired,\n  clusters: PropTypes.object.isRequired,\n  recId: PropTypes.string.isRequired,\n};\n\nexport { Recommendation };\n","import React, { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\n\nimport { Recommendation } from './Recommendation';\nimport {\n  useGetAffectedClustersQuery,\n  useGetRuleByIdQuery,\n} from '../../Services/SmartProxy';\nimport { useGetRecAcksQuery } from '../../Services/Acks';\nimport messages from '../../Messages';\n\nconst RecommendationWrapper = () => {\n  const intl = useIntl();\n  const { recommendationId } = useParams();\n  const rule = useGetRuleByIdQuery(recommendationId);\n  const ack = useGetRecAcksQuery({ ruleId: recommendationId });\n  const chrome = useChrome();\n\n  if (rule.isSuccess && rule.data?.content?.description) {\n    const subnav = `${rule.data.content.description} - Recommendations`;\n    chrome.updateDocumentTitle(\n      intl.formatMessage(messages.documentTitle, { subnav })\n    );\n  }\n  const clusters = useGetAffectedClustersQuery(recommendationId);\n\n  useEffect(() => {\n    rule.refetch();\n  }, [recommendationId]);\n\n  return (\n    <Recommendation\n      rule={rule}\n      ack={ack}\n      clusters={clusters}\n      recId={recommendationId}\n    />\n  );\n};\n\nexport default RecommendationWrapper;\n","import React from 'react';\nimport ContentLoader from 'react-content-loader';\n\nconst OneLineLoader = () => (\n  <ContentLoader height={20}>\n    <rect x=\"0\" y=\"0\" rx=\"4\" ry=\"4\" width=\"300\" height=\"20\" />\n  </ContentLoader>\n);\n\nexport { OneLineLoader };\n"],"names":["Breadcrumbs","_ref","current","workloads","intl","useIntl","splitUrl","useLocation","pathname","split","React","Breadcrumb","ouiaId","BreadcrumbItem","className","Link","to","relative","concat","formatMessage","messages","insightsHeader","isActive","propTypes","PropTypes","RuleLabels","rule","disabled","Tooltip","content","ruleIsDisabledTooltip","position","TooltipPosition","right","Label","color","isCompact","Card","CardBody","List","DisableRule","isModalOpen","handleModalToggle","afterFn","host","hosts","_useState","useState","_useState2","_slicedToArray","justification","setJustificaton","_useState3","_useState4","singleHost","setSingleHost","_useState5","length","_useState6","multipleHosts","setMultipleHosts","_useSetAckMutation","useSetAckMutation","setAck","dispatch","useDispatch","notify","data","addNotification","bulkHostActions","_ref2","_asyncToGenerator","_regeneratorRuntime","_callee","requests","_context","prev","next","map","h","disableRuleForCluster","uuid","id","recId","rule_id","Promise","all","variant","dismissable","timeout","title","recSuccessfullyDisabledForCluster","t0","error","description","stop","apply","arguments","disableRule","_ref3","_callee2","_context2","unwrap","recSuccessfullyDisabled","Modal","isOpen","onClose","actions","Button","key","onClick","save","cancel","disableRuleBody","Form","FormGroup","fieldId","Checkbox","isChecked","onChange","label","disableRuleSingleCluster","disableRuleForClusters","name","justificationNote","TextInput","type","value","_event","text","onKeyDown","e","preventDefault","defaultProps","undefined","AffectedClustersTable","query","afterDisableFn","filteredRows","setFilteredRows","displayedRows","setDisplayedRows","disableRuleModalOpen","setDisableRuleModalOpen","_useState7","_useState8","selected","setSelected","_useState9","_useState10","setHost","isError","isUninitialized","isFetching","isSuccess","_query$data","enabled","rows","filters","useSelector","affectedClustersState","perPage","limit","page","offset","allSelected","_useState11","_useState12","rowsFiltered","setRowsFiltered","loadingState","errorState","successState","noInput","noMatch","updateFilters","updateAffectedClustersFilters","addFilterParam","param","values","_addFilterParam","filterConfig","items","placeholder","filterByName","conditionalFilterType","filterValues","event","version","filterByVersion","checkbox","uniqBy","filter","r","meta","cluster_version","sort","a","b","compareSemVer","reverse","isDisabled","onSetPage","_e","pageNumber","newOffset","_objectSpread","onSetPerPage","buildDisplayedRows","slice","cells","BASE_PATH","AFFECTED_CLUSTERS_NAME_CELL","AFFECTED_CLUSTERS_VERSION_CELL","nA","AFFECTED_CLUSTERS_LAST_SEEN_CELL","DateFormat","extraTitle","lastSeen","date","AFFECTED_CLUSTERS_IMPACTED_CELL","impacted","onSelect","isSelected","rowId","i","useEffect","allRows","valid","console","cluster","cluster_name","last_checked_at","row","toLowerCase","includes","fst","snd","d","sortDirection","sortIndex","localeCompare","Date","buildFilteredRows","PrimaryToolbar","pagination","itemCount","onPerPageSelect","activeFiltersConfig","buildFilterChips","FILTER_CATEGORIES","deleteTitle","resetFilters","onDelete","itemsToRemove","isAll","AFFECTED_CLUSTERS_INITIAL_STATE","item","newFilter","_defineProperty","urlParam","Array","isArray","String","chips","_removeFilterParam","bulkSelect","count","selectNone","selectAll","checked","actionsConfig","props","Table","ouiaSafe","AFFECTED_CLUSTERS_COLUMNS","fullWidth","colSpan","ErrorState","Loading","NoAffectedClusters","NoMatchingClusters","sortBy","index","direction","onSort","canSelectAll","rowIndex","TableHeader","TableBody","Pagination","PaginationVariant","bottom","onPageInput","isRequired","ViewHostAcks","clusters","notification","isLoading","refetch","hostAcks","setRows","unclean","setUnclean","columns","clusterName","transforms","cellWidth","dateDisabled","deleteAck","enableRuleForCluster","cluster_id","_x","none","disabled_at","isInline","Icon","size","OutlinedBellIcon","enable","width","hostAckModalTitle","Recommendation","ack","actionsDropdownOpen","setActionsDropdownOpen","viewSystemsModalOpen","setViewSystemsModalOpen","ackData","ackIsFetching","refetchAck","ruleDate","updated_at","created_at","clustersData","clustersIsFetching","refetchClusters","adjustOCPRule","ackedClusters","enableRecForHosts","_ref4","uuids","recSuccessfullyEnabledForCluster","enableRule","_ref5","_callee3","_context3","Delete","BASE_URL","recSuccessfullyEnabled","_x2","messagesValues","useMemo","mapContentToValues","toggleModal","PageHeader","RuleDetails","_extends","formatMessages","RuleDetailsMessagesKeys","product","AdvisorProduct","ocp","isDetailsPage","header","PageHeaderTitle","rulesDetailsModifiedDate","publish_date","tags","LabelGroup","numLabels","reduce","labels","tag","RULE_CATEGORIES","push","category","onVoteClick","_ref6","_callee4","rating","_context4","Post","abrupt","sent","_x3","_x4","inRange","resolution_risk","resolutionRisk","resolutionRiskDesc","RISK_OF_CHANGE_DESC","Flex","FlexItem","align","default","Dropdown","onOpenChange","popperProps","toggle","toggleRef","MenuToggle","ref","DropdownList","DropdownItem","hosts_acked_count","CardHeader","Title","headingLevel","BellSlashIcon","ruleIsDisabled","ruleIsDisabledForClusters","ruleIsDisabledWithJustificaiton","reason","ruleIsDisabledWithoutJustificaiton","ruleIsDisabledForClustersBody","viewClusters","OneLineLoader","CardFooter","c","enableRuleForClusters","affectedClusters","MessageState","icon","ruleIsDisabledBody","_rule$data","recommendationId","useParams","useGetRuleByIdQuery","useGetRecAcksQuery","ruleId","chrome","useChrome","subnav","updateDocumentTitle","documentTitle","useGetAffectedClustersQuery","ContentLoader","height","x","y","rx","ry"],"sourceRoot":""}