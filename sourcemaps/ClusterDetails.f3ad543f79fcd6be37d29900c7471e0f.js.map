{"version":3,"file":"js/ClusterDetails.007ab1cb07bddffc5dc2.js","mappings":"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","sources":["webpack:///./src/Components/Breadcrumbs/index.js","webpack:///./src/Components/ClusterHeader/ClusterHeader.js","webpack:///./src/Components/ClusterHeader/index.js","webpack:///./src/Components/ClusterRules/ClusterRules.js","webpack:///./src/Components/UpdateRisksTable/AlertsList.js","webpack:///./src/Components/UpdateRisksTable/ClusterOperatorsList.js","webpack:///./src/Components/UpdateRisksTable/UpdateRisksTable.js","webpack:///./src/Components/UpdateRisksTracker/UpdateRisksTracker.js","webpack:///./src/Components/UpdateRisksTable/useUpdateRisksFeature.js","webpack:///./src/Components/ClusterTabs/ClusterTabs.js","webpack:///./src/Components/UpdateRisksAlert/UpdateRisksAlert.js","webpack:///./src/Components/Cluster/Cluster.js","webpack:///./src/Components/Cluster/index.js","webpack:///./src/Components/Labels/RuleLabels.js","webpack:///./src/Components/Loading/Loading.js","webpack:///./src/Utilities/Loaders.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { Link, useLocation } from 'react-router-dom';\n\nimport { Breadcrumb, BreadcrumbItem } from '@patternfly/react-core';\n\nimport messages from '../../Messages';\n\nconst Breadcrumbs = ({ current, workloads }) => {\n  const intl = useIntl();\n  const location = useLocation();\n  const splitUrl = location.pathname.split('/');\n\n  return (\n    <div>\n      <Breadcrumb ouiaId=\"detail\">\n        <BreadcrumbItem className=\"breadcrumb-item\">\n          <Link to={workloads ? `../..` : `..`} relative=\"path\">\n            {`${intl.formatMessage(messages.insightsHeader)} ${splitUrl[4]}`}\n          </Link>\n        </BreadcrumbItem>\n        <BreadcrumbItem className=\"breadcrumb-item\" isActive>\n          {current}\n        </BreadcrumbItem>\n      </Breadcrumb>\n    </div>\n  );\n};\n\nBreadcrumbs.propTypes = {\n  current: PropTypes.string,\n  workloads: PropTypes.boolean,\n};\n\nexport default Breadcrumbs;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport {\n  Dropdown,\n  DropdownItem,\n  DropdownList,\n  Grid,\n  GridItem,\n  MenuToggle,\n  Stack,\n  StackItem,\n  Title,\n} from '@patternfly/react-core';\nimport Skeleton from '@redhat-cloud-services/frontend-components/Skeleton';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat/DateFormat';\n\nimport messages from '../../Messages';\nimport { OneLineLoader } from '../../Utilities/Loaders';\n\nexport const ClusterHeader = ({ clusterId, clusterData, clusterInfo }) => {\n  const location = window.location;\n  const [isOpen, setIsOpen] = useState(false);\n  const intl = useIntl();\n  // subscribe to the cluster data query\n  const {\n    isUninitialized: isUninitializedCluster,\n    isFetching: isFetchingCluster,\n    data: cluster,\n  } = clusterData;\n\n  const {\n    isUninitialized: isUninitializedInfo,\n    isFetching: isFetchingInfo,\n    data: info,\n  } = clusterInfo;\n\n  const redirectOCM = (clusterId) => {\n    // TODO: replace with isBeta from chrome\n    location.assign(\n      location.origin +\n        (location.pathname.includes('preview') ? `/preview` : '') +\n        `/openshift/details/${clusterId}`\n    );\n  };\n\n  const dropDownItems = [\n    <DropdownItem key=\"link\" onClick={() => redirectOCM(clusterId)}>\n      <snap>{intl.formatMessage(messages.clusterDetailsRedirect)}</snap>\n    </DropdownItem>,\n  ];\n\n  return (\n    <Grid id=\"cluster-header\" md={12} hasGutter>\n      <GridItem span={8}>\n        <Title\n          size=\"2xl\"\n          headingLevel=\"h1\"\n          id=\"cluster-header-title\"\n          ouiaId=\"cluster-name\"\n        >\n          {isUninitializedInfo || isFetchingInfo ? (\n            <Skeleton size=\"sm\" />\n          ) : (\n            info?.display_name || clusterId\n          )}\n        </Title>\n      </GridItem>\n      <GridItem span={4} id=\"cluster-header-dropdown\">\n        <Dropdown\n          popperProps={{\n            position: 'right',\n          }}\n          onOpenChange={(isOpen) => setIsOpen(isOpen)}\n          autoFocus={false}\n          isOpen={isOpen}\n          toggle={(toggleRef) => (\n            <MenuToggle\n              ref={toggleRef}\n              id=\"toggle-id-2\"\n              onClick={() => setIsOpen(!isOpen)}\n            >\n              {intl.formatMessage(messages.dropDownActionSingleCluster)}\n            </MenuToggle>\n          )}\n        >\n          <DropdownList>{dropDownItems}</DropdownList>\n        </Dropdown>\n      </GridItem>\n      <GridItem>\n        <Stack>\n          <StackItem id=\"cluster-header-uuid\">\n            <span>UUID:</span> <span>{clusterId}</span>\n          </StackItem>\n          <StackItem id=\"cluster-header-last-seen\">\n            <span>{intl.formatMessage(messages.lastSeen)}: </span>\n            <span>\n              {isUninitializedCluster || isFetchingCluster ? (\n                <OneLineLoader />\n              ) : cluster?.report?.meta?.last_checked_at ? (\n                <DateFormat\n                  date={cluster?.report?.meta?.last_checked_at}\n                  type=\"exact\"\n                />\n              ) : (\n                intl.formatMessage(messages.unknown)\n              )}\n            </span>\n          </StackItem>\n        </Stack>\n      </GridItem>\n    </Grid>\n  );\n};\n\nClusterHeader.propTypes = {\n  clusterId: PropTypes.string.isRequired,\n  clusterData: PropTypes.object.isRequired,\n  clusterInfo: PropTypes.shape({\n    isUninitialized: PropTypes.bool.isRequired,\n    isFetching: PropTypes.bool.isRequired,\n    data: PropTypes.shape({\n      cluster_id: PropTypes.string,\n      display_name: PropTypes.string,\n      managed: PropTypes.bool,\n      status: PropTypes.string,\n    }),\n  }),\n};\n","import React from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport {\n  useGetClusterByIdQuery,\n  useGetClusterInfoQuery,\n} from '../../Services/SmartProxy';\nimport { ClusterHeader } from './ClusterHeader';\n\nconst ClusterHeaderWrapper = () => {\n  const { clusterId } = useParams();\n  const clusterData = useGetClusterByIdQuery({\n    id: clusterId,\n    includeDisabled: false,\n  });\n  const clusterInfo = useGetClusterInfoQuery({\n    id: clusterId,\n  }); // TODO: improve cache handling: do network request only when cache is empty\n\n  return (\n    <ClusterHeader\n      clusterId={clusterId}\n      clusterData={clusterData}\n      clusterInfo={clusterInfo}\n    />\n  );\n};\n\nexport default ClusterHeaderWrapper;\n","import './_ClusterRules.scss';\n\nimport React, { useEffect, useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { useLocation, useParams } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport capitalize from 'lodash/capitalize';\n\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat/DateFormat';\nimport InsightsLabel from '@redhat-cloud-services/frontend-components/InsightsLabel';\nimport { SortByDirection, TableVariant } from '@patternfly/react-table';\nimport {\n  Table,\n  TableBody,\n  TableHeader,\n} from '@patternfly/react-table/deprecated';\nimport { Tooltip } from '@patternfly/react-core';\nimport { TooltipPosition } from '@patternfly/react-core/dist/js/components/Tooltip';\nimport PrimaryToolbar from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\n\nimport messages from '../../Messages';\nimport {\n  IMPACT_LABEL,\n  LIKELIHOOD_LABEL,\n  FILTER_CATEGORIES as FC,\n  CLUSTER_RULES_COLUMNS_KEYS,\n  FILTER_CATEGORIES,\n  CLUSTER_RULES_COLUMNS,\n  CLUSTER_RULES_IMPACTED_CELL,\n} from '../../AppConstants';\nimport { ReportDetails } from '@redhat-cloud-services/frontend-components-advisor-components';\nimport RuleLabels from '../Labels/RuleLabels';\nimport {\n  ErrorState,\n  NoMatchingRecs,\n  NoRecsError,\n  NoInsightsResults,\n  NoRecsAffecting,\n} from '../MessageState/EmptyStates';\nimport {\n  paramParser,\n  passFilters,\n  removeFilterParam as _removeFilterParam,\n  addFilterParam as _addFilterParam,\n  translateSortParams,\n} from '../Common/Tables';\nimport {\n  CLUSTER_RULES_INITIAL_STATE,\n  resetFilters,\n  updateClusterRulesFilters,\n} from '../../Services/Filters';\nimport { getErrorKey, getPluginName } from '../../Utilities/Rule';\nimport Loading from '../Loading/Loading';\nimport { useGetClusterByIdQuery } from '../../Services/SmartProxy';\n\nconst ClusterRules = () => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const updateFilters = (filters) =>\n    dispatch(updateClusterRulesFilters(filters));\n  const filters = useSelector(({ filters }) => filters.clusterRulesState);\n  const { clusterId } = useParams();\n\n  const { isError, isUninitialized, isFetching, isSuccess, data, error } =\n    useGetClusterByIdQuery({\n      id: clusterId,\n      includeDisabled: false,\n    });\n  const reports = data?.report?.data || [];\n  const [filteredRows, setFilteredRows] = useState([]);\n  const [displayedRows, setDisplayedRows] = useState([]);\n  const [isAllExpanded, setIsAllExpanded] = useState(false);\n  const [expandFirst, setExpandFirst] = useState(true);\n  const [firstRule, setFirstRule] = useState(''); // show a particular rule first\n  const results = filteredRows.length;\n  const { search } = useLocation();\n  // helps to distinguish the state when the API data received but not yet filtered\n  const [rowsFiltered, setRowsFiltered] = useState(false);\n  const loadingState = isUninitialized || isFetching || !rowsFiltered;\n  const errorState = isError;\n  const successState = isSuccess;\n  const noInput = successState && reports.length === 0;\n  const noMatch = reports.length > 0 && filteredRows.length === 0;\n\n  const removeFilterParam = (param) =>\n    _removeFilterParam(filters, updateFilters, param);\n\n  const addFilterParam = (param, values) => {\n    setExpandFirst(false);\n    setFirstRule('');\n    return _addFilterParam(filters, updateFilters, param, values);\n  };\n\n  useEffect(() => {\n    if (search) {\n      const paramsObject = paramParser(search);\n      if (paramsObject.sort) {\n        const sortObj = translateSortParams(paramsObject.sort);\n        paramsObject.sortIndex = CLUSTER_RULES_COLUMNS_KEYS.indexOf(\n          sortObj.name\n        );\n        paramsObject.sortDirection = sortObj.direction;\n      }\n      if (paramsObject.first) {\n        setFirstRule(paramsObject.first);\n        delete paramsObject.first;\n      }\n      updateFilters({ ...filters, ...paramsObject });\n    }\n  }, []);\n\n  useEffect(() => {\n    setFilteredRows(buildFilteredRows(reports, filters));\n  }, [data, filters]);\n\n  useEffect(() => {\n    setDisplayedRows(\n      buildDisplayedRows(filteredRows, filters.sortIndex, filters.sortDirection)\n    );\n    setRowsFiltered(true);\n  }, [filteredRows]);\n\n  const handleOnCollapse = (_e, rowId, isOpen) => {\n    if (rowId === undefined) {\n      // if undefined, all rows are affected\n      setIsAllExpanded(isOpen);\n      setDisplayedRows(\n        displayedRows.map((row) => ({\n          ...row,\n          isOpen: isOpen,\n        }))\n      );\n    } else {\n      setDisplayedRows(\n        displayedRows.map((row, index) =>\n          index === rowId ? { ...row, isOpen } : row\n        )\n      );\n    }\n  };\n\n  const buildFilteredRows = (allRows, filters) => {\n    setRowsFiltered(false);\n    const expandedRowsSet = new Set(\n      displayedRows\n        .filter((ruleExpanded) => ruleExpanded?.isOpen)\n        .map((object) => object?.rule?.rule_id)\n    );\n\n    return allRows\n      .filter((rule) => passFilters(rule, filters))\n      .map((value, key) => [\n        {\n          rule: value,\n          isOpen: isAllExpanded || expandedRowsSet?.has(value?.rule_id),\n          cells: [\n            {\n              title: (\n                <div>\n                  {value?.description || value?.rule_id}{' '}\n                  <RuleLabels rule={value} />\n                </div>\n              ),\n            },\n            {\n              title: (\n                <div key={key}>\n                  <DateFormat\n                    date={value.created_at}\n                    type=\"relative\"\n                    tooltipProps={{ position: TooltipPosition.bottom }}\n                  />\n                </div>\n              ),\n            },\n            value.impacted\n              ? {\n                  title: (\n                    <div key={key}>\n                      <DateFormat\n                        extraTitle={`${intl.formatMessage(\n                          messages.impacted\n                        )}: `}\n                        date={value.impacted}\n                        type=\"relative\"\n                        tooltipProps={{ position: TooltipPosition.bottom }}\n                      />\n                    </div>\n                  ),\n                }\n              : {\n                  title: (\n                    <Tooltip\n                      key={key}\n                      content={\n                        <span>\n                          {intl.formatMessage(messages.impacted) + ': '}\n                          {intl.formatMessage(messages.nA)}\n                        </span>\n                      }\n                    >\n                      <span>{intl.formatMessage(messages.nA)}</span>\n                    </Tooltip>\n                  ),\n                },\n            {\n              title: (\n                <div key={key} style={{ verticalAlign: 'top' }}>\n                  {value?.likelihood && value?.impact ? (\n                    <Tooltip\n                      key={key}\n                      position={TooltipPosition.bottom}\n                      content={\n                        // TODO: refine fields lookup\n                        <span>\n                          The <strong>likelihood</strong> that this will be a\n                          problem is{' '}\n                          {value.likelihood\n                            ? LIKELIHOOD_LABEL[value.likelihood]\n                            : 'unknown'}\n                          .The <strong>impact</strong> of the problem would be{' '}\n                          {value.impact\n                            ? IMPACT_LABEL[value.impact]\n                            : 'unknown'}{' '}\n                          if it occurred.\n                        </span>\n                      }\n                    >\n                      <InsightsLabel\n                        value={value.total_risk}\n                        rest={{ isCompact: true }}\n                      />\n                    </Tooltip>\n                  ) : (\n                    <InsightsLabel\n                      value={value.total_risk}\n                      rest={{ isCompact: true }}\n                    />\n                  )}\n                </div>\n              ),\n            },\n          ],\n        },\n        {\n          fullWidth: true,\n          cells: [\n            {\n              title: (\n                <ReportDetails\n                  key={`child-${key}`}\n                  report={{\n                    rule: value,\n                    resolution: value.resolution,\n                    details: value.extra_data,\n                  }}\n                />\n              ),\n            },\n          ],\n        },\n      ]);\n  };\n\n  const buildDisplayedRows = (rows, index, direction) => {\n    let sortingRows = [...rows];\n    if (index >= 0 && !firstRule) {\n      const d = direction === SortByDirection.asc ? 1 : -1;\n      sortingRows = [...rows].sort((firstItem, secondItem) => {\n        let fst = firstItem[0].rule[CLUSTER_RULES_COLUMNS_KEYS[index]];\n        let snd = secondItem[0].rule[CLUSTER_RULES_COLUMNS_KEYS[index]];\n        if (index === CLUSTER_RULES_IMPACTED_CELL) {\n          //sorting for the impacted column\n          fst = new Date(firstItem[0].rule.impacted || 0);\n          snd = new Date(secondItem[0].rule.impacted || 0);\n        }\n        return fst > snd ? d : snd > fst ? -d : 0;\n      });\n    } else if (firstRule) {\n      const i = rows.findIndex((row) => {\n        const rule = row[0].rule;\n        /* rule_id is given with the plugin name only,\n           thus we need to look at extra_data for the error key */\n        return (\n          rule.rule_id.split('.report')[0] === getPluginName(firstRule) &&\n          rule.extra_data.error_key === getErrorKey(firstRule)\n        );\n      });\n      i !== -1 && sortingRows.unshift(sortingRows.splice(i, 1)[0]);\n    }\n    return sortingRows.flatMap((row, index) => {\n      const updatedRow = [...row];\n      if (expandFirst && index === 0) {\n        row[0].isOpen = true;\n      }\n      row[1].parent = index * 2;\n      return updatedRow;\n    });\n  };\n\n  const onSort = (_e, index, direction) => {\n    setRowsFiltered(false);\n    setExpandFirst(false);\n    setFirstRule('');\n    return updateFilters({\n      ...filters,\n      sortIndex: index,\n      sortDirection: direction,\n    });\n  };\n\n  const filterConfigItems = [\n    {\n      label: 'description',\n      type: 'text',\n      filterValues: {\n        key: 'text-filter',\n        onChange: (_e, value) => addFilterParam('text', value),\n        value: filters.text,\n      },\n    },\n    {\n      label: FC.total_risk.title,\n      type: FC.total_risk.type,\n      id: FC.total_risk.urlParam,\n      value: `checkbox-${FC.total_risk.urlParam}`,\n      filterValues: {\n        key: `${FC.total_risk.urlParam}-filter`,\n        onChange: (_e, values) =>\n          addFilterParam(FILTER_CATEGORIES.total_risk.urlParam, values),\n        value: filters.total_risk,\n        items: FC.total_risk.values,\n      },\n    },\n    {\n      label: FC.category.title,\n      type: FC.category.type,\n      id: FC.category.urlParam,\n      value: `checkbox-${FC.category.urlParam}`,\n      filterValues: {\n        key: `${FC.category.urlParam}-filter`,\n        onChange: (_e, values) =>\n          addFilterParam(FILTER_CATEGORIES.category.urlParam, values),\n        value: filters.category,\n        items: FC.category.values,\n      },\n    },\n  ];\n\n  const pruneFilters = (localFilters, filterCategories) => {\n    const prunedFilters = Object.entries(localFilters);\n    return prunedFilters.length > 0\n      ? prunedFilters.reduce((arr, item) => {\n          if (filterCategories[item[0]]) {\n            const category = filterCategories[item[0]];\n            const chips = Array.isArray(item[1])\n              ? item[1].map((value) => {\n                  const selectedCategoryValue = category.values.find(\n                    (values) => values.value === String(value)\n                  );\n                  return selectedCategoryValue\n                    ? {\n                        name:\n                          selectedCategoryValue.text ||\n                          selectedCategoryValue.label,\n                        value,\n                      }\n                    : { name: value, value };\n                })\n              : [\n                  {\n                    name: category.values.find(\n                      (values) => values.value === String(item[1])\n                    ).label,\n                    value: item[1],\n                  },\n                ];\n            return [\n              ...arr,\n              {\n                category: capitalize(category.title),\n                chips,\n                urlParam: category.urlParam,\n              },\n            ];\n          } else if (item[0] === 'text') {\n            return [\n              ...arr,\n              ...(item[1].length > 0\n                ? [\n                    {\n                      category: intl.formatMessage(messages.description),\n                      chips: [{ name: item[1], value: item[1] }],\n                      urlParam: item[0],\n                    },\n                  ]\n                : []),\n            ];\n          } else {\n            return arr;\n          }\n        }, [])\n      : [];\n  };\n\n  const buildFilterChips = () => {\n    const localFilters = { ...filters };\n    delete localFilters.sortIndex;\n    delete localFilters.sortDirection;\n    return pruneFilters(localFilters, FILTER_CATEGORIES);\n  };\n\n  const activeFiltersConfig = {\n    deleteTitle: intl.formatMessage(messages.resetFilters),\n    filters: buildFilterChips(),\n    onDelete: (_event, itemsToRemove, isAll) => {\n      if (isAll) {\n        resetFilters(filters, CLUSTER_RULES_INITIAL_STATE, updateFilters);\n      } else {\n        itemsToRemove.map((item) => {\n          const newFilter = {\n            [item.urlParam]: Array.isArray(filters[item.urlParam])\n              ? filters[item.urlParam].filter(\n                  (value) => String(value) !== String(item.chips[0].value)\n                )\n              : '',\n          };\n          newFilter[item.urlParam].length > 0\n            ? updateFilters({ ...filters, ...newFilter })\n            : removeFilterParam(item.urlParam);\n        });\n      }\n    },\n  };\n\n  return (\n    <div id=\"cluster-recs-list-table\" data-ouia-safe={!loadingState}>\n      <PrimaryToolbar\n        filterConfig={{\n          items: filterConfigItems,\n          isDisabled: loadingState || errorState || reports.length === 0,\n        }}\n        pagination={\n          <React.Fragment>\n            {results === 1\n              ? `${results} ${intl.formatMessage(messages.recommendation)}`\n              : `${results} ${intl.formatMessage(messages.recommendations)}`}\n          </React.Fragment>\n        }\n        activeFiltersConfig={\n          loadingState || errorState || reports.length === 0\n            ? undefined\n            : activeFiltersConfig\n        }\n      />\n      <Table\n        aria-label={'Cluster recommendations table'}\n        ouiaId=\"recommendations\"\n        ouiaSafe={!loadingState}\n        onCollapse={handleOnCollapse} // TODO: set undefined when there is an empty state\n        rows={\n          errorState || loadingState || noMatch || noInput ? (\n            [\n              {\n                fullWidth: true,\n                cells: [\n                  {\n                    props: {\n                      colSpan: CLUSTER_RULES_COLUMNS.length + 1,\n                    },\n                    title: errorState ? (\n                      error?.status === 404 ? (\n                        <NoInsightsResults /> // no Insights results received yet\n                      ) : (\n                        <NoRecsError /> // any other problem\n                      )\n                    ) : loadingState ? (\n                      <Loading />\n                    ) : noInput ? (\n                      <NoRecsAffecting />\n                    ) : (\n                      <NoMatchingRecs />\n                    ),\n                  },\n                ],\n              },\n            ]\n          ) : successState ? (\n            displayedRows\n          ) : (\n            <ErrorState />\n          )\n        }\n        cells={CLUSTER_RULES_COLUMNS}\n        sortBy={{\n          index: filters.sortIndex,\n          direction: filters.sortDirection,\n        }}\n        onSort={onSort}\n        variant={TableVariant.compact}\n        isStickyHeader\n        canCollapseAll\n      >\n        <TableHeader />\n        <TableBody />\n      </Table>\n    </div>\n  );\n};\n\nexport default ClusterRules;\n","import { Flex, Icon } from '@patternfly/react-core';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\nimport InfoCircleIcon from '@patternfly/react-icons/dist/js/icons/info-circle-icon';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-triangle-icon';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport {\n  Table /* data-codemods */,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from '@patternfly/react-table';\nimport React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useGetUpdateRisksState } from '../../Services/SmartProxy';\n\nexport const ALERTS_SEVERITY_ICONS = {\n  critical: (\n    <Icon status=\"danger\">\n      <ExclamationCircleIcon />\n    </Icon>\n  ),\n  warning: (\n    <Icon status=\"warning\">\n      <ExclamationTriangleIcon />\n    </Icon>\n  ),\n  info: (\n    <Icon status=\"info\">\n      <InfoCircleIcon />\n    </Icon>\n  ),\n  success: (\n    <Icon status=\"success\">\n      <CheckCircleIcon />\n    </Icon>\n  ),\n};\n\nexport const ALERTS_SEVERITY_LABEL = {\n  critical: (\n    <Flex alignItems={{ default: 'alignItemsCenter' }}>\n      {ALERTS_SEVERITY_ICONS['critical']} <b>Critical</b>\n    </Flex>\n  ),\n  warning: (\n    <Flex alignItems={{ default: 'alignItemsCenter' }}>\n      {ALERTS_SEVERITY_ICONS['warning']} <b>Warning</b>\n    </Flex>\n  ),\n  info: (\n    <Flex alignItems={{ default: 'alignItemsCenter' }}>\n      {ALERTS_SEVERITY_ICONS['info']} <b>Info</b>\n    </Flex>\n  ),\n};\n\nexport const ALERTS_SEVERITY_ORDER = ['critical', 'warning', 'info'];\n\nconst AlertsList = () => {\n  const { clusterId } = useParams();\n  const { data } = useGetUpdateRisksState({ id: clusterId });\n  const { alerts = [] } =\n    data?.upgrade_recommendation?.upgrade_risks_predictors || {};\n\n  return (\n    <Table aria-label=\"Alerts firing table\" variant=\"compact\" borders={false}>\n      <Thead>\n        <Tr>\n          <Th width={50}>Name</Th>\n          <Th width={25}>Status</Th>\n          <Th width={25}>Namespace</Th>\n        </Tr>\n      </Thead>\n      <Tbody>\n        {alerts.map(({ name, namespace, severity, url = '' }) => (\n          <Tr key={name}>\n            <Td className=\"alerts__name\">\n              {url === '' ? name : <a href={url}>{name}</a>}\n            </Td>\n            <Td className=\"alerts__severity\">\n              {ALERTS_SEVERITY_LABEL[severity]}\n            </Td>\n            <Td className=\"alerts__namespace\">{namespace}</Td>\n          </Tr>\n        ))}\n      </Tbody>\n    </Table>\n  );\n};\n\nexport default AlertsList;\n","import React from 'react';\nimport {\n  Table /* data-codemods */,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from '@patternfly/react-table';\nimport { useParams } from 'react-router-dom';\nimport { useGetUpdateRisksState } from '../../Services/SmartProxy';\nimport { Flex, Icon } from '@patternfly/react-core';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-triangle-icon';\n\nconst ClusterOperatorsList = () => {\n  const { clusterId } = useParams();\n  const { data } = useGetUpdateRisksState({ id: clusterId });\n  const { operator_conditions: conditions = [] } =\n    data?.upgrade_recommendation?.upgrade_risks_predictors || {};\n\n  return (\n    <Table\n      aria-label=\"Cluster operators firing table\"\n      variant=\"compact\"\n      borders={false}\n    >\n      <Thead>\n        <Tr>\n          <Th width={50}>Name</Th>\n          <Th width={25}>Status</Th>\n          <Th width={25}>Message</Th>\n        </Tr>\n      </Thead>\n      <Tbody>\n        {conditions.map(({ name, condition, reason, url = '' }) => (\n          <Tr key={name}>\n            <Td class=\"operators__name\">\n              {url === '' ? name : <a href={url}>{name}</a>}\n            </Td>\n            <Td class=\"operators__status\">\n              <Flex alignItems={{ default: 'alignItemsCenter' }}>\n                <Icon status=\"warning\">\n                  <ExclamationTriangleIcon />\n                </Icon>\n                <b>{condition}</b>\n              </Flex>\n            </Td>\n            <Td class=\"operators__message\">{reason || '-'}</Td>\n          </Tr>\n        ))}\n      </Tbody>\n    </Table>\n  );\n};\n\nexport default ClusterOperatorsList;\n","import {\n  EmptyState,\n  EmptyStateIcon,\n  Flex,\n  Icon,\n  Label,\n  Spinner,\n  EmptyStateHeader,\n} from '@patternfly/react-core';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-triangle-icon';\nimport {\n  ExpandableRowContent,\n  Table /* data-codemods */,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from '@patternfly/react-table';\nimport ErrorState from '@redhat-cloud-services/frontend-components/ErrorState';\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useGetUpdateRisksQuery } from '../../Services/SmartProxy';\nimport {\n  NoUpdateRisks,\n  UpdateRisksNotAvailable,\n} from '../MessageState/EmptyStates';\nimport AlertsList, {\n  ALERTS_SEVERITY_ICONS,\n  ALERTS_SEVERITY_ORDER,\n} from './AlertsList';\nimport ClusterOperatorsList from './ClusterOperatorsList';\n\nconst UpdateRisksTable = () => {\n  const { clusterId } = useParams();\n  const { isError, isUninitialized, isFetching, isSuccess, data, error } =\n    useGetUpdateRisksQuery({ id: clusterId });\n  const { alerts = [], operator_conditions: conditions = [] } =\n    data?.upgrade_recommendation?.upgrade_risks_predictors || {};\n\n  const alertsDisabled = alerts.length === 0;\n  const conditionsDisabled = conditions.length === 0;\n\n  const [alertsExpanded, setAlertsExpanded] = useState(true);\n  const [operatorsExpanded, setOperatorsExpanded] = useState(true);\n\n  useEffect(() => {\n    setAlertsExpanded(!alertsDisabled);\n    setOperatorsExpanded(!conditionsDisabled);\n  }, [data]);\n\n  const hasRisks = isSuccess && (alerts.length > 0 || conditions.length > 0);\n  const noRisks = isSuccess && alerts.length === 0 && conditions.length === 0;\n\n  return isUninitialized || isFetching ? (\n    <EmptyState>\n      <EmptyStateHeader icon={<EmptyStateIcon icon={Spinner} />} />\n    </EmptyState>\n  ) : (\n    <Table\n      aria-label=\"Update risks table\"\n      isExpandable\n      variant=\"compact\"\n      id=\"update-risks-table\"\n      borders={hasRisks}\n    >\n      <Thead>\n        <Tr>\n          <Th />\n          <Th>Name</Th>\n        </Tr>\n      </Thead>\n      {hasRisks ? (\n        <>\n          <Tbody isExpanded={alertsExpanded}>\n            <Tr className=\"alerts__header\">\n              <Td\n                expand={\n                  alertsDisabled\n                    ? {}\n                    : {\n                        rowIndex: 0,\n                        isExpanded: alertsExpanded,\n                        onToggle: () => setAlertsExpanded(!alertsExpanded),\n                      }\n                }\n              />\n              <Td>\n                <Flex alignItems={{ default: 'alignItemsCenter' }}>\n                  {alertsDisabled\n                    ? ALERTS_SEVERITY_ICONS['success']\n                    : ALERTS_SEVERITY_ICONS[ // this algorithm helps to decide which icon (the most severe) to show\n                        ALERTS_SEVERITY_ORDER.filter((s) =>\n                          alerts.some(({ severity }) => s === severity)\n                        )[0]\n                      ]}\n                  <b>Alerts firing</b>\n                  <Label\n                    isCompact\n                    id=\"alerts-label\"\n                    color={alertsDisabled ? 'green' : 'grey'}\n                  >\n                    {alerts.length} update risks\n                  </Label>\n                </Flex>\n              </Td>\n            </Tr>\n            <Tr isExpanded={alertsExpanded} className=\"alerts__content\">\n              <Td />\n              <Td>\n                <ExpandableRowContent>\n                  <AlertsList />\n                </ExpandableRowContent>\n              </Td>\n            </Tr>\n          </Tbody>\n          <Tbody isExpanded={operatorsExpanded}>\n            <Tr className=\"operators__header\">\n              <Td\n                expand={\n                  conditionsDisabled\n                    ? undefined\n                    : {\n                        rowIndex: 1,\n                        isExpanded: operatorsExpanded,\n                        onToggle: () =>\n                          setOperatorsExpanded(!operatorsExpanded),\n                      }\n                }\n              />\n              <Td>\n                <Flex alignItems={{ default: 'alignItemsCenter' }}>\n                  {conditionsDisabled ? (\n                    ALERTS_SEVERITY_ICONS['success']\n                  ) : (\n                    <Icon status=\"warning\">\n                      <ExclamationTriangleIcon />\n                    </Icon>\n                  )}\n                  <b>Cluster operators</b>\n                  <Label\n                    isCompact\n                    id=\"operator-conditions-label\"\n                    color={conditionsDisabled ? 'green' : 'grey'}\n                  >\n                    {conditions.length} update risks\n                  </Label>\n                </Flex>\n              </Td>\n            </Tr>\n            <Tr isExpanded={operatorsExpanded} className=\"operators__content\">\n              <Td />\n              <Td>\n                <ExpandableRowContent>\n                  <ClusterOperatorsList />\n                </ExpandableRowContent>\n              </Td>\n            </Tr>\n          </Tbody>\n        </>\n      ) : (\n        <Tbody>\n          <Tr>\n            <Td colSpan={2}>\n              {noRisks ? (\n                <NoUpdateRisks />\n              ) : isError && error.status === 404 ? (\n                <UpdateRisksNotAvailable />\n              ) : (\n                <ErrorState />\n              )}\n            </Td>\n          </Tr>\n        </Tbody>\n      )}\n    </Table>\n  );\n};\n\nexport default UpdateRisksTable;\n","import useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport get from 'lodash/get';\nimport React, { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useGetUpdateRisksState } from '../../Services/SmartProxy';\n\nconst UPDATE_RISKS_TRACK_EVENT_ID = 'ocp-upgrade-risks-viewed';\n\nconst UpdateRisksTracker = () => {\n  const { analytics } = useChrome();\n  const { clusterId } = useParams();\n  const { isError, isSuccess, data } = useGetUpdateRisksState({\n    id: clusterId,\n  });\n\n  useEffect(() => {\n    if (isError || isSuccess) {\n      analytics.track(UPDATE_RISKS_TRACK_EVENT_ID, {\n        cluster_id: clusterId,\n        upgrade_recommended: get(\n          data,\n          'upgrade_recommendation.upgrade_recommended',\n          null\n        ),\n      });\n    }\n  }, [isError, isSuccess]);\n\n  return <></>;\n};\n\nexport default UpdateRisksTracker;\n","import get from 'lodash/get';\nimport { useParams } from 'react-router-dom';\n\nimport { useUpdateRisksFeatureFlag } from '../../Utilities/useFeatureFlag';\nimport { useGetClusterInfoState } from '../../Services/SmartProxy';\n\nconst useUpdateRisksFeature = (clusterId) => {\n  const updateRisksEnabled = useUpdateRisksFeatureFlag();\n  const id = clusterId || useParams().clusterId;\n  const clusterInfo = useGetClusterInfoState({ id }); // doesn't request new data, uses cache\n  const isManaged = get(clusterInfo, 'data.managed', true);\n\n  return updateRisksEnabled && !isManaged;\n};\n\nexport default useUpdateRisksFeature;\n","import { Card, CardBody, Tab, Tabs } from '@patternfly/react-core';\nimport React, { useEffect, useState } from 'react';\n\nimport { useIntl } from 'react-intl';\nimport { useParams, useSearchParams } from 'react-router-dom';\nimport messages from '../../Messages';\nimport { setSearchParameter } from '../../Utilities/Helpers';\nimport ClusterRules from '../ClusterRules/ClusterRules';\nimport { UpdateRisksTable } from '../UpdateRisksTable';\nimport { UpdateRisksTracker } from '../UpdateRisksTracker';\nimport useUpdateRisksFeature from '../UpdateRisksTable/useUpdateRisksFeature';\n\nconst CLUSTER_TABS = ['recommendations', 'update_risks'];\n\nconst ClusterTabs = () => {\n  const intl = useIntl();\n  const [searchParams] = useSearchParams();\n  const { clusterId } = useParams();\n  const updateRisksEnabled = useUpdateRisksFeature(clusterId);\n\n  const [activeKey, setActiveKey] = useState('recommendations');\n\n  useEffect(() => {\n    const tabKey = searchParams.get('active_tab');\n    setActiveKey(\n      updateRisksEnabled && CLUSTER_TABS.includes(tabKey)\n        ? tabKey\n        : 'recommendations'\n    );\n  }, [updateRisksEnabled]);\n\n  return (\n    <Card isCompact>\n      <CardBody>\n        <Tabs\n          activeKey={activeKey}\n          onSelect={(event, key) => {\n            setSearchParameter('active_tab', key);\n            setActiveKey(key);\n          }}\n          aria-label=\"Cluster tabs\"\n        >\n          <Tab\n            eventKey=\"recommendations\"\n            title={intl.formatMessage(messages.recommendations)}\n            ouiaId=\"recommendations-tab\"\n          >\n            {activeKey === 'recommendations' && <ClusterRules />}\n          </Tab>\n          {updateRisksEnabled && (\n            <Tab\n              eventKey=\"update_risks\"\n              title={intl.formatMessage(messages.updateRisks)}\n              ouiaId=\"update-risks-tab\"\n            >\n              {activeKey === 'update_risks' && (\n                <>\n                  <UpdateRisksTracker />\n                  <UpdateRisksTable />\n                </>\n              )}\n            </Tab>\n          )}\n        </Tabs>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default ClusterTabs;\n","import { Alert } from '@patternfly/react-core';\nimport React from 'react';\nimport { useIntl } from 'react-intl';\nimport { useParams } from 'react-router-dom';\nimport messages from '../../Messages';\nimport { useGetUpdateRisksQuery } from '../../Services/SmartProxy';\nimport { strong } from '../../Utilities/Helpers';\n\nconst UpdateRisksAlert = () => {\n  const intl = useIntl();\n  const { clusterId } = useParams();\n  const { isError, isUninitialized, isFetching, isSuccess, data, error } =\n    useGetUpdateRisksQuery({ id: clusterId });\n  const { alerts = [], operator_conditions: conditions = [] } =\n    data?.upgrade_recommendation?.upgrade_risks_predictors || {};\n\n  const hasRisks = isSuccess && (alerts.length > 0 || conditions.length > 0);\n  const noRisks = isSuccess && alerts.length === 0 && conditions.length === 0;\n\n  return isUninitialized || isFetching ? (\n    <></>\n  ) : hasRisks ? (\n    <Alert\n      variant=\"warning\"\n      isInline\n      title={intl.formatMessage(messages.resolveUpdateRisks)}\n      ouiaId=\"update-risks-alert\"\n    >\n      {intl.formatMessage(messages.resolveUpdateRisksDesc, { strong })}\n    </Alert>\n  ) : noRisks ? (\n    <Alert\n      variant=\"success\"\n      isInline\n      title={intl.formatMessage(messages.noKnownUpdateRisks)}\n      ouiaId=\"update-risks-alert\"\n    />\n  ) : isError && error.status === 404 ? (\n    <Alert\n      variant=\"warning\"\n      isInline\n      title={intl.formatMessage(messages.updateRisksNotCurrentlyAvailable)}\n      ouiaId=\"update-risks-alert\"\n    >\n      {intl.formatMessage(messages.updateRisksNotAvailableDesc)}\n    </Alert>\n  ) : (\n    <></>\n  );\n};\n\nexport default UpdateRisksAlert;\n","import './_Cluster.scss';\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport PageHeader from '@redhat-cloud-services/frontend-components/PageHeader';\nimport ClusterHeader from '../ClusterHeader';\nimport Breadcrumbs from '../Breadcrumbs';\nimport ClusterTabs from '../ClusterTabs/ClusterTabs';\nimport { Flex, FlexItem, PageSection } from '@patternfly/react-core';\nimport { UpdateRisksAlert } from '../UpdateRisksAlert';\nimport useUpdateRisksFeature from '../UpdateRisksTable/useUpdateRisksFeature';\n\nexport const Cluster = ({ cluster, clusterId }) => {\n  const areUpdateRisksEnabled = useUpdateRisksFeature(clusterId);\n\n  // TODO: make breadcrumbs take display name from GET /cluster/id/info\n  return (\n    <React.Fragment>\n      <PageHeader className=\"pf-m-light ins-inventory-detail\">\n        <Flex direction={{ default: 'column' }}>\n          <FlexItem>\n            <Breadcrumbs\n              current={cluster?.data?.report.meta.cluster_name || clusterId}\n            />\n            <ClusterHeader />\n          </FlexItem>\n          {areUpdateRisksEnabled && <UpdateRisksAlert />}\n        </Flex>\n      </PageHeader>\n      <PageSection>\n        <ClusterTabs cluster={cluster} />\n      </PageSection>\n    </React.Fragment>\n  );\n};\n\nCluster.propTypes = {\n  cluster: PropTypes.object.isRequired,\n  clusterId: PropTypes.string.isRequired,\n};\n","import React, { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\n\nimport { useGetClusterByIdQuery } from '../../Services/SmartProxy';\nimport messages from '../../Messages';\nimport { Cluster } from './Cluster';\n\nconst ClusterWrapper = () => {\n  const intl = useIntl();\n  const { clusterId } = useParams();\n  const cluster = useGetClusterByIdQuery({\n    id: clusterId,\n    includeDisabled: false,\n  });\n  const chrome = useChrome();\n\n  useEffect(() => {\n    cluster.refetch();\n  }, [clusterId]);\n\n  useEffect(() => {\n    const subnav = `${\n      cluster?.data?.report?.meta?.cluster_name || clusterId\n    } - ${intl.formatMessage(messages.clusters)}`;\n    chrome.updateDocumentTitle(\n      intl.formatMessage(messages.documentTitle, { subnav })\n    );\n  }, [cluster, clusterId]);\n  return <Cluster cluster={cluster} clusterId={clusterId} />;\n};\n\nexport default ClusterWrapper;\n","import { TooltipPosition } from '@patternfly/react-core/dist/js/components/Tooltip/Tooltip';\nimport { Tooltip, Label } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { useIntl } from 'react-intl';\nimport messages from '../../Messages';\n\nconst RuleLabels = ({ rule }) => {\n  const intl = useIntl();\n  return (\n    <React.Fragment>\n      {rule.disabled && (\n        <Tooltip\n          content={intl.formatMessage(messages.ruleIsDisabledTooltip)}\n          position={TooltipPosition.right}\n        >\n          <Label color=\"gray\" isCompact>\n            {intl.formatMessage(messages.disabled)}\n          </Label>\n        </Tooltip>\n      )}\n    </React.Fragment>\n  );\n};\n\nRuleLabels.propTypes = {\n  rule: PropTypes.object,\n};\n\nexport default RuleLabels;\n","import React from 'react';\nimport { Card, CardBody } from '@patternfly/react-core';\nimport { List } from 'react-content-loader';\n\nconst Loading = () => (\n  <Card ouiaId=\"loading-skeleton\">\n    <CardBody>\n      <List />\n    </CardBody>\n  </Card>\n);\n\nexport default Loading;\n","import React from 'react';\nimport ContentLoader from 'react-content-loader';\n\nconst OneLineLoader = () => (\n  <ContentLoader height={20}>\n    <rect x=\"0\" y=\"0\" rx=\"4\" ry=\"4\" width=\"300\" height=\"20\" />\n  </ContentLoader>\n);\n\nexport { OneLineLoader };\n"],"names":["Breadcrumbs","_ref","current","workloads","intl","useIntl","splitUrl","useLocation","pathname","split","React","Breadcrumb","ouiaId","BreadcrumbItem","className","Link","to","relative","concat","formatMessage","messages","insightsHeader","isActive","propTypes","PropTypes","ClusterHeader","_cluster$report","_cluster$report2","clusterId","clusterData","clusterInfo","location","window","_useState","useState","_useState2","_slicedToArray","isOpen","setIsOpen","isUninitializedCluster","isUninitialized","isFetchingCluster","isFetching","cluster","data","isUninitializedInfo","isFetchingInfo","info","dropDownItems","DropdownItem","key","onClick","assign","origin","includes","redirectOCM","clusterDetailsRedirect","Grid","id","md","hasGutter","GridItem","span","Title","size","headingLevel","Skeleton","display_name","Dropdown","popperProps","position","onOpenChange","autoFocus","toggle","toggleRef","MenuToggle","ref","dropDownActionSingleCluster","DropdownList","Stack","StackItem","lastSeen","OneLineLoader","report","meta","last_checked_at","DateFormat","date","type","unknown","isRequired","cluster_id","managed","status","useParams","useGetClusterByIdQuery","includeDisabled","useGetClusterInfoQuery","_data$report","dispatch","useDispatch","updateFilters","filters","updateClusterRulesFilters","useSelector","clusterRulesState","_useGetClusterByIdQue","isError","isSuccess","error","reports","filteredRows","setFilteredRows","_useState3","_useState4","displayedRows","setDisplayedRows","_useState5","_useState6","isAllExpanded","setIsAllExpanded","_useState7","_useState8","expandFirst","setExpandFirst","_useState9","_useState10","firstRule","setFirstRule","results","length","search","_useState11","_useState12","rowsFiltered","setRowsFiltered","loadingState","errorState","successState","noInput","noMatch","addFilterParam","param","values","_addFilterParam","useEffect","paramsObject","paramParser","sort","sortObj","translateSortParams","sortIndex","CLUSTER_RULES_COLUMNS_KEYS","indexOf","name","sortDirection","direction","first","_objectSpread","buildFilteredRows","buildDisplayedRows","localFilters","allRows","expandedRowsSet","Set","filter","ruleExpanded","map","object","_object$rule","rule","rule_id","passFilters","value","has","cells","title","description","RuleLabels","created_at","tooltipProps","TooltipPosition","bottom","impacted","extraTitle","Tooltip","content","nA","style","verticalAlign","likelihood","impact","LIKELIHOOD_LABEL","IMPACT_LABEL","InsightsLabel","total_risk","rest","isCompact","fullWidth","ReportDetails","resolution","details","extra_data","rows","index","sortingRows","_toConsumableArray","d","SortByDirection","asc","firstItem","secondItem","fst","snd","CLUSTER_RULES_IMPACTED_CELL","Date","i","findIndex","row","getPluginName","error_key","getErrorKey","unshift","splice","flatMap","updatedRow","parent","filterConfigItems","label","filterValues","onChange","_e","text","FC","urlParam","FILTER_CATEGORIES","items","category","activeFiltersConfig","deleteTitle","resetFilters","filterCategories","prunedFilters","Object","entries","reduce","arr","item","chips","Array","isArray","selectedCategoryValue","find","String","capitalize","pruneFilters","onDelete","_event","itemsToRemove","isAll","CLUSTER_RULES_INITIAL_STATE","newFilter","_defineProperty","_removeFilterParam","PrimaryToolbar","filterConfig","isDisabled","pagination","recommendation","recommendations","undefined","Table","ouiaSafe","onCollapse","rowId","props","colSpan","CLUSTER_RULES_COLUMNS","NoInsightsResults","NoRecsError","Loading","NoRecsAffecting","NoMatchingRecs","ErrorState","sortBy","onSort","variant","TableVariant","compact","isStickyHeader","canCollapseAll","TableHeader","TableBody","ALERTS_SEVERITY_ICONS","critical","Icon","ExclamationCircleIcon","warning","ExclamationTriangleIcon","InfoCircleIcon","success","CheckCircleIcon","ALERTS_SEVERITY_LABEL","Flex","alignItems","default","ALERTS_SEVERITY_ORDER","_data$upgrade_recomme","useGetUpdateRisksState","_ref$alerts","upgrade_recommendation","upgrade_risks_predictors","alerts","borders","Thead","Tr","Th","width","Tbody","_ref2","namespace","severity","_ref2$url","url","Td","href","_ref$operator_conditi","operator_conditions","conditions","condition","reason","class","_useGetUpdateRisksQue","useGetUpdateRisksQuery","alertsDisabled","conditionsDisabled","alertsExpanded","setAlertsExpanded","operatorsExpanded","setOperatorsExpanded","hasRisks","noRisks","EmptyState","EmptyStateHeader","icon","EmptyStateIcon","Spinner","isExpandable","isExpanded","expand","rowIndex","onToggle","s","some","Label","color","ExpandableRowContent","AlertsList","ClusterOperatorsList","NoUpdateRisks","UpdateRisksNotAvailable","analytics","useChrome","_useGetUpdateRisksSta","track","upgrade_recommended","get","updateRisksEnabled","useUpdateRisksFeatureFlag","useGetClusterInfoState","isManaged","CLUSTER_TABS","_useSearchParams","useSearchParams","searchParams","useUpdateRisksFeature","activeKey","setActiveKey","tabKey","Card","CardBody","Tabs","onSelect","event","setSearchParameter","Tab","eventKey","ClusterRules","updateRisks","UpdateRisksTracker","UpdateRisksTable","Alert","isInline","resolveUpdateRisks","resolveUpdateRisksDesc","strong","noKnownUpdateRisks","updateRisksNotCurrentlyAvailable","updateRisksNotAvailableDesc","Cluster","_cluster$data","areUpdateRisksEnabled","PageHeader","FlexItem","cluster_name","UpdateRisksAlert","PageSection","ClusterTabs","chrome","refetch","subnav","clusters","updateDocumentTitle","documentTitle","disabled","ruleIsDisabledTooltip","right","List","ContentLoader","height","x","y","rx","ry"],"sourceRoot":""}