{"version":3,"file":"js/361.8dc61ef146153651cc24.js","mappings":"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","sources":["webpack:///./src/Components/Common/Tables.js"],"sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport _ from 'lodash';\n\nimport { Tooltip } from '@patternfly/react-core/dist/js/components/Tooltip';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\n\nimport {\n  CLUSTER_FILTER_CATEGORIES,\n  FILTER_CATEGORIES,\n  intl,\n  RULE_CATEGORIES,\n} from '../../AppConstants';\nimport messages from '../../Messages';\n\nconst passFilters = (rule, filters) =>\n  Object.entries(filters).every(([filterKey, filterValue]) => {\n    switch (filterKey) {\n      case 'text':\n        return rule.description\n          .toLowerCase()\n          .includes(filterValue.toLowerCase());\n      case FILTER_CATEGORIES.total_risk.urlParam:\n        return filterValue.includes(String(rule.total_risk));\n      case FILTER_CATEGORIES.category.urlParam:\n        return rule.tags.find((c) =>\n          filterValue.includes(String(RULE_CATEGORIES[c]))\n        );\n      case FILTER_CATEGORIES.impact.urlParam:\n        return filterValue.includes(String(rule.impact));\n      case FILTER_CATEGORIES.impacting.urlParam:\n        return filterValue.length > 0\n          ? filterValue.some((v) => {\n              if (v === 'true') {\n                return rule.impacted_clusters_count > 0;\n              }\n              if (v === 'false') {\n                return rule.impacted_clusters_count === 0;\n              }\n            })\n          : true;\n      case FILTER_CATEGORIES.likelihood.urlParam:\n        return filterValue.includes(String(rule.likelihood));\n      case FILTER_CATEGORIES.rule_status.urlParam:\n        return (\n          filterValue === 'all' ||\n          (filterValue === 'disabled' && rule.disabled) ||\n          (filterValue === 'enabled' && !rule.disabled)\n        );\n      default:\n        return true;\n    }\n  });\n\nconst passFiltersCluster = (cluster, filters) =>\n  Object.entries(filters).every(([filterKey, filterValue]) => {\n    switch (filterKey) {\n      case 'text':\n        return (cluster.cluster_name || cluster.cluster_id)\n          .toLowerCase()\n          .includes(filterValue.toLowerCase());\n      case CLUSTER_FILTER_CATEGORIES.hits.urlParam:\n        return (\n          // clusters with at least one rule hit\n          (filterValue.length === 0 && parseInt(cluster.total_hit_count) > 0) ||\n          // all clusters\n          filterValue.includes('all') ||\n          // clusters with at least one rule hit for any of the active risk filters\n          filterValue.some((v) => cluster.hits_by_total_risk[v - 1] > 0)\n        );\n      default:\n        return true;\n    }\n  });\n\nconst mapClustersToRows = (clusters) =>\n  clusters.map((cluster, index) => ({\n    cluster,\n    cells: [\n      <span key={index}>\n        <Link to={`clusters/${cluster.cluster_id}`}>\n          {cluster.cluster_name || cluster.cluster_id}\n        </Link>\n      </span>,\n      cluster.total_hit_count,\n      cluster.hits_by_total_risk?.[3] || 0,\n      cluster.hits_by_total_risk?.[2] || 0,\n      cluster.hits_by_total_risk?.[1] || 0,\n      cluster.hits_by_total_risk?.[0] || 0,\n      <span key={index}>\n        {cluster.last_checked_at ? (\n          <DateFormat\n            extraTitle={`${intl.formatMessage(messages.lastSeen)}: `}\n            date={cluster.last_checked_at}\n            variant=\"relative\"\n          />\n        ) : (\n          <Tooltip\n            key={index}\n            content={\n              <span>\n                {intl.formatMessage(messages.lastSeen) + ': '}\n                {intl.formatMessage(messages.nA)}\n              </span>\n            }\n          >\n            <span>{intl.formatMessage(messages.nA)}</span>\n          </Tooltip>\n        )}\n      </span>,\n    ],\n  }));\n\nconst capitalize = (string) => string[0].toUpperCase() + string.substring(1);\n\nconst pruneFilters = (localFilters, filterCategories) => {\n  const prunedFilters = Object.entries(localFilters || {});\n  return prunedFilters.reduce((arr, it) => {\n    const [key, item] = it;\n    if (filterCategories[key]) {\n      const category = filterCategories[key];\n      const chips = Array.isArray(item)\n        ? item.map((value) => {\n            const selectedCategoryValue = category.values.find(\n              (values) => values.value === String(value)\n            );\n            return selectedCategoryValue\n              ? {\n                  name:\n                    selectedCategoryValue.text || selectedCategoryValue.label,\n                  value,\n                }\n              : { name: value, value };\n          })\n        : [\n            {\n              name: category.values.find(\n                (values) => values.value === String(item)\n              ).label,\n              value: item,\n            },\n          ];\n      return [\n        ...arr,\n        {\n          category: capitalize(category.title),\n          chips,\n          urlParam: category.urlParam,\n        },\n      ];\n    } else if (key === 'text') {\n      return [\n        ...arr,\n        ...(item.length > 0\n          ? [\n              {\n                category: 'Name',\n                chips: [{ name: item, value: item }],\n                urlParam: key,\n              },\n            ]\n          : []),\n      ];\n    }\n  }, []);\n};\n\nconst buildFilterChips = (filters, categories) => {\n  const localFilters = _.cloneDeep(filters);\n  delete localFilters.sortIndex;\n  delete localFilters.sortDirection;\n  delete localFilters.offset;\n  delete localFilters.limit;\n  localFilters?.hits &&\n    localFilters.hits.length === 0 &&\n    delete localFilters.hits;\n  return pruneFilters(localFilters, categories);\n};\n\nexport {\n  passFilters,\n  passFiltersCluster,\n  mapClustersToRows,\n  buildFilterChips,\n  capitalize,\n};\n"],"names":["passFilters","rule","filters","Object","entries","every","filterKey","filterValue","description","toLowerCase","includes","FILTER_CATEGORIES","String","total_risk","tags","find","c","RULE_CATEGORIES","impact","length","some","v","impacted_clusters_count","likelihood","disabled","passFiltersCluster","cluster","cluster_name","cluster_id","CLUSTER_FILTER_CATEGORIES","parseInt","total_hit_count","hits_by_total_risk","mapClustersToRows","clusters","map","index","cells","key","Link","to","last_checked_at","extraTitle","intl","messages","date","variant","Tooltip","content","capitalize","string","toUpperCase","substring","buildFilterChips","categories","localFilters","_","sortIndex","sortDirection","offset","limit","hits","filterCategories","reduce","arr","it","item","category","chips","Array","isArray","value","selectedCategoryValue","values","name","text","label","title","urlParam","pruneFilters"],"sourceRoot":""}