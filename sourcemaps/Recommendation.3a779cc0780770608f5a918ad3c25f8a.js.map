{"version":3,"file":"js/Recommendation.1651227688119.9302476228af4700740a.js","mappings":"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","sources":["webpack:///./src/Components/Breadcrumbs/index.js","webpack:///./src/Components/Loading/Loading.js","webpack:///./src/Components/AffectedClustersTable/AffectedClustersTable.js","webpack:///./src/Components/Modals/ViewHostAcks.js","webpack:///./src/Components/Recommendation/Recommendation.js","webpack:///./src/Components/Recommendation/index.js","webpack:///./src/Utilities/Loaders.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { Link, useLocation } from 'react-router-dom';\n\nimport { Breadcrumb } from '@patternfly/react-core/dist/js/components/Breadcrumb/Breadcrumb';\nimport { BreadcrumbItem } from '@patternfly/react-core/dist/js/components/Breadcrumb/BreadcrumbItem';\n\nimport messages from '../../Messages';\n\nconst Breadcrumbs = ({ current }) => {\n  const intl = useIntl();\n  const location = useLocation();\n  const splitUrl = location.pathname.split('/');\n\n  return (\n    <div>\n      <Breadcrumb ouiaId=\"detail\">\n        <BreadcrumbItem className=\"breadcrumb-item\">\n          <Link to={`/${splitUrl[1]}`}>\n            {`${intl.formatMessage(messages.insightsHeader)} ${splitUrl[1]}`}\n          </Link>\n        </BreadcrumbItem>\n        <BreadcrumbItem className=\"breadcrumb-item\" isActive>\n          {current}\n        </BreadcrumbItem>\n      </Breadcrumb>\n    </div>\n  );\n};\n\nBreadcrumbs.propTypes = {\n  current: PropTypes.string,\n};\n\nexport default Breadcrumbs;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card } from '@patternfly/react-core/dist/js/components/Card/Card';\nimport { CardBody } from '@patternfly/react-core/dist/js/components/Card/CardBody';\nimport { List } from 'react-content-loader';\n\nconst Loading = ({ id }) => (\n  <Card {...(id ? { id } : {})}>\n    <CardBody>\n      <List />\n    </CardBody>\n  </Card>\n);\n\nLoading.propTypes = {\n  id: PropTypes.string,\n};\n\nexport default Loading;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter/conditionalFilterConstants';\nimport PrimaryToolbar from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport { EmptyTable } from '@redhat-cloud-services/frontend-components/EmptyTable';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components/TableToolbar';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { Card, CardBody } from '@patternfly/react-core/dist/js/components/Card';\nimport { Table } from '@patternfly/react-table/dist/js/components/Table/Table';\nimport { TableBody } from '@patternfly/react-table/dist/js/components/Table/Body';\nimport { TableHeader } from '@patternfly/react-table/dist/js/components/Table/Header';\nimport { Bullseye } from '@patternfly/react-core/dist/js/layouts/Bullseye';\nimport { Tooltip } from '@patternfly/react-core/dist/js/components/Tooltip';\nimport {\n  Pagination,\n  PaginationVariant,\n} from '@patternfly/react-core/dist/js/components/Pagination/Pagination';\n\nimport {\n  ErrorState,\n  NoAffectedClusters,\n  NoMatchingClusters,\n} from '../MessageState/EmptyStates';\nimport {\n  AFFECTED_CLUSTERS_COLUMNS,\n  AFFECTED_CLUSTERS_LAST_SEEN,\n  AFFECTED_CLUSTERS_NAME_CELL,\n} from '../../AppConstants';\nimport Loading from '../Loading/Loading';\nimport { updateAffectedClustersFilters } from '../../Services/Filters';\nimport messages from '../../Messages';\nimport DisableRule from '../Modals/DisableRule';\n\nconst AffectedClustersTable = ({ query, rule, afterDisableFn }) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n\n  const [filteredRows, setFilteredRows] = useState([]);\n  const [displayedRows, setDisplayedRows] = useState([]);\n  const [disableRuleModalOpen, setDisableRuleModalOpen] = useState(false);\n  const [chips, setChips] = useState([]);\n  const [selected, setSelected] = useState([]);\n  const [host, setHost] = useState(undefined);\n\n  const {\n    isError,\n    isUninitialized,\n    isFetching,\n    isSuccess,\n    /* the response contains two lists: `disabled` has clusters\n      for which the rec is disabled (acked), and `enable` contains\n       clusters that are affected by the rec */\n    data = { disabled: [], enabled: [] },\n  } = query;\n  const rows = data.enabled;\n  const filters = useSelector(({ filters }) => filters.affectedClustersState);\n  const perPage = filters.limit;\n  const page = filters.offset / filters.limit + 1;\n  const allSelected = selected.length === filteredRows.length;\n\n  const updateFilters = (filters) =>\n    dispatch(updateAffectedClustersFilters(filters));\n\n  const updateNameChip = (chips, newValue) => {\n    const newChips = chips;\n    const nameCategoryIndex = newChips.findIndex(\n      (chip) => chip.category === 'Name'\n    );\n    if (newValue === '') {\n      newChips.splice(nameCategoryIndex);\n    } else {\n      if (nameCategoryIndex === -1) {\n        newChips.push({ category: 'Name', chips: [{ name: newValue }] });\n      } else {\n        newChips[nameCategoryIndex] = {\n          category: 'Name',\n          chips: [{ name: newValue }],\n        };\n      }\n    }\n    return newChips;\n  };\n\n  const onChipDelete = () => {\n    // right now, only designed to treat the Name (text) filter\n    const newFilters = { ...filters, text: '' };\n    updateFilters(newFilters);\n  };\n\n  const onNameFilterChange = (value) => {\n    const newFilters = { ...filters, text: value, offset: 0 };\n    updateFilters(newFilters);\n  };\n\n  const filterConfig = {\n    items: [\n      {\n        label: 'Name',\n        placeholder: 'Filter by name',\n        type: conditionalFilterType.text,\n        filterValues: {\n          id: 'name-filter',\n          key: 'name-filter',\n          onChange: (_e, value) => onNameFilterChange(value),\n          value: filters.text,\n        },\n      },\n    ],\n    isDisabled: isError || (rows && rows.length === 0),\n  };\n\n  const onSort = (_e, index, direction) => {\n    updateFilters({ ...filters, sortIndex: index, sortDirection: direction });\n  };\n\n  const onSetPage = (_e, pageNumber) => {\n    const newOffset = pageNumber * filters.limit - filters.limit;\n    updateFilters({ ...filters, offset: newOffset });\n  };\n\n  const onSetPerPage = (_e, perPage) => {\n    updateFilters({ ...filters, limit: perPage });\n  };\n\n  // constructs array of rows (from the initial data) checking currently applied filters\n  const buildFilteredRows = (allRows, filters) => {\n    const rows = allRows.map((r) => ({\n      id: r.cluster,\n      cells: [r?.cluster_name || r.cluster],\n      last_checked_at: r?.last_checked_at,\n    }));\n    return rows\n      .filter((row) => {\n        return row?.cells[0].toLowerCase().includes(filters.text.toLowerCase());\n      })\n      .sort((a, b) => {\n        let fst, snd;\n        const d = filters.sortDirection === 'asc' ? 1 : -1;\n        switch (filters.sortIndex) {\n          case AFFECTED_CLUSTERS_NAME_CELL:\n            if (filters.sortDirection === 'asc') {\n              return a?.cells[0].localeCompare(b?.cells[0]);\n            }\n            return b?.cells[0].localeCompare(a?.cells[0]);\n          case AFFECTED_CLUSTERS_LAST_SEEN:\n            fst = new Date(a.last_checked_at || 0);\n            snd = new Date(b.last_checked_at || 0);\n            return fst > snd ? d : snd > fst ? -d : 0;\n        }\n      });\n  };\n\n  const buildDisplayedRows = (rows) => {\n    return rows\n      .slice(perPage * (page - 1), perPage * (page - 1) + perPage)\n      .map((r) => ({\n        ...r,\n        cells: [\n          <span key={r.id}>\n            <Link to={`/clusters/${r.id}?first=${rule.rule_id}`}>\n              {r.cells[0]}\n            </Link>\n          </span>,\n          <span key={r.id}>\n            {r.last_checked_at ? (\n              <DateFormat\n                extraTitle={`${intl.formatMessage(messages.lastSeen)}: `}\n                date={r.last_checked_at}\n                variant=\"relative\"\n              />\n            ) : (\n              <Tooltip\n                key={r.id}\n                content={\n                  <span>\n                    {intl.formatMessage(messages.lastSeen) + ': '}\n                    {intl.formatMessage(messages.nA)}\n                  </span>\n                }\n              >\n                <span>{intl.formatMessage(messages.nA)}</span>\n              </Tooltip>\n            )}\n          </span>,\n        ],\n      }));\n  };\n\n  // if rowId === -1, then select all rows\n  const onSelect = (event, isSelected, rowId) => {\n    let rows;\n    rowId === -1\n      ? (rows = filteredRows.map((r) => ({ ...r, selected: isSelected })))\n      : (rows = filteredRows.map((r, i) => ({\n          ...r,\n          selected: i === rowId ? isSelected : r.selected,\n        })));\n    setSelected(rows.filter((r) => r.selected));\n    setFilteredRows(rows);\n    setDisplayedRows(buildDisplayedRows(rows));\n  };\n\n  useEffect(() => {\n    const newFilteredRows = buildFilteredRows(rows, filters);\n    const newDisplayedRows = buildDisplayedRows(newFilteredRows);\n    const newChips = updateNameChip(chips, filters.text);\n    setFilteredRows(newFilteredRows);\n    setDisplayedRows(newDisplayedRows);\n    setChips(newChips);\n  }, [query, filters]);\n\n  const handleModalToggle = (disableRuleModalOpen, host = undefined) => {\n    setDisableRuleModalOpen(disableRuleModalOpen);\n    setHost(host);\n  };\n\n  return (\n    <div id=\"affected-list-table\">\n      {disableRuleModalOpen && (\n        <DisableRule\n          handleModalToggle={handleModalToggle}\n          isModalOpen={disableRuleModalOpen}\n          rule={rule}\n          afterFn={afterDisableFn}\n          hosts={selected}\n          host={host}\n        />\n      )}\n      <PrimaryToolbar\n        filterConfig={filterConfig}\n        pagination={{\n          itemCount: filteredRows.length,\n          page,\n          perPage,\n          onSetPage: onSetPage,\n          onPerPageSelect: onSetPerPage,\n          ouiaId: 'pager',\n        }}\n        activeFiltersConfig={\n          isError || (rows && rows.length === 0)\n            ? undefined\n            : {\n                filters: chips,\n                deleteTitle: intl.formatMessage(messages.resetFilters),\n                onDelete: onChipDelete,\n              }\n        }\n        bulkSelect={{\n          count: selected.length,\n          items: [\n            {\n              title: intl.formatMessage(messages.selectNone),\n              onClick: (event) => onSelect(event, false, -1),\n            },\n            {\n              title: intl.formatMessage(messages.selectAll, {\n                items: filteredRows?.length || 0,\n              }),\n              onClick: (event) => onSelect(event, true, -1),\n            },\n          ],\n          checked: allSelected,\n          onSelect: (event) =>\n            allSelected\n              ? onSelect(event, false, -1)\n              : onSelect(event, true, -1),\n          ouiaId: 'clusters-selector',\n        }}\n        actionsConfig={{\n          actions: [\n            '',\n            {\n              label: intl.formatMessage(messages.disableRuleForClusters),\n              props: { isDisabled: selected.length === 0 },\n              onClick: () => handleModalToggle(true),\n            },\n          ],\n        }}\n      />\n      <Table\n        aria-label=\"Table of affected clusters\"\n        ouiaId=\"clusters\"\n        variant=\"compact\"\n        cells={AFFECTED_CLUSTERS_COLUMNS}\n        rows={displayedRows}\n        sortBy={{\n          index: filters.sortIndex,\n          direction: filters.sortDirection,\n        }}\n        onSort={onSort}\n        canSelectAll={false}\n        onSelect={displayedRows?.length > 0 ? onSelect : undefined}\n        actions={[\n          {\n            title: 'Disable recommendation for cluster',\n            onClick: (event, rowIndex) => {\n              return handleModalToggle(true, filteredRows[rowIndex].id);\n            },\n          },\n        ]}\n      >\n        <TableHeader />\n        {(isUninitialized || isFetching) && <Loading />}\n        {isError && (\n          <Card id=\"error-state-message\" ouiaId=\"error-state\">\n            <CardBody>\n              <ErrorState />\n            </CardBody>\n          </Card>\n        )}\n        {isSuccess && rows.length === 0 && (\n          <Card id=\"empty-state-message\" ouiaId=\"empty-state\">\n            <CardBody>\n              <NoAffectedClusters />\n            </CardBody>\n          </Card>\n        )}\n        {isSuccess &&\n          rows.length > 0 &&\n          (filteredRows.length > 0 ? (\n            <TableBody />\n          ) : (\n            <EmptyTable>\n              <Bullseye>\n                <NoMatchingClusters />\n              </Bullseye>\n            </EmptyTable>\n          ))}\n      </Table>\n      <TableToolbar isFooter className=\"ins-c-inventory__table--toolbar\">\n        <Pagination\n          variant={PaginationVariant.bottom}\n          itemCount={filteredRows.length}\n          page={page}\n          perPage={perPage}\n          onSetPage={onSetPage}\n          onPerPageSelect={onSetPerPage}\n          onPageInput={onSetPage}\n          ouiaId=\"pager\"\n        />\n      </TableToolbar>\n    </div>\n  );\n};\n\nAffectedClustersTable.propTypes = {\n  query: PropTypes.shape({\n    isError: PropTypes.bool.isRequired,\n    isUninitialized: PropTypes.bool.isRequired,\n    isFetching: PropTypes.bool.isRequired,\n    isSuccess: PropTypes.bool.isRequired,\n    data: PropTypes.array,\n  }),\n  rule: PropTypes.object,\n  afterDisableFn: PropTypes.func,\n};\n\nexport { AffectedClustersTable };\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { List } from 'react-content-loader';\nimport { useIntl } from 'react-intl';\nimport { useDispatch } from 'react-redux';\n\nimport {\n  Table,\n  TableBody,\n  TableHeader,\n  cellWidth,\n} from '@patternfly/react-table';\nimport { Button } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { Modal } from '@patternfly/react-core/dist/js/components/Modal/Modal';\nimport OutlinedBellIcon from '@patternfly/react-icons/dist/js/icons/outlined-bell-icon';\nimport { addNotification as notification } from '@redhat-cloud-services/frontend-components-notifications/';\n\nimport messages from '../../Messages';\nimport { enableRuleForCluster } from '../../Services/Acks';\n\nconst ViewHostAcks = ({\n  handleModalToggle,\n  isModalOpen,\n  clusters,\n  recId,\n  afterFn,\n}) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const addNotification = (data) => dispatch(notification(data));\n  const { data, isFetching, isLoading, refetch } = clusters;\n  const hostAcks = data?.disabled || [];\n  const [rows, setRows] = useState([]);\n  const [unclean, setUnclean] = useState(false);\n\n  const columns = [\n    {\n      title: intl.formatMessage(messages.clusterName),\n\n      transforms: [cellWidth(50)],\n    },\n    {\n      title: intl.formatMessage(messages.justificationNote),\n\n      transforms: [cellWidth(25)],\n    },\n    {\n      title: intl.formatMessage(messages.dateDisabled),\n\n      transforms: [cellWidth(15)],\n    },\n    '',\n  ];\n\n  const deleteAck = async (host) => {\n    try {\n      await enableRuleForCluster({ uuid: host.cluster_id, recId });\n      refetch();\n      setUnclean(true);\n    } catch (error) {\n      handleModalToggle(false);\n      addNotification({\n        variant: 'danger',\n        dismissable: true,\n        title: intl.formatMessage(messages.error),\n        description: `${error}`,\n      });\n    }\n  };\n\n  useEffect(() => {\n    const rows = hostAcks?.map((item) => ({\n      cells: [\n        item.cluster_name || item.cluster_id,\n        item.justification || intl.formatMessage(messages.none),\n        {\n          title: (\n            <DateFormat date={new Date(item.disabled_at)} type=\"onlyDate\" />\n          ),\n        },\n        {\n          title: (\n            <Button\n              key={item.cluster_id}\n              isInline\n              variant=\"link\"\n              onClick={() => deleteAck(item)}\n            >\n              <OutlinedBellIcon size=\"sm\" />\n              {` ${intl.formatMessage(messages.enable)}`}\n            </Button>\n          ),\n        },\n      ],\n    }));\n\n    if (!isLoading && hostAcks.length === 0) {\n      afterFn();\n      handleModalToggle(false);\n    }\n    setRows(rows);\n  }, [hostAcks]);\n\n  return (\n    <Modal\n      width={'75%'}\n      title={intl.formatMessage(messages.hostAckModalTitle)}\n      isOpen={isModalOpen}\n      onClose={() => {\n        unclean && afterFn();\n        handleModalToggle(false);\n      }}\n    >\n      {!isFetching ? (\n        <Table aria-label=\"host-ack-table\" rows={rows} cells={columns}>\n          <TableHeader />\n          <TableBody />\n        </Table>\n      ) : (\n        <Table\n          aria-label=\"host-ack-table\"\n          rows={[\n            {\n              cells: [{ props: { colSpan: 3 }, title: <List /> }],\n            },\n          ]}\n          cells={columns}\n        >\n          <TableHeader />\n          <TableBody />\n        </Table>\n      )}\n    </Modal>\n  );\n};\n\nViewHostAcks.propTypes = {\n  isModalOpen: PropTypes.bool,\n  handleModalToggle: PropTypes.func,\n  clusters: PropTypes.object,\n  recId: PropTypes.string,\n  afterFn: PropTypes.func,\n};\n\nViewHostAcks.defaultProps = {\n  isModalOpen: false,\n  handleModalToggle: () => undefined,\n  clusters: {},\n  recId: '',\n  afterFn: () => undefined,\n};\n\nexport default ViewHostAcks;\n","import './Recommendation.scss';\n\nimport React, { useMemo, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\n\nimport {\n  Card,\n  CardBody,\n  CardFooter,\n  CardHeader,\n} from '@patternfly/react-core/dist/js/components/Card';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { Label } from '@patternfly/react-core/dist/js/components/Label/Label';\nimport { Title } from '@patternfly/react-core/dist/js/components/Title/Title';\nimport { LabelGroup } from '@patternfly/react-core/dist/js/components/LabelGroup';\nimport BellSlashIcon from '@patternfly/react-icons/dist/js/icons/bell-slash-icon';\nimport CaretDownIcon from '@patternfly/react-icons/dist/js/icons/caret-down-icon';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { Button } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport { Dropdown } from '@patternfly/react-core/dist/js/components/Dropdown/Dropdown';\nimport { DropdownItem } from '@patternfly/react-core/dist/js/components/Dropdown/DropdownItem';\nimport { DropdownToggle } from '@patternfly/react-core/dist/js/components/Dropdown/DropdownToggle';\nimport { Flex } from '@patternfly/react-core/dist/js/layouts/Flex/Flex';\nimport { FlexItem } from '@patternfly/react-core/dist/js/layouts/Flex/FlexItem';\nimport { ErrorState } from '@redhat-cloud-services/frontend-components/ErrorState';\nimport {\n  AdvisorProduct,\n  RuleDetails,\n  RuleDetailsMessagesKeys,\n} from '@redhat-cloud-services/frontend-components-advisor-components';\n\nimport Breadcrumbs from '../Breadcrumbs';\nimport RuleLabels from '../Labels/RuleLabels';\nimport { FILTER_CATEGORIES, RULE_CATEGORIES } from '../../AppConstants';\nimport messages from '../../Messages';\nimport Loading from '../Loading/Loading';\nimport { adjustOCPRule } from '../../Utilities/Rule';\nimport MessageState from '../MessageState/MessageState';\nimport { AffectedClustersTable } from '../AffectedClustersTable/AffectedClustersTable';\nimport { Delete, Post } from '../../Utilities/Api';\nimport { BASE_URL } from '../../Services/SmartProxy';\nimport DisableRule from '../Modals/DisableRule';\nimport ViewHostAcks from '../Modals/ViewHostAcks';\nimport { OneLineLoader } from '../../Utilities/Loaders';\nimport { enableRuleForCluster } from '../../Services/Acks';\nimport { formatMessages, mapContentToValues } from '../../Utilities/intlHelper';\n\nconst Recommendation = ({ rule, ack, clusters, match }) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const notify = (data) => dispatch(addNotification(data));\n  const recId = match.params.recommendationId;\n  const [disableRuleModalOpen, setDisableRuleModalOpen] = useState(false);\n  const [actionsDropdownOpen, setActionsDropdownOpen] = useState(false);\n  const [viewSystemsModalOpen, setViewSystemsModalOpen] = useState(false);\n\n  // rule's info\n  const {\n    isError,\n    isUninitialized,\n    isLoading,\n    isFetching,\n    isSuccess,\n    data,\n    refetch,\n  } = rule;\n  // justification note, last time acknowledged, etc.\n  const { data: ackData, isFetching: ackIsFetching, refetch: refetchAck } = ack;\n  const ruleDate = new Date(ackData?.updated_at || ackData?.created_at);\n  // affected and acked clusters lists\n  const {\n    data: clustersData,\n    isFetching: clustersIsFetching,\n    refetch: refetchClusters,\n  } = clusters;\n\n  const content =\n    isSuccess && data ? adjustOCPRule(data.content, recId) : undefined;\n  const ackedClusters =\n    !clustersIsFetching && clustersData ? clustersData.disabled : undefined;\n\n  const afterDisableFn = async () => {\n    refetch();\n    refetchAck();\n    refetchClusters();\n  };\n\n  const handleModalToggle = (disableRuleModalOpen) => {\n    setDisableRuleModalOpen(disableRuleModalOpen);\n  };\n\n  const enableRecForHosts = async ({ uuids }) => {\n    try {\n      const requests = uuids.map((uuid) =>\n        enableRuleForCluster({ uuid, recId })\n      );\n      await Promise.all(requests);\n      refetch();\n      refetchAck();\n      refetchClusters();\n      notify({\n        variant: 'success',\n        timeout: true,\n        dismissable: true,\n        title: intl.formatMessage(messages.recSuccessfullyEnabledForCluster),\n      });\n    } catch (error) {\n      notify({\n        variant: 'danger',\n        dismissable: true,\n        title: intl.formatMessage(messages.error),\n        description: `${error}`,\n      });\n    }\n  };\n\n  const enableRule = async (rule) => {\n    try {\n      await Delete(`${BASE_URL}/v2/ack/${rule.data.content.rule_id}/`);\n      notify({\n        variant: 'success',\n        timeout: true,\n        dismissable: true,\n        title: intl.formatMessage(messages.recSuccessfullyEnabled),\n      });\n      refetch();\n    } catch (error) {\n      handleModalToggle(false);\n      notify({\n        variant: 'danger',\n        dismissable: true,\n        title: intl.formatMessage(messages.error),\n        description: `${error}`,\n      });\n    }\n  };\n\n  const messagesValues = useMemo(\n    () => (content ? mapContentToValues(intl, content) : {}),\n    [intl, content]\n  );\n\n  return (\n    <React.Fragment>\n      {viewSystemsModalOpen && (\n        <ViewHostAcks\n          handleModalToggle={(toggleModal) =>\n            setViewSystemsModalOpen(toggleModal)\n          }\n          isModalOpen={viewSystemsModalOpen}\n          clusters={clusters}\n          afterFn={() => refetchClusters()}\n          recId={recId}\n        />\n      )}\n      {disableRuleModalOpen && (\n        <DisableRule\n          handleModalToggle={handleModalToggle}\n          isModalOpen={disableRuleModalOpen}\n          rule={content}\n          afterFn={afterDisableFn}\n        />\n      )}\n      <PageHeader className=\"pageHeaderOverride\">\n        <Breadcrumbs current={content?.description || recId} />\n      </PageHeader>\n      {(isUninitialized || isLoading || isFetching) && (\n        <Main>\n          <Loading />\n        </Main>\n      )}\n      {isError && (\n        <Main>\n          <ErrorState />\n        </Main>\n      )}\n      {!(isUninitialized || isLoading || isFetching) && isSuccess && (\n        <React.Fragment>\n          <Main className=\"pf-m-light pf-u-pt-sm\">\n            <RuleDetails\n              messages={formatMessages(\n                intl,\n                RuleDetailsMessagesKeys,\n                messagesValues\n              )}\n              product={AdvisorProduct.ocp}\n              rule={content}\n              isDetailsPage\n              header={\n                <React.Fragment>\n                  <PageHeaderTitle\n                    title={\n                      <React.Fragment>\n                        {content.description} <RuleLabels rule={content} />\n                      </React.Fragment>\n                    }\n                  />\n                  <p>\n                    {intl.formatMessage(messages.rulesDetailsPubishdate, {\n                      date: (\n                        <DateFormat\n                          date={new Date(content.publish_date)}\n                          type=\"onlyDate\"\n                        />\n                      ),\n                    })}\n                    {content.tags &&\n                      (Array.isArray(content.tags) ? (\n                        <LabelGroup\n                          className=\"categoryLabels\"\n                          numLabels={1}\n                          isCompact\n                        >\n                          {content.tags.reduce((labels, tag) => {\n                            if (RULE_CATEGORIES[tag]) {\n                              labels.push(\n                                <Label\n                                  key={`label-${tag}`}\n                                  color=\"blue\"\n                                  isCompact\n                                >\n                                  {\n                                    FILTER_CATEGORIES.category.values[\n                                      RULE_CATEGORIES[tag] - 1\n                                    ].label\n                                  }\n                                </Label>\n                              );\n                            }\n                            return labels;\n                          }, [])}\n                        </LabelGroup>\n                      ) : (\n                        <Label isCompact>{content.tags}</Label>\n                      ))}\n                  </p>\n                </React.Fragment>\n              }\n              onVoteClick={async (rule, rating) =>\n                await Post(`${BASE_URL}/v2/rating`, {}, { rule, rating })\n              }\n            >\n              <Flex>\n                <FlexItem align={{ default: 'alignRight' }}>\n                  <Dropdown\n                    className=\"ins-c-rec-details__actions_dropdown\"\n                    onSelect={() =>\n                      setActionsDropdownOpen(!actionsDropdownOpen)\n                    }\n                    position=\"right\"\n                    ouiaId=\"actions\"\n                    toggle={\n                      <DropdownToggle\n                        onToggle={(actionsDropdownOpen) =>\n                          setActionsDropdownOpen(actionsDropdownOpen)\n                        }\n                        toggleIndicator={CaretDownIcon}\n                      >\n                        {intl.formatMessage(messages.actions)}\n                      </DropdownToggle>\n                    }\n                    isOpen={actionsDropdownOpen}\n                    dropdownItems={\n                      content?.disabled\n                        ? [\n                            <DropdownItem\n                              key=\"link\"\n                              ouiaId=\"enable\"\n                              onClick={() => {\n                                enableRule(rule);\n                              }}\n                            >\n                              {intl.formatMessage(messages.enableRule)}\n                            </DropdownItem>,\n                          ]\n                        : [\n                            <DropdownItem\n                              key=\"link\"\n                              ouiaId=\"disable\"\n                              onClick={() => {\n                                handleModalToggle(true);\n                              }}\n                            >\n                              {intl.formatMessage(messages.disableRule)}\n                            </DropdownItem>,\n                          ]\n                    }\n                  />\n                </FlexItem>\n              </Flex>\n            </RuleDetails>\n          </Main>\n          <Main>\n            <React.Fragment>\n              {(content?.hosts_acked_count ||\n                ackedClusters?.length > 0 ||\n                content?.disabled) && (\n                <Card className=\"cardOverride\">\n                  <CardHeader>\n                    <Title headingLevel=\"h4\" size=\"xl\">\n                      <BellSlashIcon size=\"sm\" />\n                      &nbsp;\n                      {intl.formatMessage(\n                        (content?.hosts_acked_count ||\n                          ackedClusters?.length > 0) &&\n                          !content?.disabled\n                          ? messages.ruleIsDisabledForClusters\n                          : messages.ruleIsDisabled\n                      )}\n                    </Title>\n                  </CardHeader>\n                  <CardBody>\n                    {(content?.hosts_acked_count ||\n                      ackedClusters?.length > 0) &&\n                    !content?.disabled ? (\n                      <React.Fragment>\n                        {intl.formatMessage(\n                          messages.ruleIsDisabledForClustersBody,\n                          {\n                            clusters: ackedClusters?.length,\n                          }\n                        )}\n                        {!clustersIsFetching && ackedClusters?.length > 0 ? (\n                          <React.Fragment>\n                            &nbsp;\n                            <Button\n                              isInline\n                              variant=\"link\"\n                              onClick={() => setViewSystemsModalOpen(true)}\n                              ouiaId=\"view-clusters\"\n                            >\n                              {intl.formatMessage(messages.viewClusters)}\n                            </Button>\n                          </React.Fragment>\n                        ) : (\n                          <OneLineLoader />\n                        )}\n                      </React.Fragment>\n                    ) : (\n                      !ackIsFetching &&\n                      ackData && (\n                        <React.Fragment>\n                          {ackData?.justification\n                            ? intl.formatMessage(\n                                messages.ruleIsDisabledWithJustificaiton,\n                                {\n                                  date: (\n                                    <span>\n                                      <DateFormat\n                                        date={ruleDate}\n                                        type=\"onlyDate\"\n                                      />\n                                    </span>\n                                  ),\n                                  reason: ackData.justification,\n                                }\n                              )\n                            : intl.formatMessage(\n                                messages.ruleIsDisabledWithoutJustificaiton,\n                                {\n                                  date: (\n                                    <span>\n                                      <DateFormat\n                                        date={ruleDate}\n                                        type=\"onlyDate\"\n                                      />\n                                    </span>\n                                  ),\n                                }\n                              )}\n                        </React.Fragment>\n                      )\n                    )}\n                  </CardBody>\n                  <CardFooter>\n                    {(content?.hosts_acked_count ||\n                      ackedClusters?.length > 0) &&\n                    !content?.disabled ? (\n                      !clustersIsFetching && ackedClusters ? (\n                        <Button\n                          isInline\n                          variant=\"link\"\n                          onClick={() =>\n                            enableRecForHosts({\n                              uuids: ackedClusters.map((c) => c.cluster_id),\n                            })\n                          }\n                          ouiaId=\"enable-all\"\n                        >\n                          {intl.formatMessage(messages.enableRuleForClusters)}\n                        </Button>\n                      ) : (\n                        <OneLineLoader />\n                      )\n                    ) : (\n                      <Button\n                        isInline\n                        variant=\"link\"\n                        onClick={() => enableRule(rule)}\n                        ouiaId=\"rule\"\n                      >\n                        {intl.formatMessage(messages.enableRule)}\n                      </Button>\n                    )}\n                  </CardFooter>\n                </Card>\n              )}\n              {!content?.disabled && (\n                <React.Fragment>\n                  <Title className=\"titleOverride\" headingLevel=\"h3\" size=\"2xl\">\n                    {intl.formatMessage(messages.affectedClusters)}\n                  </Title>\n                  <AffectedClustersTable\n                    query={clusters}\n                    rule={content}\n                    afterDisableFn={afterDisableFn}\n                  />\n                </React.Fragment>\n              )}\n              {content?.disabled && (\n                <MessageState\n                  icon={BellSlashIcon}\n                  title={intl.formatMessage(messages.ruleIsDisabled)}\n                  text={intl.formatMessage(messages.ruleIsDisabledBody)}\n                />\n              )}\n            </React.Fragment>\n          </Main>\n        </React.Fragment>\n      )}\n    </React.Fragment>\n  );\n};\n\nRecommendation.propTypes = {\n  rule: PropTypes.object.isRequired,\n  ack: PropTypes.object.isRequired,\n  clusters: PropTypes.object.isRequired,\n  match: PropTypes.object.isRequired,\n};\n\nexport { Recommendation };\n","import React, { useEffect } from 'react';\nimport { useParams, useRouteMatch } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\n\nimport { Recommendation } from './Recommendation';\nimport {\n  useGetAffectedClustersQuery,\n  useGetRuleByIdQuery,\n} from '../../Services/SmartProxy';\nimport { useGetRecAcksQuery } from '../../Services/Acks';\nimport messages from '../../Messages';\n\nconst RecommendationWrapper = () => {\n  const intl = useIntl();\n  const rule = useGetRuleByIdQuery(useParams().recommendationId);\n  const ack = useGetRecAcksQuery({ ruleId: useParams().recommendationId });\n  if (rule.isSuccess && rule.data?.content?.description) {\n    const subnav = `${rule.data.content.description} - Recommendations`;\n    // FIXME: https://consoledot.pages.redhat.com/insights-chrome/dev/api.html#_using_updatedocumenttitle_function\n    document.title = intl.formatMessage(messages.documentTitle, { subnav });\n  }\n  const clusters = useGetAffectedClustersQuery(useParams().recommendationId);\n\n  useEffect(() => {\n    rule.refetch();\n  }, [useParams().recommendationId]);\n\n  return (\n    <Recommendation\n      rule={rule}\n      ack={ack}\n      clusters={clusters}\n      match={useRouteMatch()}\n    />\n  );\n};\n\nexport default RecommendationWrapper;\n","import React from 'react';\nimport ContentLoader from 'react-content-loader';\n\nconst OneLineLoader = () => (\n  <ContentLoader height={20}>\n    <rect x=\"0\" y=\"0\" rx=\"4\" ry=\"4\" width=\"300\" height=\"20\" />\n  </ContentLoader>\n);\n\nexport { OneLineLoader };\n"],"names":["Breadcrumbs","current","intl","useIntl","location","useLocation","splitUrl","pathname","split","ouiaId","className","Link","to","formatMessage","messages","isActive","propTypes","PropTypes","Loading","id","Card","CardBody","AffectedClustersTable","query","rule","afterDisableFn","dispatch","useDispatch","useState","filteredRows","setFilteredRows","displayedRows","setDisplayedRows","disableRuleModalOpen","setDisableRuleModalOpen","chips","setChips","selected","setSelected","undefined","host","setHost","isError","isUninitialized","isFetching","isSuccess","data","disabled","enabled","rows","filters","useSelector","f","affectedClustersState","perPage","limit","page","offset","allSelected","length","updateFilters","updateAffectedClustersFilters","filterConfig","items","label","placeholder","type","conditionalFilterType","filterValues","key","onChange","_e","value","newFilters","text","onNameFilterChange","isDisabled","onSetPage","pageNumber","newOffset","onSetPerPage","buildDisplayedRows","slice","map","r","cells","rule_id","last_checked_at","DateFormat","extraTitle","date","variant","Tooltip","content","onSelect","event","isSelected","rowId","i","filter","useEffect","newFilteredRows","allRows","cluster","cluster_name","row","toLowerCase","includes","sort","a","b","fst","snd","d","sortDirection","sortIndex","AFFECTED_CLUSTERS_NAME_CELL","localeCompare","AFFECTED_CLUSTERS_LAST_SEEN","Date","buildFilteredRows","newDisplayedRows","newChips","newValue","nameCategoryIndex","findIndex","chip","category","splice","push","name","updateNameChip","handleModalToggle","DisableRule","isModalOpen","afterFn","hosts","PrimaryToolbar","pagination","itemCount","onPerPageSelect","activeFiltersConfig","deleteTitle","onDelete","bulkSelect","count","title","onClick","checked","actionsConfig","actions","props","Table","AFFECTED_CLUSTERS_COLUMNS","sortBy","index","direction","onSort","canSelectAll","rowIndex","EmptyTable","Bullseye","TableToolbar","isFooter","Pagination","PaginationVariant","onPageInput","ViewHostAcks","clusters","recId","addNotification","notification","isLoading","refetch","hostAcks","setRows","unclean","setUnclean","columns","transforms","cellWidth","deleteAck","enableRuleForCluster","uuid","cluster_id","dismissable","description","item","justification","disabled_at","Button","isInline","size","Modal","width","isOpen","onClose","colSpan","TableHeader","TableBody","defaultProps","Recommendation","ack","match","notify","params","recommendationId","actionsDropdownOpen","setActionsDropdownOpen","viewSystemsModalOpen","setViewSystemsModalOpen","ackData","ackIsFetching","refetchAck","ruleDate","updated_at","created_at","clustersData","clustersIsFetching","refetchClusters","adjustOCPRule","ackedClusters","enableRecForHosts","uuids","requests","Promise","all","timeout","enableRule","Delete","BASE_URL","messagesValues","useMemo","mapContentToValues","toggleModal","s","PageHeader","Main","ErrorState","formatMessages","RuleDetailsMessagesKeys","product","AdvisorProduct","isDetailsPage","header","PageHeaderTitle","RuleLabels","publish_date","tags","Array","isArray","LabelGroup","numLabels","isCompact","reduce","labels","tag","RULE_CATEGORIES","Label","color","FILTER_CATEGORIES","onVoteClick","rating","Post","Flex","FlexItem","align","default","Dropdown","position","toggle","DropdownToggle","onToggle","toggleIndicator","CaretDownIcon","dropdownItems","DropdownItem","hosts_acked_count","CardHeader","Title","headingLevel","reason","CardFooter","c","MessageState","icon","BellSlashIcon","useGetRuleByIdQuery","useParams","useGetRecAcksQuery","ruleId","subnav","document","useGetAffectedClustersQuery","useRouteMatch","OneLineLoader","height","x","y","rx","ry"],"sourceRoot":""}