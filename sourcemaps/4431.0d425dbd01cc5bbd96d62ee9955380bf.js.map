{"version":3,"file":"js/4431.xxxxxxxxxxxxxxxxxxxx.js","mappings":"gUAcO,MAAMA,EAAc,CAACC,EAAMC,IAChCC,OAAOC,QAAQF,GAASG,OAAM,EAAEC,EAAWC,MACzC,OAAQD,GACN,IAAK,OACH,OAAOL,EAAKO,YACTC,cACAC,SAASH,EAAYE,eAC1B,KAAK,KAAkBE,WAAWC,SAChC,OAAOL,EAAYG,SAASG,OAAOZ,EAAKU,aAC1C,KAAK,KAAkBG,SAASF,SAC9B,OAAOX,EAAKc,KAAKC,MAAMC,GACrBV,EAAYG,SAASG,OAAO,KAAgBI,OAEhD,KAAK,KAAkBC,OAAON,SAC5B,OAAOL,EAAYG,SAASG,OAAOZ,EAAKiB,SAC1C,KAAK,KAAkBC,UAAUP,SAC/B,QAAOL,EAAYa,OAAS,IACxBb,EAAYc,MAAMC,GACN,SAANA,EACKrB,EAAKsB,wBAA0B,EAE9B,UAAND,EACsC,IAAjCrB,EAAKsB,6BADd,IAKR,KAAK,KAAkBC,WAAWZ,SAChC,OAAOL,EAAYG,SAASG,OAAOZ,EAAKuB,aAC1C,KAAK,KAAkBC,YAAYb,SACjC,MACkB,QAAhBL,GACiB,aAAhBA,GAA8BN,EAAKyB,UACnB,YAAhBnB,IAA8BN,EAAKyB,SAExC,KAAK,KAAkBC,SAASf,SAC9B,OAAOL,EAAYG,SAASG,OAAOZ,EAAK2B,kBAC1C,QACE,OAAO,EACX,IAGSC,EAAqB,CAACC,EAAS5B,IAC1CC,OAAOC,QAAQF,GAASG,OAAM,EAAEC,EAAWC,MACzC,OAAQD,GACN,IAAK,OACH,OAAQwB,EAAQC,cAAgBD,EAAQE,YACrCvB,cACAC,SAASH,EAAYE,eAC1B,KAAK,KAA0BwB,KAAKrB,SAClC,OAE0B,IAAvBL,EAAYa,QAAgBc,SAASJ,EAAQK,iBAAmB,GAEjE5B,EAAYG,SAAS,QAErBH,EAAYc,MAAMC,GAAMQ,EAAQM,mBAAmBd,GAAK,IAE5D,IAAK,UACH,OACyB,IAAvBf,EAAYa,QACZb,EAAYG,SAAS2B,EAAcP,EAAQQ,kBAE/C,QACE,OAAO,EACX,IAiGSC,EAAmB,CAACrC,EAASsC,KACxC,MAAMC,EAAe,IAAUvC,GAS/B,cAROuC,EAAaC,iBACbD,EAAaE,qBACbF,EAAaG,YACbH,EAAaI,cACbJ,EAAaK,MACpBL,GAAcR,MACiB,IAA7BQ,EAAaR,KAAKb,eACXqB,EAAaR,KAvGH,EAACQ,EAAcM,IACZ5C,OAAOC,QAAQqC,GAAgB,CAAC,GACjCO,QAAO,CAACC,EAAKC,KAChC,MAAOC,EAAKC,GAAQF,EACpB,GAAIH,EAAiBI,GAAM,CACzB,MAAMrC,EAAWiC,EAAiBI,GAC5BE,EAAQC,MAAMC,QAAQH,GACxBA,EAAKI,KAAKC,IACR,MAAMC,EAAwB5C,EAAS6C,OAAO3C,MAC3C2C,GAAWA,EAAOF,QAAU5C,OAAO4C,KAEtC,OAAOC,EACH,CACEE,KACEF,EAAsBG,MAAQH,EAAsBI,MACtDL,SAEF,CAAEG,KAAMH,EAAOA,QAAO,IAE5B,CACE,CACEG,KAAM9C,EAAS6C,OAAO3C,MACnB2C,GAAWA,EAAOF,QAAU5C,OAAOuC,KACpCU,MACFL,MAAOL,IAGf,MAAO,IACFH,EACH,CACEnC,SAAU,IAAWA,EAASiD,OAC9BV,QACAzC,SAAUE,EAASF,UAGzB,CAAO,MAAY,SAARuC,EACF,IACFF,KACCG,EAAKhC,OAAS,EACd,CACE,CACEN,SAAU,OACVuC,MAAO,CAAC,CAAEO,KAAMR,EAAMK,MAAOL,IAC7BxC,SAAUuC,IAGd,IAEW,YAARA,EACF,IACFF,KACCG,EAAKhC,OAAS,EACd,CACE,CACEN,SAAU,UACVuC,MAAOD,EAAKI,KAAKN,IAAO,CACtBU,KAAMV,EACNO,MAAOP,MAETtC,SAAUuC,IAGd,IAEW,mBAARA,EACF,IACFF,KACCG,EAAKhC,OAAS,EACd,CACE,CACEN,SAAU,iBACVuC,MAAO,CAAC,CAAEO,KAAMR,EAAMK,MAAOL,IAC7BxC,SAAUuC,IAGd,IAEW,iBAARA,EACF,IACFF,KACCG,EAAKhC,OAAS,EACd,CACE,CACEN,SAAU,eACVuC,MAAO,CAAC,CAAEO,KAAMR,EAAMK,MAAOL,IAC7BxC,SAAUuC,IAGd,SAXD,CAaP,GACC,IAaIa,CAAavB,EAAcD,EAAW,EAIlCyB,EAAeC,IAC1B,MAAMC,EAAe,IAAIC,gBAAgBF,GACzC,OAAOZ,MAAMe,KAAKF,GAAcnB,QAC9B,CAACsB,GAAMnB,EAAKM,MAAW,IAClBa,EACH,CAACnB,GAAM,CACL,OACA,QACA,cACA,OACA,eACA,iBACA,cACA,YACA,eACAzC,SAASyC,GACPM,EACU,SAAVA,GAA8B,UAAVA,EACpBc,KAAKC,MAAMf,GAEXA,EAAMgB,MAAM,QAElB,CAAC,EACF,EAGUC,EAAuBjB,IAAU,CAC5CG,KAAMH,EAAMkB,UAAUlB,EAAMmB,WAAW,KAAO,EAAI,GAClDC,UAAWpB,EAAMmB,WAAW,KAAO,OAAS,MAC5CpE,YAAaiD,EAAMkB,UAAUlB,EAAMmB,WAAW,KAAO,EAAI,GACzDE,UAAWrB,EAAMkB,UAAUlB,EAAMmB,WAAW,KAAO,EAAI,KAyB5CG,EAAqB,CAAC7E,EAAU,CAAC,EAAG8E,KAC/C,MAAMC,EAAM,IAAIC,IAAIC,OAAOC,SAASC,OAASF,OAAOC,SAASE,UAvB7B,IAACC,EAAOC,EAAcX,EAyBtDI,EAAId,aAAasB,IACf,QA1B+BF,EA2BZrF,EAAQwC,UA3BW8C,EA2BAR,EA3BcH,EA2BC3E,EAAQyC,cA1B1D,CAAC,OAAQ,OAAOjC,SAASmE,IAC5Ba,QAAQC,MAAM,iDAET,GAAiB,QAAdd,EAAsB,GAAK,MAAMW,EAAaD,OA0BxDpF,OAAOC,QAAQF,GAAS0F,SAAQ,EAAEzC,EAAKM,KAE3B,cAARN,GACQ,kBAARA,GACQ,SAARA,GACU,KAAVM,KACEH,MAAMC,QAAQE,IAA2B,IAAjBA,EAAMrC,SAChC6D,EAAId,aAAasB,IAAItC,EAAKM,KAG9B0B,OAAOU,QAAQC,aAAa,KAAM,KAAMb,EAAIc,KAAK,EAItCC,EAAgB,CAACC,EAAIC,EAAIC,IAAMA,GAAI,IAAAC,SAAQH,EAAIC,GAC/C7D,EAAiBgE,IAC5B,IAAAC,aAAmBC,IAAZF,IAA0B,IAAAG,QAAM,IAAAF,QAAOD,IAAsBA,EAAV,SACvDA,QAEQI,EAAoB,CAACC,EAAgBC,EAAeC,KAC/D,MAAQ,CAACA,GAAQC,KAAYC,GAAe,IAAKJ,EAAgB7D,OAAQ,GACzE8D,EAAc,IACTG,KACW,SAAVF,EACA,CAAE/C,KAAM,IACE,SAAV+C,EACA,CAAE3E,KAAM,IACE,YAAV2E,EACA,CAAEP,QAAS,IACD,cAAVO,EACA,CAAE9B,UAAW,IACb,CAAC,GACL,EAGSiC,EAAiB,CAACL,EAAgBC,EAAeC,EAAOjD,IACnEA,EAAOvC,OAAS,EACZuF,EAAc,IACTD,EACH7D,OAAQ,EACH,CAAC+D,GAAQjD,IAEhB8C,EAAkBC,EAAgBC,EAAeC,GAE1CI,EAAsB,CAACC,EAAW/G,KAC7C,MAAMgH,GAA0B,QAC9BD,EAAUE,SAASC,iBACnB,WAEF,OAAOjH,OAAOC,QAAQF,GAASG,OAAM,EAAEC,EAAWC,MAChD,OAAQD,GACN,IAAK,eACH,OAAQ2G,EAAUnF,QAAQuF,cAAgBJ,EAAUnF,QAAQwF,MACzD7G,cACAC,SAASH,EAAYE,eAC1B,IAAK,iBACH,OAAQwG,EAAUM,UAAU3D,MAAQqD,EAAUM,UAAUD,MACrD7G,cACAC,SAASH,EAAYE,eAC1B,IAAK,WACH,OACyB,IAAvBF,EAAYa,SACZ,QAA2B8F,EAAyBhH,EAAQsH,UAEhE,QACE,OAAO,EACX,GACA,C,sNC1TG,MAAMC,EAAmB,CAC9B,CACEhE,MAAO,WACPK,MAAO,WACP4D,UAAW,sCACXC,UAAW,sCACXC,SAAS,EACTC,YAAa,GAEf,CACEpE,MAAO,YACPK,MAAO,YACP4D,UAAW,wCACXC,UAAW,wCACXC,SAAS,EACTC,YAAa,GAEf,CACEpE,MAAO,WACPK,MAAO,WACP4D,UAAW,uCACXC,UAAW,uCACXC,SAAS,EACTC,YAAa,GAEf,CACEpE,MAAO,MACPK,MAAO,MACP4D,UAAW,+BACXC,UAAW,uCACXC,SAAS,EACTC,YAAa,IAIJC,EAAoB,CAACC,EAAKC,KACrC,MAAMC,EAAU,CACd,EAAG,MACH,EAAG,WACH,EAAG,YACH,EAAG,YAEL,IAAIC,EAAa,CAAC,EAElB,GAAa,YAATF,GAA+B,UAATA,EACxB,IAAK,MAAM7E,KAAO4E,EACZ5E,KAAO8E,IACTC,EAAWD,EAAQ9E,IAAQ4E,EAAI5E,SAInC+E,EAAaD,EAAQF,GAGvB,OAAOG,CAAU,EAGNC,EAA6B,CAACJ,EAAKK,KAC9C,IAAK,MAAMjF,KAAOiF,EAChB,GAAIL,EAAI5E,GAAO,EACb,OAAO,CAEX,EAgBWkF,EAAqBC,IAChC,MAAMC,EAAkB,IAAUD,GAMlC,cALOC,EAAgB7F,iBAChB6F,EAAgB5F,qBAChB4F,EAAgB1F,cAChB0F,EAAgBzF,aAChByF,EAAgB3F,OAChBzC,OAAOwD,OAAO4E,GAAiBC,QAAQ/E,IAAW,IAAQA,KAC9DrC,MAEM,EAGEqH,EAAcC,GAClBA,GAAKC,OAAO,GAAGC,cAAgBF,GAAKG,MAAM,GAGtCC,EAAc,CAAChI,EAAU2C,KACpC,GAAI3C,EAAS6C,OAAQ,CACnB,MAAMD,EAAwB5C,EAAS6C,OAAO3C,MAC3C2C,GAAWA,EAAOF,QAAU5C,OAAO4C,KAGtC,OAAOC,EACH,CACEE,KAAMF,EAAsBI,OAASJ,EAAsBG,KAC3DJ,SAEF,CAAEG,KAAMH,EAAOA,QACrB,CAEA,MAAO,CAAEG,KAAMH,EAAOA,QAAO,EAGlBsF,EAA6B,CAACtG,EAAcM,IACjC5C,OAAOC,QAAQqC,GAChBO,QAAO,CAACC,GAAMW,EAAMH,MACvC,GAAIV,EAAiBa,GAAO,CAC1B,MAAM9C,EAAWiC,EAAiBa,GAClC,GACGN,MAAMC,QAAQE,IAAUA,EAAMrC,OAAS,GACtB,iBAAVqC,GAAuC,KAAjBA,EAAMuF,OACpC,CACA,MAAM3F,EAAQC,MAAMC,QAAQE,GACxBA,EAAMD,KAAKlC,GAAMwH,EAAYhI,EAAUQ,KACvC,CAACwH,EAAYhI,EAAU2C,IAE3BR,EAAIgG,KAAK,CACPnI,SAAU2H,EAAW3H,EAASgD,OAC9BT,QACAzC,SAAUE,EAASF,UAEvB,CACF,KAAoB,iBAATgD,GAA4C,KAAjBH,EAAMuF,OAC1C/F,EAAIgG,KAAK,CACPnI,SAAU2H,EAAW7E,EAAKsF,QAAQ,eAAgB,SAClD7F,MAAO,CAAC,CAAEO,KAAMH,EAAOA,UACvB7C,SAAU,iBAGF,gBAATgD,GAAmC,cAATA,GACV,KAAjBH,EAAMuF,QAEN/F,EAAIgG,KAAK,CACPnI,SAAU2H,EAAW7E,EAAKsF,QAAQ,IAAK,MACvC7F,MAAO,CAAC,CAAEO,KAAMH,EAAOA,UACvB7C,SAAUgD,IAId,OAAOX,CAAG,GACT,IAGQkG,EAAa,CAACzG,EAAWU,KACpC,MAAMnD,EAAOmD,EAAK,GAAGnD,KACrB,OAAQyC,GACN,KAAK,EACH,OAAOzC,EAAKmJ,QACd,KAAK,EACH,OAAOnJ,EAAKU,WACd,KAAK,EACH,OAAOV,EAAKoJ,QAAQjI,OACtB,KAAK,EACH,OAAOnB,EAAKqJ,SAChB,EAGWC,EAAiB,CAAC7G,EAAWC,EAAe6G,IAChD9G,GAAa,EAChB,IAAI8G,IAAe5G,MAAK,CAAC6G,EAAGC,KAC1B,MAAMvD,EAAIxD,IAAkB,IAAgBgH,IAAM,GAAK,EACvD,OAAOR,EAAWzG,EAAW+G,GAAKN,EAAWzG,EAAWgH,GACpDvD,EACAgD,EAAWzG,EAAWgH,GAAKP,EAAWzG,EAAW+G,IAChDtD,EACD,CAAC,IAEP,IAAIqD,GAGGI,EAAc,CAACJ,EAAcK,IACjCL,EAAaM,SAAQ,CAACC,EAAKxE,KAChC,MAAMyE,EAAa,IAAID,GAKvB,OAJIF,GAAyB,IAAVtE,IACjBwE,EAAI,GAAGE,QAAS,GAElBF,EAAI,GAAGG,OAAiB,EAAR3E,EACTyE,CAAU,IAIRG,EAAqB,CAACd,EAASnJ,KAC1C,MAAMkK,EAAmB,IAAO,IAAUlK,GAAU,KACpD,OAAOC,OAAOC,QAAQgK,GAAkB/J,OAAM,EAAEC,EAAWC,MACzD,OAAQD,GACN,IAAK,eACH,OACEC,GACA8I,GAAShC,cACL5G,cACDC,SAASH,EAAYE,eAE5B,IAAK,YACH,OACEF,GACA8I,GAASgB,KAAK5J,cAAcC,SAASH,EAAYE,eAErD,QACE,OAAO,EACX,GACA,EAGS6J,EAAkC,CAC7C5D,EACAC,EACAC,KAEA,MAAQ,CAACA,GAAQC,KAAYC,GAAe,IAAKJ,GACjDC,EAAc,IACTG,KACW,gBAAVF,EACA,CAAEpG,YAAa,IACL,eAAVoG,EACA,CAAEjG,WAAY,IACJ,cAAViG,EACA,CAAE9B,UAAW,IACH,gBAAV8B,EACA,CAAE2D,YAAa,IACf,CAAC,GACL,EAGSC,EAA+B,CAC1C9D,EACAC,EACAC,EACAjD,IAEAA,EAAOvC,OAAS,EACZuF,EAAc,IACTD,EACE,CAACE,GAAQjD,IAEhB2G,EAAgC5D,EAAgBC,EAAeC,GAExD6D,EAA0B,CAACC,EAAgBxK,KACtD,MAAMkK,EAAmB,IAAO,IAAUlK,GAAU,KAEpD,OAAOC,OAAOC,QAAQgK,GAAkB/J,OAAM,EAAEC,EAAWC,MACzD,OAAQD,GACN,IAAK,cACH,OACEC,GACAmK,EAAetB,QACZ3I,cACAC,SAASH,EAAYE,eAE5B,IAAK,YACH,OACEF,GACAmK,EAAerB,QAAQhI,MAAM0G,GAC3BA,EAAIsC,IAAI5J,cAAcC,SAASH,EAAYE,iBAGjD,IAAK,aACH,OACEF,GAAeA,EAAYG,SAASG,OAAO6J,EAAe/J,aAE9D,IAAK,cACH,OACEJ,GACAmK,EAAerB,QAAQhI,MAAM0G,GAC3BA,EAAIV,aAAa5G,cAAcC,SAASH,EAAYE,iBAG1D,QACE,OAAO,EACX,GACA,C","sources":["webpack:///./src/Components/Common/Tables.js","webpack:///./src/Utilities/Workloads.js"],"sourcesContent":["import capitalize from 'lodash/capitalize';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { useEffect, useState } from 'react';\nimport { coerce, compare, valid } from 'semver';\nimport {\n  CLUSTER_FILTER_CATEGORIES,\n  FILTER_CATEGORIES,\n  RULE_CATEGORIES,\n} from '../../AppConstants';\nimport {\n  hasAnyValueGreaterThanZero,\n  remappingSeverity,\n} from '../../Utilities/Workloads';\n\nexport const passFilters = (rule, filters) =>\n  Object.entries(filters).every(([filterKey, filterValue]) => {\n    switch (filterKey) {\n      case 'text':\n        return rule.description\n          .toLowerCase()\n          .includes(filterValue.toLowerCase());\n      case FILTER_CATEGORIES.total_risk.urlParam:\n        return filterValue.includes(String(rule.total_risk));\n      case FILTER_CATEGORIES.category.urlParam:\n        return rule.tags.find((c) =>\n          filterValue.includes(String(RULE_CATEGORIES[c]))\n        );\n      case FILTER_CATEGORIES.impact.urlParam:\n        return filterValue.includes(String(rule.impact));\n      case FILTER_CATEGORIES.impacting.urlParam:\n        return filterValue.length > 0\n          ? filterValue.some((v) => {\n              if (v === 'true') {\n                return rule.impacted_clusters_count > 0;\n              }\n              if (v === 'false') {\n                return rule.impacted_clusters_count === 0;\n              }\n            })\n          : true;\n      case FILTER_CATEGORIES.likelihood.urlParam:\n        return filterValue.includes(String(rule.likelihood));\n      case FILTER_CATEGORIES.rule_status.urlParam:\n        return (\n          filterValue === 'all' ||\n          (filterValue === 'disabled' && rule.disabled) ||\n          (filterValue === 'enabled' && !rule.disabled)\n        );\n      case FILTER_CATEGORIES.res_risk.urlParam:\n        return filterValue.includes(String(rule.resolution_risk));\n      default:\n        return true;\n    }\n  });\n\nexport const passFiltersCluster = (cluster, filters) =>\n  Object.entries(filters).every(([filterKey, filterValue]) => {\n    switch (filterKey) {\n      case 'text':\n        return (cluster.cluster_name || cluster.cluster_id)\n          .toLowerCase()\n          .includes(filterValue.toLowerCase());\n      case CLUSTER_FILTER_CATEGORIES.hits.urlParam:\n        return (\n          // clusters with at least one rule hit\n          (filterValue.length === 0 && parseInt(cluster.total_hit_count) > 0) ||\n          // all clusters\n          filterValue.includes('all') ||\n          // clusters with at least one rule hit for any of the active risk filters\n          filterValue.some((v) => cluster.hits_by_total_risk[v] > 0)\n        );\n      case 'version':\n        return (\n          filterValue.length === 0 ||\n          filterValue.includes(toValidSemVer(cluster.cluster_version))\n        );\n      default:\n        return true;\n    }\n  });\n\nconst pruneFilters = (localFilters, filterCategories) => {\n  const prunedFilters = Object.entries(localFilters || {});\n  return prunedFilters.reduce((arr, it) => {\n    const [key, item] = it;\n    if (filterCategories[key]) {\n      const category = filterCategories[key];\n      const chips = Array.isArray(item)\n        ? item.map((value) => {\n            const selectedCategoryValue = category.values.find(\n              (values) => values.value === String(value)\n            );\n            return selectedCategoryValue\n              ? {\n                  name:\n                    selectedCategoryValue.text || selectedCategoryValue.label,\n                  value,\n                }\n              : { name: value, value };\n          })\n        : [\n            {\n              name: category.values.find(\n                (values) => values.value === String(item)\n              ).label,\n              value: item,\n            },\n          ];\n      return [\n        ...arr,\n        {\n          category: capitalize(category.title),\n          chips,\n          urlParam: category.urlParam,\n        },\n      ];\n    } else if (key === 'text') {\n      return [\n        ...arr,\n        ...(item.length > 0\n          ? [\n              {\n                category: 'Name',\n                chips: [{ name: item, value: item }],\n                urlParam: key,\n              },\n            ]\n          : []),\n      ];\n    } else if (key === 'version') {\n      return [\n        ...arr,\n        ...(item.length > 0\n          ? [\n              {\n                category: 'Version',\n                chips: item.map((it) => ({\n                  name: it,\n                  value: it,\n                })),\n                urlParam: key,\n              },\n            ]\n          : []),\n      ];\n    } else if (key === 'namespace_name') {\n      return [\n        ...arr,\n        ...(item.length > 0\n          ? [\n              {\n                category: 'Namespace name',\n                chips: [{ name: item, value: item }],\n                urlParam: key,\n              },\n            ]\n          : []),\n      ];\n    } else if (key === 'cluster_name') {\n      return [\n        ...arr,\n        ...(item.length > 0\n          ? [\n              {\n                category: 'Cluster name',\n                chips: [{ name: item, value: item }],\n                urlParam: key,\n              },\n            ]\n          : []),\n      ];\n    }\n  }, []);\n};\n\nexport const buildFilterChips = (filters, categories) => {\n  const localFilters = cloneDeep(filters);\n  delete localFilters.sortIndex;\n  delete localFilters.sortDirection;\n  delete localFilters.sort;\n  delete localFilters.offset;\n  delete localFilters.limit;\n  localFilters?.hits &&\n    localFilters.hits.length === 0 &&\n    delete localFilters.hits;\n  return pruneFilters(localFilters, categories);\n};\n\n// parses url params for use in table/filter chips\nexport const paramParser = (search) => {\n  const searchParams = new URLSearchParams(search);\n  return Array.from(searchParams).reduce(\n    (acc, [key, value]) => ({\n      ...acc,\n      [key]: [\n        'text',\n        'first',\n        'rule_status',\n        'sort',\n        'cluster_name',\n        'namespace_name',\n        'description',\n        'object_id',\n        'object_name',\n      ].includes(key)\n        ? value // just copy the full value\n        : value === 'true' || value === 'false'\n        ? JSON.parse(value) // parse boolean\n        : // parse array of values\n          value.split(','),\n    }),\n    {}\n  );\n};\n\nexport const translateSortParams = (value) => ({\n  name: value.substring(value.startsWith('-') ? 1 : 0),\n  direction: value.startsWith('-') ? 'desc' : 'asc',\n  description: value.substring(value.startsWith('-') ? 1 : 0),\n  object_id: value.substring(value.startsWith('-') ? 1 : 0),\n});\n\nexport const translateSortValue = (index, indexMapping, direction) => {\n  if (!['desc', 'asc'].includes(direction)) {\n    console.error('Invalid sort parameters (is not asc nor desc)');\n  }\n  return `${direction === 'asc' ? '' : '-'}${indexMapping[index]}`;\n};\n\n// TODO: remove since unused\nexport const debounce = (value, delay) => {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [delay, value]);\n\n  return debouncedValue;\n};\n\nexport const updateSearchParams = (filters = {}, columnMapping) => {\n  const url = new URL(window.location.origin + window.location.pathname);\n  // separately check the sort param\n  url.searchParams.set(\n    'sort',\n    translateSortValue(filters.sortIndex, columnMapping, filters.sortDirection)\n  );\n  // check the rest of filters\n  Object.entries(filters).forEach(([key, value]) => {\n    return (\n      key !== 'sortIndex' &&\n      key !== 'sortDirection' &&\n      key !== 'sort' &&\n      value !== '' &&\n      !(Array.isArray(value) && value.length === 0) &&\n      url.searchParams.set(key, value)\n    );\n  });\n  window.history.replaceState(null, null, url.href);\n};\n\n// TODO: move to Utils.js\nexport const compareSemVer = (v1, v2, d) => d * compare(v1, v2);\nexport const toValidSemVer = (version) =>\n  coerce(version === undefined || !valid(coerce(version)) ? '0.0.0' : version)\n    .version;\n\nexport const removeFilterParam = (currentFilters, updateFilters, param) => {\n  const { [param]: omitted, ...newFilters } = { ...currentFilters, offset: 0 };\n  updateFilters({\n    ...newFilters,\n    ...(param === 'text'\n      ? { text: '' }\n      : param === 'hits'\n      ? { hits: [] }\n      : param === 'version'\n      ? { version: [] }\n      : param === 'object_id'\n      ? { object_id: '' }\n      : {}),\n  });\n};\n\nexport const addFilterParam = (currentFilters, updateFilters, param, values) =>\n  values.length > 0\n    ? updateFilters({\n        ...currentFilters,\n        offset: 0,\n        ...{ [param]: values },\n      })\n    : removeFilterParam(currentFilters, updateFilters, param);\n\nexport const passFilterWorkloads = (workloads, filters) => {\n  const generalSeverityRemapped = remappingSeverity(\n    workloads.metadata.hits_by_severity,\n    'general'\n  );\n  return Object.entries(filters).every(([filterKey, filterValue]) => {\n    switch (filterKey) {\n      case 'cluster_name':\n        return (workloads.cluster.display_name || workloads.cluster.uuid)\n          .toLowerCase()\n          .includes(filterValue.toLowerCase());\n      case 'namespace_name':\n        return (workloads.namespace.name || workloads.namespace.uuid)\n          .toLowerCase()\n          .includes(filterValue.toLowerCase());\n      case 'severity':\n        return (\n          filterValue.length === 0 ||\n          hasAnyValueGreaterThanZero(generalSeverityRemapped, filters.severity)\n        );\n      default:\n        return true;\n    }\n  });\n};\n","import { SortByDirection } from '@patternfly/react-table';\nimport omitBy from 'lodash/omitBy';\nimport cloneDeep from 'lodash/cloneDeep';\nimport isEmpty from 'lodash/isEmpty';\n\nexport const SEVERITY_OPTIONS = [\n  {\n    value: 'critical',\n    label: 'Critical',\n    iconColor: 'var(--pf-global--danger-color--100)',\n    textColor: 'var(--pf-global--danger-color--100)',\n    hasIcon: true,\n    indexNumber: 4,\n  },\n  {\n    value: 'important',\n    label: 'Important',\n    iconColor: 'var(--pf-global--palette--orange-300)',\n    textColor: 'var(--pf-global--palette--orange-400)',\n    hasIcon: true,\n    indexNumber: 3,\n  },\n  {\n    value: 'moderate',\n    label: 'Moderate',\n    iconColor: 'var(--pf-global--warning-color--100)',\n    textColor: 'var(--pf-global--warning-color--200)',\n    hasIcon: true,\n    indexNumber: 2,\n  },\n  {\n    value: 'low',\n    label: 'Low',\n    iconColor: 'var(--pf-global--Color--200)',\n    textColor: 'var(--pf-global--default-color--300)',\n    hasIcon: true,\n    indexNumber: 1,\n  },\n];\n\nexport const remappingSeverity = (obj, mode) => {\n  const mapping = {\n    1: 'low',\n    2: 'moderate',\n    3: 'important',\n    4: 'critical',\n  };\n  let updatedObj = {};\n\n  if (mode === 'general' || mode === 'label') {\n    for (const key in obj) {\n      if (key in mapping) {\n        updatedObj[mapping[key]] = obj[key];\n      }\n    }\n  } else {\n    updatedObj = mapping[obj];\n  }\n\n  return updatedObj;\n};\n\nexport const hasAnyValueGreaterThanZero = (obj, stringsToCheck) => {\n  for (const key of stringsToCheck) {\n    if (obj[key] > 0) {\n      return true; // Return true if any matching string has a value greater than 0\n    }\n  }\n};\n\nexport const severityTypeToText = (value) => {\n  value = parseInt(value);\n  if (value === 1) {\n    return 'Low';\n  } else if (value === 2) {\n    return 'Moderate';\n  } else if (value === 3) {\n    return 'Important';\n  } else {\n    return 'Critical';\n  }\n};\n\nexport const filtersAreApplied = (params) => {\n  const cleanedUpParams = cloneDeep(params);\n  delete cleanedUpParams.sortIndex;\n  delete cleanedUpParams.sortDirection;\n  delete cleanedUpParams.offset;\n  delete cleanedUpParams.limit;\n  delete cleanedUpParams.sort;\n  return Object.values(cleanedUpParams).filter((value) => !isEmpty(value))\n    .length\n    ? true\n    : false;\n};\n\nexport const capitalize = (str) => {\n  return str?.charAt(0).toUpperCase() + str?.slice(1);\n};\n\nexport const createChips = (category, value) => {\n  if (category.values) {\n    const selectedCategoryValue = category.values.find(\n      (values) => values.value === String(value)\n    );\n\n    return selectedCategoryValue\n      ? {\n          name: selectedCategoryValue.label || selectedCategoryValue.text,\n          value,\n        }\n      : { name: value, value };\n  }\n\n  return { name: value, value };\n};\n\nexport const pruneWorkloadsRulesFilters = (localFilters, filterCategories) => {\n  const prunedFilters = Object.entries(localFilters);\n  return prunedFilters.reduce((arr, [name, value]) => {\n    if (filterCategories[name]) {\n      const category = filterCategories[name];\n      if (\n        (Array.isArray(value) && value.length > 0) ||\n        (typeof value === 'string' && value.trim() !== '')\n      ) {\n        const chips = Array.isArray(value)\n          ? value.map((v) => createChips(category, v))\n          : [createChips(category, value)];\n\n        arr.push({\n          category: capitalize(category.label),\n          chips,\n          urlParam: category.urlParam,\n        });\n      }\n    } else if (name === 'display_name' && value.trim() !== '') {\n      arr.push({\n        category: capitalize(name.replace('display_name', 'Name')),\n        chips: [{ name: value, value }],\n        urlParam: 'display_name',\n      });\n    } else if (\n      (name === 'description' || name === 'object_id') &&\n      value.trim() !== ''\n    ) {\n      arr.push({\n        category: capitalize(name.replace('_', ' ')),\n        chips: [{ name: value, value }],\n        urlParam: name,\n      });\n    }\n\n    return arr;\n  }, []);\n};\n\nexport const switchSort = (sortIndex, item) => {\n  const rule = item[0].rule;\n  switch (sortIndex) {\n    case 1:\n      return rule.details;\n    case 2:\n      return rule.total_risk;\n    case 3:\n      return rule.objects.length;\n    case 4:\n      return rule.modified;\n  }\n};\n\nexport const sortWithSwitch = (sortIndex, sortDirection, filteredRows) => {\n  return sortIndex >= 1\n    ? [...filteredRows]?.sort((a, b) => {\n        const d = sortDirection === SortByDirection.asc ? 1 : -1;\n        return switchSort(sortIndex, a) > switchSort(sortIndex, b)\n          ? d\n          : switchSort(sortIndex, b) > switchSort(sortIndex, a)\n          ? -d\n          : 0;\n      })\n    : [...filteredRows];\n};\n\nexport const flatMapRows = (filteredRows, expandFirst) => {\n  return filteredRows.flatMap((row, index) => {\n    const updatedRow = [...row];\n    if (expandFirst && index === 0) {\n      row[0].isOpen = true;\n    }\n    row[1].parent = index * 2;\n    return updatedRow;\n  });\n};\n\nexport const passObjectsFilters = (objects, filters) => {\n  const cleanedUpFilters = omitBy(cloneDeep(filters), isEmpty);\n  return Object.entries(cleanedUpFilters).every(([filterKey, filterValue]) => {\n    switch (filterKey) {\n      case 'display_name':\n        return (\n          filterValue &&\n          objects?.display_name\n            ?.toLowerCase()\n            .includes(filterValue.toLowerCase())\n        );\n      case 'object_id':\n        return (\n          filterValue &&\n          objects?.uid?.toLowerCase().includes(filterValue.toLowerCase())\n        );\n      default:\n        return true;\n    }\n  });\n};\n\nexport const workloadsRulesRemoveFilterParam = (\n  currentFilters,\n  updateFilters,\n  param\n) => {\n  const { [param]: omitted, ...newFilters } = { ...currentFilters };\n  updateFilters({\n    ...newFilters,\n    ...(param === 'description'\n      ? { description: '' }\n      : param === 'total_risk'\n      ? { total_risk: [] }\n      : param === 'object_id'\n      ? { object_id: '' }\n      : param === 'object_name'\n      ? { object_name: '' }\n      : {}),\n  });\n};\n\nexport const workloadsRulesAddFilterParam = (\n  currentFilters,\n  updateFilters,\n  param,\n  values\n) =>\n  values.length > 0\n    ? updateFilters({\n        ...currentFilters,\n        ...{ [param]: values },\n      })\n    : workloadsRulesRemoveFilterParam(currentFilters, updateFilters, param);\n\nexport const passFilterWorkloadsRecs = (recommendation, filters) => {\n  const cleanedUpFilters = omitBy(cloneDeep(filters), isEmpty);\n\n  return Object.entries(cleanedUpFilters).every(([filterKey, filterValue]) => {\n    switch (filterKey) {\n      case 'description':\n        return (\n          filterValue &&\n          recommendation.details\n            .toLowerCase()\n            .includes(filterValue.toLowerCase())\n        );\n      case 'object_id':\n        return (\n          filterValue &&\n          recommendation.objects.some((obj) =>\n            obj.uid.toLowerCase().includes(filterValue.toLowerCase())\n          )\n        );\n      case 'total_risk':\n        return (\n          filterValue && filterValue.includes(String(recommendation.total_risk))\n        );\n      case 'object_name':\n        return (\n          filterValue &&\n          recommendation.objects.some((obj) =>\n            obj.display_name.toLowerCase().includes(filterValue.toLowerCase())\n          )\n        );\n      default:\n        return true;\n    }\n  });\n};\n"],"names":["passFilters","rule","filters","Object","entries","every","filterKey","filterValue","description","toLowerCase","includes","total_risk","urlParam","String","category","tags","find","c","impact","impacting","length","some","v","impacted_clusters_count","likelihood","rule_status","disabled","res_risk","resolution_risk","passFiltersCluster","cluster","cluster_name","cluster_id","hits","parseInt","total_hit_count","hits_by_total_risk","toValidSemVer","cluster_version","buildFilterChips","categories","localFilters","sortIndex","sortDirection","sort","offset","limit","filterCategories","reduce","arr","it","key","item","chips","Array","isArray","map","value","selectedCategoryValue","values","name","text","label","title","pruneFilters","paramParser","search","searchParams","URLSearchParams","from","acc","JSON","parse","split","translateSortParams","substring","startsWith","direction","object_id","updateSearchParams","columnMapping","url","URL","window","location","origin","pathname","index","indexMapping","set","console","error","forEach","history","replaceState","href","compareSemVer","v1","v2","d","compare","version","coerce","undefined","valid","removeFilterParam","currentFilters","updateFilters","param","omitted","newFilters","addFilterParam","passFilterWorkloads","workloads","generalSeverityRemapped","metadata","hits_by_severity","display_name","uuid","namespace","severity","SEVERITY_OPTIONS","iconColor","textColor","hasIcon","indexNumber","remappingSeverity","obj","mode","mapping","updatedObj","hasAnyValueGreaterThanZero","stringsToCheck","filtersAreApplied","params","cleanedUpParams","filter","capitalize","str","charAt","toUpperCase","slice","createChips","pruneWorkloadsRulesFilters","trim","push","replace","switchSort","details","objects","modified","sortWithSwitch","filteredRows","a","b","asc","flatMapRows","expandFirst","flatMap","row","updatedRow","isOpen","parent","passObjectsFilters","cleanedUpFilters","uid","workloadsRulesRemoveFilterParam","object_name","workloadsRulesAddFilterParam","passFilterWorkloadsRecs","recommendation"],"sourceRoot":""}