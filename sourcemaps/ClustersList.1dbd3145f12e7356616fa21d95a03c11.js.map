{"version":3,"file":"js/ClustersList.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./src/Components/ClustersListTable/ClustersListTable.js","webpack:///./src/Components/ClustersListTable/index.js","webpack:///./src/Components/ClustersList/index.js","webpack:///./src/Components/Loading/Loading.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { useDispatch, useSelector } from 'react-redux';\nimport isEqual from 'lodash/isEqual';\nimport { useLocation } from 'react-router-dom';\nimport uniqBy from 'lodash/uniqBy';\nimport { valid } from 'semver';\nimport { Link } from 'react-router-dom';\n\nimport { SortByDirection, TableVariant } from '@patternfly/react-table';\nimport {\n  Table,\n  TableBody,\n  TableHeader,\n} from '@patternfly/react-table/deprecated';\nimport { Label, Pagination, Tooltip } from '@patternfly/react-core';\nimport { PaginationVariant } from '@patternfly/react-core/dist/js/components/Pagination/Pagination';\nimport PrimaryToolbar from '@redhat-cloud-services/frontend-components/PrimaryToolbar/PrimaryToolbar';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter/conditionalFilterConstants';\n\nimport {\n  CLUSTERS_LIST_INITIAL_STATE,\n  resetFilters,\n  updateClustersListFilters,\n} from '../../Services/Filters';\nimport {\n  CLUSTERS_LIST_COLUMNS,\n  CLUSTERS_LIST_COLUMNS_KEYS,\n  CLUSTERS_TABLE_CELL_NAME,\n  CLUSTERS_TABLE_CELL_LAST_SEEN,\n  CLUSTERS_TABLE_CELL_VERSION,\n  CLUSTER_FILTER_CATEGORIES,\n} from '../../AppConstants';\nimport {\n  buildFilterChips,\n  paramParser,\n  passFiltersCluster,\n  removeFilterParam as _removeFilterParam,\n  addFilterParam as _addFilterParam,\n  translateSortParams,\n  updateSearchParams,\n  compareSemVer,\n  toValidSemVer,\n} from '../Common/Tables';\nimport Loading from '../Loading/Loading';\nimport messages from '../../Messages';\nimport {\n  ErrorState,\n  NoMatchingClusters,\n  NoRecsForClusters,\n} from '../MessageState/EmptyStates';\nimport { coerce } from 'semver';\nimport { BASE_PATH } from '../../Routes';\nimport { useAxiosWithPlatformInterceptors } from '@redhat-cloud-services/frontend-components-utilities/interceptors';\nimport { useUpdateRisksFeatureFlag } from '../../Utilities/useFeatureFlag';\n\nconst ClustersListTable = ({\n  query: { isError, isUninitialized, isFetching, isSuccess, data, refetch },\n}) => {\n  const areUpdateRisksEnabled = useUpdateRisksFeatureFlag();\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const updateFilters = (payload) =>\n    dispatch(updateClustersListFilters(payload));\n  const filters = useSelector(({ filters }) => filters.clustersListState);\n\n  const clusters = data?.data || [];\n  const page = filters.offset / filters.limit + 1;\n\n  const [filteredRows, setFilteredRows] = useState([]);\n  const [displayedRows, setDisplayedRows] = useState([]);\n  // helps to distinguish the state when the API data received but not yet filtered\n  const [rowsFiltered, setRowsFiltered] = useState(false);\n  const [filterBuilding, setFilterBuilding] = useState(true);\n  const { search } = useLocation();\n  const loadingState = isUninitialized || isFetching || !rowsFiltered;\n  const errorState = isError;\n  const successState = isSuccess;\n  const noMatch =\n    clusters.length > 0 &&\n    filteredRows?.length === 0 &&\n    displayedRows?.length === 0;\n\n  const axios = useAxiosWithPlatformInterceptors();\n\n  const removeFilterParam = (param) =>\n    _removeFilterParam(filters, updateFilters, param);\n\n  const addFilterParam = (param, values) =>\n    _addFilterParam(filters, updateFilters, param, values);\n\n  useEffect(() => {\n    const controller = new AbortController();\n    const signal = controller.signal;\n    const buildRows = async () => {\n      setRowsFiltered(false);\n      const res = await buildDisplayedRows(filteredRows, signal);\n      if (res !== 'cancel') {\n        setDisplayedRows(res);\n        setRowsFiltered(true);\n      }\n    };\n    buildRows();\n    return () => {\n      controller.abort();\n    };\n  }, [filteredRows, filters.limit, filters.offset, areUpdateRisksEnabled]);\n\n  useEffect(() => {\n    setRowsFiltered(false);\n    setFilteredRows(buildFilteredRows(clusters));\n  }, [\n    data,\n    filters.text,\n    filters.version,\n    filters.hits,\n    filters.sortDirection,\n    filters.sortIndex,\n  ]);\n\n  useEffect(() => {\n    if (search && filterBuilding) {\n      const paramsObject = paramParser(search);\n\n      if (paramsObject.sort) {\n        const sortObj = translateSortParams(paramsObject.sort);\n        paramsObject.sortIndex = CLUSTERS_LIST_COLUMNS_KEYS.indexOf(\n          sortObj.name\n        );\n        paramsObject.sortDirection = sortObj.direction;\n      }\n      paramsObject.offset &&\n        (paramsObject.offset = Number(paramsObject.offset[0]));\n      paramsObject.limit &&\n        (paramsObject.limit = Number(paramsObject.limit[0]));\n      paramsObject.impacting &&\n        !Array.isArray(paramsObject.impacting) &&\n        (paramsObject.impacting = [`${paramsObject.impacting}`]);\n      updateFilters({ ...filters, ...paramsObject });\n    }\n    setFilterBuilding(false);\n  }, []);\n\n  useEffect(() => {\n    if (!filterBuilding) {\n      updateSearchParams(filters, CLUSTERS_LIST_COLUMNS_KEYS);\n    }\n  }, [filters, filterBuilding]);\n\n  const buildFilteredRows = (items) => {\n    const filtered = items.filter((it) => {\n      return passFiltersCluster(it, filters);\n    });\n\n    const mapped = filtered.map((it) => {\n      return {\n        it,\n        cells: [\n          it.cluster_name || it.cluster_id,\n          it.cluster_version,\n          it.total_hit_count,\n          it.hits_by_total_risk?.[4] || 0,\n          it.hits_by_total_risk?.[3] || 0,\n          it.hits_by_total_risk?.[2] || 0,\n          it.hits_by_total_risk?.[1] || 0,\n          it.last_checked_at,\n        ],\n      };\n    });\n\n    const sorted =\n      filters.sortIndex === -1\n        ? mapped\n        : mapped.sort((a, b) => {\n            let fst, snd;\n            const d = filters.sortDirection === SortByDirection.asc ? 1 : -1;\n            switch (filters.sortIndex) {\n              case CLUSTERS_TABLE_CELL_NAME:\n                fst = a.it.cluster_name || a.it.cluster_id;\n                snd = b.it.cluster_name || b.it.cluster_id;\n                return fst.localeCompare(snd) ? fst.localeCompare(snd) * d : 0;\n              case CLUSTERS_TABLE_CELL_VERSION:\n                return compareSemVer(\n                  toValidSemVer(a.it.cluster_version),\n                  toValidSemVer(b.it.cluster_version),\n                  d\n                );\n              case CLUSTERS_TABLE_CELL_LAST_SEEN:\n                fst = new Date(a.it.last_checked_at || 0);\n                snd = new Date(b.it.last_checked_at || 0);\n                return fst > snd ? d : snd > fst ? -d : 0;\n              default:\n                fst = a.cells[filters.sortIndex];\n                snd = b.cells[filters.sortIndex];\n                return fst > snd ? d : snd > fst ? -d : 0;\n            }\n          });\n    return sorted;\n  };\n\n  const buildDisplayedRows = async (items, signal) => {\n    const paginatedItems = items?.slice(\n      filters.limit * (page - 1),\n      filters.limit * (page - 1) + filters.limit\n    );\n\n    const clusterArr = paginatedItems?.map((cluster) => cluster.it.cluster_id);\n    let upgradeArr = [];\n    if (clusterArr?.length > 0 && areUpdateRisksEnabled) {\n      let res = null;\n      try {\n        res = await axios.post(\n          '/api/insights-results-aggregator/v2/upgrade-risks-prediction',\n          { clusters: clusterArr },\n          {\n            signal,\n          }\n        );\n      } catch (err) {\n        console.log(err);\n      }\n\n      // Return early, when request is cancelled to prevent unwanted state update\n      if (res === undefined) return 'cancel';\n\n      if (res?.status === 'ok')\n        upgradeArr = res.predictions.map((item) => item);\n    }\n\n    const mapped = paginatedItems?.map(({ it }, index) => {\n      if (\n        it.cluster_version !== undefined &&\n        it.cluster_version !== '' &&\n        !valid(coerce(it.cluster_version))\n      ) {\n        console.error(\n          `Cluster version ${it.cluster_version} has invalid format!`\n        );\n      }\n      const ver = toValidSemVer(it.cluster_version);\n      const upgrade =\n        Array.isArray(upgradeArr) &&\n        upgradeArr.find((el) => el?.cluster_id === it?.cluster_id)\n          ?.upgrade_recommended === false;\n\n      return {\n        entity: it,\n        cells: [\n          <span key={it.cluster_id} className=\"pf-v5-l-flex\">\n            <Link\n              key={`${it.cluster_id}-link`}\n              to={`${BASE_PATH}/clusters/${it.cluster_id}`}\n              className=\"pf-v5-l-flex__item\"\n            >\n              {it.cluster_name || it.cluster_id}\n            </Link>\n            {upgrade && (\n              <Label isCompact color=\"orange\" className=\"pf-v5-l-flex__item\">\n                Update risk\n              </Label>\n            )}\n          </span>,\n          ver === '0.0.0' ? intl.formatMessage(messages.nA) : ver,\n          it.total_hit_count,\n          it.hits_by_total_risk?.[4] || 0,\n          it.hits_by_total_risk?.[3] || 0,\n          it.hits_by_total_risk?.[2] || 0,\n          it.hits_by_total_risk?.[1] || 0,\n          <span key={index}>\n            {it.last_checked_at ? (\n              <DateFormat\n                extraTitle={`${intl.formatMessage(messages.lastSeen)}: `}\n                date={it.last_checked_at}\n                variant=\"relative\"\n              />\n            ) : (\n              <Tooltip\n                key={index}\n                content={\n                  <span>\n                    {intl.formatMessage(messages.lastSeen) + ': '}\n                    {intl.formatMessage(messages.nA)}\n                  </span>\n                }\n              >\n                <span>{intl.formatMessage(messages.nA)}</span>\n              </Tooltip>\n            )}\n          </span>,\n        ],\n      };\n    });\n\n    return mapped;\n  };\n\n  const filterConfigItems = [\n    {\n      label: intl.formatMessage(messages.name).toLowerCase(),\n      type: 'text',\n      filterValues: {\n        key: 'text-filter',\n        onChange: (_event, value) =>\n          updateFilters({ ...filters, offset: 0, text: value }),\n        value: filters.text,\n        placeholder: intl.formatMessage(messages.filterByName),\n      },\n    },\n    {\n      label: intl.formatMessage(messages.version),\n      placeholder: intl.formatMessage(messages.filterByVersion),\n      type: conditionalFilterType.checkbox,\n      filterValues: {\n        id: 'version-filter',\n        key: 'version-filter',\n        onChange: (event, value) => addFilterParam('version', value),\n        value: filters.version,\n        items: uniqBy(\n          clusters\n            .filter(\n              (c) => c.cluster_version !== undefined && c.cluster_version !== ''\n            )\n            .map((c) => ({\n              label: c.cluster_version,\n              value: toValidSemVer(c.cluster_version),\n            }))\n            .sort((a, b) =>\n              compareSemVer(\n                toValidSemVer(a.cluster_version),\n                toValidSemVer(b.cluster_version),\n                1\n              )\n            )\n            .reverse(), // should start from the latest version\n          'value'\n        ),\n      },\n    },\n    {\n      label: CLUSTER_FILTER_CATEGORIES.hits.title,\n      type: CLUSTER_FILTER_CATEGORIES.hits.type,\n      id: CLUSTER_FILTER_CATEGORIES.hits.urlParam,\n      value: `checkbox-${CLUSTER_FILTER_CATEGORIES.hits.urlParam}`,\n      filterValues: {\n        key: `${CLUSTER_FILTER_CATEGORIES.hits.urlParam}-filter`,\n        onChange: (_event, values) =>\n          addFilterParam(CLUSTER_FILTER_CATEGORIES.hits.urlParam, values),\n        value: filters.hits,\n        items: CLUSTER_FILTER_CATEGORIES.hits.values,\n      },\n    },\n  ];\n\n  const activeFiltersConfig = {\n    showDeleteButton: true,\n    deleteTitle: intl.formatMessage(messages.resetFilters),\n    filters: buildFilterChips(filters, CLUSTER_FILTER_CATEGORIES),\n    onDelete: (_event, itemsToRemove, isAll) => {\n      if (isAll) {\n        if (isEqual(filters, CLUSTERS_LIST_INITIAL_STATE)) {\n          refetch();\n        } else {\n          resetFilters(filters, CLUSTERS_LIST_INITIAL_STATE, updateFilters);\n        }\n      } else {\n        itemsToRemove.map((item) => {\n          const newFilter = {\n            [item.urlParam]: Array.isArray(filters[item.urlParam])\n              ? filters[item.urlParam].filter(\n                  (value) => String(value) !== String(item.chips[0].value)\n                )\n              : '',\n          };\n          newFilter[item.urlParam].length > 0\n            ? updateFilters({ ...filters, ...newFilter })\n            : removeFilterParam(item.urlParam);\n        });\n      }\n    },\n  };\n\n  const onSort = (_e, index, direction) => {\n    setRowsFiltered(false);\n    updateFilters({ ...filters, sortIndex: index, sortDirection: direction });\n  };\n\n  return (\n    <>\n      {isSuccess && clusters.length === 0 ? (\n        <NoRecsForClusters /> // TODO: do not mix this logic in the table component\n      ) : (\n        <div id=\"clusters-list-table\" data-ouia-safe={!loadingState}>\n          <PrimaryToolbar\n            pagination={{\n              itemCount: filteredRows.length,\n              page,\n              perPage: filters.limit,\n              onSetPage: (_event, page) => {\n                setRowsFiltered(false);\n                return updateFilters({\n                  ...filters,\n                  offset: filters.limit * (page - 1),\n                });\n              },\n              onPerPageSelect: (_event, perPage) => {\n                setRowsFiltered(false);\n                return updateFilters({ ...filters, limit: perPage, offset: 0 });\n              },\n              isCompact: true,\n              ouiaId: 'pager',\n            }}\n            filterConfig={{ items: filterConfigItems }}\n            activeFiltersConfig={activeFiltersConfig}\n          />\n          <Table\n            aria-label=\"Table of clusters\"\n            ouiaId=\"clusters\"\n            ouiaSafe={!loadingState}\n            variant={TableVariant.compact}\n            cells={CLUSTERS_LIST_COLUMNS}\n            rows={\n              errorState || loadingState || noMatch ? (\n                [\n                  {\n                    fullWidth: true,\n                    cells: [\n                      {\n                        props: {\n                          colSpan: CLUSTERS_LIST_COLUMNS.length + 1,\n                        },\n                        title: errorState ? (\n                          <ErrorState />\n                        ) : loadingState ? (\n                          <Loading />\n                        ) : (\n                          <NoMatchingClusters />\n                        ),\n                      },\n                    ],\n                  },\n                ]\n              ) : successState ? (\n                displayedRows\n              ) : (\n                <ErrorState />\n              )\n            }\n            sortBy={{\n              index: filters.sortIndex,\n              direction: filters.sortDirection,\n            }}\n            onSort={onSort}\n            isStickyHeader\n          >\n            <TableHeader />\n            <TableBody />\n          </Table>\n          <Pagination\n            ouiaId=\"pager\"\n            itemCount={filteredRows.length}\n            page={filters.offset / filters.limit + 1}\n            perPage={Number(filters.limit)}\n            onSetPage={(_e, page) =>\n              updateFilters({\n                ...filters,\n                offset: filters.limit * (page - 1),\n              })\n            }\n            onPerPageSelect={(_e, perPage) =>\n              updateFilters({ ...filters, limit: perPage, offset: 0 })\n            }\n            widgetId={`pagination-options-menu-bottom`}\n            variant={PaginationVariant.bottom}\n          />\n        </div>\n      )}\n    </>\n  );\n};\n\nClustersListTable.propTypes = {\n  query: PropTypes.object.isRequired,\n};\n\nexport { ClustersListTable };\n","import React from 'react';\nimport { useGetClustersQuery } from '../../Services/SmartProxy';\nimport { ClustersListTable } from './ClustersListTable';\n\nconst ClustersListTableWrapper = () => {\n  const query = useGetClustersQuery();\n\n  return <ClustersListTable query={query} />;\n};\n\nexport default ClustersListTableWrapper;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\n\nimport PageHeader from '@redhat-cloud-services/frontend-components/PageHeader';\n\nimport messages from '../../Messages';\nimport ClustersListTable from '../ClustersListTable';\nimport { Title } from '@patternfly/react-core';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\n\nconst ClustersList = () => {\n  const intl = useIntl();\n  const chrome = useChrome();\n\n  chrome.updateDocumentTitle(\n    intl.formatMessage(messages.documentTitle, {\n      subnav: intl.formatMessage(messages.clusters),\n    })\n  );\n\n  return (\n    <React.Fragment>\n      <PageHeader className=\"ins-c-clusters-header\">\n        <Title headingLevel=\"h1\" ouiaId=\"page-header\">\n          {`${intl.formatMessage(messages.insightsHeader)} ${intl\n            .formatMessage(messages.clusters)\n            .toLowerCase()}`}\n        </Title>\n      </PageHeader>\n      <section className=\"pf-l-page__main-section pf-c-page__main-section\">\n        <ClustersListTable />\n      </section>\n    </React.Fragment>\n  );\n};\n\nexport default ClustersList;\n","import React from 'react';\nimport { Card, CardBody } from '@patternfly/react-core';\nimport { List } from 'react-content-loader';\n\nconst Loading = () => (\n  <Card ouiaId=\"loading-skeleton\">\n    <CardBody>\n      <List />\n    </CardBody>\n  </Card>\n);\n\nexport default Loading;\n"],"names":["ClustersListTable","query","isError","isUninitialized","isFetching","isSuccess","data","refetch","areUpdateRisksEnabled","intl","useIntl","dispatch","useDispatch","updateFilters","payload","filters","useSelector","clustersListState","clusters","page","offset","limit","filteredRows","setFilteredRows","useState","displayedRows","setDisplayedRows","rowsFiltered","setRowsFiltered","filterBuilding","setFilterBuilding","search","useLocation","loadingState","errorState","successState","noMatch","length","axios","addFilterParam","param","values","useEffect","controller","AbortController","signal","async","res","buildDisplayedRows","buildRows","abort","buildFilteredRows","text","version","hits","sortDirection","sortIndex","paramsObject","sort","sortObj","indexOf","name","direction","Number","impacting","Array","isArray","items","mapped","filter","it","map","cells","cluster_name","cluster_id","cluster_version","total_hit_count","hits_by_total_risk","last_checked_at","a","b","fst","snd","d","asc","localeCompare","CL","Date","paginatedItems","slice","clusterArr","cluster","upgradeArr","post","err","console","log","undefined","status","predictions","item","index","valid","coerce","error","ver","upgrade","find","el","upgrade_recommended","entity","key","className","Link","to","Label","isCompact","color","formatMessage","nA","DateFormat","extraTitle","lastSeen","date","variant","Tooltip","content","filterConfigItems","label","toLowerCase","type","filterValues","onChange","_event","value","placeholder","filterByName","filterByVersion","conditionalFilterType","checkbox","id","event","c","reverse","title","urlParam","activeFiltersConfig","showDeleteButton","deleteTitle","resetFilters","onDelete","itemsToRemove","isAll","newFilter","String","chips","pagination","itemCount","perPage","onSetPage","onPerPageSelect","ouiaId","filterConfig","Table","ouiaSafe","compact","rows","fullWidth","props","colSpan","Loading","sortBy","onSort","_e","isStickyHeader","Pagination","widgetId","bottom","propTypes","isRequired","useChrome","updateDocumentTitle","documentTitle","subnav","PageHeader","Title","headingLevel","insightsHeader","Card","CardBody"],"sourceRoot":""}