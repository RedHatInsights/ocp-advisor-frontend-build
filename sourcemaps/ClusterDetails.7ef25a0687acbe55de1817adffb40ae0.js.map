{"version":3,"file":"js/ClusterDetails.1655449360298.c9b00ebfd3a36f5091f0.js","mappings":"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","sources":["webpack:///./src/Components/Breadcrumbs/index.js","webpack:///./src/Components/ClusterHeader/ClusterHeader.js","webpack:///./src/Components/ClusterHeader/index.js","webpack:///./src/Components/ReportDetails/ReportDetails.js","webpack:///./src/Components/ClusterRules/ClusterRules.js","webpack:///./src/Components/Cluster/Cluster.js","webpack:///./src/Components/Cluster/index.js","webpack:///./src/Components/Labels/RuleLabels.js","webpack:///./src/Components/Loading/Loading.js","webpack:///./src/Utilities/Loaders.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { Link, useLocation } from 'react-router-dom';\n\nimport { Breadcrumb, BreadcrumbItem } from '@patternfly/react-core';\n\nimport messages from '../../Messages';\n\nconst Breadcrumbs = ({ current }) => {\n  const intl = useIntl();\n  const location = useLocation();\n  const splitUrl = location.pathname.split('/');\n\n  return (\n    <div>\n      <Breadcrumb ouiaId=\"detail\">\n        <BreadcrumbItem className=\"breadcrumb-item\">\n          <Link to={`/${splitUrl[1]}`}>\n            {`${intl.formatMessage(messages.insightsHeader)} ${splitUrl[1]}`}\n          </Link>\n        </BreadcrumbItem>\n        <BreadcrumbItem className=\"breadcrumb-item\" isActive>\n          {current}\n        </BreadcrumbItem>\n      </Breadcrumb>\n    </div>\n  );\n};\n\nBreadcrumbs.propTypes = {\n  current: PropTypes.string,\n};\n\nexport default Breadcrumbs;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport {\n  Grid,\n  GridItem,\n  Stack,\n  StackItem,\n  Title,\n} from '@patternfly/react-core';\nimport { Dropdown, DropdownToggle, DropdownItem } from '@patternfly/react-core';\nimport Skeleton from '@redhat-cloud-services/frontend-components/Skeleton';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat/DateFormat';\n\nimport messages from '../../Messages';\nimport { OneLineLoader } from '../../Utilities/Loaders';\n\nexport const ClusterHeader = ({ clusterId, clusterData, clusterInfo }) => {\n  const location = window.location;\n  const [isOpen, setIsOpen] = useState(false);\n  const intl = useIntl();\n  // subscribe to the cluster data query\n  const {\n    isUninitialized: isUninitializedCluster,\n    isFetching: isFetchingCluster,\n    data: cluster,\n  } = clusterData;\n\n  const {\n    isUninitialized: isUninitializedInfo,\n    isFetching: isFetchingInfo,\n    data: info,\n  } = clusterInfo;\n\n  const redirectOCM = (clusterId) => {\n    location.assign(\n      location.origin +\n        (location.pathname.includes('beta') ? `/beta` : '') +\n        `/openshift/details/${clusterId}`\n    );\n  };\n\n  const dropDownItems = [\n    <DropdownItem key=\"link\" onClick={() => redirectOCM(clusterId)}>\n      <snap>{intl.formatMessage(messages.clusterDetailsRedirect)}</snap>\n    </DropdownItem>,\n  ];\n\n  return (\n    <Grid id=\"cluster-header\" md={12} hasGutter>\n      <GridItem span={8}>\n        <Title\n          size=\"2xl\"\n          headingLevel=\"h1\"\n          id=\"cluster-header-title\"\n          ouiaId=\"cluster-name\"\n        >\n          {isUninitializedInfo || isFetchingInfo ? (\n            <Skeleton size=\"sm\" />\n          ) : (\n            info?.display_name || clusterId\n          )}\n        </Title>\n      </GridItem>\n      <GridItem span={4} id=\"cluster-header-dropdown\">\n        <Dropdown\n          position=\"right\"\n          onSelect={() => setIsOpen(!isOpen)}\n          autoFocus={false}\n          isOpen={isOpen}\n          toggle={\n            <DropdownToggle\n              id=\"toggle-id-2\"\n              onToggle={(isOpen) => setIsOpen(isOpen)}\n            >\n              {intl.formatMessage(messages.dropDownActionSingleCluster)}\n            </DropdownToggle>\n          }\n          dropdownItems={dropDownItems}\n        />\n      </GridItem>\n      <GridItem>\n        <Stack>\n          <StackItem id=\"cluster-header-uuid\">\n            <span>UUID:</span> <span>{clusterId}</span>\n          </StackItem>\n          <StackItem id=\"cluster-header-last-seen\">\n            <span>{intl.formatMessage(messages.lastSeen)}: </span>\n            <span>\n              {isUninitializedCluster || isFetchingCluster ? (\n                <OneLineLoader />\n              ) : cluster?.report?.meta?.last_checked_at ? (\n                <DateFormat\n                  date={cluster?.report?.meta?.last_checked_at}\n                  type=\"exact\"\n                />\n              ) : (\n                intl.formatMessage(messages.unknown)\n              )}\n            </span>\n          </StackItem>\n        </Stack>\n      </GridItem>\n    </Grid>\n  );\n};\n\nClusterHeader.propTypes = {\n  clusterId: PropTypes.string.isRequired,\n  clusterData: PropTypes.object.isRequired,\n  clusterInfo: PropTypes.shape({\n    isUninitialized: PropTypes.bool.isRequired,\n    isFetching: PropTypes.bool.isRequired,\n    data: PropTypes.shape({\n      cluster_id: PropTypes.string,\n      display_name: PropTypes.string,\n      managed: PropTypes.bool,\n      status: PropTypes.string,\n    }),\n  }),\n};\n","import React from 'react';\nimport { useRouteMatch } from 'react-router-dom';\n\nimport {\n  useGetClusterByIdQuery,\n  useGetClusterInfoQuery,\n} from '../../Services/SmartProxy';\nimport { ClusterHeader } from './ClusterHeader';\n\nconst ClusterHeaderWrapper = () => {\n  const match = useRouteMatch();\n  const clusterId = match.params.clusterId;\n  const clusterData = useGetClusterByIdQuery({\n    id: clusterId,\n    includeDisabled: false,\n  });\n  const clusterInfo = useGetClusterInfoQuery({\n    id: clusterId,\n  });\n\n  return (\n    <ClusterHeader\n      clusterId={clusterId}\n      clusterData={clusterData}\n      clusterInfo={clusterInfo}\n    />\n  );\n};\n\nexport default ClusterHeaderWrapper;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\n\nimport Loading from '../Loading/Loading';\n\n// Rule fields processing: https://docs.google.com/document/d/1D0ZLD6-2DZqBX1cUHJY2vL2QAD0dIAzY3O3xFNlEsVg/edit?usp=sharing\n\nconst ReportDetails = ({ report }) => {\n  return window.CYPRESS_RUN ? (\n    <Loading />\n  ) : (\n    <div className=\"advisor\">\n      <AsyncComponent\n        appName=\"advisor\"\n        module=\"./AdvisorReportDetails\"\n        fallback={<Loading />}\n        // TODO: make API rename `extra_data` to `details` or modify AdvisorReportDetails property\n        report={{\n          ...report,\n          details: report.extra_data,\n          resolution: {\n            resolution: report.resolution,\n          },\n        }}\n      />\n    </div>\n  );\n};\n\nReportDetails.propTypes = {\n  report: PropTypes.object.isRequired,\n};\n\nexport default ReportDetails;\n","import './_ClusterRules.scss';\n\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { useLocation } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport capitalize from 'lodash/capitalize';\n\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat/DateFormat';\nimport InsightsLabel from '@redhat-cloud-services/frontend-components/InsightsLabel';\nimport {\n  SortByDirection,\n  Table,\n  TableBody,\n  TableHeader,\n  TableVariant,\n} from '@patternfly/react-table';\nimport { Tooltip } from '@patternfly/react-core';\nimport { TooltipPosition } from '@patternfly/react-core/dist/js/components/Tooltip';\nimport PrimaryToolbar from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\n\nimport messages from '../../Messages';\nimport {\n  IMPACT_LABEL,\n  LIKELIHOOD_LABEL,\n  FILTER_CATEGORIES as FC,\n  CLUSTER_RULES_COLUMNS_KEYS,\n  FILTER_CATEGORIES,\n  CLUSTER_RULES_COLUMNS,\n} from '../../AppConstants';\nimport ReportDetails from '../ReportDetails/ReportDetails';\nimport RuleLabels from '../Labels/RuleLabels';\nimport {\n  ErrorState,\n  NoMatchingRecs,\n  NoRecsError,\n  NoInsightsResults,\n  NoRecsAffecting,\n} from '../MessageState/EmptyStates';\nimport {\n  paramParser,\n  passFilters,\n  removeFilterParam as _removeFilterParam,\n  addFilterParam as _addFilterParam,\n  translateSortParams,\n} from '../Common/Tables';\nimport {\n  CLUSTER_RULES_INITIAL_STATE,\n  updateClusterRulesFilters,\n} from '../../Services/Filters';\nimport { getErrorKey, getPluginName } from '../../Utilities/Rule';\nimport Loading from '../Loading/Loading';\n\nconst ClusterRules = ({ cluster }) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const updateFilters = (filters) =>\n    dispatch(updateClusterRulesFilters(filters));\n  const filters = useSelector(({ filters }) => filters.clusterRulesState);\n  const { isError, isUninitialized, isFetching, isSuccess, data, error } =\n    cluster;\n  const reports = data?.report?.data || [];\n  const [filteredRows, setFilteredRows] = useState([]);\n  const [displayedRows, setDisplayedRows] = useState([]);\n  const [isAllExpanded, setIsAllExpanded] = useState(false);\n  const [expandFirst, setExpandFirst] = useState(true);\n  const [firstRule, setFirstRule] = useState(''); // show a particular rule first\n  const results = filteredRows.length;\n  const { search } = useLocation();\n  const [rowsUpdating, setRowsUpdating] = useState(true);\n  const [rowsFiltered, setRowsFiltered] = useState(false);\n  const loadingState = isUninitialized || isFetching || rowsUpdating;\n  const errorState = isError;\n  const successState = isSuccess;\n  const noInput = successState && reports.length === 0;\n  const noMatch = reports.length > 0 && filteredRows.length === 0;\n\n  const removeFilterParam = (param) =>\n    _removeFilterParam(filters, updateFilters, param);\n\n  const addFilterParam = (param, values) => {\n    setExpandFirst(false);\n    setFirstRule('');\n    return _addFilterParam(filters, updateFilters, param, values);\n  };\n\n  useEffect(() => {\n    if (search) {\n      const paramsObject = paramParser(search);\n      if (paramsObject.sort) {\n        const sortObj = translateSortParams(paramsObject.sort);\n        paramsObject.sortIndex = CLUSTER_RULES_COLUMNS_KEYS.indexOf(\n          sortObj.name\n        );\n        paramsObject.sortDirection = sortObj.direction;\n      }\n      if (paramsObject.first) {\n        setFirstRule(paramsObject.first);\n        delete paramsObject.first;\n      }\n      updateFilters({ ...filters, ...paramsObject });\n    }\n  }, []);\n\n  useEffect(() => {\n    setFilteredRows(buildFilteredRows(reports, filters));\n  }, [data, filters]);\n\n  useEffect(() => {\n    setDisplayedRows(\n      buildDisplayedRows(filteredRows, filters.sortIndex, filters.sortDirection)\n    );\n    setRowsFiltered(true);\n  }, [\n    filteredRows,\n    filters.limit,\n    filters.offset,\n    filters.sortIndex,\n    filters.sortDirection,\n  ]);\n\n  useEffect(() => {\n    if (rowsFiltered) {\n      setRowsUpdating(false);\n    }\n  }, [rowsFiltered]);\n\n  const handleOnCollapse = (_e, rowId, isOpen) => {\n    if (rowId === undefined) {\n      // if undefined, all rows are affected\n      setIsAllExpanded(isOpen);\n      setDisplayedRows(\n        displayedRows.map((row) => ({\n          ...row,\n          isOpen: isOpen,\n        }))\n      );\n    } else {\n      setDisplayedRows(\n        displayedRows.map((row, index) =>\n          index === rowId ? { ...row, isOpen } : row\n        )\n      );\n    }\n  };\n\n  const buildFilteredRows = (allRows, filters) => {\n    const expandedRowsSet = new Set(\n      displayedRows\n        .filter((ruleExpanded) => ruleExpanded?.isOpen)\n        .map((object) => object?.rule?.rule_id)\n    );\n\n    return allRows\n      .filter((rule) => passFilters(rule, filters))\n      .map((value, key) => [\n        {\n          rule: value,\n          isOpen: isAllExpanded || expandedRowsSet?.has(value?.rule_id),\n          cells: [\n            {\n              title: (\n                <div>\n                  {value?.description || value?.rule_id}{' '}\n                  <RuleLabels rule={value} />\n                </div>\n              ),\n            },\n            {\n              title: (\n                <div key={key}>\n                  <DateFormat\n                    date={value.created_at}\n                    type=\"relative\"\n                    tooltipProps={{ position: TooltipPosition.bottom }}\n                  />\n                </div>\n              ),\n            },\n            {\n              title: (\n                <div key={key} style={{ verticalAlign: 'top' }}>\n                  {value?.likelihood && value?.impact ? (\n                    <Tooltip\n                      key={key}\n                      position={TooltipPosition.bottom}\n                      content={\n                        // TODO: refine fields lookup\n                        <span>\n                          The <strong>likelihood</strong> that this will be a\n                          problem is{' '}\n                          {value.likelihood\n                            ? LIKELIHOOD_LABEL[value.likelihood]\n                            : 'unknown'}\n                          .The <strong>impact</strong> of the problem would be{' '}\n                          {value.impact\n                            ? IMPACT_LABEL[value.impact]\n                            : 'unknown'}{' '}\n                          if it occurred.\n                        </span>\n                      }\n                    >\n                      <InsightsLabel\n                        value={value.total_risk}\n                        rest={{ isCompact: true }}\n                      />\n                    </Tooltip>\n                  ) : (\n                    <InsightsLabel\n                      value={value.total_risk}\n                      rest={{ isCompact: true }}\n                    />\n                  )}\n                </div>\n              ),\n            },\n          ],\n        },\n        {\n          fullWidth: true,\n          cells: [\n            {\n              title: <ReportDetails key={`child-${key}`} report={value} />,\n            },\n          ],\n        },\n      ]);\n  };\n\n  const buildDisplayedRows = (rows, index, direction) => {\n    let sortingRows = [...rows];\n    if (index >= 0 && !firstRule) {\n      const d = direction === SortByDirection.asc ? 1 : -1;\n      sortingRows = [...rows].sort((firstItem, secondItem) => {\n        const fst = firstItem[0].rule[CLUSTER_RULES_COLUMNS_KEYS[index]];\n        const snd = secondItem[0].rule[CLUSTER_RULES_COLUMNS_KEYS[index]];\n        return fst > snd ? d : snd > fst ? -d : 0;\n      });\n    } else if (firstRule) {\n      const i = rows.findIndex((row) => {\n        const rule = row[0].rule;\n        /* rule_id is given with the plugin name only,\n           thus we need to look at extra_data for the error key */\n        return (\n          rule.rule_id.split('.report')[0] === getPluginName(firstRule) &&\n          rule.extra_data.error_key === getErrorKey(firstRule)\n        );\n      });\n      i !== -1 && sortingRows.unshift(sortingRows.splice(i, 1)[0]);\n    }\n    return sortingRows.flatMap((row, index) => {\n      const updatedRow = [...row];\n      if (expandFirst && index === 0) {\n        row[0].isOpen = true;\n      }\n      row[1].parent = index * 2;\n      return updatedRow;\n    });\n  };\n\n  const onSort = (_e, index, direction) => {\n    setExpandFirst(false);\n    setFirstRule('');\n    return updateFilters({\n      ...filters,\n      sortIndex: index,\n      sortDirection: direction,\n    });\n  };\n\n  const filterConfigItems = [\n    {\n      label: 'description',\n      filterValues: {\n        key: 'text-filter',\n        onChange: (_e, value) => addFilterParam('text', value),\n        value: filters.text,\n      },\n    },\n    {\n      label: FC.total_risk.title,\n      type: FC.total_risk.type,\n      id: FC.total_risk.urlParam,\n      value: `checkbox-${FC.total_risk.urlParam}`,\n      filterValues: {\n        key: `${FC.total_risk.urlParam}-filter`,\n        onChange: (_e, values) =>\n          addFilterParam(FILTER_CATEGORIES.total_risk.urlParam, values),\n        value: filters.total_risk,\n        items: FC.total_risk.values,\n      },\n    },\n    {\n      label: FC.category.title,\n      type: FC.category.type,\n      id: FC.category.urlParam,\n      value: `checkbox-${FC.category.urlParam}`,\n      filterValues: {\n        key: `${FC.category.urlParam}-filter`,\n        onChange: (_e, values) =>\n          addFilterParam(FILTER_CATEGORIES.category.urlParam, values),\n        value: filters.category,\n        items: FC.category.values,\n      },\n    },\n  ];\n\n  const pruneFilters = (localFilters, filterCategories) => {\n    const prunedFilters = Object.entries(localFilters);\n    return prunedFilters.length > 0\n      ? prunedFilters.reduce((arr, item) => {\n          if (filterCategories[item[0]]) {\n            const category = filterCategories[item[0]];\n            const chips = Array.isArray(item[1])\n              ? item[1].map((value) => {\n                  const selectedCategoryValue = category.values.find(\n                    (values) => values.value === String(value)\n                  );\n                  return selectedCategoryValue\n                    ? {\n                        name:\n                          selectedCategoryValue.text ||\n                          selectedCategoryValue.label,\n                        value,\n                      }\n                    : { name: value, value };\n                })\n              : [\n                  {\n                    name: category.values.find(\n                      (values) => values.value === String(item[1])\n                    ).label,\n                    value: item[1],\n                  },\n                ];\n            return [\n              ...arr,\n              {\n                category: capitalize(category.title),\n                chips,\n                urlParam: category.urlParam,\n              },\n            ];\n          } else if (item[0] === 'text') {\n            return [\n              ...arr,\n              ...(item[1].length > 0\n                ? [\n                    {\n                      category: intl.formatMessage(messages.description),\n                      chips: [{ name: item[1], value: item[1] }],\n                      urlParam: item[0],\n                    },\n                  ]\n                : []),\n            ];\n          } else {\n            return arr;\n          }\n        }, [])\n      : [];\n  };\n\n  const buildFilterChips = () => {\n    const localFilters = { ...filters };\n    delete localFilters.sortIndex;\n    delete localFilters.sortDirection;\n    delete localFilters.offset;\n    delete localFilters.limit;\n    return pruneFilters(localFilters, FILTER_CATEGORIES);\n  };\n\n  const activeFiltersConfig = {\n    deleteTitle: intl.formatMessage(messages.resetFilters),\n    filters: buildFilterChips(),\n    onDelete: (_event, itemsToRemove, isAll) => {\n      if (isAll) {\n        updateFilters(CLUSTER_RULES_INITIAL_STATE);\n      } else {\n        itemsToRemove.map((item) => {\n          const newFilter = {\n            [item.urlParam]: Array.isArray(filters[item.urlParam])\n              ? filters[item.urlParam].filter(\n                  (value) => String(value) !== String(item.chips[0].value)\n                )\n              : '',\n          };\n          newFilter[item.urlParam].length > 0\n            ? updateFilters({ ...filters, ...newFilter })\n            : removeFilterParam(item.urlParam);\n        });\n      }\n    },\n  };\n\n  return (\n    <div id=\"cluster-recs-list-table\">\n      <PrimaryToolbar\n        filterConfig={{\n          items: filterConfigItems,\n          isDisabled: loadingState || errorState || reports.length === 0,\n        }}\n        pagination={\n          <React.Fragment>\n            {results === 1\n              ? `${results} ${intl.formatMessage(messages.recommendation)}`\n              : `${results} ${intl.formatMessage(messages.recommendations)}`}\n          </React.Fragment>\n        }\n        activeFiltersConfig={\n          loadingState || errorState || reports.length === 0\n            ? undefined\n            : activeFiltersConfig\n        }\n      />\n      <Table\n        aria-label={'Cluster recommendations table'}\n        ouiaId=\"recommendations\"\n        onCollapse={handleOnCollapse} // TODO: set undefined when there is an empty state\n        rows={\n          errorState || loadingState || noMatch || noInput ? (\n            [\n              {\n                fullWidth: true,\n                cells: [\n                  {\n                    props: {\n                      colSpan: CLUSTER_RULES_COLUMNS.length + 1,\n                    },\n                    title: errorState ? (\n                      error?.status === 404 ? (\n                        <NoInsightsResults /> // no Insights results received yet\n                      ) : (\n                        <NoRecsError /> // any other problem\n                      )\n                    ) : loadingState ? (\n                      <Loading />\n                    ) : noInput ? (\n                      <NoRecsAffecting />\n                    ) : (\n                      <NoMatchingRecs />\n                    ),\n                  },\n                ],\n              },\n            ]\n          ) : successState ? (\n            displayedRows\n          ) : (\n            <ErrorState />\n          )\n        }\n        cells={CLUSTER_RULES_COLUMNS}\n        sortBy={{\n          index: filters.sortIndex,\n          direction: filters.sortDirection,\n        }}\n        onSort={onSort}\n        variant={TableVariant.compact}\n        isStickyHeader\n        canCollapseAll\n      >\n        <TableHeader />\n        <TableBody />\n      </Table>\n    </div>\n  );\n};\n\nClusterRules.propTypes = {\n  cluster: PropTypes.shape({\n    isError: PropTypes.bool.isRequired,\n    isUninitialized: PropTypes.bool.isRequired,\n    isFetching: PropTypes.bool.isRequired,\n    isSuccess: PropTypes.bool.isRequired,\n    data: PropTypes.array,\n    refetch: PropTypes.func,\n    error: PropTypes.object,\n  }),\n};\n\nexport default ClusterRules;\n","import './_Cluster.scss';\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport PageHeader from '@redhat-cloud-services/frontend-components/PageHeader';\nimport ClusterHeader from '../ClusterHeader';\nimport ClusterRules from '../ClusterRules/ClusterRules';\nimport Breadcrumbs from '../Breadcrumbs';\nimport Main from '@redhat-cloud-services/frontend-components/Main';\n\nexport const Cluster = ({ cluster, match }) => {\n  // TODO: make breadcrumbs take display name from GET /cluster/id/info\n  return (\n    <React.Fragment>\n      <PageHeader className=\"pf-m-light ins-inventory-detail\">\n        <Breadcrumbs\n          current={\n            cluster?.data?.report.meta.cluster_name || match.params.clusterId\n          }\n          match={match}\n        />\n        <ClusterHeader />\n      </PageHeader>\n      <Main>\n        <ClusterRules cluster={cluster} />\n      </Main>\n    </React.Fragment>\n  );\n};\n\nCluster.propTypes = {\n  cluster: PropTypes.object.isRequired,\n  displayName: PropTypes.object.isRequired,\n  match: PropTypes.object.isRequired,\n};\n","import React, { useEffect } from 'react';\nimport { useRouteMatch } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\n\nimport { useGetClusterByIdQuery } from '../../Services/SmartProxy';\nimport messages from '../../Messages';\nimport { Cluster } from './Cluster';\n\nconst ClusterWrapper = () => {\n  const intl = useIntl();\n  const match = useRouteMatch();\n  const cluster = useGetClusterByIdQuery({\n    id: match.params.clusterId,\n    includeDisabled: false,\n  });\n\n  useEffect(() => {\n    cluster.refetch();\n  }, [match.params.clusterId]);\n\n  useEffect(() => {\n    const subnav = `${\n      cluster?.data?.report?.meta?.cluster_name || match.params.clusterId\n    } - ${intl.formatMessage(messages.clusters)}`;\n    insights.chrome.updateDocumentTitle(\n      intl.formatMessage(messages.documentTitle, { subnav })\n    );\n  }, [cluster, match]);\n  return <Cluster cluster={cluster} match={match} />;\n};\n\nexport default ClusterWrapper;\n","import { TooltipPosition } from '@patternfly/react-core/dist/js/components/Tooltip/Tooltip';\nimport { Tooltip, Label } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { useIntl } from 'react-intl';\nimport messages from '../../Messages';\n\nconst RuleLabels = ({ rule }) => {\n  const intl = useIntl();\n  return (\n    <React.Fragment>\n      {rule.disabled && (\n        <Tooltip\n          content={intl.formatMessage(messages.ruleIsDisabledTooltip)}\n          position={TooltipPosition.right}\n        >\n          <Label color=\"gray\" isCompact>\n            {intl.formatMessage(messages.disabled)}\n          </Label>\n        </Tooltip>\n      )}\n    </React.Fragment>\n  );\n};\n\nRuleLabels.propTypes = {\n  rule: PropTypes.object,\n};\n\nexport default RuleLabels;\n","import React from 'react';\nimport { Card, CardBody } from '@patternfly/react-core';\nimport { List } from 'react-content-loader';\n\nconst Loading = () => (\n  <Card ouiaId=\"loading-skeleton\">\n    <CardBody>\n      <List />\n    </CardBody>\n  </Card>\n);\n\nexport default Loading;\n","import React from 'react';\nimport ContentLoader from 'react-content-loader';\n\nconst OneLineLoader = () => (\n  <ContentLoader height={20}>\n    <rect x=\"0\" y=\"0\" rx=\"4\" ry=\"4\" width=\"300\" height=\"20\" />\n  </ContentLoader>\n);\n\nexport { OneLineLoader };\n"],"names":["Breadcrumbs","current","intl","useIntl","location","useLocation","splitUrl","pathname","split","ouiaId","className","Link","to","formatMessage","messages","isActive","propTypes","PropTypes","ClusterHeader","clusterId","clusterData","clusterInfo","window","useState","isOpen","setIsOpen","isUninitializedCluster","isUninitialized","isFetchingCluster","isFetching","cluster","data","isUninitializedInfo","isFetchingInfo","info","dropDownItems","DropdownItem","key","onClick","assign","origin","includes","redirectOCM","Grid","id","md","hasGutter","GridItem","span","Title","size","headingLevel","Skeleton","display_name","Dropdown","position","onSelect","s","autoFocus","toggle","DropdownToggle","onToggle","dropdownItems","Stack","StackItem","report","meta","last_checked_at","date","type","cluster_id","managed","status","match","useRouteMatch","params","useGetClusterByIdQuery","includeDisabled","useGetClusterInfoQuery","ReportDetails","CYPRESS_RUN","Loading","AsyncComponent","appName","module","fallback","details","extra_data","resolution","ClusterRules","dispatch","useDispatch","updateFilters","filters","updateClusterRulesFilters","useSelector","f","clusterRulesState","isError","isSuccess","error","reports","filteredRows","setFilteredRows","displayedRows","setDisplayedRows","isAllExpanded","setIsAllExpanded","expandFirst","setExpandFirst","firstRule","setFirstRule","results","length","search","rowsUpdating","setRowsUpdating","rowsFiltered","setRowsFiltered","loadingState","errorState","successState","noInput","noMatch","addFilterParam","param","values","_addFilterParam","useEffect","paramsObject","paramParser","sort","sortObj","translateSortParams","sortIndex","CLUSTER_RULES_COLUMNS_KEYS","name","sortDirection","direction","first","buildFilteredRows","buildDisplayedRows","limit","offset","allRows","expandedRowsSet","Set","filter","ruleExpanded","map","object","rule","rule_id","passFilters","value","has","cells","title","description","RuleLabels","created_at","tooltipProps","TooltipPosition","style","verticalAlign","likelihood","impact","Tooltip","content","LIKELIHOOD_LABEL","IMPACT_LABEL","InsightsLabel","total_risk","rest","isCompact","fullWidth","rows","index","sortingRows","d","SortByDirection","firstItem","secondItem","fst","snd","i","findIndex","row","getPluginName","error_key","getErrorKey","unshift","splice","flatMap","updatedRow","parent","filterConfigItems","label","filterValues","onChange","_e","text","FC","FILTER_CATEGORIES","items","category","activeFiltersConfig","deleteTitle","localFilters","filterCategories","prunedFilters","Object","entries","reduce","arr","item","chips","Array","isArray","selectedCategoryValue","find","String","capitalize","urlParam","pruneFilters","buildFilterChips","onDelete","_event","itemsToRemove","isAll","CLUSTER_RULES_INITIAL_STATE","newFilter","_removeFilterParam","PrimaryToolbar","filterConfig","isDisabled","pagination","Table","onCollapse","rowId","undefined","props","colSpan","CLUSTER_RULES_COLUMNS","sortBy","onSort","variant","TableVariant","isStickyHeader","canCollapseAll","TableHeader","TableBody","refetch","Cluster","PageHeader","cluster_name","Main","displayName","subnav","insights","chrome","updateDocumentTitle","disabled","Label","color","Card","CardBody","OneLineLoader","height","x","y","rx","ry","width"],"sourceRoot":""}