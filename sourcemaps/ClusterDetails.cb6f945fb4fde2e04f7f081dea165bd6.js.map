{"version":3,"file":"js/ClusterDetails.1653319784201.530aab92050d946d6ff2.js","mappings":"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","sources":["webpack:///./src/Components/Breadcrumbs/index.js","webpack:///./src/Components/ClusterHeader/ClusterHeader.js","webpack:///./src/Components/ClusterHeader/index.js","webpack:///./src/Components/ReportDetails/ReportDetails.js","webpack:///./src/Components/ClusterRules/ClusterRules.js","webpack:///./src/Components/Cluster/Cluster.js","webpack:///./src/Components/Cluster/index.js","webpack:///./src/Components/Labels/RuleLabels.js","webpack:///./src/Components/Loading/Loading.js","webpack:///./src/Utilities/Loaders.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { Link, useLocation } from 'react-router-dom';\n\nimport { Breadcrumb } from '@patternfly/react-core/dist/js/components/Breadcrumb/Breadcrumb';\nimport { BreadcrumbItem } from '@patternfly/react-core/dist/js/components/Breadcrumb/BreadcrumbItem';\n\nimport messages from '../../Messages';\n\nconst Breadcrumbs = ({ current }) => {\n  const intl = useIntl();\n  const location = useLocation();\n  const splitUrl = location.pathname.split('/');\n\n  return (\n    <div>\n      <Breadcrumb ouiaId=\"detail\">\n        <BreadcrumbItem className=\"breadcrumb-item\">\n          <Link to={`/${splitUrl[1]}`}>\n            {`${intl.formatMessage(messages.insightsHeader)} ${splitUrl[1]}`}\n          </Link>\n        </BreadcrumbItem>\n        <BreadcrumbItem className=\"breadcrumb-item\" isActive>\n          {current}\n        </BreadcrumbItem>\n      </Breadcrumb>\n    </div>\n  );\n};\n\nBreadcrumbs.propTypes = {\n  current: PropTypes.string,\n};\n\nexport default Breadcrumbs;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport { Grid, GridItem } from '@patternfly/react-core/dist/js/layouts/Grid';\nimport { Stack, StackItem } from '@patternfly/react-core/dist/js/layouts/Stack';\nimport { Title } from '@patternfly/react-core/dist/js/components/Title';\nimport { Dropdown, DropdownToggle, DropdownItem } from '@patternfly/react-core';\nimport Skeleton from '@redhat-cloud-services/frontend-components/Skeleton';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat/DateFormat';\n\nimport messages from '../../Messages';\nimport { OneLineLoader } from '../../Utilities/Loaders';\n\nexport const ClusterHeader = ({ clusterId, clusterData }) => {\n  const location = window.location;\n  const [isOpen, setIsOpen] = useState(false);\n  const intl = useIntl();\n  // subscribe to the cluster data query\n  const {\n    isUninitialized: isUninitializedCluster,\n    isFetching: isFetchingCluster,\n    data: cluster,\n  } = clusterData;\n\n  const redirectOCM = (clusterId) => {\n    location.assign(\n      location.origin +\n        (location.pathname.includes('beta') ? `/beta` : '') +\n        `/openshift/details/${clusterId}`\n    );\n  };\n\n  const dropDownItems = [\n    <DropdownItem key=\"link\" onClick={() => redirectOCM(clusterId)}>\n      <snap>{intl.formatMessage(messages.clusterDetailsRedirect)}</snap>\n    </DropdownItem>,\n  ];\n\n  return (\n    <Grid id=\"cluster-header\" md={12} hasGutter>\n      <GridItem span={8}>\n        {isUninitializedCluster || isFetchingCluster ? (\n          <Skeleton size=\"sm\" />\n        ) : (\n          <Title\n            size=\"2xl\"\n            headingLevel=\"h1\"\n            id=\"cluster-header-title\"\n            ouiaId=\"cluster-name\"\n          >\n            {clusterData?.data?.report?.meta.cluster_name || clusterId}\n          </Title>\n        )}\n      </GridItem>\n      <GridItem span={4} id=\"cluster-header-dropdown\">\n        <Dropdown\n          position=\"right\"\n          onSelect={() => setIsOpen(!isOpen)}\n          autoFocus={false}\n          isOpen={isOpen}\n          toggle={\n            <DropdownToggle\n              id=\"toggle-id-2\"\n              onToggle={(isOpen) => setIsOpen(isOpen)}\n            >\n              {intl.formatMessage(messages.dropDownActionSingleCluster)}\n            </DropdownToggle>\n          }\n          dropdownItems={dropDownItems}\n        />\n      </GridItem>\n      <GridItem>\n        <Stack>\n          <StackItem id=\"cluster-header-uuid\">\n            <span>UUID: </span>\n            <span>{clusterId || intl.formatMessage(messages.unknown)}</span>\n          </StackItem>\n          <StackItem id=\"cluster-header-last-seen\">\n            <span>{intl.formatMessage(messages.lastSeen)}: </span>\n            <span>\n              {isUninitializedCluster || isFetchingCluster ? (\n                <OneLineLoader />\n              ) : cluster?.report?.meta?.last_checked_at ? (\n                <DateFormat\n                  date={cluster?.report?.meta?.last_checked_at}\n                  type=\"exact\"\n                />\n              ) : (\n                intl.formatMessage(messages.unknown)\n              )}\n            </span>\n          </StackItem>\n        </Stack>\n      </GridItem>\n    </Grid>\n  );\n};\n\nClusterHeader.propTypes = {\n  clusterId: PropTypes.string.isRequired,\n  displayName: PropTypes.object.isRequired,\n  clusterData: PropTypes.object.isRequired,\n};\n","import React from 'react';\nimport { useRouteMatch } from 'react-router-dom';\n\nimport { useGetClusterByIdQuery } from '../../Services/SmartProxy';\nimport { ClusterHeader } from './ClusterHeader';\n\nconst ClusterHeaderWrapper = () => {\n  const match = useRouteMatch();\n  const clusterId = match.params.clusterId;\n  const clusterData = useGetClusterByIdQuery({\n    id: clusterId,\n    includeDisabled: false,\n  });\n\n  return <ClusterHeader clusterId={clusterId} clusterData={clusterData} />;\n};\n\nexport default ClusterHeaderWrapper;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\n\nimport Loading from '../Loading/Loading';\n\n// Rule fields processing: https://docs.google.com/document/d/1D0ZLD6-2DZqBX1cUHJY2vL2QAD0dIAzY3O3xFNlEsVg/edit?usp=sharing\n\nconst ReportDetails = ({ report }) => {\n  return window.CYPRESS_RUN ? (\n    <Loading />\n  ) : (\n    <div className=\"advisor\">\n      <AsyncComponent\n        appName=\"advisor\"\n        module=\"./AdvisorReportDetails\"\n        fallback={<Loading />}\n        // TODO: make API rename `extra_data` to `details` or modify AdvisorReportDetails property\n        report={{\n          ...report,\n          details: report.extra_data,\n          resolution: {\n            resolution: report.resolution,\n          },\n        }}\n      />\n    </div>\n  );\n};\n\nReportDetails.propTypes = {\n  report: PropTypes.object.isRequired,\n};\n\nexport default ReportDetails;\n","import './_ClusterRules.scss';\n\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { useLocation } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport capitalize from 'lodash/capitalize';\n\nimport CheckIcon from '@patternfly/react-icons/dist/js/icons/check-icon';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat/DateFormat';\nimport InsightsLabel from '@redhat-cloud-services/frontend-components/InsightsLabel';\nimport {\n  SortByDirection,\n  Table,\n  TableBody,\n  TableHeader,\n  TableVariant,\n} from '@patternfly/react-table';\nimport { Card, CardBody } from '@patternfly/react-core/dist/js/components/Card';\nimport {\n  Tooltip,\n  TooltipPosition,\n} from '@patternfly/react-core/dist/js/components/Tooltip';\nimport InfoCircleIcon from '@patternfly/react-icons/dist/js/icons/info-circle-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\nimport { global_danger_color_100 as globalDangerColor100 } from '@patternfly/react-tokens/dist/js/global_danger_color_100';\nimport { global_info_color_100 as globalInfoColor100 } from '@patternfly/react-tokens/dist/js/global_info_color_100.js';\nimport PrimaryToolbar from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\n\nimport messages from '../../Messages';\nimport MessageState from '../MessageState/MessageState';\nimport {\n  IMPACT_LABEL,\n  LIKELIHOOD_LABEL,\n  FILTER_CATEGORIES as FC,\n  CLUSTER_RULES_COLUMNS_KEYS,\n  FILTER_CATEGORIES,\n  CLUSTER_RULES_COLUMNS,\n} from '../../AppConstants';\nimport ReportDetails from '../ReportDetails/ReportDetails';\nimport RuleLabels from '../Labels/RuleLabels';\nimport { NoMatchingRecs } from '../MessageState/EmptyStates';\nimport {\n  paramParser,\n  passFilters,\n  removeFilterParam as _removeFilterParam,\n  addFilterParam as _addFilterParam,\n  translateSortParams,\n} from '../Common/Tables';\nimport {\n  CLUSTER_RULES_INITIAL_STATE,\n  updateClusterRulesFilters,\n} from '../../Services/Filters';\nimport { getErrorKey, getPluginName } from '../../Utilities/Rule';\nimport Loading from '../Loading/Loading';\n\nconst ClusterRules = ({ cluster }) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const updateFilters = (filters) =>\n    dispatch(updateClusterRulesFilters(filters));\n  const filters = useSelector(({ filters }) => filters.clusterRulesState);\n  const { isError, isUninitialized, isFetching, isSuccess, data, error } =\n    cluster;\n  const reports = data?.report?.data || [];\n  const [filteredRows, setFilteredRows] = useState([]);\n  const [displayedRows, setDisplayedRows] = useState([]);\n  const [isAllExpanded, setIsAllExpanded] = useState(false);\n  const [expandFirst, setExpandFirst] = useState(true);\n  const [firstRule, setFirstRule] = useState(''); // show a particular rule first\n  const results = filteredRows.length;\n  const { search } = useLocation();\n  const [rowsUpdating, setRowsUpdating] = useState(true);\n  const [rowsFiltered, setRowsFiltered] = useState(false);\n  const loadingState = isUninitialized || isFetching || rowsUpdating;\n  const errorState = isError;\n  const successState = isSuccess;\n\n  const removeFilterParam = (param) =>\n    _removeFilterParam(filters, updateFilters, param);\n\n  const addFilterParam = (param, values) => {\n    setExpandFirst(false);\n    setFirstRule('');\n    return _addFilterParam(filters, updateFilters, param, values);\n  };\n\n  useEffect(() => {\n    if (search) {\n      const paramsObject = paramParser(search);\n      if (paramsObject.sort) {\n        const sortObj = translateSortParams(paramsObject.sort);\n        paramsObject.sortIndex = CLUSTER_RULES_COLUMNS_KEYS.indexOf(\n          sortObj.name\n        );\n        paramsObject.sortDirection = sortObj.direction;\n      }\n      if (paramsObject.first) {\n        setFirstRule(paramsObject.first);\n        delete paramsObject.first;\n      }\n      updateFilters({ ...filters, ...paramsObject });\n    }\n  }, []);\n\n  useEffect(() => {\n    setFilteredRows(buildFilteredRows(reports, filters));\n  }, [reports, filters]);\n\n  useEffect(() => {\n    setDisplayedRows(\n      buildDisplayedRows(filteredRows, filters.sortIndex, filters.sortDirection)\n    );\n    setRowsFiltered(true);\n  }, [\n    filteredRows,\n    filters.limit,\n    filters.offset,\n    filters.sortIndex,\n    filters.sortDirection,\n  ]);\n\n  useEffect(() => {\n    if (rowsFiltered) {\n      setRowsUpdating(false);\n    }\n  }, [rowsFiltered]);\n\n  const handleOnCollapse = (_e, rowId, isOpen) => {\n    const collapseRows = [...displayedRows];\n    collapseRows[rowId] = { ...collapseRows[rowId], isOpen };\n    setDisplayedRows(collapseRows);\n  };\n\n  const buildFilteredRows = (allRows, filters) => {\n    const expandedRowsSet = new Set(\n      displayedRows\n        .filter((ruleExpanded) => ruleExpanded?.isOpen)\n        .map((object) => object?.rule?.rule_id)\n    );\n\n    return allRows\n      .filter((rule) => passFilters(rule, filters))\n      .map((value, key) => [\n        {\n          rule: value,\n          isOpen: isAllExpanded || expandedRowsSet?.has(value?.rule_id),\n          cells: [\n            {\n              title: (\n                <div>\n                  {value?.description || value?.rule_id}{' '}\n                  <RuleLabels rule={value} />\n                </div>\n              ),\n            },\n            {\n              title: (\n                <div key={key}>\n                  <DateFormat\n                    date={value.created_at}\n                    type=\"relative\"\n                    tooltipProps={{ position: TooltipPosition.bottom }}\n                  />\n                </div>\n              ),\n            },\n            {\n              title: (\n                <div key={key} style={{ verticalAlign: 'top' }}>\n                  {value?.likelihood && value?.impact ? (\n                    <Tooltip\n                      key={key}\n                      position={TooltipPosition.bottom}\n                      content={\n                        // TODO: refine fields lookup\n                        <span>\n                          The <strong>likelihood</strong> that this will be a\n                          problem is{' '}\n                          {value.likelihood\n                            ? LIKELIHOOD_LABEL[value.likelihood]\n                            : 'unknown'}\n                          .The <strong>impact</strong> of the problem would be{' '}\n                          {value.impact\n                            ? IMPACT_LABEL[value.impact]\n                            : 'unknown'}{' '}\n                          if it occurred.\n                        </span>\n                      }\n                    >\n                      <InsightsLabel\n                        value={value.total_risk}\n                        rest={{ isCompact: true }}\n                      />\n                    </Tooltip>\n                  ) : (\n                    <InsightsLabel\n                      value={value.total_risk}\n                      rest={{ isCompact: true }}\n                    />\n                  )}\n                </div>\n              ),\n            },\n          ],\n        },\n        {\n          fullWidth: true,\n          cells: [\n            {\n              title: <ReportDetails key={`child-${key}`} report={value} />,\n            },\n          ],\n        },\n      ]);\n  };\n\n  const buildDisplayedRows = (rows, index, direction) => {\n    let sortingRows = [...rows];\n    if (index >= 0 && !firstRule) {\n      const d = direction === SortByDirection.asc ? 1 : -1;\n      sortingRows = [...rows].sort((firstItem, secondItem) => {\n        const fst = firstItem[0].rule[CLUSTER_RULES_COLUMNS_KEYS[index]];\n        const snd = secondItem[0].rule[CLUSTER_RULES_COLUMNS_KEYS[index]];\n        return fst > snd ? d : snd > fst ? -d : 0;\n      });\n    } else if (firstRule) {\n      const i = rows.findIndex((row) => {\n        const rule = row[0].rule;\n        /* rule_id is given with the plugin name only,\n           thus we need to look at extra_data for the error key */\n        return (\n          rule.rule_id.split('.report')[0] === getPluginName(firstRule) &&\n          rule.extra_data.error_key === getErrorKey(firstRule)\n        );\n      });\n      i !== -1 && sortingRows.unshift(sortingRows.splice(i, 1)[0]);\n    }\n    return sortingRows.flatMap((row, index) => {\n      const updatedRow = [...row];\n      if (expandFirst && index === 0) {\n        row[0].isOpen = true;\n      }\n      row[1].parent = index * 2;\n      return updatedRow;\n    });\n  };\n\n  const onSort = (_e, index, direction) => {\n    setExpandFirst(false);\n    setFirstRule('');\n    return updateFilters({\n      ...filters,\n      sortIndex: index,\n      sortDirection: direction,\n    });\n  };\n\n  const filterConfigItems = [\n    {\n      label: 'description',\n      filterValues: {\n        key: 'text-filter',\n        onChange: (_e, value) => addFilterParam('text', value),\n        value: filters.text,\n      },\n    },\n    {\n      label: FC.total_risk.title,\n      type: FC.total_risk.type,\n      id: FC.total_risk.urlParam,\n      value: `checkbox-${FC.total_risk.urlParam}`,\n      filterValues: {\n        key: `${FC.total_risk.urlParam}-filter`,\n        onChange: (_e, values) =>\n          addFilterParam(FILTER_CATEGORIES.total_risk.urlParam, values),\n        value: filters.total_risk,\n        items: FC.total_risk.values,\n      },\n    },\n    {\n      label: FC.category.title,\n      type: FC.category.type,\n      id: FC.category.urlParam,\n      value: `checkbox-${FC.category.urlParam}`,\n      filterValues: {\n        key: `${FC.category.urlParam}-filter`,\n        onChange: (_e, values) =>\n          addFilterParam(FILTER_CATEGORIES.category.urlParam, values),\n        value: filters.category,\n        items: FC.category.values,\n      },\n    },\n  ];\n\n  const pruneFilters = (localFilters, filterCategories) => {\n    const prunedFilters = Object.entries(localFilters);\n    return prunedFilters.length > 0\n      ? prunedFilters.reduce((arr, item) => {\n          if (filterCategories[item[0]]) {\n            const category = filterCategories[item[0]];\n            const chips = Array.isArray(item[1])\n              ? item[1].map((value) => {\n                  const selectedCategoryValue = category.values.find(\n                    (values) => values.value === String(value)\n                  );\n                  return selectedCategoryValue\n                    ? {\n                        name:\n                          selectedCategoryValue.text ||\n                          selectedCategoryValue.label,\n                        value,\n                      }\n                    : { name: value, value };\n                })\n              : [\n                  {\n                    name: category.values.find(\n                      (values) => values.value === String(item[1])\n                    ).label,\n                    value: item[1],\n                  },\n                ];\n            return [\n              ...arr,\n              {\n                category: capitalize(category.title),\n                chips,\n                urlParam: category.urlParam,\n              },\n            ];\n          } else if (item[0] === 'text') {\n            return [\n              ...arr,\n              ...(item[1].length > 0\n                ? [\n                    {\n                      category: intl.formatMessage(messages.description),\n                      chips: [{ name: item[1], value: item[1] }],\n                      urlParam: item[0],\n                    },\n                  ]\n                : []),\n            ];\n          } else {\n            return arr;\n          }\n        }, [])\n      : [];\n  };\n\n  const buildFilterChips = () => {\n    const localFilters = { ...filters };\n    delete localFilters.sortIndex;\n    delete localFilters.sortDirection;\n    delete localFilters.offset;\n    delete localFilters.limit;\n    return pruneFilters(localFilters, FILTER_CATEGORIES);\n  };\n\n  const activeFiltersConfig = {\n    deleteTitle: intl.formatMessage(messages.resetFilters),\n    filters: buildFilterChips(),\n    onDelete: (_event, itemsToRemove, isAll) => {\n      if (isAll) {\n        updateFilters(CLUSTER_RULES_INITIAL_STATE);\n      } else {\n        itemsToRemove.map((item) => {\n          const newFilter = {\n            [item.urlParam]: Array.isArray(filters[item.urlParam])\n              ? filters[item.urlParam].filter(\n                  (value) => String(value) !== String(item.chips[0].value)\n                )\n              : '',\n          };\n          newFilter[item.urlParam].length > 0\n            ? updateFilters({ ...filters, ...newFilter })\n            : removeFilterParam(item.urlParam);\n        });\n      }\n    },\n  };\n\n  //Responsible for the handling collapse for all the recommendations\n  //Used in the PrimaryToolbar\n  const collapseAll = (_e, isOpen) => {\n    setIsAllExpanded(isOpen);\n    setDisplayedRows(\n      displayedRows.map((row) => {\n        return {\n          ...row,\n          isOpen: isOpen,\n        };\n      })\n    );\n  };\n\n  return (\n    <div id=\"cluster-recs-list-table\">\n      <PrimaryToolbar\n        expandAll={{ isAllExpanded, onClick: collapseAll }}\n        filterConfig={{\n          items: filterConfigItems,\n          isDisabled: loadingState || errorState || reports.length === 0,\n        }}\n        pagination={\n          <React.Fragment>\n            {results === 1\n              ? `${results} ${intl.formatMessage(messages.recommendation)}`\n              : `${results} ${intl.formatMessage(messages.recommendations)}`}\n          </React.Fragment>\n        }\n        activeFiltersConfig={\n          loadingState || errorState || reports.length === 0\n            ? undefined\n            : activeFiltersConfig\n        }\n      />\n      {loadingState && !errorState && !successState && (\n        <Loading id=\"loading-skeleton\" />\n      )}\n      {errorState &&\n        !successState &&\n        (error?.status === 404 ? (\n          <MessageState\n            title={intl.formatMessage(messages.noRecsFoundError)}\n            text={\n              <React.Fragment>\n                {intl.formatMessage(messages.noRecsFoundErrorDesc)}\n                <a href=\"https://docs.openshift.com/container-platform/latest/support/getting-support.html\">\n                  {' '}\n                  OpenShift documentation.\n                </a>\n              </React.Fragment>\n            }\n            icon={InfoCircleIcon}\n            iconStyle={{ color: globalInfoColor100.value }}\n            variant=\"large\"\n          />\n        ) : (\n          <MessageState\n            title={intl.formatMessage(messages.noRecsError)}\n            text={intl.formatMessage(messages.noRecsErrorDesc)}\n            icon={ExclamationCircleIcon}\n            iconStyle={{ color: globalDangerColor100.value }}\n          />\n        ))}\n      {!loadingState && !errorState && successState && (\n        <React.Fragment>\n          {reports.length > 0 ? (\n            <React.Fragment>\n              <Table\n                aria-label={'Cluster recommendations table'}\n                ouiaId=\"recommendations\"\n                onCollapse={handleOnCollapse}\n                rows={displayedRows}\n                cells={CLUSTER_RULES_COLUMNS}\n                sortBy={{\n                  index: filters.sortIndex,\n                  direction: filters.sortDirection,\n                }}\n                onSort={onSort}\n                variant={TableVariant.compact}\n                isStickyHeader\n              >\n                <TableHeader />\n                <TableBody />\n              </Table>\n              {results === 0 && (\n                <Card ouiaId=\"empty-state\">\n                  <CardBody>\n                    <NoMatchingRecs />\n                  </CardBody>\n                </Card>\n              )}\n            </React.Fragment>\n          ) : (\n            // ? Welcome to Insights feature for new clusters with disabled Insights?\n            <Card ouiaId=\"no-recommendations\">\n              <CardBody>\n                <MessageState\n                  icon={CheckIcon}\n                  iconClass=\"ins-c-insights__check\"\n                  title={intl.formatMessage(messages.noRecommendations)}\n                  text={intl.formatMessage(messages.noRecommendationsDesc)}\n                />\n              </CardBody>\n            </Card>\n          )}\n        </React.Fragment>\n      )}\n    </div>\n  );\n};\n\nClusterRules.propTypes = {\n  cluster: PropTypes.shape({\n    isError: PropTypes.bool.isRequired,\n    isUninitialized: PropTypes.bool.isRequired,\n    isFetching: PropTypes.bool.isRequired,\n    isSuccess: PropTypes.bool.isRequired,\n    data: PropTypes.array,\n    refetch: PropTypes.func,\n    error: PropTypes.object,\n  }),\n};\n\nexport default ClusterRules;\n","import './_Cluster.scss';\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport PageHeader from '@redhat-cloud-services/frontend-components/PageHeader';\nimport ClusterHeader from '../ClusterHeader';\nimport ClusterRules from '../ClusterRules/ClusterRules';\nimport Breadcrumbs from '../Breadcrumbs';\nimport Main from '@redhat-cloud-services/frontend-components/Main';\n\nexport const Cluster = ({ cluster, match }) => {\n  return (\n    <React.Fragment>\n      <PageHeader className=\"pf-m-light ins-inventory-detail\">\n        <Breadcrumbs\n          current={\n            cluster?.data?.report.meta.cluster_name || match.params.clusterId\n          }\n          match={match}\n        />\n        <ClusterHeader />\n      </PageHeader>\n      <Main>\n        <ClusterRules cluster={cluster} />\n      </Main>\n    </React.Fragment>\n  );\n};\n\nCluster.propTypes = {\n  cluster: PropTypes.object.isRequired,\n  displayName: PropTypes.object.isRequired,\n  match: PropTypes.object.isRequired,\n};\n","import React, { useEffect } from 'react';\nimport { useRouteMatch } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\n\nimport { useGetClusterByIdQuery } from '../../Services/SmartProxy';\nimport messages from '../../Messages';\nimport { Cluster } from './Cluster';\n\nconst ClusterWrapper = () => {\n  const intl = useIntl();\n  const match = useRouteMatch();\n  const cluster = useGetClusterByIdQuery({\n    id: match.params.clusterId,\n    includeDisabled: false,\n  });\n\n  useEffect(() => {\n    cluster.refetch();\n  }, [match.params.clusterId]);\n\n  useEffect(() => {\n    const subnav = `${\n      cluster?.data?.report?.meta?.cluster_name || match.params.clusterId\n    } - ${intl.formatMessage(messages.clusters)}`;\n    insights.chrome.updateDocumentTitle(\n      intl.formatMessage(messages.documentTitle, { subnav })\n    );\n  }, [cluster, match]);\n  return <Cluster cluster={cluster} match={match} />;\n};\n\nexport default ClusterWrapper;\n","import {\n  Tooltip,\n  TooltipPosition,\n} from '@patternfly/react-core/dist/js/components/Tooltip/Tooltip';\n\nimport { Label } from '@patternfly/react-core/dist/js/components/Label/Label';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { useIntl } from 'react-intl';\nimport messages from '../../Messages';\n\nconst RuleLabels = ({ rule }) => {\n  const intl = useIntl();\n  return (\n    <React.Fragment>\n      {rule.disabled && (\n        <Tooltip\n          content={intl.formatMessage(messages.ruleIsDisabledTooltip)}\n          position={TooltipPosition.right}\n        >\n          <Label color=\"gray\" isCompact>\n            {intl.formatMessage(messages.disabled)}\n          </Label>\n        </Tooltip>\n      )}\n    </React.Fragment>\n  );\n};\n\nRuleLabels.propTypes = {\n  rule: PropTypes.object,\n};\n\nexport default RuleLabels;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card } from '@patternfly/react-core/dist/js/components/Card/Card';\nimport { CardBody } from '@patternfly/react-core/dist/js/components/Card/CardBody';\nimport { List } from 'react-content-loader';\n\nconst Loading = ({ id }) => (\n  <Card {...(id ? { id } : {})}>\n    <CardBody>\n      <List />\n    </CardBody>\n  </Card>\n);\n\nLoading.propTypes = {\n  id: PropTypes.string,\n};\n\nexport default Loading;\n","import React from 'react';\nimport ContentLoader from 'react-content-loader';\n\nconst OneLineLoader = () => (\n  <ContentLoader height={20}>\n    <rect x=\"0\" y=\"0\" rx=\"4\" ry=\"4\" width=\"300\" height=\"20\" />\n  </ContentLoader>\n);\n\nexport { OneLineLoader };\n"],"names":["Breadcrumbs","current","intl","useIntl","location","useLocation","splitUrl","pathname","split","ouiaId","className","Link","to","formatMessage","messages","isActive","propTypes","PropTypes","ClusterHeader","clusterId","clusterData","window","useState","isOpen","setIsOpen","isUninitializedCluster","isUninitialized","isFetchingCluster","isFetching","cluster","data","dropDownItems","DropdownItem","key","onClick","assign","origin","includes","redirectOCM","Grid","id","md","hasGutter","GridItem","span","Skeleton","size","Title","headingLevel","report","meta","cluster_name","Dropdown","position","onSelect","s","autoFocus","toggle","DropdownToggle","onToggle","dropdownItems","Stack","StackItem","last_checked_at","date","type","displayName","match","useRouteMatch","params","useGetClusterByIdQuery","includeDisabled","ReportDetails","CYPRESS_RUN","Loading","AsyncComponent","appName","module","fallback","details","extra_data","resolution","ClusterRules","dispatch","useDispatch","updateFilters","filters","updateClusterRulesFilters","useSelector","f","clusterRulesState","isError","isSuccess","error","reports","filteredRows","setFilteredRows","displayedRows","setDisplayedRows","isAllExpanded","setIsAllExpanded","expandFirst","setExpandFirst","firstRule","setFirstRule","results","length","search","rowsUpdating","setRowsUpdating","rowsFiltered","setRowsFiltered","loadingState","errorState","successState","addFilterParam","param","values","_addFilterParam","useEffect","paramsObject","paramParser","sort","sortObj","translateSortParams","sortIndex","CLUSTER_RULES_COLUMNS_KEYS","name","sortDirection","direction","first","buildFilteredRows","buildDisplayedRows","limit","offset","allRows","expandedRowsSet","Set","filter","ruleExpanded","map","object","rule","rule_id","passFilters","value","has","cells","title","description","RuleLabels","created_at","tooltipProps","TooltipPosition","style","verticalAlign","likelihood","impact","Tooltip","content","LIKELIHOOD_LABEL","IMPACT_LABEL","InsightsLabel","total_risk","rest","isCompact","fullWidth","rows","index","sortingRows","d","SortByDirection","firstItem","secondItem","fst","snd","i","findIndex","row","getPluginName","error_key","getErrorKey","unshift","splice","flatMap","updatedRow","parent","filterConfigItems","label","filterValues","onChange","_e","text","FC","FILTER_CATEGORIES","items","category","activeFiltersConfig","deleteTitle","localFilters","filterCategories","prunedFilters","Object","entries","reduce","arr","item","chips","Array","isArray","selectedCategoryValue","find","String","capitalize","urlParam","pruneFilters","buildFilterChips","onDelete","_event","itemsToRemove","isAll","CLUSTER_RULES_INITIAL_STATE","newFilter","_removeFilterParam","PrimaryToolbar","expandAll","filterConfig","isDisabled","pagination","status","MessageState","href","icon","InfoCircleIcon","iconStyle","color","globalInfoColor100","variant","ExclamationCircleIcon","globalDangerColor100","Table","onCollapse","rowId","collapseRows","CLUSTER_RULES_COLUMNS","sortBy","onSort","TableVariant","isStickyHeader","TableHeader","TableBody","Card","CardBody","CheckIcon","iconClass","refetch","Cluster","PageHeader","Main","subnav","insights","chrome","updateDocumentTitle","disabled","Label","OneLineLoader","height","x","y","rx","ry","width"],"sourceRoot":""}