{"version":3,"file":"js/ClustersList.9a39c94f4e7b0de49468.js","mappings":"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","sources":["webpack:///./src/Components/ClustersListTable/ClustersListTable.js","webpack:///./src/Components/ClustersListTable/index.js","webpack:///./src/Components/ClustersList/index.js","webpack:///./src/Components/Loading/Loading.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { useDispatch, useSelector } from 'react-redux';\nimport isEqual from 'lodash/isEqual';\nimport { useLocation } from 'react-router-dom';\nimport uniqBy from 'lodash/uniqBy';\nimport { valid } from 'semver';\nimport { Link } from 'react-router-dom';\n\nimport {\n  SortByDirection,\n  Table,\n  TableBody,\n  TableHeader,\n  TableVariant,\n} from '@patternfly/react-table';\nimport { Pagination, Tooltip } from '@patternfly/react-core';\nimport { PaginationVariant } from '@patternfly/react-core/dist/js/components/Pagination/Pagination';\nimport PrimaryToolbar from '@redhat-cloud-services/frontend-components/PrimaryToolbar/PrimaryToolbar';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter/conditionalFilterConstants';\n\nimport {\n  CLUSTERS_LIST_INITIAL_STATE,\n  resetFilters,\n  updateClustersListFilters,\n} from '../../Services/Filters';\nimport {\n  CLUSTERS_LIST_COLUMNS,\n  CLUSTERS_LIST_COLUMNS_KEYS,\n  CLUSTERS_TABLE_CELL_NAME,\n  CLUSTERS_TABLE_CELL_LAST_SEEN,\n  CLUSTERS_TABLE_CELL_VERSION,\n  CLUSTER_FILTER_CATEGORIES,\n} from '../../AppConstants';\nimport {\n  buildFilterChips,\n  paramParser,\n  passFiltersCluster,\n  removeFilterParam as _removeFilterParam,\n  addFilterParam as _addFilterParam,\n  translateSortParams,\n  updateSearchParams,\n  compareSemVer,\n  toValidSemVer,\n} from '../Common/Tables';\nimport Loading from '../Loading/Loading';\nimport messages from '../../Messages';\nimport {\n  ErrorState,\n  NoMatchingClusters,\n  NoRecsForClusters,\n} from '../MessageState/EmptyStates';\nimport { coerce } from 'semver';\nimport { BASE_PATH } from '../../Routes';\n\nconst ClustersListTable = ({\n  query: { isError, isUninitialized, isFetching, isSuccess, data, refetch },\n}) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const updateFilters = (payload) =>\n    dispatch(updateClustersListFilters(payload));\n  const filters = useSelector(({ filters }) => filters.clustersListState);\n\n  const clusters = data?.data || [];\n  const page = filters.offset / filters.limit + 1;\n\n  const [filteredRows, setFilteredRows] = useState([]);\n  const [displayedRows, setDisplayedRows] = useState([]);\n  // helps to distinguish the state when the API data received but not yet filtered\n  const [rowsFiltered, setRowsFiltered] = useState(false);\n  const [filterBuilding, setFilterBuilding] = useState(true);\n  const { search } = useLocation();\n  const loadingState = isUninitialized || isFetching || !rowsFiltered;\n  const errorState = isError;\n  const noMatch = clusters.length > 0 && filteredRows.length === 0;\n  const successState = isSuccess;\n\n  const removeFilterParam = (param) =>\n    _removeFilterParam(filters, updateFilters, param);\n\n  const addFilterParam = (param, values) =>\n    _addFilterParam(filters, updateFilters, param, values);\n\n  useEffect(() => {\n    setDisplayedRows(buildDisplayedRows(filteredRows));\n    setRowsFiltered(true);\n  }, [filteredRows, filters.limit, filters.offset]);\n\n  useEffect(() => {\n    setFilteredRows(buildFilteredRows(clusters));\n  }, [\n    data,\n    filters.text,\n    filters.version,\n    filters.hits,\n    filters.sortDirection,\n    filters.sortIndex,\n  ]);\n\n  useEffect(() => {\n    if (search && filterBuilding) {\n      const paramsObject = paramParser(search);\n\n      if (paramsObject.sort) {\n        const sortObj = translateSortParams(paramsObject.sort);\n        paramsObject.sortIndex = CLUSTERS_LIST_COLUMNS_KEYS.indexOf(\n          sortObj.name\n        );\n        paramsObject.sortDirection = sortObj.direction;\n      }\n      paramsObject.offset &&\n        (paramsObject.offset = Number(paramsObject.offset[0]));\n      paramsObject.limit &&\n        (paramsObject.limit = Number(paramsObject.limit[0]));\n      paramsObject.impacting &&\n        !Array.isArray(paramsObject.impacting) &&\n        (paramsObject.impacting = [`${paramsObject.impacting}`]);\n      updateFilters({ ...filters, ...paramsObject });\n    }\n    setFilterBuilding(false);\n  }, []);\n\n  useEffect(() => {\n    if (!filterBuilding) {\n      updateSearchParams(filters, CLUSTERS_LIST_COLUMNS_KEYS);\n    }\n  }, [filters, filterBuilding]);\n\n  const buildFilteredRows = (items) => {\n    setRowsFiltered(false);\n    const filtered = items.filter((it) => {\n      return passFiltersCluster(it, filters);\n    });\n    const mapped = filtered.map((it, index) => {\n      if (\n        it.cluster_version !== undefined &&\n        it.cluster_version !== '' &&\n        !valid(coerce(it.cluster_version))\n      ) {\n        console.error(\n          `Cluster version ${it.cluster_version} has invalid format!`\n        );\n      }\n      const ver = toValidSemVer(it.cluster_version);\n\n      return {\n        entity: it,\n        cells: [\n          <span key={index}>\n            <Link to={`${BASE_PATH}/clusters/${it.cluster_id}`}>\n              {it.cluster_name || it.cluster_id}\n            </Link>\n          </span>,\n          ver === '0.0.0' ? intl.formatMessage(messages.nA) : ver,\n          it.total_hit_count,\n          it.hits_by_total_risk?.[4] || 0,\n          it.hits_by_total_risk?.[3] || 0,\n          it.hits_by_total_risk?.[2] || 0,\n          it.hits_by_total_risk?.[1] || 0,\n          <span key={index}>\n            {it.last_checked_at ? (\n              <DateFormat\n                extraTitle={`${intl.formatMessage(messages.lastSeen)}: `}\n                date={it.last_checked_at}\n                variant=\"relative\"\n              />\n            ) : (\n              <Tooltip\n                key={index}\n                content={\n                  <span>\n                    {intl.formatMessage(messages.lastSeen) + ': '}\n                    {intl.formatMessage(messages.nA)}\n                  </span>\n                }\n              >\n                <span>{intl.formatMessage(messages.nA)}</span>\n              </Tooltip>\n            )}\n          </span>,\n        ],\n      };\n    });\n    const sorted =\n      filters.sortIndex === -1\n        ? mapped\n        : mapped.sort((a, b) => {\n            let fst, snd;\n            const d = filters.sortDirection === SortByDirection.asc ? 1 : -1;\n            switch (filters.sortIndex) {\n              case CLUSTERS_TABLE_CELL_NAME:\n                fst = a.entity.cluster_name || a.entity.cluster_id;\n                snd = b.entity.cluster_name || b.entity.cluster_id;\n                return fst.localeCompare(snd) ? fst.localeCompare(snd) * d : 0;\n              case CLUSTERS_TABLE_CELL_VERSION:\n                return compareSemVer(\n                  toValidSemVer(a.entity.cluster_version),\n                  toValidSemVer(b.entity.cluster_version),\n                  d\n                );\n              case CLUSTERS_TABLE_CELL_LAST_SEEN:\n                fst = new Date(a.entity.last_checked_at || 0);\n                snd = new Date(b.entity.last_checked_at || 0);\n                return fst > snd ? d : snd > fst ? -d : 0;\n              default:\n                fst = a.cells[filters.sortIndex];\n                snd = b.cells[filters.sortIndex];\n                return fst > snd ? d : snd > fst ? -d : 0;\n            }\n          });\n    return sorted;\n  };\n\n  const buildDisplayedRows = (items) =>\n    items.slice(\n      filters.limit * (page - 1),\n      filters.limit * (page - 1) + filters.limit\n    );\n\n  const filterConfigItems = [\n    {\n      label: intl.formatMessage(messages.name).toLowerCase(),\n      filterValues: {\n        key: 'text-filter',\n        onChange: (_event, value) =>\n          updateFilters({ ...filters, offset: 0, text: value }),\n        value: filters.text,\n        placeholder: intl.formatMessage(messages.filterByName),\n      },\n    },\n    {\n      label: intl.formatMessage(messages.version),\n      placeholder: intl.formatMessage(messages.filterByVersion),\n      type: conditionalFilterType.checkbox,\n      filterValues: {\n        id: 'version-filter',\n        key: 'version-filter',\n        onChange: (event, value) => addFilterParam('version', value),\n        value: filters.version,\n        items: uniqBy(\n          clusters\n            .filter(\n              (c) => c.cluster_version !== undefined && c.cluster_version !== ''\n            )\n            .map((c) => ({\n              value: toValidSemVer(c.cluster_version),\n            }))\n            .sort((a, b) =>\n              compareSemVer(\n                toValidSemVer(a.cluster_version),\n                toValidSemVer(b.cluster_version),\n                1\n              )\n            )\n            .reverse(), // should start from the latest version\n          'value'\n        ),\n      },\n    },\n    {\n      label: CLUSTER_FILTER_CATEGORIES.hits.title,\n      type: CLUSTER_FILTER_CATEGORIES.hits.type,\n      id: CLUSTER_FILTER_CATEGORIES.hits.urlParam,\n      value: `checkbox-${CLUSTER_FILTER_CATEGORIES.hits.urlParam}`,\n      filterValues: {\n        key: `${CLUSTER_FILTER_CATEGORIES.hits.urlParam}-filter`,\n        onChange: (_event, values) =>\n          addFilterParam(CLUSTER_FILTER_CATEGORIES.hits.urlParam, values),\n        value: filters.hits,\n        items: CLUSTER_FILTER_CATEGORIES.hits.values,\n      },\n    },\n  ];\n\n  const activeFiltersConfig = {\n    showDeleteButton: true,\n    deleteTitle: intl.formatMessage(messages.resetFilters),\n    filters: buildFilterChips(filters, CLUSTER_FILTER_CATEGORIES),\n    onDelete: (_event, itemsToRemove, isAll) => {\n      if (isAll) {\n        if (isEqual(filters, CLUSTERS_LIST_INITIAL_STATE)) {\n          refetch();\n        } else {\n          resetFilters(filters, CLUSTERS_LIST_INITIAL_STATE, updateFilters);\n        }\n      } else {\n        itemsToRemove.map((item) => {\n          const newFilter = {\n            [item.urlParam]: Array.isArray(filters[item.urlParam])\n              ? filters[item.urlParam].filter(\n                  (value) => String(value) !== String(item.chips[0].value)\n                )\n              : '',\n          };\n          newFilter[item.urlParam].length > 0\n            ? updateFilters({ ...filters, ...newFilter })\n            : removeFilterParam(item.urlParam);\n        });\n      }\n    },\n  };\n\n  const onSort = (_e, index, direction) => {\n    setRowsFiltered(false);\n    updateFilters({ ...filters, sortIndex: index, sortDirection: direction });\n  };\n\n  return (\n    <>\n      {isSuccess && clusters.length === 0 ? (\n        <NoRecsForClusters /> // TODO: do not mix this logic in the table component\n      ) : (\n        <div id=\"clusters-list-table\" data-ouia-safe={!loadingState}>\n          <PrimaryToolbar\n            pagination={{\n              itemCount: filteredRows.length,\n              page,\n              perPage: filters.limit,\n              onSetPage: (_event, page) => {\n                setRowsFiltered(false);\n                return updateFilters({\n                  ...filters,\n                  offset: filters.limit * (page - 1),\n                });\n              },\n              onPerPageSelect: (_event, perPage) => {\n                setRowsFiltered(false);\n                return updateFilters({ ...filters, limit: perPage, offset: 0 });\n              },\n              isCompact: true,\n              ouiaId: 'pager',\n            }}\n            filterConfig={{ items: filterConfigItems }}\n            activeFiltersConfig={activeFiltersConfig}\n          />\n          <Table\n            aria-label=\"Table of clusters\"\n            ouiaId=\"clusters\"\n            ouiaSafe={!loadingState}\n            variant={TableVariant.compact}\n            cells={CLUSTERS_LIST_COLUMNS}\n            rows={\n              errorState || loadingState || noMatch ? (\n                [\n                  {\n                    fullWidth: true,\n                    cells: [\n                      {\n                        props: {\n                          colSpan: CLUSTERS_LIST_COLUMNS.length + 1,\n                        },\n                        title: errorState ? (\n                          <ErrorState />\n                        ) : loadingState ? (\n                          <Loading />\n                        ) : (\n                          <NoMatchingClusters />\n                        ),\n                      },\n                    ],\n                  },\n                ]\n              ) : successState ? (\n                displayedRows\n              ) : (\n                <ErrorState />\n              )\n            }\n            sortBy={{\n              index: filters.sortIndex,\n              direction: filters.sortDirection,\n            }}\n            onSort={onSort}\n            isStickyHeader\n          >\n            <TableHeader />\n            <TableBody />\n          </Table>\n          <Pagination\n            ouiaId=\"pager\"\n            itemCount={filteredRows.length}\n            page={filters.offset / filters.limit + 1}\n            perPage={Number(filters.limit)}\n            onSetPage={(_e, page) =>\n              updateFilters({\n                ...filters,\n                offset: filters.limit * (page - 1),\n              })\n            }\n            onPerPageSelect={(_e, perPage) =>\n              updateFilters({ ...filters, limit: perPage, offset: 0 })\n            }\n            widgetId={`pagination-options-menu-bottom`}\n            variant={PaginationVariant.bottom}\n          />\n        </div>\n      )}\n    </>\n  );\n};\n\nClustersListTable.propTypes = {\n  query: PropTypes.object.isRequired,\n};\n\nexport { ClustersListTable };\n","import React from 'react';\nimport { useGetClustersQuery } from '../../Services/SmartProxy';\nimport { ClustersListTable } from './ClustersListTable';\n\nconst ClustersListTableWrapper = () => {\n  const query = useGetClustersQuery();\n\n  return <ClustersListTable query={query} />;\n};\n\nexport default ClustersListTableWrapper;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\n\nimport PageHeader from '@redhat-cloud-services/frontend-components/PageHeader';\n\nimport messages from '../../Messages';\nimport ClustersListTable from '../ClustersListTable';\nimport { Title } from '@patternfly/react-core';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\n\nconst ClustersList = () => {\n  const intl = useIntl();\n  const chrome = useChrome();\n\n  chrome.updateDocumentTitle(\n    intl.formatMessage(messages.documentTitle, {\n      subnav: intl.formatMessage(messages.clusters),\n    })\n  );\n\n  return (\n    <React.Fragment>\n      <PageHeader className=\"ins-c-clusters-header\">\n        <Title headingLevel=\"h1\" ouiaId=\"page-header\">\n          {`${intl.formatMessage(messages.insightsHeader)} ${intl\n            .formatMessage(messages.clusters)\n            .toLowerCase()}`}\n        </Title>\n      </PageHeader>\n      <section className=\"pf-l-page__main-section pf-c-page__main-section\">\n        <ClustersListTable />\n      </section>\n    </React.Fragment>\n  );\n};\n\nexport default ClustersList;\n","import React from 'react';\nimport { Card, CardBody } from '@patternfly/react-core';\nimport { List } from 'react-content-loader';\n\nconst Loading = () => (\n  <Card ouiaId=\"loading-skeleton\">\n    <CardBody>\n      <List />\n    </CardBody>\n  </Card>\n);\n\nexport default Loading;\n"],"names":["ClustersListTable","query","isError","isUninitialized","isFetching","isSuccess","data","refetch","intl","useIntl","dispatch","useDispatch","updateFilters","payload","updateClustersListFilters","filters","useSelector","clustersListState","clusters","page","offset","limit","useState","filteredRows","setFilteredRows","displayedRows","setDisplayedRows","rowsFiltered","setRowsFiltered","filterBuilding","setFilterBuilding","search","useLocation","loadingState","errorState","noMatch","length","successState","addFilterParam","param","values","_addFilterParam","useEffect","buildDisplayedRows","buildFilteredRows","text","version","hits","sortDirection","sortIndex","paramsObject","paramParser","sort","sortObj","translateSortParams","CLUSTERS_LIST_COLUMNS_KEYS","indexOf","name","direction","Number","impacting","Array","isArray","updateSearchParams","items","filtered","filter","it","passFiltersCluster","mapped","map","index","undefined","cluster_version","valid","coerce","console","error","ver","toValidSemVer","entity","cells","key","Link","to","BASE_PATH","cluster_id","cluster_name","formatMessage","messages","nA","total_hit_count","hits_by_total_risk","last_checked_at","DateFormat","extraTitle","lastSeen","date","variant","Tooltip","content","sorted","a","b","fst","snd","d","SortByDirection","asc","CLUSTERS_TABLE_CELL_NAME","localeCompare","CLUSTERS_TABLE_CELL_VERSION","compareSemVer","CLUSTERS_TABLE_CELL_LAST_SEEN","Date","slice","filterConfigItems","label","toLowerCase","filterValues","onChange","_event","value","placeholder","filterByName","filterByVersion","type","conditionalFilterType","checkbox","id","event","uniqBy","c","reverse","CLUSTER_FILTER_CATEGORIES","title","urlParam","activeFiltersConfig","showDeleteButton","deleteTitle","resetFilters","buildFilterChips","onDelete","itemsToRemove","isAll","isEqual","CLUSTERS_LIST_INITIAL_STATE","item","newFilter","String","chips","_removeFilterParam","pagination","itemCount","perPage","onSetPage","onPerPageSelect","isCompact","ouiaId","filterConfig","Table","ouiaSafe","TableVariant","compact","CLUSTERS_LIST_COLUMNS","rows","fullWidth","props","colSpan","Loading","sortBy","onSort","_e","isStickyHeader","TableHeader","TableBody","Pagination","widgetId","PaginationVariant","bottom","propTypes","PropTypes","isRequired","useGetClustersQuery","chrome","useChrome","updateDocumentTitle","documentTitle","subnav","PageHeader","className","Title","headingLevel","insightsHeader","Card","CardBody"],"sourceRoot":""}