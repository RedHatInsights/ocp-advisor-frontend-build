{"version":3,"file":"js/Recommendation.a21642a78d938a51a112.js","mappings":"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","sources":["webpack:///./src/Utilities/Rule.js","webpack:///./src/Components/AffectedClustersTable/AffectedClustersTable.js","webpack:///./src/Components/AffectedClustersTable/index.js","webpack:///./src/Components/Recommendation/Recommendation.js","webpack:///./src/Components/Recommendation/index.js"],"sourcesContent":["const getPluginName = (rule) => rule.split('|')?.[0];\nconst getErrorKey = (rule) => rule.split('|')?.[1];\n// workaround. Should be removed when https://issues.redhat.com/browse/CCXDEV-5534 is done.\nconst adjustOCPRule = (rule, recId) => {\n  const errorKeyContent = rule?.error_keys?.[getErrorKey(recId)] || {};\n  const adjusted = {\n    ...rule,\n    ...errorKeyContent,\n    ...(errorKeyContent?.metadata || rule?.metadata || {}),\n  };\n  adjusted.impact = {\n    impact: adjusted.impact,\n  };\n  delete adjusted.metadata;\n  delete adjusted.error_keys;\n  return adjusted;\n};\n\nexport { getPluginName, getErrorKey, adjustOCPRule };\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter/conditionalFilterConstants';\nimport PrimaryToolbar from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport { EmptyTable } from '@redhat-cloud-services/frontend-components/EmptyTable';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components/TableToolbar';\n\nimport { Card, CardBody } from '@patternfly/react-core/dist/js/components/Card';\nimport { sortable } from '@patternfly/react-table/dist/js/components/Table/utils/decorators/sortable';\nimport { Table } from '@patternfly/react-table/dist/js/components/Table/Table';\nimport { TableBody } from '@patternfly/react-table/dist/js/components/Table/Body';\nimport { TableHeader } from '@patternfly/react-table/dist/js/components/Table/Header';\nimport { Bullseye } from '@patternfly/react-core/dist/js/layouts/Bullseye';\nimport {\n  Pagination,\n  PaginationVariant,\n} from '@patternfly/react-core/dist/js/components/Pagination/Pagination';\n\nimport {\n  ErrorState,\n  NoAffectedClusters,\n  NoMatchingClusters,\n} from '../MessageState/EmptyStates';\nimport Loading from '../Loading/Loading';\nimport { Link } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { updateAffectedClustersFilters } from '../../Services/Filters';\n\nconst AffectedClustersTable = ({ query }) => {\n  const {\n    isError,\n    isUninitialized,\n    isFetching,\n    isSuccess,\n    data: rows = [],\n  } = query;\n  const dispatch = useDispatch();\n  const filters = useSelector(({ filters }) => filters.affectedClustersState);\n  const updateFilters = (filters) =>\n    dispatch(updateAffectedClustersFilters(filters));\n\n  const [filteredRows, setFilteredRows] = useState([]);\n  const [displayedRows, setDisplayedRows] = useState([]);\n  const [chips, setChips] = useState([]);\n  const perPage = Number(filters.limit);\n  const page = filters.offset / filters.limit + 1;\n\n  const updateNameChip = (chips, newValue) => {\n    const newChips = chips;\n    const nameCategoryIndex = newChips.findIndex(\n      (chip) => chip.category === 'Name'\n    );\n    if (newValue === '') {\n      newChips.splice(nameCategoryIndex);\n    } else {\n      if (nameCategoryIndex === -1) {\n        newChips.push({ category: 'Name', chips: [{ name: newValue }] });\n      } else {\n        newChips[nameCategoryIndex] = {\n          category: 'Name',\n          chips: [{ name: newValue }],\n        };\n      }\n    }\n    return newChips;\n  };\n\n  const onChipDelete = () => {\n    // right now, only designed to treat the Name (text) filter\n    const newFilters = { ...filters, text: '' };\n    updateFilters(newFilters);\n  };\n\n  const onNameFilterChange = (value) => {\n    const newFilters = { ...filters, text: value, offset: 0 };\n    updateFilters(newFilters);\n  };\n\n  const filterConfig = {\n    items: [\n      {\n        label: 'Name',\n        type: conditionalFilterType.text,\n        filterValues: {\n          key: 'name-filter',\n          onChange: (_e, value) => onNameFilterChange(value),\n          value: filters.text,\n        },\n      },\n    ],\n    isDisabled: isError || (rows && rows.length === 0),\n  };\n\n  const onSort = (_e, index, direction) => {\n    updateFilters({ ...filters, sortIndex: index, sortDirection: direction });\n  };\n\n  const onSetPage = (_e, pageNumber) => {\n    const newOffset = pageNumber * filters.limit - filters.limit;\n    updateFilters({ ...filters, offset: newOffset });\n  };\n\n  const onSetPerPage = (_e, perPage) => {\n    updateFilters({ ...filters, limit: perPage });\n  };\n\n  // constructs array of rows (from the initial data) checking currently applied filters\n  const buildFilteredRows = (allRows, filters) => {\n    const rows = allRows;\n    return rows\n      .filter((row) => {\n        // further filters conditions will be added soon\n        return row?.cluster.includes(filters.text);\n      })\n      .sort((a, b) => {\n        if (filters.sortDirection === 'asc') {\n          return a?.cluster.localeCompare(b?.cluster);\n        }\n        return b?.cluster.localeCompare(a?.cluster);\n      });\n  };\n\n  const buildDisplayedRows = (rows) => {\n    return rows.slice(perPage * (page - 1), perPage * (page - 1) + perPage);\n  };\n\n  useEffect(() => {\n    const newFilteredRows = buildFilteredRows(rows, filters);\n    const newDisplayedRows = buildDisplayedRows(newFilteredRows);\n    const newChips = updateNameChip(chips, filters.text);\n    setFilteredRows(newFilteredRows);\n    setDisplayedRows(newDisplayedRows);\n    setChips(newChips);\n  }, [query, filters]);\n\n  return (\n    <div id=\"affected-list-table\">\n      <PrimaryToolbar\n        filterConfig={filterConfig}\n        pagination={{\n          itemCount: filteredRows.length,\n          page,\n          perPage,\n          onSetPage: onSetPage,\n          onPerPageSelect: onSetPerPage,\n        }}\n        activeFiltersConfig={{\n          filters: chips,\n          onDelete: onChipDelete,\n        }}\n      />\n      {(isUninitialized || isFetching) && <Loading />}\n      {isError && (\n        <Card>\n          <CardBody>\n            <ErrorState />\n          </CardBody>\n        </Card>\n      )}\n      {isSuccess && rows.length === 0 && (\n        <Card>\n          <CardBody>\n            <NoAffectedClusters />\n          </CardBody>\n        </Card>\n      )}\n      {isSuccess &&\n        rows.length > 0 &&\n        (filteredRows.length > 0 ? (\n          <Table\n            aria-label=\"Table of affected clusters\"\n            ouiaId=\"affectedClustersTable\"\n            variant=\"compact\"\n            cells={[{ title: 'Name', transforms: [sortable] }]}\n            rows={displayedRows.map((c) => ({\n              cells: [\n                <span key={c?.cluter}>\n                  <Link to={`/clusters/${c?.cluster}`}>{c?.cluster}</Link>\n                </span>,\n              ],\n            }))}\n            sortBy={{\n              index: filters.sortIndex,\n              direction: filters.sortDirection,\n            }}\n            onSort={onSort}\n          >\n            <TableHeader />\n            <TableBody />\n          </Table>\n        ) : (\n          <EmptyTable>\n            <Bullseye>\n              <NoMatchingClusters />\n            </Bullseye>\n          </EmptyTable>\n        ))}\n      <TableToolbar isFooter className=\"ins-c-inventory__table--toolbar\">\n        <Pagination\n          variant={PaginationVariant.bottom}\n          itemCount={filteredRows.length}\n          page={page}\n          perPage={perPage}\n          onSetPage={onSetPage}\n          onPerPageSelect={onSetPerPage}\n          onPageInput={onSetPage}\n        />\n      </TableToolbar>\n    </div>\n  );\n};\n\nAffectedClustersTable.propTypes = {\n  query: PropTypes.shape({\n    isError: PropTypes.bool.isRequired,\n    isUninitialized: PropTypes.bool.isRequired,\n    isFetching: PropTypes.bool.isRequired,\n    isSuccess: PropTypes.bool.isRequired,\n    data: PropTypes.array,\n  }),\n};\n\nexport { AffectedClustersTable };\n","import React from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { useGetAffectedClustersQuery } from '../../Services/SmartProxy';\n\nimport { AffectedClustersTable } from './AffectedClustersTable';\n\nconst AffectedClustersTableWrapper = () => {\n  const query = useGetAffectedClustersQuery(useParams().recommendationId);\n\n  return <AffectedClustersTable query={query} />;\n};\n\nexport default AffectedClustersTableWrapper;\n","import './Recommendation.scss';\n\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\n\nimport {\n  Card,\n  CardBody,\n  CardFooter,\n  CardHeader,\n} from '@patternfly/react-core/dist/js/components/Card';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { Label } from '@patternfly/react-core/dist/js/components/Label/Label';\nimport { Title } from '@patternfly/react-core/dist/js/components/Title/Title';\nimport { LabelGroup } from '@patternfly/react-core/dist/js/components/LabelGroup';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\nimport { global_danger_color_100 as globalDangerColor100 } from '@patternfly/react-tokens/dist/js/global_danger_color_100';\nimport BellSlashIcon from '@patternfly/react-icons/dist/js/icons/bell-slash-icon';\nimport CaretDownIcon from '@patternfly/react-icons/dist/js/icons/caret-down-icon';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { Button } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport { Dropdown } from '@patternfly/react-core/dist/js/components/Dropdown/Dropdown';\nimport { DropdownItem } from '@patternfly/react-core/dist/js/components/Dropdown/DropdownItem';\nimport { DropdownToggle } from '@patternfly/react-core/dist/js/components/Dropdown/DropdownToggle';\nimport { Flex } from '@patternfly/react-core/dist/js/layouts/Flex/Flex';\nimport { FlexItem } from '@patternfly/react-core/dist/js/layouts/Flex/FlexItem';\n\nimport Breadcrumbs from '../Breadcrumbs';\nimport RuleLabels from '../RuleLabels/RuleLabels';\nimport { FILTER_CATEGORIES, RULE_CATEGORIES } from '../../AppConstants';\nimport messages from '../../Messages';\nimport RuleDetails from './RuleDetails';\nimport Loading from '../Loading/Loading';\nimport { adjustOCPRule } from '../../Utilities/Rule';\nimport MessageState from '../MessageState/MessageState';\nimport AffectedClustersTable from '../AffectedClustersTable';\nimport { Delete, Post } from '../../Utilities/Api';\nimport { BASE_URL } from '../../Services/SmartProxy';\nimport DisableRule from '../Modals/DisableRule';\n\nconst Recommendation = ({ rule, ack, match }) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const notify = (data) => dispatch(addNotification(data));\n  const recId = match.params.recommendationId;\n  const [disableRuleModalOpen, setDisableRuleModalOpen] = useState(false);\n  const [actionsDropdownOpen, setActionsDropdownOpen] = useState(false);\n\n  const {\n    isError,\n    isUninitialized,\n    isLoading,\n    isFetching,\n    isSuccess,\n    data,\n    refetch,\n  } = rule;\n\n  const {\n    data: recAck = {},\n    isFetching: recAckIsFetching,\n    refetch: recAckRefetch,\n  } = ack;\n\n  const content = isSuccess ? adjustOCPRule(data.content, recId) : undefined;\n\n  const afterDisableFn = async () => {\n    refetch();\n    recAckRefetch();\n  };\n\n  const handleModalToggle = (disableRuleModalOpen) => {\n    setDisableRuleModalOpen(disableRuleModalOpen);\n  };\n\n  const enableRule = async (rule) => {\n    try {\n      await Delete(`${BASE_URL}/ack/${rule.rule_id}/`);\n      notify({\n        variant: 'success',\n        timeout: true,\n        dismissable: true,\n        title: intl.formatMessage(messages.recSuccessfullyEnabled),\n      });\n      refetch();\n    } catch (error) {\n      handleModalToggle(false);\n      notify({\n        variant: 'danger',\n        dismissable: true,\n        title: intl.formatMessage(messages.error),\n        description: `${error}`,\n      });\n    }\n  };\n\n  return (\n    <React.Fragment>\n      {disableRuleModalOpen && (\n        <DisableRule\n          handleModalToggle={handleModalToggle}\n          isModalOpen={disableRuleModalOpen}\n          rule={content}\n          afterFn={afterDisableFn}\n        />\n      )}\n      <PageHeader className=\"pageHeaderOverride\">\n        <Breadcrumbs current={content?.description || recId} />\n      </PageHeader>\n      {(isUninitialized || isLoading || isFetching) && (\n        <Main>\n          <Loading />\n        </Main>\n      )}\n      {isError && (\n        <Main>\n          <MessageState\n            title={intl.formatMessage(messages.unableToConnect)}\n            text={intl.formatMessage(messages.unableToConnectDesc)}\n            icon={ExclamationCircleIcon}\n            iconStyle={{ color: globalDangerColor100.value }}\n          />\n        </Main>\n      )}\n      {!(isUninitialized || isLoading || isFetching) && isSuccess && (\n        <React.Fragment>\n          <Main className=\"pf-m-light pf-u-pt-sm\">\n            <RuleDetails\n              isOpenShift\n              isDetailsPage\n              rule={content}\n              header={\n                <React.Fragment>\n                  <PageHeaderTitle\n                    title={\n                      <React.Fragment>\n                        {content.description} <RuleLabels rule={content} />\n                      </React.Fragment>\n                    }\n                  />\n                  <p>\n                    {intl.formatMessage(messages.rulesDetailsPubishdate, {\n                      date: (\n                        <DateFormat\n                          date={new Date(content.publish_date)}\n                          type=\"onlyDate\"\n                        />\n                      ),\n                    })}\n                    {content.tags &&\n                      (Array.isArray(content.tags) ? (\n                        <LabelGroup className=\"categoryLabels\" numLabels={1}>\n                          {content.tags.reduce((labels, tag) => {\n                            if (RULE_CATEGORIES[tag]) {\n                              labels.push(\n                                <Label key={`label-${tag}`} color=\"blue\">\n                                  {\n                                    FILTER_CATEGORIES.category.values[\n                                      RULE_CATEGORIES[tag] - 1\n                                    ].label\n                                  }\n                                </Label>\n                              );\n                            }\n                            return labels;\n                          }, [])}\n                        </LabelGroup>\n                      ) : (\n                        <Label>{content.tags}</Label>\n                      ))}\n                  </p>\n                </React.Fragment>\n              }\n              onFeedbackChanged={async (rule, rating) =>\n                await Post(`${BASE_URL}/v2/rating`, {}, { rule, rating })\n              }\n            >\n              <Flex>\n                <FlexItem align={{ default: 'alignRight' }}>\n                  <Dropdown\n                    className=\"ins-c-rec-details__actions_dropdown\"\n                    onSelect={() =>\n                      setActionsDropdownOpen(!actionsDropdownOpen)\n                    }\n                    position=\"right\"\n                    ouiaId=\"actions\"\n                    toggle={\n                      <DropdownToggle\n                        onToggle={(actionsDropdownOpen) =>\n                          setActionsDropdownOpen(actionsDropdownOpen)\n                        }\n                        toggleIndicator={CaretDownIcon}\n                      >\n                        {intl.formatMessage(messages.actions)}\n                      </DropdownToggle>\n                    }\n                    isOpen={actionsDropdownOpen}\n                    dropdownItems={\n                      content?.disabled\n                        ? [\n                            <DropdownItem\n                              key=\"link\"\n                              ouiaId=\"enable\"\n                              onClick={() => {\n                                enableRule(rule);\n                              }}\n                            >\n                              {intl.formatMessage(messages.enableRule)}\n                            </DropdownItem>,\n                          ]\n                        : [\n                            <DropdownItem\n                              key=\"link\"\n                              ouiaId=\"disable\"\n                              onClick={() => {\n                                handleModalToggle(true);\n                              }}\n                            >\n                              {intl.formatMessage(messages.disableRule)}\n                            </DropdownItem>,\n                          ]\n                    }\n                  />\n                </FlexItem>\n              </Flex>\n            </RuleDetails>\n          </Main>\n          <Main>\n            <React.Fragment>\n              {content?.disabled && (\n                <Card className=\"cardOverride\">\n                  <CardHeader>\n                    <Title headingLevel=\"h4\" size=\"xl\">\n                      <BellSlashIcon size=\"sm\" />\n                      &nbsp;\n                      {intl.formatMessage(messages.ruleIsDisabled)}\n                    </Title>\n                  </CardHeader>\n                  <CardBody>\n                    {!recAckIsFetching && (\n                      <React.Fragment>\n                        {intl.formatMessage(\n                          messages.ruleIsDisabledJustification\n                        )}\n                        <i>\n                          {recAck.justification ||\n                            intl.formatMessage(messages.none)}\n                        </i>\n                        {(recAck.updated_at || recAck.created_at) && (\n                          <span>\n                            &nbsp;\n                            <DateFormat\n                              date={\n                                new Date(recAck.updated_at || recAck.created_at)\n                              }\n                              type=\"onlyDate\"\n                            />\n                          </span>\n                        )}\n                      </React.Fragment>\n                    )}\n                  </CardBody>\n                  <CardFooter>\n                    <Button\n                      isInline\n                      variant=\"link\"\n                      onClick={() => enableRule(rule)}\n                      ouiaId=\"rule\"\n                    >\n                      {intl.formatMessage(messages.enableRule)}\n                    </Button>\n                  </CardFooter>\n                </Card>\n              )}\n              {!content?.disabled && (\n                <React.Fragment>\n                  <Title className=\"titleOverride\" headingLevel=\"h3\" size=\"2xl\">\n                    {intl.formatMessage(messages.affectedClusters)}\n                  </Title>\n                  <AffectedClustersTable />\n                </React.Fragment>\n              )}\n              {content?.disabled && (\n                <MessageState\n                  icon={BellSlashIcon}\n                  title={intl.formatMessage(messages.ruleIsDisabled)}\n                  text={intl.formatMessage(messages.ruleIsDisabledBody)}\n                />\n              )}\n            </React.Fragment>\n          </Main>\n        </React.Fragment>\n      )}\n    </React.Fragment>\n  );\n};\n\nRecommendation.propTypes = {\n  rule: PropTypes.object.isRequired,\n  ack: PropTypes.object.isRequired,\n  match: PropTypes.object.isRequired,\n};\n\nexport { Recommendation };\n","import React, { useEffect } from 'react';\n\nimport { useParams, useRouteMatch } from 'react-router-dom';\n\nimport { Recommendation } from './Recommendation';\nimport { useGetRuleByIdQuery } from '../../Services/SmartProxy';\nimport { useGetRecAcksQuery } from '../../Services/Acks';\n\nconst RecommendationWrapper = () => {\n  const rule = useGetRuleByIdQuery(useParams().recommendationId);\n  const ack = useGetRecAcksQuery({ ruleId: useParams().recommendationId });\n\n  useEffect(() => {\n    rule.refetch();\n  }, [useParams().recommendationId]);\n\n  return <Recommendation rule={rule} ack={ack} match={useRouteMatch()} />;\n};\n\nexport default RecommendationWrapper;\n"],"names":["AffectedClustersTable","query","isError","isUninitialized","isFetching","isSuccess","data","rows","dispatch","useDispatch","filters","useSelector","affectedClustersState","updateFilters","updateAffectedClustersFilters","useState","filteredRows","setFilteredRows","displayedRows","setDisplayedRows","chips","setChips","perPage","Number","limit","page","offset","filterConfig","items","label","type","conditionalFilterType","filterValues","key","onChange","_e","value","newFilters","text","onNameFilterChange","isDisabled","length","onSetPage","pageNumber","newOffset","onSetPerPage","useEffect","newFilteredRows","allRows","filter","row","cluster","includes","sort","a","b","sortDirection","localeCompare","buildFilteredRows","newDisplayedRows","slice","buildDisplayedRows","newChips","newValue","nameCategoryIndex","findIndex","chip","category","splice","push","name","updateNameChip","id","PrimaryToolbar","pagination","itemCount","onPerPageSelect","activeFiltersConfig","onDelete","Loading","Card","CardBody","Table","ouiaId","variant","cells","title","transforms","sortable","map","c","cluter","Link","to","sortBy","index","sortIndex","direction","onSort","EmptyTable","Bullseye","TableToolbar","isFooter","className","Pagination","PaginationVariant","onPageInput","propTypes","PropTypes","useGetAffectedClustersQuery","useParams","recommendationId","Recommendation","rule","ack","match","intl","useIntl","notify","addNotification","recId","params","disableRuleModalOpen","setDisableRuleModalOpen","actionsDropdownOpen","setActionsDropdownOpen","isLoading","refetch","recAck","recAckIsFetching","recAckRefetch","content","errorKeyContent","error_keys","split","getErrorKey","adjusted","metadata","impact","adjustOCPRule","undefined","afterDisableFn","handleModalToggle","enableRule","Delete","BASE_URL","rule_id","timeout","dismissable","formatMessage","messages","description","DisableRule","isModalOpen","afterFn","PageHeader","Breadcrumbs","current","Main","MessageState","icon","ExclamationCircleIcon","iconStyle","color","globalDangerColor100","RuleDetails","isOpenShift","isDetailsPage","header","PageHeaderTitle","RuleLabels","date","DateFormat","Date","publish_date","tags","Array","isArray","LabelGroup","numLabels","reduce","labels","tag","RULE_CATEGORIES","Label","FILTER_CATEGORIES","onFeedbackChanged","rating","Post","Flex","FlexItem","align","default","Dropdown","onSelect","position","toggle","DropdownToggle","onToggle","toggleIndicator","CaretDownIcon","isOpen","dropdownItems","disabled","DropdownItem","onClick","CardHeader","Title","headingLevel","size","justification","updated_at","created_at","CardFooter","Button","isInline","BellSlashIcon","useGetRuleByIdQuery","useGetRecAcksQuery","ruleId","useRouteMatch"],"sourceRoot":""}