{"version":3,"file":"js/ClusterDetails.cb152f33661d8b364eaf.js","mappings":"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","sources":["webpack:///./src/Components/ClusterHeader/ClusterHeader.js","webpack:///./src/Components/ClusterHeader/index.js","webpack:///./src/Components/ReportDetails/ReportDetails.js","webpack:///./src/Components/ClusterRules/ClusterRules.js","webpack:///./src/Components/Cluster/Cluster.js","webpack:///./src/Components/Cluster/index.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport { Grid, GridItem } from '@patternfly/react-core/dist/js/layouts/Grid';\nimport { Stack, StackItem } from '@patternfly/react-core/dist/js/layouts/Stack';\nimport { Title } from '@patternfly/react-core/dist/js/components/Title';\nimport Skeleton from '@redhat-cloud-services/frontend-components/Skeleton';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat/DateFormat';\n\nimport messages from '../../Messages';\nimport { OneLineLoader } from '../../Utilities/Loaders';\n\nexport const ClusterHeader = ({ clusterId, clusterData, displayName }) => {\n  const intl = useIntl();\n  const {\n    isUninitialized: isUninitializedDisplayName,\n    isFetching: isFetchingDisplayName,\n    data: clusterName,\n  } = displayName;\n\n  // subscribe to the cluster data query\n  const {\n    isUninitialized: isUninitializedCluster,\n    isFetching: isFetchingCluster,\n    data: cluster,\n  } = clusterData;\n\n  return (\n    <Grid id=\"cluster-header\" md={12} hasGutter>\n      <GridItem>\n        {isUninitializedDisplayName || isFetchingDisplayName ? (\n          <Skeleton size=\"sm\" />\n        ) : (\n          <Title\n            size=\"2xl\"\n            headingLevel=\"h1\"\n            id=\"cluster-header-title\"\n            ouiaId=\"cluster-name\"\n          >\n            {clusterName || clusterId}\n          </Title>\n        )}\n      </GridItem>\n      <GridItem>\n        <Stack>\n          <StackItem id=\"cluster-header-uuid\">\n            <span>UUID: </span>\n            <span>{clusterId || intl.formatMessage(messages.unknown)}</span>\n          </StackItem>\n          <StackItem id=\"cluster-header-last-seen\">\n            <span>{intl.formatMessage(messages.lastSeen)}: </span>\n            <span>\n              {isUninitializedCluster || isFetchingCluster ? (\n                <OneLineLoader />\n              ) : cluster?.report?.meta?.last_checked_at ? (\n                <DateFormat\n                  date={cluster?.report?.meta?.last_checked_at}\n                  type=\"exact\"\n                />\n              ) : (\n                intl.formatMessage(messages.unknown)\n              )}\n            </span>\n          </StackItem>\n        </Stack>\n      </GridItem>\n    </Grid>\n  );\n};\n\nClusterHeader.propTypes = {\n  clusterId: PropTypes.string.isRequired,\n  displayName: PropTypes.object.isRequired,\n  clusterData: PropTypes.object.isRequired,\n};\n","import React from 'react';\nimport { routerParams } from '@redhat-cloud-services/frontend-components-utilities/RouterParams/RouterParams';\n\nimport { useGetClusterDisplayNameByIdQuery } from '../../Services/AccountManagementService';\nimport { useGetClusterByIdQuery } from '../../Services/SmartProxy';\nimport { ClusterHeader } from './ClusterHeader';\n\nexport default routerParams(({ match }) => {\n  const clusterId = match.params.clusterId;\n  const displayName = useGetClusterDisplayNameByIdQuery(clusterId);\n  const clusterData = useGetClusterByIdQuery({\n    id: clusterId,\n    includeDisabled: false,\n  });\n\n  return (\n    <ClusterHeader\n      clusterId={clusterId}\n      displayName={displayName}\n      clusterData={clusterData}\n    />\n  );\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\n\nimport Loading from '../Loading/Loading';\n\n// Rule fields processing: https://docs.google.com/document/d/1D0ZLD6-2DZqBX1cUHJY2vL2QAD0dIAzY3O3xFNlEsVg/edit?usp=sharing\n\nconst ReportDetails = ({ report }) => {\n  return (\n    <div className=\"advisor\">\n      <AsyncComponent\n        appName=\"advisor\"\n        module=\"./AdvisorReportDetails\"\n        fallback={<Loading />}\n        // TODO: make API rename `extra_data` to `details` or modify AdvisorReportDetails property\n        report={{\n          ...report,\n          details: report.extra_data,\n          resolution: {\n            resolution: report.resolution,\n          },\n        }}\n      />\n    </div>\n  );\n};\n\nReportDetails.propTypes = {\n  report: PropTypes.object.isRequired,\n};\n\nexport default ReportDetails;\n","import './_ClusterRules.scss';\n\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { useLocation } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport capitalize from 'lodash/capitalize';\n\nimport CheckIcon from '@patternfly/react-icons/dist/js/icons/check-icon';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat/DateFormat';\nimport InsightsLabel from '@redhat-cloud-services/frontend-components/InsightsLabel';\nimport {\n  SortByDirection,\n  Table,\n  TableBody,\n  TableHeader,\n  TableVariant,\n} from '@patternfly/react-table';\nimport { Card, CardBody } from '@patternfly/react-core/dist/js/components/Card';\nimport {\n  Tooltip,\n  TooltipPosition,\n} from '@patternfly/react-core/dist/js/components/Tooltip';\nimport PrimaryToolbar from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\n\nimport messages from '../../Messages';\nimport MessageState from '../MessageState/MessageState';\nimport {\n  IMPACT_LABEL,\n  LIKELIHOOD_LABEL,\n  FILTER_CATEGORIES as FC,\n  CLUSTER_RULES_COLUMNS_KEYS,\n  FILTER_CATEGORIES,\n  CLUSTER_RULES_COLUMNS,\n} from '../../AppConstants';\nimport ReportDetails from '../ReportDetails/ReportDetails';\nimport RuleLabels from '../Labels/RuleLabels';\nimport { NoMatchingRecs } from '../MessageState/EmptyStates';\nimport {\n  paramParser,\n  passFilters,\n  translateSortParams,\n} from '../Common/Tables';\nimport {\n  CLUSTER_RULES_INITIAL_STATE,\n  updateClusterRulesFilters,\n} from '../../Services/Filters';\nimport { getErrorKey, getPluginName } from '../../Utilities/Rule';\n\nconst ClusterRules = ({ reports }) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const updateFilters = (filters) =>\n    dispatch(updateClusterRulesFilters(filters));\n  const filters = useSelector(({ filters }) => filters.clusterRulesState);\n\n  const [filteredRows, setFilteredRows] = useState([]);\n  const [displayedRows, setDisplayedRows] = useState([]);\n  const [isAllExpanded, setIsAllExpanded] = useState(false);\n  const [expandFirst, setExpandFirst] = useState(true);\n  const [firstRule, setFirstRule] = useState(''); // show a particular rule first\n  const results = filteredRows.length;\n  const { search } = useLocation();\n\n  useEffect(() => {\n    setDisplayedRows(\n      buildDisplayedRows(filteredRows, filters.sortIndex, filters.sortDirection)\n    );\n  }, [\n    filteredRows,\n    filters.limit,\n    filters.offset,\n    filters.sortIndex,\n    filters.sortDirection,\n  ]);\n\n  useEffect(() => {\n    setFilteredRows(buildFilteredRows(reports, filters));\n  }, [reports, filters]);\n\n  useEffect(() => {\n    if (search) {\n      const paramsObject = paramParser(search);\n      if (paramsObject.sort) {\n        const sortObj = translateSortParams(paramsObject.sort[0]);\n        paramsObject.sortIndex = CLUSTER_RULES_COLUMNS_KEYS.indexOf(\n          sortObj.name\n        );\n        paramsObject.sortDirection = sortObj.direction;\n      }\n      if (paramsObject.first) {\n        setFirstRule(paramsObject.first);\n        delete paramsObject.first;\n      }\n      updateFilters({ ...filters, ...paramsObject });\n    }\n  }, []);\n\n  const handleOnCollapse = (_e, rowId, isOpen) => {\n    const collapseRows = [...displayedRows];\n    collapseRows[rowId] = { ...collapseRows[rowId], isOpen };\n    setDisplayedRows(collapseRows);\n  };\n\n  const buildFilteredRows = (allRows, filters) =>\n    allRows\n      .filter((rule) => passFilters(rule, filters))\n      .map((value, key) => [\n        {\n          rule: value,\n          isOpen: isAllExpanded,\n          cells: [\n            {\n              title: (\n                <div>\n                  {value?.description || value?.rule_id}{' '}\n                  <RuleLabels rule={value} />\n                </div>\n              ),\n            },\n            {\n              title: (\n                <div key={key}>\n                  <DateFormat\n                    date={value.created_at}\n                    type=\"relative\"\n                    tooltipProps={{ position: TooltipPosition.bottom }}\n                  />\n                </div>\n              ),\n            },\n            {\n              title: (\n                <div key={key} style={{ verticalAlign: 'top' }}>\n                  {value?.likelihood && value?.impact ? (\n                    <Tooltip\n                      key={key}\n                      position={TooltipPosition.bottom}\n                      content={\n                        // TODO: refine fields lookup\n                        <span>\n                          The <strong>likelihood</strong> that this will be a\n                          problem is{' '}\n                          {value.likelihood\n                            ? LIKELIHOOD_LABEL[value.likelihood]\n                            : 'unknown'}\n                          .The <strong>impact</strong> of the problem would be{' '}\n                          {value.impact\n                            ? IMPACT_LABEL[value.impact]\n                            : 'unknown'}{' '}\n                          if it occurred.\n                        </span>\n                      }\n                    >\n                      <InsightsLabel value={value.total_risk} />\n                    </Tooltip>\n                  ) : (\n                    <InsightsLabel value={value.total_risk} />\n                  )}\n                </div>\n              ),\n            },\n          ],\n        },\n        {\n          fullWidth: true,\n          cells: [\n            {\n              title: <ReportDetails key={`child-${key}`} report={value} />,\n            },\n          ],\n        },\n      ]);\n\n  const buildDisplayedRows = (rows, index, direction) => {\n    let sortingRows = [...rows];\n    if (index >= 0) {\n      sortingRows = [...rows].sort((firstItem, secondItem) => {\n        const fst = firstItem[0].rule[CLUSTER_RULES_COLUMNS_KEYS[index - 1]];\n        const snd = secondItem[0].rule[CLUSTER_RULES_COLUMNS_KEYS[index - 1]];\n        return fst > snd ? 1 : snd > fst ? -1 : 0;\n      });\n      if (direction === SortByDirection.desc) {\n        sortingRows.reverse();\n      }\n    } else if (firstRule) {\n      const i = rows.findIndex((row) => {\n        const rule = row[0].rule;\n        /* rule_id is given with the plugin name only, \n           thus we need to look at extra_data for the error key */\n        return (\n          rule.rule_id.split('.report')[0] === getPluginName(firstRule) &&\n          rule.extra_data.error_key === getErrorKey(firstRule)\n        );\n      });\n      i !== -1 && sortingRows.unshift(sortingRows.splice(i, 1)[0]);\n    }\n    return sortingRows.flatMap((row, index) => {\n      const updatedRow = [...row];\n      if (expandFirst && index === 0) {\n        row[0].isOpen = true;\n      }\n      row[1].parent = index * 2;\n      return updatedRow;\n    });\n  };\n\n  const onSort = (_e, index, direction) =>\n    updateFilters({ ...filters, sortIndex: index, sortDirection: direction });\n\n  const removeFilterParam = (param) => {\n    const filter = { ...filters, offset: 0 };\n    delete filter[param];\n    updateFilters({ ...filter, ...(param === 'text' ? { text: '' } : {}) });\n  };\n\n  // TODO: update URL when filters changed\n  const addFilterParam = (param, values) => {\n    setExpandFirst(false);\n    setFirstRule('');\n    return values.length > 0\n      ? updateFilters({ ...filters, offset: 0, ...{ [param]: values } })\n      : removeFilterParam(param);\n  };\n\n  const filterConfigItems = [\n    {\n      label: 'description',\n      filterValues: {\n        key: 'text-filter',\n        onChange: (_e, value) => addFilterParam('text', value),\n        value: filters.text,\n      },\n    },\n    {\n      label: FC.total_risk.title,\n      type: FC.total_risk.type,\n      id: FC.total_risk.urlParam,\n      value: `checkbox-${FC.total_risk.urlParam}`,\n      filterValues: {\n        key: `${FC.total_risk.urlParam}-filter`,\n        onChange: (_e, values) =>\n          addFilterParam(FILTER_CATEGORIES.total_risk.urlParam, values),\n        value: filters.total_risk,\n        items: FC.total_risk.values,\n      },\n    },\n    {\n      label: FC.category.title,\n      type: FC.category.type,\n      id: FC.category.urlParam,\n      value: `checkbox-${FC.category.urlParam}`,\n      filterValues: {\n        key: `${FC.category.urlParam}-filter`,\n        onChange: (_e, values) =>\n          addFilterParam(FILTER_CATEGORIES.category.urlParam, values),\n        value: filters.category,\n        items: FC.category.values,\n      },\n    },\n  ];\n\n  const pruneFilters = (localFilters, filterCategories) => {\n    const prunedFilters = Object.entries(localFilters);\n    return prunedFilters.length > 0\n      ? prunedFilters.reduce((arr, item) => {\n          if (filterCategories[item[0]]) {\n            const category = filterCategories[item[0]];\n            const chips = Array.isArray(item[1])\n              ? item[1].map((value) => {\n                  const selectedCategoryValue = category.values.find(\n                    (values) => values.value === String(value)\n                  );\n                  return selectedCategoryValue\n                    ? {\n                        name:\n                          selectedCategoryValue.text ||\n                          selectedCategoryValue.label,\n                        value,\n                      }\n                    : { name: value, value };\n                })\n              : [\n                  {\n                    name: category.values.find(\n                      (values) => values.value === String(item[1])\n                    ).label,\n                    value: item[1],\n                  },\n                ];\n            return [\n              ...arr,\n              {\n                category: capitalize(category.title),\n                chips,\n                urlParam: category.urlParam,\n              },\n            ];\n          } else if (item[0] === 'text') {\n            return [\n              ...arr,\n              ...(item[1].length > 0\n                ? [\n                    {\n                      category: 'Name',\n                      chips: [{ name: item[1], value: item[1] }],\n                      urlParam: item[0],\n                    },\n                  ]\n                : []),\n            ];\n          } else {\n            return arr;\n          }\n        }, [])\n      : [];\n  };\n\n  const buildFilterChips = () => {\n    const localFilters = { ...filters };\n    delete localFilters.sortIndex;\n    delete localFilters.sortDirection;\n    delete localFilters.offset;\n    delete localFilters.limit;\n    return pruneFilters(localFilters, FILTER_CATEGORIES);\n  };\n\n  const activeFiltersConfig = {\n    deleteTitle: intl.formatMessage(messages.resetFilters),\n    filters: buildFilterChips(),\n    onDelete: (_event, itemsToRemove, isAll) => {\n      if (isAll) {\n        updateFilters(CLUSTER_RULES_INITIAL_STATE);\n      } else {\n        itemsToRemove.map((item) => {\n          const newFilter = {\n            [item.urlParam]: Array.isArray(filters[item.urlParam])\n              ? filters[item.urlParam].filter(\n                  (value) => String(value) !== String(item.chips[0].value)\n                )\n              : '',\n          };\n          newFilter[item.urlParam].length > 0\n            ? updateFilters({ ...filters, ...newFilter })\n            : removeFilterParam(item.urlParam);\n        });\n      }\n    },\n  };\n\n  //Responsible for the handling collapse for all the recommendations\n  //Used in the PrimaryToolbar\n  const collapseAll = (_e, isOpen) => {\n    setIsAllExpanded(isOpen);\n    setDisplayedRows(\n      displayedRows.map((row) => {\n        return {\n          ...row,\n          isOpen: isOpen,\n        };\n      })\n    );\n  };\n\n  return (\n    <div id=\"cluster-recs-list-table\">\n      <PrimaryToolbar\n        expandAll={{ isAllExpanded, onClick: collapseAll }}\n        filterConfig={{\n          items: filterConfigItems,\n          isDisabled: filteredRows.length === 0,\n        }}\n        pagination={\n          <React.Fragment>\n            {results === 1\n              ? `${results} ${intl.formatMessage(messages.recommendation)}`\n              : `${results} ${intl.formatMessage(messages.recommendations)}`}\n          </React.Fragment>\n        }\n        activeFiltersConfig={\n          reports.length === 0 ? undefined : activeFiltersConfig\n        }\n      />\n      {reports.length > 0 ? (\n        <React.Fragment>\n          <Table\n            aria-label={'Cluster recommendations table'}\n            ouiaId=\"recommendations\"\n            onCollapse={handleOnCollapse}\n            rows={displayedRows}\n            cells={CLUSTER_RULES_COLUMNS}\n            sortBy={{\n              index: filters.sortIndex,\n              direction: filters.sortDirection,\n            }}\n            onSort={onSort}\n            variant={TableVariant.compact}\n            isStickyHeader\n          >\n            <TableHeader />\n            <TableBody />\n          </Table>\n          {results === 0 && (\n            <Card ouiaId=\"empty-state\">\n              <CardBody>\n                <NoMatchingRecs />\n              </CardBody>\n            </Card>\n          )}\n        </React.Fragment>\n      ) : (\n        // ? Welcome to Insights feature for novice clusters with disabled Insights?\n        <Card ouiaId=\"no-recommendations\">\n          <CardBody>\n            <MessageState\n              icon={CheckIcon}\n              iconClass=\"ins-c-insights__check\"\n              title={intl.formatMessage(messages.noRecommendations)}\n              text={intl.formatMessage(messages.noRecommendationsDesc)}\n            />\n          </CardBody>\n        </Card>\n      )}\n    </div>\n  );\n};\n\nClusterRules.propTypes = {\n  reports: PropTypes.array.isRequired,\n};\n\nClusterRules.defaultProps = {\n  reports: [],\n};\n\nexport default ClusterRules;\n","import './_Cluster.scss';\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport { Grid, GridItem } from '@patternfly/react-core/dist/js/layouts/Grid';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\nimport InfoCircleIcon from '@patternfly/react-icons/dist/js/icons/info-circle-icon';\nimport PageHeader from '@redhat-cloud-services/frontend-components/PageHeader';\nimport Main from '@redhat-cloud-services/frontend-components/Main';\nimport { global_danger_color_100 as globalDangerColor100 } from '@patternfly/react-tokens/dist/js/global_danger_color_100';\nimport { global_info_color_100 as globalInfoColor100 } from '@patternfly/react-tokens/dist/js/global_info_color_100.js';\n\nimport ClusterHeader from '../ClusterHeader';\nimport ClusterRules from '../ClusterRules/ClusterRules';\nimport Breadcrumbs from '../Breadcrumbs';\nimport MessageState from '../MessageState/MessageState';\nimport Loading from '../Loading/Loading';\nimport messages from '../../Messages';\n\nexport const Cluster = ({ cluster, displayName, match }) => {\n  const intl = useIntl();\n  const {\n    isError,\n    isUninitialized,\n    isLoading,\n    isFetching,\n    isSuccess,\n    data,\n    error,\n  } = cluster;\n  const { data: clusterDisplayName } = displayName;\n\n  return (\n    <React.Fragment>\n      <PageHeader className=\"pf-m-light ins-inventory-detail\">\n        <Breadcrumbs\n          current={clusterDisplayName || match.params.clusterId}\n          match={match}\n        />\n        <ClusterHeader />\n      </PageHeader>\n      {(isUninitialized || isLoading || isFetching) && (\n        <Main id=\"loading-skeleton\">\n          <Loading />\n        </Main>\n      )}\n      {isError &&\n        (error?.status === 404 ? (\n          <Main>\n            <MessageState\n              title={intl.formatMessage(messages.noRecsFoundError)}\n              text={\n                <React.Fragment>\n                  {intl.formatMessage(messages.noRecsFoundErrorDesc)}\n                  <a href=\"https://docs.openshift.com/container-platform/latest/support/getting-support.html\">\n                    {' '}\n                    OpenShift documentation.\n                  </a>\n                </React.Fragment>\n              }\n              icon={InfoCircleIcon}\n              iconStyle={{ color: globalInfoColor100.value }}\n              variant=\"large\"\n            />\n          </Main>\n        ) : (\n          <Main>\n            <MessageState\n              title={intl.formatMessage(messages.noRecsError)}\n              text={intl.formatMessage(messages.noRecsErrorDesc)}\n              icon={ExclamationCircleIcon}\n              iconStyle={{ color: globalDangerColor100.value }}\n            />\n          </Main>\n        ))}\n      {isSuccess && (\n        <React.Fragment>\n          <Main>\n            <React.Fragment>\n              <Grid hasGutter>\n                <GridItem span={12}>\n                  <ClusterRules reports={data?.report?.data || []} />\n                </GridItem>\n              </Grid>\n            </React.Fragment>\n          </Main>\n        </React.Fragment>\n      )}\n    </React.Fragment>\n  );\n};\n\nCluster.propTypes = {\n  cluster: PropTypes.object.isRequired,\n  displayName: PropTypes.object.isRequired,\n  match: PropTypes.object.isRequired,\n};\n","import React, { useEffect } from 'react';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/RouterParams';\nimport { useIntl } from 'react-intl';\n\nimport { useGetClusterByIdQuery } from '../../Services/SmartProxy';\nimport messages from '../../Messages';\nimport { Cluster } from './Cluster';\nimport { useGetClusterDisplayNameByIdQuery } from '../../Services/AccountManagementService';\n\nexport default routerParams(({ match }) => {\n  const intl = useIntl();\n  const cluster = useGetClusterByIdQuery({\n    id: match.params.clusterId,\n    includeDisabled: false,\n  });\n  const displayName = useGetClusterDisplayNameByIdQuery(match.params.clusterId);\n\n  useEffect(() => {\n    cluster.refetch();\n  }, [match.params.clusterId]);\n\n  useEffect(() => {\n    if (match.params.clusterId) {\n      const subnav = `${match.params.clusterId} - ${intl.formatMessage(\n        messages.clusters\n      )}`;\n      document.title = intl.formatMessage(messages.documentTitle, { subnav });\n    }\n  }, [match.params.clusterId]);\n\n  return <Cluster cluster={cluster} displayName={displayName} match={match} />;\n});\n"],"names":["ClusterHeader","clusterId","clusterData","displayName","intl","useIntl","isUninitializedDisplayName","isUninitialized","isFetchingDisplayName","isFetching","clusterName","data","isUninitializedCluster","isFetchingCluster","cluster","Grid","id","md","hasGutter","GridItem","Skeleton","size","Title","headingLevel","ouiaId","Stack","StackItem","formatMessage","messages","report","meta","last_checked_at","DateFormat","date","type","propTypes","PropTypes","routerParams","match","params","useGetClusterDisplayNameByIdQuery","useGetClusterByIdQuery","includeDisabled","ReportDetails","className","AsyncComponent","appName","module","fallback","Loading","details","extra_data","resolution","ClusterRules","reports","dispatch","useDispatch","updateFilters","filters","updateClusterRulesFilters","useSelector","clusterRulesState","useState","filteredRows","setFilteredRows","displayedRows","setDisplayedRows","isAllExpanded","setIsAllExpanded","expandFirst","setExpandFirst","firstRule","setFirstRule","results","length","search","useLocation","useEffect","buildDisplayedRows","sortIndex","sortDirection","limit","offset","buildFilteredRows","paramsObject","paramParser","sort","sortObj","translateSortParams","CLUSTER_RULES_COLUMNS_KEYS","name","direction","first","localFilters","allRows","filter","rule","passFilters","map","value","key","isOpen","cells","title","description","rule_id","RuleLabels","created_at","tooltipProps","position","TooltipPosition","style","verticalAlign","likelihood","impact","Tooltip","content","LIKELIHOOD_LABEL","IMPACT_LABEL","InsightsLabel","total_risk","fullWidth","rows","index","sortingRows","firstItem","secondItem","fst","snd","SortByDirection","reverse","i","findIndex","row","split","getPluginName","error_key","getErrorKey","unshift","splice","flatMap","updatedRow","parent","removeFilterParam","param","text","addFilterParam","values","filterConfigItems","label","filterValues","onChange","_e","FC","FILTER_CATEGORIES","items","category","activeFiltersConfig","deleteTitle","filterCategories","prunedFilters","Object","entries","reduce","arr","item","chips","Array","isArray","selectedCategoryValue","find","String","capitalize","urlParam","pruneFilters","onDelete","_event","itemsToRemove","isAll","CLUSTER_RULES_INITIAL_STATE","newFilter","PrimaryToolbar","expandAll","onClick","filterConfig","isDisabled","pagination","undefined","Table","onCollapse","rowId","collapseRows","CLUSTER_RULES_COLUMNS","sortBy","onSort","variant","TableVariant","isStickyHeader","TableHeader","TableBody","Card","CardBody","MessageState","icon","CheckIcon","iconClass","defaultProps","Cluster","isError","isLoading","isSuccess","error","clusterDisplayName","PageHeader","Breadcrumbs","current","Main","status","href","InfoCircleIcon","iconStyle","color","globalInfoColor100","ExclamationCircleIcon","globalDangerColor100","span","refetch","subnav","document"],"sourceRoot":""}