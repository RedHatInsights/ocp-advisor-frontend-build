{"version":3,"file":"js/ClustersList.12492505113073fdda0e.js","mappings":"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","sources":["webpack:///./src/Components/ClustersListTable/ClustersListTable.js","webpack:///./src/Components/ClustersListTable/index.js","webpack:///./src/Components/ClustersList/index.js","webpack:///./src/Components/Common/Tables.js","webpack:///./src/Components/Loading/Loading.js","webpack:///./src/Utilities/Workloads.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { useDispatch, useSelector } from 'react-redux';\nimport isEqual from 'lodash/isEqual';\nimport { useLocation } from 'react-router-dom';\nimport uniqBy from 'lodash/uniqBy';\nimport { valid } from 'semver';\nimport { Link } from 'react-router-dom';\n\nimport {\n  SortByDirection,\n  Table,\n  TableBody,\n  TableHeader,\n  TableVariant,\n} from '@patternfly/react-table';\nimport { Pagination, Tooltip } from '@patternfly/react-core';\nimport { PaginationVariant } from '@patternfly/react-core/dist/js/components/Pagination/Pagination';\nimport PrimaryToolbar from '@redhat-cloud-services/frontend-components/PrimaryToolbar/PrimaryToolbar';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter/conditionalFilterConstants';\n\nimport {\n  CLUSTERS_LIST_INITIAL_STATE,\n  resetFilters,\n  updateClustersListFilters,\n} from '../../Services/Filters';\nimport {\n  CLUSTERS_LIST_COLUMNS,\n  CLUSTERS_LIST_COLUMNS_KEYS,\n  CLUSTERS_TABLE_CELL_NAME,\n  CLUSTERS_TABLE_CELL_LAST_SEEN,\n  CLUSTERS_TABLE_CELL_VERSION,\n  CLUSTER_FILTER_CATEGORIES,\n} from '../../AppConstants';\nimport {\n  buildFilterChips,\n  paramParser,\n  passFiltersCluster,\n  removeFilterParam as _removeFilterParam,\n  addFilterParam as _addFilterParam,\n  translateSortParams,\n  updateSearchParams,\n  compareSemVer,\n  toValidSemVer,\n} from '../Common/Tables';\nimport Loading from '../Loading/Loading';\nimport messages from '../../Messages';\nimport {\n  ErrorState,\n  NoMatchingClusters,\n  NoRecsForClusters,\n} from '../MessageState/EmptyStates';\nimport { coerce } from 'semver';\nimport { BASE_PATH } from '../../Routes';\n\nconst ClustersListTable = ({\n  query: { isError, isUninitialized, isFetching, isSuccess, data, refetch },\n}) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const updateFilters = (payload) =>\n    dispatch(updateClustersListFilters(payload));\n  const filters = useSelector(({ filters }) => filters.clustersListState);\n\n  const clusters = data?.data || [];\n  const page = filters.offset / filters.limit + 1;\n\n  const [filteredRows, setFilteredRows] = useState([]);\n  const [displayedRows, setDisplayedRows] = useState([]);\n  // helps to distinguish the state when the API data received but not yet filtered\n  const [rowsFiltered, setRowsFiltered] = useState(false);\n  const [filterBuilding, setFilterBuilding] = useState(true);\n  const { search } = useLocation();\n  const loadingState = isUninitialized || isFetching || !rowsFiltered;\n  const errorState = isError;\n  const noMatch = clusters.length > 0 && filteredRows.length === 0;\n  const successState = isSuccess;\n\n  const removeFilterParam = (param) =>\n    _removeFilterParam(filters, updateFilters, param);\n\n  const addFilterParam = (param, values) =>\n    _addFilterParam(filters, updateFilters, param, values);\n\n  useEffect(() => {\n    setDisplayedRows(buildDisplayedRows(filteredRows));\n    setRowsFiltered(true);\n  }, [filteredRows, filters.limit, filters.offset]);\n\n  useEffect(() => {\n    setFilteredRows(buildFilteredRows(clusters));\n  }, [\n    data,\n    filters.text,\n    filters.version,\n    filters.hits,\n    filters.sortDirection,\n    filters.sortIndex,\n  ]);\n\n  useEffect(() => {\n    if (search && filterBuilding) {\n      const paramsObject = paramParser(search);\n\n      if (paramsObject.sort) {\n        const sortObj = translateSortParams(paramsObject.sort);\n        paramsObject.sortIndex = CLUSTERS_LIST_COLUMNS_KEYS.indexOf(\n          sortObj.name\n        );\n        paramsObject.sortDirection = sortObj.direction;\n      }\n      paramsObject.offset &&\n        (paramsObject.offset = Number(paramsObject.offset[0]));\n      paramsObject.limit &&\n        (paramsObject.limit = Number(paramsObject.limit[0]));\n      paramsObject.impacting &&\n        !Array.isArray(paramsObject.impacting) &&\n        (paramsObject.impacting = [`${paramsObject.impacting}`]);\n      updateFilters({ ...filters, ...paramsObject });\n    }\n    setFilterBuilding(false);\n  }, []);\n\n  useEffect(() => {\n    if (!filterBuilding) {\n      updateSearchParams(filters, CLUSTERS_LIST_COLUMNS_KEYS);\n    }\n  }, [filters, filterBuilding]);\n\n  const buildFilteredRows = (items) => {\n    setRowsFiltered(false);\n    const filtered = items.filter((it) => {\n      return passFiltersCluster(it, filters);\n    });\n    const mapped = filtered.map((it, index) => {\n      if (\n        it.cluster_version !== undefined &&\n        it.cluster_version !== '' &&\n        !valid(coerce(it.cluster_version))\n      ) {\n        console.error(\n          `Cluster version ${it.cluster_version} has invalid format!`\n        );\n      }\n      const ver = toValidSemVer(it.cluster_version);\n\n      return {\n        entity: it,\n        cells: [\n          <span key={index}>\n            <Link to={`${BASE_PATH}/clusters/${it.cluster_id}`}>\n              {it.cluster_name || it.cluster_id}\n            </Link>\n          </span>,\n          ver === '0.0.0' ? intl.formatMessage(messages.nA) : ver,\n          it.total_hit_count,\n          it.hits_by_total_risk?.[4] || 0,\n          it.hits_by_total_risk?.[3] || 0,\n          it.hits_by_total_risk?.[2] || 0,\n          it.hits_by_total_risk?.[1] || 0,\n          <span key={index}>\n            {it.last_checked_at ? (\n              <DateFormat\n                extraTitle={`${intl.formatMessage(messages.lastSeen)}: `}\n                date={it.last_checked_at}\n                variant=\"relative\"\n              />\n            ) : (\n              <Tooltip\n                key={index}\n                content={\n                  <span>\n                    {intl.formatMessage(messages.lastSeen) + ': '}\n                    {intl.formatMessage(messages.nA)}\n                  </span>\n                }\n              >\n                <span>{intl.formatMessage(messages.nA)}</span>\n              </Tooltip>\n            )}\n          </span>,\n        ],\n      };\n    });\n    const sorted =\n      filters.sortIndex === -1\n        ? mapped\n        : mapped.sort((a, b) => {\n            let fst, snd;\n            const d = filters.sortDirection === SortByDirection.asc ? 1 : -1;\n            switch (filters.sortIndex) {\n              case CLUSTERS_TABLE_CELL_NAME:\n                fst = a.entity.cluster_name || a.entity.cluster_id;\n                snd = b.entity.cluster_name || b.entity.cluster_id;\n                return fst.localeCompare(snd) ? fst.localeCompare(snd) * d : 0;\n              case CLUSTERS_TABLE_CELL_VERSION:\n                return compareSemVer(\n                  toValidSemVer(a.entity.cluster_version),\n                  toValidSemVer(b.entity.cluster_version),\n                  d\n                );\n              case CLUSTERS_TABLE_CELL_LAST_SEEN:\n                fst = new Date(a.entity.last_checked_at || 0);\n                snd = new Date(b.entity.last_checked_at || 0);\n                return fst > snd ? d : snd > fst ? -d : 0;\n              default:\n                fst = a.cells[filters.sortIndex];\n                snd = b.cells[filters.sortIndex];\n                return fst > snd ? d : snd > fst ? -d : 0;\n            }\n          });\n    return sorted;\n  };\n\n  const buildDisplayedRows = (items) =>\n    items.slice(\n      filters.limit * (page - 1),\n      filters.limit * (page - 1) + filters.limit\n    );\n\n  const filterConfigItems = [\n    {\n      label: intl.formatMessage(messages.name).toLowerCase(),\n      filterValues: {\n        key: 'text-filter',\n        onChange: (_event, value) =>\n          updateFilters({ ...filters, offset: 0, text: value }),\n        value: filters.text,\n        placeholder: intl.formatMessage(messages.filterByName),\n      },\n    },\n    {\n      label: intl.formatMessage(messages.version),\n      placeholder: intl.formatMessage(messages.filterByVersion),\n      type: conditionalFilterType.checkbox,\n      filterValues: {\n        id: 'version-filter',\n        key: 'version-filter',\n        onChange: (event, value) => addFilterParam('version', value),\n        value: filters.version,\n        items: uniqBy(\n          clusters\n            .filter(\n              (c) => c.cluster_version !== undefined && c.cluster_version !== ''\n            )\n            .map((c) => ({\n              value: toValidSemVer(c.cluster_version),\n            }))\n            .sort((a, b) =>\n              compareSemVer(\n                toValidSemVer(a.cluster_version),\n                toValidSemVer(b.cluster_version),\n                1\n              )\n            )\n            .reverse(), // should start from the latest version\n          'value'\n        ),\n      },\n    },\n    {\n      label: CLUSTER_FILTER_CATEGORIES.hits.title,\n      type: CLUSTER_FILTER_CATEGORIES.hits.type,\n      id: CLUSTER_FILTER_CATEGORIES.hits.urlParam,\n      value: `checkbox-${CLUSTER_FILTER_CATEGORIES.hits.urlParam}`,\n      filterValues: {\n        key: `${CLUSTER_FILTER_CATEGORIES.hits.urlParam}-filter`,\n        onChange: (_event, values) =>\n          addFilterParam(CLUSTER_FILTER_CATEGORIES.hits.urlParam, values),\n        value: filters.hits,\n        items: CLUSTER_FILTER_CATEGORIES.hits.values,\n      },\n    },\n  ];\n\n  const activeFiltersConfig = {\n    showDeleteButton: true,\n    deleteTitle: intl.formatMessage(messages.resetFilters),\n    filters: buildFilterChips(filters, CLUSTER_FILTER_CATEGORIES),\n    onDelete: (_event, itemsToRemove, isAll) => {\n      if (isAll) {\n        if (isEqual(filters, CLUSTERS_LIST_INITIAL_STATE)) {\n          refetch();\n        } else {\n          resetFilters(filters, CLUSTERS_LIST_INITIAL_STATE, updateFilters);\n        }\n      } else {\n        itemsToRemove.map((item) => {\n          const newFilter = {\n            [item.urlParam]: Array.isArray(filters[item.urlParam])\n              ? filters[item.urlParam].filter(\n                  (value) => String(value) !== String(item.chips[0].value)\n                )\n              : '',\n          };\n          newFilter[item.urlParam].length > 0\n            ? updateFilters({ ...filters, ...newFilter })\n            : removeFilterParam(item.urlParam);\n        });\n      }\n    },\n  };\n\n  const onSort = (_e, index, direction) => {\n    setRowsFiltered(false);\n    updateFilters({ ...filters, sortIndex: index, sortDirection: direction });\n  };\n\n  return (\n    <>\n      {isSuccess && clusters.length === 0 ? (\n        <NoRecsForClusters /> // TODO: do not mix this logic in the table component\n      ) : (\n        <div id=\"clusters-list-table\" data-ouia-safe={!loadingState}>\n          <PrimaryToolbar\n            pagination={{\n              itemCount: filteredRows.length,\n              page,\n              perPage: filters.limit,\n              onSetPage: (_event, page) => {\n                setRowsFiltered(false);\n                return updateFilters({\n                  ...filters,\n                  offset: filters.limit * (page - 1),\n                });\n              },\n              onPerPageSelect: (_event, perPage) => {\n                setRowsFiltered(false);\n                return updateFilters({ ...filters, limit: perPage, offset: 0 });\n              },\n              isCompact: true,\n              ouiaId: 'pager',\n            }}\n            filterConfig={{ items: filterConfigItems }}\n            activeFiltersConfig={activeFiltersConfig}\n          />\n          <Table\n            aria-label=\"Table of clusters\"\n            ouiaId=\"clusters\"\n            ouiaSafe={!loadingState}\n            variant={TableVariant.compact}\n            cells={CLUSTERS_LIST_COLUMNS}\n            rows={\n              errorState || loadingState || noMatch ? (\n                [\n                  {\n                    fullWidth: true,\n                    cells: [\n                      {\n                        props: {\n                          colSpan: CLUSTERS_LIST_COLUMNS.length + 1,\n                        },\n                        title: errorState ? (\n                          <ErrorState />\n                        ) : loadingState ? (\n                          <Loading />\n                        ) : (\n                          <NoMatchingClusters />\n                        ),\n                      },\n                    ],\n                  },\n                ]\n              ) : successState ? (\n                displayedRows\n              ) : (\n                <ErrorState />\n              )\n            }\n            sortBy={{\n              index: filters.sortIndex,\n              direction: filters.sortDirection,\n            }}\n            onSort={onSort}\n            isStickyHeader\n          >\n            <TableHeader />\n            <TableBody />\n          </Table>\n          <Pagination\n            ouiaId=\"pager\"\n            itemCount={filteredRows.length}\n            page={filters.offset / filters.limit + 1}\n            perPage={Number(filters.limit)}\n            onSetPage={(_e, page) =>\n              updateFilters({\n                ...filters,\n                offset: filters.limit * (page - 1),\n              })\n            }\n            onPerPageSelect={(_e, perPage) =>\n              updateFilters({ ...filters, limit: perPage, offset: 0 })\n            }\n            widgetId={`pagination-options-menu-bottom`}\n            variant={PaginationVariant.bottom}\n          />\n        </div>\n      )}\n    </>\n  );\n};\n\nClustersListTable.propTypes = {\n  query: PropTypes.object.isRequired,\n};\n\nexport { ClustersListTable };\n","import React from 'react';\nimport { useGetClustersQuery } from '../../Services/SmartProxy';\nimport { ClustersListTable } from './ClustersListTable';\n\nconst ClustersListTableWrapper = () => {\n  const query = useGetClustersQuery();\n\n  return <ClustersListTable query={query} />;\n};\n\nexport default ClustersListTableWrapper;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\n\nimport PageHeader from '@redhat-cloud-services/frontend-components/PageHeader';\n\nimport messages from '../../Messages';\nimport ClustersListTable from '../ClustersListTable';\nimport { Title } from '@patternfly/react-core';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\n\nconst ClustersList = () => {\n  const intl = useIntl();\n  const chrome = useChrome();\n\n  chrome.updateDocumentTitle(\n    intl.formatMessage(messages.documentTitle, {\n      subnav: intl.formatMessage(messages.clusters),\n    })\n  );\n\n  return (\n    <React.Fragment>\n      <PageHeader className=\"ins-c-clusters-header\">\n        <Title headingLevel=\"h1\" ouiaId=\"page-header\">\n          {`${intl.formatMessage(messages.insightsHeader)} ${intl\n            .formatMessage(messages.clusters)\n            .toLowerCase()}`}\n        </Title>\n      </PageHeader>\n      <section className=\"pf-l-page__main-section pf-c-page__main-section\">\n        <ClustersListTable />\n      </section>\n    </React.Fragment>\n  );\n};\n\nexport default ClustersList;\n","import capitalize from 'lodash/capitalize';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { useEffect, useState } from 'react';\nimport { coerce, compare, valid } from 'semver';\nimport {\n  CLUSTER_FILTER_CATEGORIES,\n  FILTER_CATEGORIES,\n  RULE_CATEGORIES,\n} from '../../AppConstants';\nimport {\n  hasAnyValueGreaterThanZero,\n  remappingSeverity,\n} from '../../Utilities/Workloads';\n\nexport const passFilters = (rule, filters) =>\n  Object.entries(filters).every(([filterKey, filterValue]) => {\n    switch (filterKey) {\n      case 'text':\n        return rule.description\n          .toLowerCase()\n          .includes(filterValue.toLowerCase());\n      case FILTER_CATEGORIES.total_risk.urlParam:\n        return filterValue.includes(String(rule.total_risk));\n      case FILTER_CATEGORIES.category.urlParam:\n        return rule.tags.find((c) =>\n          filterValue.includes(String(RULE_CATEGORIES[c]))\n        );\n      case FILTER_CATEGORIES.impact.urlParam:\n        return filterValue.includes(String(rule.impact));\n      case FILTER_CATEGORIES.impacting.urlParam:\n        return filterValue.length > 0\n          ? filterValue.some((v) => {\n              if (v === 'true') {\n                return rule.impacted_clusters_count > 0;\n              }\n              if (v === 'false') {\n                return rule.impacted_clusters_count === 0;\n              }\n            })\n          : true;\n      case FILTER_CATEGORIES.likelihood.urlParam:\n        return filterValue.includes(String(rule.likelihood));\n      case FILTER_CATEGORIES.rule_status.urlParam:\n        return (\n          filterValue === 'all' ||\n          (filterValue === 'disabled' && rule.disabled) ||\n          (filterValue === 'enabled' && !rule.disabled)\n        );\n      case FILTER_CATEGORIES.res_risk.urlParam:\n        return filterValue.includes(String(rule.resolution_risk));\n      default:\n        return true;\n    }\n  });\n\nexport const passFiltersCluster = (cluster, filters) =>\n  Object.entries(filters).every(([filterKey, filterValue]) => {\n    switch (filterKey) {\n      case 'text':\n        return (cluster.cluster_name || cluster.cluster_id)\n          .toLowerCase()\n          .includes(filterValue.toLowerCase());\n      case CLUSTER_FILTER_CATEGORIES.hits.urlParam:\n        return (\n          // clusters with at least one rule hit\n          (filterValue.length === 0 && parseInt(cluster.total_hit_count) > 0) ||\n          // all clusters\n          filterValue.includes('all') ||\n          // clusters with at least one rule hit for any of the active risk filters\n          filterValue.some((v) => cluster.hits_by_total_risk[v] > 0)\n        );\n      case 'version':\n        return (\n          filterValue.length === 0 ||\n          filterValue.includes(toValidSemVer(cluster.cluster_version))\n        );\n      default:\n        return true;\n    }\n  });\n\nconst pruneFilters = (localFilters, filterCategories) => {\n  const prunedFilters = Object.entries(localFilters || {});\n  return prunedFilters.reduce((arr, it) => {\n    const [key, item] = it;\n    if (filterCategories[key]) {\n      const category = filterCategories[key];\n      const chips = Array.isArray(item)\n        ? item.map((value) => {\n            const selectedCategoryValue = category.values.find(\n              (values) => values.value === String(value)\n            );\n            return selectedCategoryValue\n              ? {\n                  name:\n                    selectedCategoryValue.text || selectedCategoryValue.label,\n                  value,\n                }\n              : { name: value, value };\n          })\n        : [\n            {\n              name: category.values.find(\n                (values) => values.value === String(item)\n              ).label,\n              value: item,\n            },\n          ];\n      return [\n        ...arr,\n        {\n          category: capitalize(category.title),\n          chips,\n          urlParam: category.urlParam,\n        },\n      ];\n    } else if (key === 'text') {\n      return [\n        ...arr,\n        ...(item.length > 0\n          ? [\n              {\n                category: 'Name',\n                chips: [{ name: item, value: item }],\n                urlParam: key,\n              },\n            ]\n          : []),\n      ];\n    } else if (key === 'version') {\n      return [\n        ...arr,\n        ...(item.length > 0\n          ? [\n              {\n                category: 'Version',\n                chips: item.map((it) => ({\n                  name: it,\n                  value: it,\n                })),\n                urlParam: key,\n              },\n            ]\n          : []),\n      ];\n    } else if (key === 'namespace_name') {\n      return [\n        ...arr,\n        ...(item.length > 0\n          ? [\n              {\n                category: 'Namespace name',\n                chips: [{ name: item, value: item }],\n                urlParam: key,\n              },\n            ]\n          : []),\n      ];\n    } else if (key === 'cluster_name') {\n      return [\n        ...arr,\n        ...(item.length > 0\n          ? [\n              {\n                category: 'Cluster name',\n                chips: [{ name: item, value: item }],\n                urlParam: key,\n              },\n            ]\n          : []),\n      ];\n    }\n  }, []);\n};\n\nexport const buildFilterChips = (filters, categories) => {\n  const localFilters = cloneDeep(filters);\n  delete localFilters.sortIndex;\n  delete localFilters.sortDirection;\n  delete localFilters.sort;\n  delete localFilters.offset;\n  delete localFilters.limit;\n  localFilters?.hits &&\n    localFilters.hits.length === 0 &&\n    delete localFilters.hits;\n  return pruneFilters(localFilters, categories);\n};\n\n// parses url params for use in table/filter chips\nexport const paramParser = (search) => {\n  const searchParams = new URLSearchParams(search);\n  return Array.from(searchParams).reduce(\n    (acc, [key, value]) => ({\n      ...acc,\n      [key]: [\n        'text',\n        'first',\n        'rule_status',\n        'sort',\n        'cluster_name',\n        'namespace_name',\n      ].includes(key)\n        ? value // just copy the full value\n        : value === 'true' || value === 'false'\n        ? JSON.parse(value) // parse boolean\n        : // parse array of values\n          value.split(','),\n    }),\n    {}\n  );\n};\n\nexport const translateSortParams = (value) => ({\n  name: value.substring(value.startsWith('-') ? 1 : 0),\n  direction: value.startsWith('-') ? 'desc' : 'asc',\n});\n\nexport const translateSortValue = (index, indexMapping, direction) => {\n  if (!['desc', 'asc'].includes(direction)) {\n    console.error('Invalid sort parameters (is not asc nor desc)');\n  }\n  return `${direction === 'asc' ? '' : '-'}${indexMapping[index]}`;\n};\n\n// TODO: remove since unused\nexport const debounce = (value, delay) => {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [delay, value]);\n\n  return debouncedValue;\n};\n\nexport const updateSearchParams = (filters = {}, columnMapping) => {\n  const url = new URL(window.location.origin + window.location.pathname);\n  // separately check the sort param\n  url.searchParams.set(\n    'sort',\n    translateSortValue(filters.sortIndex, columnMapping, filters.sortDirection)\n  );\n  // check the rest of filters\n  Object.entries(filters).forEach(([key, value]) => {\n    return (\n      key !== 'sortIndex' &&\n      key !== 'sortDirection' &&\n      key !== 'sort' &&\n      value !== '' &&\n      !(Array.isArray(value) && value.length === 0) &&\n      url.searchParams.set(key, value)\n    );\n  });\n  window.history.replaceState(null, null, url.href);\n};\n\n// TODO: move to Utils.js\nexport const compareSemVer = (v1, v2, d) => d * compare(v1, v2);\nexport const toValidSemVer = (version) =>\n  coerce(version === undefined || !valid(coerce(version)) ? '0.0.0' : version)\n    .version;\n\nexport const removeFilterParam = (currentFilters, updateFilters, param) => {\n  const { [param]: omitted, ...newFilters } = { ...currentFilters, offset: 0 };\n  updateFilters({\n    ...newFilters,\n    ...(param === 'text'\n      ? { text: '' }\n      : param === 'hits'\n      ? { hits: [] }\n      : param === 'version'\n      ? { version: [] }\n      : {}),\n  });\n};\n\nexport const addFilterParam = (currentFilters, updateFilters, param, values) =>\n  values.length > 0\n    ? updateFilters({\n        ...currentFilters,\n        offset: 0,\n        ...{ [param]: values },\n      })\n    : removeFilterParam(currentFilters, updateFilters, param);\n\nexport const passFilterWorkloads = (workloads, filters) => {\n  const generalSeverityRemapped = remappingSeverity(\n    workloads.metadata.hits_by_severity,\n    'general'\n  );\n  return Object.entries(filters).every(([filterKey, filterValue]) => {\n    switch (filterKey) {\n      case 'cluster_name':\n        return (workloads.cluster.display_name || workloads.cluster.uuid)\n          .toLowerCase()\n          .includes(filterValue.toLowerCase());\n      case 'namespace_name':\n        return (workloads.namespace.name || workloads.namespace.uuid)\n          .toLowerCase()\n          .includes(filterValue.toLowerCase());\n      case 'severity':\n        return (\n          filterValue.length === 0 ||\n          hasAnyValueGreaterThanZero(generalSeverityRemapped, filters.severity)\n        );\n      default:\n        return true;\n    }\n  });\n};\n\nexport const passFilterWorkloadsRecs = (recommendation, filters) => {\n  return Object.entries(filters).some(([filterKey, filterValue]) => {\n    if (filterValue.length === 0) {\n      return false;\n    } else {\n      switch (filterKey) {\n        case 'description':\n          return recommendation.details\n            .toLowerCase()\n            .includes(filterValue.toLowerCase());\n        case 'object_id':\n          return recommendation.objects.some((obj) =>\n            obj.uid.toLowerCase().includes(filterValue.toLowerCase())\n          );\n        //NOTE IS NOT AVAILABLE IN THE API YET\n        /* case 'total_risk':\n        return filterValue.includes(String(recs.total_risk)); */\n        default:\n          return false;\n      }\n    }\n  });\n};\n","import React from 'react';\nimport { Card, CardBody } from '@patternfly/react-core';\nimport { List } from 'react-content-loader';\n\nconst Loading = () => (\n  <Card ouiaId=\"loading-skeleton\">\n    <CardBody>\n      <List />\n    </CardBody>\n  </Card>\n);\n\nexport default Loading;\n","import { SortByDirection } from '@patternfly/react-table';\nimport _, { isEmpty } from 'lodash';\n\nexport const SEVERITY_OPTIONS = [\n  {\n    value: 'critical',\n    label: 'Critical',\n    iconColor: 'var(--pf-global--danger-color--100)',\n    textColor: 'var(--pf-global--danger-color--100)',\n    hasIcon: true,\n  },\n  {\n    value: 'important',\n    label: 'Important',\n    iconColor: 'var(--pf-global--palette--orange-300)',\n    textColor: 'var(--pf-global--palette--orange-400)',\n    hasIcon: true,\n  },\n  {\n    value: 'moderate',\n    label: 'Moderate',\n    iconColor: 'var(--pf-global--warning-color--100)',\n    textColor: 'var(--pf-global--warning-color--200)',\n    hasIcon: true,\n  },\n  {\n    value: 'low',\n    label: 'Low',\n    iconColor: 'var(--pf-global--Color--200)',\n    textColor: 'var(--pf-global--default-color--300)',\n    hasIcon: true,\n  },\n  {\n    value: 'none',\n    label: 'Unknown',\n  },\n];\n\nexport const remappingSeverity = (obj, mode) => {\n  const mapping = {\n    1: 'low',\n    2: 'moderate',\n    3: 'important',\n    4: 'critical',\n  };\n  let updatedObj = {};\n\n  if (mode === 'general' || mode === 'label') {\n    for (const key in obj) {\n      if (key in mapping) {\n        updatedObj[mapping[key]] = obj[key];\n      }\n    }\n  } else {\n    updatedObj = mapping[obj];\n  }\n\n  return updatedObj;\n};\n\nexport const hasAnyValueGreaterThanZero = (obj, stringsToCheck) => {\n  for (const key of stringsToCheck) {\n    if (obj[key] > 0) {\n      return true; // Return true if any matching string has a value greater than 0\n    }\n  }\n};\n\nexport const severityTypeToText = (value) => {\n  value = parseInt(value);\n  if (value === 1) {\n    return 'Low';\n  } else if (value === 2) {\n    return 'Moderate';\n  } else if (value === 3) {\n    return 'Important';\n  } else {\n    return 'Critical';\n  }\n};\n\nexport const filtersAreApplied = (params) => {\n  const cleanedUpParams = _.cloneDeep(params);\n  delete cleanedUpParams.sortIndex;\n  delete cleanedUpParams.sortDirection;\n  delete cleanedUpParams.offset;\n  delete cleanedUpParams.limit;\n  return Object.values(cleanedUpParams).filter((value) => !isEmpty(value))\n    .length\n    ? true\n    : false;\n};\n\nexport const capitalize = (str) => {\n  return str?.charAt(0).toUpperCase() + str?.slice(1);\n};\n\nexport const createChips = (category, value) => {\n  if (category.values) {\n    const selectedCategoryValue = category.values.find(\n      (values) => values.value === String(value)\n    );\n\n    return selectedCategoryValue\n      ? {\n          name: selectedCategoryValue.label || selectedCategoryValue.text,\n          value,\n        }\n      : { name: value, value };\n  }\n\n  return { name: value, value };\n};\n\nexport const pruneWorkloadsRulesFilters = (localFilters, filterCategories) => {\n  const prunedFilters = Object.entries(localFilters);\n  return prunedFilters.reduce((arr, [name, value]) => {\n    if (filterCategories[name]) {\n      const category = filterCategories[name];\n      if (\n        (Array.isArray(value) && value.length > 0) ||\n        (typeof value === 'string' && value.trim() !== '')\n      ) {\n        const chips = Array.isArray(value)\n          ? value.map((v) => createChips(category, v))\n          : [createChips(category, value)];\n\n        arr.push({\n          category: capitalize(category.label),\n          chips,\n          urlParam: category.urlParam,\n        });\n      }\n    } else if (\n      (name === 'description' || name === 'object_id') &&\n      value.trim() !== ''\n    ) {\n      arr.push({\n        category: capitalize(name.replace('_', ' ')),\n        chips: [{ name: value, value }],\n        urlParam: name,\n      });\n    }\n\n    return arr;\n  }, []);\n};\n\nexport const switchSort = (sortIndex, item) => {\n  const rule = item[0].rule;\n  switch (sortIndex) {\n    case 1:\n      return rule.details;\n    case 2:\n      return rule.total_risk;\n    case 3:\n      return rule.objects.length;\n    case 4:\n      return rule.modified;\n  }\n};\n\nexport const sortWithSwitch = (sortIndex, sortDirection, filteredRows) => {\n  return sortIndex >= 1\n    ? [...filteredRows]?.sort((a, b) => {\n        const d = sortDirection === SortByDirection.asc ? 1 : -1;\n        return switchSort(sortIndex, a) > switchSort(sortIndex, b)\n          ? d\n          : switchSort(sortIndex, b) > switchSort(sortIndex, a)\n          ? -d\n          : 0;\n      })\n    : [...filteredRows];\n};\n\nexport const flatMapRows = (filteredRows, expandFirst) => {\n  return filteredRows.flatMap((row, index) => {\n    const updatedRow = [...row];\n    if (expandFirst && index === 0) {\n      row[0].isOpen = true;\n    }\n    row[1].parent = index * 2;\n    return updatedRow;\n  });\n};\n"],"names":["ClustersListTable","query","isError","isUninitialized","isFetching","isSuccess","data","refetch","intl","useIntl","dispatch","useDispatch","updateFilters","payload","updateClustersListFilters","filters","useSelector","clustersListState","clusters","page","offset","limit","useState","filteredRows","setFilteredRows","displayedRows","setDisplayedRows","rowsFiltered","setRowsFiltered","filterBuilding","setFilterBuilding","search","useLocation","loadingState","errorState","noMatch","length","successState","addFilterParam","param","values","_addFilterParam","useEffect","buildDisplayedRows","buildFilteredRows","text","version","hits","sortDirection","sortIndex","paramsObject","paramParser","sort","sortObj","translateSortParams","CLUSTERS_LIST_COLUMNS_KEYS","indexOf","name","direction","Number","impacting","Array","isArray","updateSearchParams","items","mapped","filter","it","passFiltersCluster","map","index","undefined","cluster_version","valid","coerce","console","error","ver","toValidSemVer","entity","cells","key","Link","to","BASE_PATH","cluster_id","cluster_name","formatMessage","messages","nA","total_hit_count","hits_by_total_risk","last_checked_at","DateFormat","extraTitle","lastSeen","date","variant","Tooltip","content","a","b","fst","snd","d","SortByDirection","asc","CLUSTERS_TABLE_CELL_NAME","localeCompare","CLUSTERS_TABLE_CELL_VERSION","compareSemVer","CLUSTERS_TABLE_CELL_LAST_SEEN","Date","slice","filterConfigItems","label","toLowerCase","filterValues","onChange","_event","value","placeholder","filterByName","filterByVersion","type","conditionalFilterType","checkbox","id","event","uniqBy","c","reverse","CLUSTER_FILTER_CATEGORIES","title","urlParam","activeFiltersConfig","showDeleteButton","deleteTitle","resetFilters","buildFilterChips","onDelete","itemsToRemove","isAll","isEqual","CLUSTERS_LIST_INITIAL_STATE","item","newFilter","String","chips","_removeFilterParam","pagination","itemCount","perPage","onSetPage","onPerPageSelect","isCompact","ouiaId","filterConfig","Table","ouiaSafe","TableVariant","compact","CLUSTERS_LIST_COLUMNS","rows","fullWidth","props","colSpan","Loading","sortBy","onSort","_e","isStickyHeader","TableHeader","TableBody","Pagination","widgetId","PaginationVariant","bottom","propTypes","PropTypes","isRequired","useGetClustersQuery","useChrome","updateDocumentTitle","documentTitle","subnav","PageHeader","className","Title","headingLevel","insightsHeader","passFilters","rule","Object","entries","every","filterKey","filterValue","description","includes","FILTER_CATEGORIES","total_risk","category","tags","find","RULE_CATEGORIES","impact","some","v","impacted_clusters_count","likelihood","rule_status","disabled","res_risk","resolution_risk","cluster","parseInt","categories","localFilters","cloneDeep","filterCategories","reduce","arr","selectedCategoryValue","capitalize","pruneFilters","searchParams","URLSearchParams","from","acc","JSON","parse","split","substring","startsWith","indexMapping","columnMapping","url","URL","window","location","origin","pathname","set","forEach","history","replaceState","href","v1","v2","compare","removeFilterParam","currentFilters","passFilterWorkloads","workloads","generalSeverityRemapped","remappingSeverity","metadata","hits_by_severity","display_name","uuid","namespace","hasAnyValueGreaterThanZero","severity","passFilterWorkloadsRecs","recommendation","details","objects","obj","uid","Card","CardBody","SEVERITY_OPTIONS","iconColor","textColor","hasIcon","mode","mapping","updatedObj","stringsToCheck","filtersAreApplied","params","cleanedUpParams","_","isEmpty","str","charAt","toUpperCase","createChips","pruneWorkloadsRulesFilters","trim","push","replace","switchSort","modified","sortWithSwitch","flatMapRows","expandFirst","flatMap","row","updatedRow","isOpen","parent"],"sourceRoot":""}