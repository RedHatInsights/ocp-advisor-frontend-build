{"version":3,"file":"js/985.bc70ad9fd3ea2f6aeec2.js","mappings":"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","sources":["webpack:///./src/Components/Modals/DisableRule.js","webpack:///./src/Components/Recommendation/RuleDetails.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\n\nimport { Button } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport { Checkbox } from '@patternfly/react-core/dist/js/components/Checkbox/Checkbox';\nimport { Form } from '@patternfly/react-core/dist/js/components/Form/Form';\nimport { FormGroup } from '@patternfly/react-core/dist/js/components/Form/FormGroup';\nimport { Modal } from '@patternfly/react-core/dist/js/components/Modal/Modal';\nimport { TextInput } from '@patternfly/react-core/dist/js/components/TextInput/TextInput';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\n\nimport messages from '../../Messages';\nimport { disableRuleForCluster, useSetAckMutation } from '../../Services/Acks';\n\nconst DisableRule = ({\n  isModalOpen,\n  handleModalToggle,\n  rule,\n  afterFn,\n  host,\n  hosts,\n}) => {\n  const intl = useIntl();\n  const [justification, setJustificaton] = useState('');\n  const [singleSystem, setSingleSystem] = useState(\n    host !== undefined || hosts.length > 0\n  );\n  const [setAck] = useSetAckMutation();\n  const dispatch = useDispatch();\n  const notify = (data) => dispatch(addNotification(data));\n\n  const bulkHostActions = async () => {\n    // disable for a group of hosts (clusters)\n    try {\n      const requests = hosts.map((h) =>\n        disableRuleForCluster({\n          uuid: h.id,\n          recId: rule.rule_id,\n          justification,\n        })\n      );\n      await Promise.all(requests);\n      notify({\n        variant: 'success',\n        dismissable: true,\n        timeout: true,\n        title: intl.formatMessage(messages.recSuccessfullyDisabledForCluster),\n      });\n      afterFn && afterFn();\n    } catch (error) {\n      notify({\n        variant: 'danger',\n        dismissable: true,\n        title: intl.formatMessage(messages.error),\n        description: `${error}`,\n      });\n    }\n  };\n\n  const disableRule = async () => {\n    if (!rule.disabled && hosts.length === 0) {\n      try {\n        if (singleSystem) {\n          // disable the rec for this single cluster\n          await disableRuleForCluster({\n            uuid: host,\n            recId: rule.rule_id,\n            justification,\n          });\n          notify({\n            variant: 'success',\n            timeout: true,\n            dismissable: true,\n            title: intl.formatMessage(\n              messages.recSuccessfullyDisabledForCluster\n            ),\n          });\n        } else {\n          // disable the whole rec\n          await setAck({\n            rule_id: rule.rule_id,\n            justification,\n          }).unwrap();\n          notify({\n            variant: 'success',\n            timeout: true,\n            dismissable: true,\n            title: intl.formatMessage(messages.recSuccessfullyDisabled),\n          });\n        }\n        setJustificaton('');\n        afterFn && afterFn();\n      } catch (error) {\n        notify({\n          variant: 'danger',\n          dismissable: true,\n          title: intl.formatMessage(messages.error),\n          description: `${error}`,\n        });\n      }\n    } else {\n      bulkHostActions();\n    }\n    handleModalToggle(false);\n  };\n\n  return (\n    <Modal\n      variant=\"small\"\n      title={intl.formatMessage(messages.disableRule)}\n      isOpen={isModalOpen}\n      onClose={() => {\n        handleModalToggle();\n        setJustificaton('');\n      }}\n      actions={[\n        <Button\n          key=\"confirm\"\n          variant=\"primary\"\n          onClick={() => disableRule()}\n          ouiaId=\"confirm\"\n        >\n          {intl.formatMessage(messages.save)}\n        </Button>,\n        <Button\n          key=\"cancel\"\n          variant=\"link\"\n          onClick={() => {\n            handleModalToggle(false);\n            setJustificaton('');\n          }}\n          ouiaId=\"cancel\"\n        >\n          {intl.formatMessage(messages.cancel)}\n        </Button>,\n      ]}\n    >\n      {intl.formatMessage(messages.disableRuleBody)}\n      <Form>\n        <FormGroup fieldId=\"blank-form\" />\n        {(host || hosts.length > 0) && (\n          <FormGroup fieldId=\"disable-rule-one-system\">\n            <Checkbox\n              isChecked={singleSystem}\n              onChange={() => {\n                setSingleSystem(!singleSystem);\n              }}\n              label={\n                host\n                  ? intl.formatMessage(messages.disableRuleSingleCluster)\n                  : intl.formatMessage(messages.disableRuleForClusters)\n              }\n              id=\"disable-rule-one-system\"\n              name=\"disable-rule-one-system\"\n            />\n          </FormGroup>\n        )}\n        <FormGroup\n          label={intl.formatMessage(messages.justificationNote)}\n          fieldId=\"disable-rule-justification\"\n        >\n          <TextInput\n            type=\"text\"\n            id=\"disable-rule-justification\"\n            aria-describedby=\"disable-rule-justification\"\n            value={justification}\n            onChange={(text) => setJustificaton(text)}\n            onKeyDown={(e) =>\n              e.key === 'Enter' && (e.preventDefault(), disableRule())\n            }\n          />\n        </FormGroup>\n      </Form>\n    </Modal>\n  );\n};\n\nDisableRule.propTypes = {\n  isModalOpen: PropTypes.bool,\n  rule: PropTypes.object,\n  handleModalToggle: PropTypes.func,\n  afterFn: PropTypes.func,\n  host: PropTypes.object,\n  hosts: PropTypes.array,\n};\n\nDisableRule.defaultProps = {\n  isModalOpen: false,\n  rule: {},\n  handleModalToggle: () => undefined,\n  afterFn: () => undefined,\n  host: undefined,\n  hosts: [],\n};\n\nexport default DisableRule;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\n\nimport Loading from '../Loading/Loading';\n\nconst RuleDetails = ({\n  rule,\n  header,\n  isDetailsPage,\n  resolutionRisk,\n  riskOfChangeDesc,\n  onFeedbackChanged,\n  children,\n}) => {\n  const intl = useIntl();\n\n  return (\n    <div className=\"advisor\">\n      <AsyncComponent\n        appName=\"advisor\"\n        module=\"./AdvisorRecommendationDetails\"\n        fallback={<Loading />}\n        rule={rule}\n        customItnl\n        intlProps={intl}\n        isDetailsPage={isDetailsPage}\n        header={header}\n        resolutionRisk={resolutionRisk}\n        isOpenShift\n        riskOfChangeDesc={riskOfChangeDesc}\n        onFeedbackChanged={onFeedbackChanged}\n      >\n        {children}\n      </AsyncComponent>\n    </div>\n  );\n};\n\nRuleDetails.propTypes = {\n  header: PropTypes.any,\n  isDetailsPage: PropTypes.bool.isRequired,\n  rule: PropTypes.object.isRequired,\n  resolutionRisk: PropTypes.number,\n  riskOfChangeDesc: PropTypes.string,\n  onFeedbackChanged: PropTypes.func,\n  children: PropTypes.node,\n};\n\nexport default RuleDetails;\n"],"names":["DisableRule","isModalOpen","handleModalToggle","rule","afterFn","host","hosts","intl","useIntl","useState","justification","setJustificaton","undefined","length","singleSystem","setSingleSystem","useSetAckMutation","setAck","dispatch","useDispatch","notify","data","addNotification","bulkHostActions","requests","map","h","disableRuleForCluster","uuid","id","recId","rule_id","Promise","all","variant","dismissable","timeout","title","formatMessage","messages","description","disableRule","disabled","unwrap","isOpen","onClose","actions","Button","key","onClick","ouiaId","fieldId","Checkbox","isChecked","onChange","label","name","TextInput","type","value","text","onKeyDown","e","preventDefault","propTypes","PropTypes","defaultProps","RuleDetails","header","isDetailsPage","resolutionRisk","riskOfChangeDesc","onFeedbackChanged","children","className","appName","module","fallback","customItnl","intlProps","isOpenShift"],"sourceRoot":""}