{"version":3,"file":"js/RulesTable.fbb157fd6eb2ce8358ef.js","mappings":"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","sources":["webpack:///./src/Components/RecsListTable/RecsListTable.js","webpack:///./src/Components/Common/Tables.js","webpack:///./src/Components/RecsListTable/index.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport {\n  SortByDirection,\n  Table,\n  TableBody,\n  TableHeader,\n  TableVariant,\n} from '@patternfly/react-table';\nimport { Card, CardBody } from '@patternfly/react-core/dist/js/components/Card';\nimport {\n  Pagination,\n  PaginationVariant,\n} from '@patternfly/react-core/dist/js/components/Pagination';\nimport { Stack } from '@patternfly/react-core/dist/js/layouts/Stack';\nimport {\n  Tooltip,\n  TooltipPosition,\n} from '@patternfly/react-core/dist/js/components/Tooltip';\n\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { InsightsLabel } from '@redhat-cloud-services/frontend-components/InsightsLabel';\nimport PrimaryToolbar from '@redhat-cloud-services/frontend-components/PrimaryToolbar/PrimaryToolbar';\n\nimport {\n  FILTER_CATEGORIES,\n  RECS_LIST_COLUMNS,\n  TOTAL_RISK_LABEL_LOWER,\n} from '../../AppConstants';\nimport messages from '../../Messages';\nimport {\n  RECS_LIST_INITIAL_STATE,\n  updateRecsListFilters as updateFilters,\n} from '../../Services/Filters';\nimport RuleLabels from '../RuleLabels/RuleLabels';\nimport { strong } from '../../Utilities/intlHelper';\nimport Loading from '../Loading/Loading';\nimport { ErrorState, NoMatchingRecs } from '../MessageState/EmptyStates';\nimport RuleDetails from '../Recommendation/RuleDetails';\nimport { passFilters } from '../Common/Tables';\n\nconst RecsListTable = ({ query }) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const filters = useSelector(({ filters }) => filters.recsListState);\n  const { isError, isUninitialized, isFetching, isSuccess, data } = query;\n  const recs = data?.recommendations || [];\n  const page = filters.offset / filters.limit + 1;\n  const [filteredRows, setFilteredRows] = useState([]);\n  const [displayedRows, setDisplayedRows] = useState([]);\n\n  useEffect(() => {\n    setDisplayedRows(\n      buildDisplayedRows(filteredRows, filters.sortIndex, filters.sortDirection)\n    );\n  }, [\n    filteredRows,\n    filters.limit,\n    filters.offset,\n    filters.sortIndex,\n    filters.sortDirection,\n  ]);\n\n  useEffect(() => {\n    setFilteredRows(buildFilteredRows(recs, filters));\n  }, [data, filters]);\n\n  // constructs array of rows (from the initial data) checking currently applied filters\n  const buildFilteredRows = (allRows, filters) => {\n    return allRows\n      .filter((rule) => passFilters(rule, filters))\n      .map((value, key) => [\n        {\n          isOpen: false,\n          rule: value,\n          cells: [\n            {\n              title: (\n                <span key={key}>\n                  <Link\n                    key={key}\n                    // https://github.com/RedHatInsights/ocp-advisor-frontend/issues/29\n                    to={`/recommendations/${\n                      process.env.NODE_ENV === 'development'\n                        ? value.rule_id.replaceAll('.', '%2E')\n                        : value.rule_id\n                    }`}\n                  >\n                    {' '}\n                    {value?.description || value?.rule_id}{' '}\n                  </Link>\n                  <RuleLabels rule={value} />\n                </span>\n              ),\n            },\n            {\n              title: value?.publish_date ? (\n                <DateFormat\n                  key={key}\n                  date={value.publish_date}\n                  variant=\"relative\"\n                />\n              ) : (\n                intl.formatMessage(messages.nA)\n              ),\n            },\n            {\n              title: (\n                <div key={key}>\n                  <Tooltip\n                    key={key}\n                    position={TooltipPosition.bottom}\n                    content={intl.formatMessage(\n                      messages.rulesDetailsTotalRiskBody,\n                      {\n                        risk:\n                          TOTAL_RISK_LABEL_LOWER[value.total_risk] ||\n                          intl.formatMessage(messages.undefined),\n                        strong: (str) => strong(str),\n                      }\n                    )}\n                  >\n                    {value?.total_risk ? (\n                      <InsightsLabel value={value.total_risk} />\n                    ) : (\n                      intl.formatMessage(messages.nA)\n                    )}\n                  </Tooltip>\n                </div>\n              ),\n            },\n            {\n              title: (\n                <div key={key}>{`${\n                  value?.impacted_clusters_count !== undefined\n                    ? value.impacted_clusters_count.toLocaleString()\n                    : intl.formatMessage(messages.nA)\n                }`}</div>\n              ),\n            },\n          ],\n        },\n        {\n          fullWidth: true,\n          cells: [\n            {\n              title: (\n                <section className=\"pf-m-light pf-l-page__main-section pf-c-page__main-section\">\n                  <Stack hasGutter>\n                    <RuleDetails\n                      rule={{\n                        ...value,\n                        impact: { impact: value.impact },\n                        // TODO: fix <Router> issue in the async component and then remove the line below\n                        impacted_clusters_count: undefined,\n                      }}\n                      isDetailsPage={false}\n                    />\n                  </Stack>\n                </section>\n              ),\n            },\n          ],\n        },\n      ]);\n  };\n\n  const buildDisplayedRows = (rows, index, direction) => {\n    const sortedRecommendations = [\n      'description',\n      'publish_date',\n      'total_risk',\n      'impacted_clusters_count',\n    ];\n    const sortingRows = [...rows].sort((firstItem, secondItem) => {\n      const fst = firstItem[0].rule[sortedRecommendations[index - 1]];\n      const snd = secondItem[0].rule[sortedRecommendations[index - 1]];\n      return fst > snd ? 1 : snd > fst ? -1 : 0;\n    });\n    if (direction === SortByDirection.desc) {\n      sortingRows.reverse();\n    }\n    return sortingRows\n      .slice(\n        filters.limit * (page - 1),\n        filters.limit * (page - 1) + filters.limit\n      )\n      .flatMap((row, index) => {\n        const updatedRow = [...row];\n        row[1].parent = index * 2;\n        return updatedRow;\n      });\n  };\n\n  const removeFilterParam = (param) => {\n    const filter = { ...filters, offset: 0 };\n    delete filter[param];\n    dispatch(\n      updateFilters({ ...filter, ...(param === 'text' ? { text: '' } : {}) })\n    );\n  };\n\n  // TODO: update URL when filters changed\n  const addFilterParam = (param, values) => {\n    values.length > 0\n      ? dispatch(\n          updateFilters({ ...filters, offset: 0, ...{ [param]: values } })\n        )\n      : removeFilterParam(param);\n  };\n\n  const toggleRulesDisabled = (rule_status) => {\n    dispatch(\n      updateFilters({\n        ...filters,\n        rule_status,\n        offset: 0,\n        ...(rule_status !== 'enabled' && { impacting: ['false'] }),\n      })\n    );\n  };\n\n  const filterConfigItems = [\n    {\n      label: intl.formatMessage(messages.name).toLowerCase(),\n      filterValues: {\n        key: 'text-filter',\n        onChange: (_event, value) =>\n          dispatch(updateFilters({ ...filters, text: value })),\n        value: filters.text,\n        placeholder: intl.formatMessage(messages.filterBy),\n      },\n    },\n    {\n      label: FILTER_CATEGORIES.total_risk.title,\n      type: FILTER_CATEGORIES.total_risk.type,\n      id: FILTER_CATEGORIES.total_risk.urlParam,\n      value: `checkbox-${FILTER_CATEGORIES.total_risk.urlParam}`,\n      filterValues: {\n        key: `${FILTER_CATEGORIES.total_risk.urlParam}-filter`,\n        onChange: (_event, values) =>\n          addFilterParam(FILTER_CATEGORIES.total_risk.urlParam, values),\n        value: filters.total_risk,\n        items: FILTER_CATEGORIES.total_risk.values,\n      },\n    },\n    {\n      label: FILTER_CATEGORIES.impact.title,\n      type: FILTER_CATEGORIES.impact.type,\n      id: FILTER_CATEGORIES.impact.urlParam,\n      value: `checkbox-${FILTER_CATEGORIES.impact.urlParam}`,\n      filterValues: {\n        key: `${FILTER_CATEGORIES.impact.urlParam}-filter`,\n        onChange: (_event, values) =>\n          addFilterParam(FILTER_CATEGORIES.impact.urlParam, values),\n        value: filters.impact,\n        items: FILTER_CATEGORIES.impact.values,\n      },\n    },\n    {\n      label: FILTER_CATEGORIES.likelihood.title,\n      type: FILTER_CATEGORIES.likelihood.type,\n      id: FILTER_CATEGORIES.likelihood.urlParam,\n      value: `checkbox-${FILTER_CATEGORIES.likelihood.urlParam}`,\n      filterValues: {\n        key: `${FILTER_CATEGORIES.likelihood.urlParam}-filter`,\n        onChange: (_event, values) =>\n          addFilterParam(FILTER_CATEGORIES.likelihood.urlParam, values),\n        value: filters.likelihood,\n        items: FILTER_CATEGORIES.likelihood.values,\n      },\n    },\n    {\n      label: FILTER_CATEGORIES.category.title,\n      type: FILTER_CATEGORIES.category.type,\n      id: FILTER_CATEGORIES.category.urlParam,\n      value: `checkbox-${FILTER_CATEGORIES.category.urlParam}`,\n      filterValues: {\n        key: `${FILTER_CATEGORIES.category.urlParam}-filter`,\n        onChange: (_event, values) =>\n          addFilterParam(FILTER_CATEGORIES.category.urlParam, values),\n        value: filters.category,\n        items: FILTER_CATEGORIES.category.values,\n      },\n    },\n    {\n      label: FILTER_CATEGORIES.rule_status.title,\n      type: FILTER_CATEGORIES.rule_status.type,\n      id: FILTER_CATEGORIES.rule_status.urlParam,\n      value: `radio-${FILTER_CATEGORIES.rule_status.urlParam}`,\n      filterValues: {\n        key: `${FILTER_CATEGORIES.rule_status.urlParam}-filter`,\n        onChange: (_event, value) => toggleRulesDisabled(value),\n        value: `${filters.rule_status}`,\n        items: FILTER_CATEGORIES.rule_status.values,\n      },\n    },\n    {\n      label: FILTER_CATEGORIES.impacting.title,\n      type: FILTER_CATEGORIES.impacting.type,\n      id: FILTER_CATEGORIES.impacting.urlParam,\n      value: `checkbox-${FILTER_CATEGORIES.impacting.urlParam}`,\n      filterValues: {\n        key: `${FILTER_CATEGORIES.impacting.urlParam}-filter`,\n        onChange: (e, values) =>\n          addFilterParam(FILTER_CATEGORIES.impacting.urlParam, values),\n        value: filters.impacting,\n        items: FILTER_CATEGORIES.impacting.values,\n      },\n    },\n  ];\n\n  const onSort = (_e, index, direction) => {\n    dispatch(\n      updateFilters({ ...filters, sortIndex: index, sortDirection: direction })\n    );\n  };\n\n  const capitalize = (string) => string[0].toUpperCase() + string.substring(1);\n\n  const pruneFilters = (localFilters, filterCategories) => {\n    const prunedFilters = Object.entries(localFilters);\n    return prunedFilters.length > 0\n      ? prunedFilters.reduce((arr, item) => {\n          if (filterCategories[item[0]]) {\n            const category = filterCategories[item[0]];\n            const chips = Array.isArray(item[1])\n              ? item[1].map((value) => {\n                  const selectedCategoryValue = category.values.find(\n                    (values) => values.value === String(value)\n                  );\n                  return selectedCategoryValue\n                    ? {\n                        name:\n                          selectedCategoryValue.text ||\n                          selectedCategoryValue.label,\n                        value,\n                      }\n                    : { name: value, value };\n                })\n              : [\n                  {\n                    name: category.values.find(\n                      (values) => values.value === String(item[1])\n                    ).label,\n                    value: item[1],\n                  },\n                ];\n            return [\n              ...arr,\n              {\n                category: capitalize(category.title),\n                chips,\n                urlParam: category.urlParam,\n              },\n            ];\n          } else if (item[0] === 'text') {\n            return [\n              ...arr,\n              ...(item[1].length > 0\n                ? [\n                    {\n                      category: 'Name',\n                      chips: [{ name: item[1], value: item[1] }],\n                      urlParam: item[0],\n                    },\n                  ]\n                : []),\n            ];\n          } else {\n            return arr;\n          }\n        }, [])\n      : [];\n  };\n\n  const buildFilterChips = () => {\n    const localFilters = { ...filters };\n    delete localFilters.sortIndex;\n    delete localFilters.sortDirection;\n    delete localFilters.offset;\n    delete localFilters.limit;\n    return pruneFilters(localFilters, FILTER_CATEGORIES);\n  };\n\n  const activeFiltersConfig = {\n    deleteTitle: intl.formatMessage(messages.resetFilters),\n    filters: buildFilterChips(),\n    onDelete: (_event, itemsToRemove, isAll) => {\n      if (isAll) {\n        dispatch(updateFilters(RECS_LIST_INITIAL_STATE));\n      } else {\n        itemsToRemove.map((item) => {\n          const newFilter = {\n            [item.urlParam]: Array.isArray(filters[item.urlParam])\n              ? filters[item.urlParam].filter(\n                  (value) => String(value) !== String(item.chips[0].value)\n                )\n              : '',\n          };\n          newFilter[item.urlParam].length > 0\n            ? dispatch(updateFilters({ ...filters, ...newFilter }))\n            : removeFilterParam(item.urlParam);\n        });\n      }\n    },\n  };\n\n  const handleOnCollapse = (_e, rowId, isOpen) => {\n    const collapseRows = [...displayedRows];\n    collapseRows[rowId] = { ...collapseRows[rowId], isOpen };\n    setDisplayedRows(collapseRows);\n  };\n\n  return (\n    <div id=\"recs-list-table\">\n      <PrimaryToolbar\n        pagination={{\n          itemCount: filteredRows.length,\n          page: filters.offset / filters.limit + 1,\n          perPage: Number(filters.limit),\n          onSetPage(_event, page) {\n            dispatch(\n              updateFilters({\n                ...filters,\n                offset: filters.limit * (page - 1),\n              })\n            );\n          },\n          onPerPageSelect(_event, perPage) {\n            dispatch(updateFilters({ ...filters, limit: perPage, offset: 0 }));\n          },\n          isCompact: true,\n        }}\n        filterConfig={{ items: filterConfigItems }}\n        activeFiltersConfig={activeFiltersConfig}\n      />\n      {(isUninitialized || isFetching) && <Loading />}\n      {(isError || (isSuccess && recs.length === 0)) && (\n        <Card>\n          <CardBody>\n            <ErrorState />\n          </CardBody>\n        </Card>\n      )}\n      {isSuccess && recs.length > 0 && (\n        <React.Fragment>\n          <Table\n            aria-label=\"Table of recommendations\"\n            ouiaId=\"recsListTable\"\n            variant={TableVariant.compact}\n            cells={RECS_LIST_COLUMNS}\n            rows={displayedRows}\n            onCollapse={handleOnCollapse}\n            sortBy={{\n              index: filters.sortIndex,\n              direction: filters.sortDirection,\n            }}\n            onSort={onSort}\n          >\n            <TableHeader />\n            <TableBody />\n          </Table>\n          {recs.length > 0 && filteredRows.length === 0 && (\n            <Card ouiaId={'empty-recommendations'}>\n              <CardBody>\n                <NoMatchingRecs />\n              </CardBody>\n            </Card>\n          )}\n        </React.Fragment>\n      )}\n      <Pagination\n        ouiaId=\"recs-list-pagination-bottom\"\n        itemCount={filteredRows.length}\n        page={filters.offset / filters.limit + 1}\n        perPage={Number(filters.limit)}\n        onSetPage={(_e, page) => {\n          dispatch(\n            updateFilters({\n              ...filters,\n              offset: filters.limit * (page - 1),\n            })\n          );\n        }}\n        onPerPageSelect={(_e, perPage) => {\n          dispatch(updateFilters({ ...filters, limit: perPage, offset: 0 }));\n        }}\n        widgetId={`pagination-options-menu-bottom`}\n        variant={PaginationVariant.bottom}\n      />\n    </div>\n  );\n};\n\nRecsListTable.propTypes = {\n  query: PropTypes.shape({\n    isError: PropTypes.bool.isRequired,\n    isUninitialized: PropTypes.bool.isRequired,\n    isFetching: PropTypes.bool.isRequired,\n    isSuccess: PropTypes.bool.isRequired,\n    data: PropTypes.array,\n  }),\n};\n\nexport { RecsListTable };\n","import { FILTER_CATEGORIES, RULE_CATEGORIES } from '../../AppConstants';\n\nconst passFilters = (rule, filters) =>\n  Object.entries(filters).every(([filterKey, filterValue]) => {\n    switch (filterKey) {\n      case 'text':\n        return rule.description\n          .toLowerCase()\n          .includes(filterValue.toLowerCase());\n      case FILTER_CATEGORIES.total_risk.urlParam:\n        return filterValue.includes(String(rule.total_risk));\n      case FILTER_CATEGORIES.category.urlParam:\n        return rule.tags.find((c) =>\n          filterValue.includes(String(RULE_CATEGORIES[c]))\n        );\n      case FILTER_CATEGORIES.impact.urlParam:\n        return filterValue.includes(String(rule.impact));\n      case FILTER_CATEGORIES.impacting.urlParam:\n        return filterValue.length > 0\n          ? filterValue.some((v) => {\n              if (v === 'true') {\n                return rule.impacted_clusters_count > 0;\n              }\n              if (v === 'false') {\n                return rule.impacted_clusters_count === 0;\n              }\n            })\n          : true;\n      case FILTER_CATEGORIES.likelihood.urlParam:\n        return filterValue.includes(String(rule.likelihood));\n      case FILTER_CATEGORIES.rule_status.urlParam:\n        return (\n          filterValue === 'all' ||\n          (filterValue === 'disabled' && rule.disabled) ||\n          (filterValue === 'enabled' && !rule.disabled)\n        );\n      default:\n        return true;\n    }\n  });\n\nexport { passFilters };\n","import React from 'react';\n\nimport { RecsListTable } from './RecsListTable';\nimport { useGetRecsQuery } from '../../Services/SmartProxy';\n\nconst RecsListTableWrapper = () => {\n  const query = useGetRecsQuery();\n\n  return <RecsListTable query={query} />;\n};\n\nexport default RecsListTableWrapper;\n"],"names":["RecsListTable","query","intl","useIntl","dispatch","useDispatch","filters","useSelector","recsListState","isError","isUninitialized","isFetching","isSuccess","data","recs","recommendations","page","offset","limit","useState","filteredRows","setFilteredRows","displayedRows","setDisplayedRows","useEffect","buildDisplayedRows","sortIndex","sortDirection","buildFilteredRows","localFilters","allRows","filter","rule","Object","entries","every","filterKey","filterValue","description","toLowerCase","includes","FILTER_CATEGORIES","String","total_risk","tags","find","c","RULE_CATEGORIES","impact","length","some","v","impacted_clusters_count","likelihood","disabled","passFilters","map","value","key","isOpen","cells","title","Link","to","rule_id","RuleLabels","publish_date","DateFormat","date","variant","formatMessage","messages","Tooltip","position","TooltipPosition","content","risk","TOTAL_RISK_LABEL_LOWER","strong","str","InsightsLabel","undefined","toLocaleString","fullWidth","className","Stack","hasGutter","RuleDetails","isDetailsPage","rows","index","direction","sortedRecommendations","sortingRows","sort","firstItem","secondItem","fst","snd","SortByDirection","reverse","slice","flatMap","row","updatedRow","parent","removeFilterParam","param","updateFilters","text","addFilterParam","values","filterConfigItems","label","filterValues","onChange","_event","placeholder","type","id","items","category","rule_status","impacting","e","activeFiltersConfig","deleteTitle","filterCategories","prunedFilters","reduce","arr","item","chips","Array","isArray","selectedCategoryValue","name","string","toUpperCase","substring","urlParam","pruneFilters","onDelete","itemsToRemove","isAll","RECS_LIST_INITIAL_STATE","newFilter","PrimaryToolbar","pagination","itemCount","perPage","Number","onSetPage","onPerPageSelect","isCompact","filterConfig","Loading","Card","CardBody","Table","ouiaId","TableVariant","RECS_LIST_COLUMNS","onCollapse","_e","rowId","collapseRows","sortBy","onSort","TableHeader","TableBody","Pagination","widgetId","PaginationVariant","propTypes","PropTypes","useGetRecsQuery"],"sourceRoot":""}