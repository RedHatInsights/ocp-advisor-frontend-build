{"version":3,"sources":["webpack:///./src/Messages.js","webpack:///./src/PresentationalComponents/Breadcrumbs/Breadcrumbs.js","webpack:///./src/AppConstants.js","webpack:///./src/Utilities/Api.js","webpack:///./src/AppActions.js","webpack:///./src/PresentationalComponents/Clusters/ClusterDetails.js"],"names":["defineMessages","documentTitle","id","description","defaultMessage","clusters","added","loading","lastSeen","actions","name","filterBy","totalRisk","recommendation","recommendations","insightsHeader","Breadcrumbs","current","match","intl","useState","items","setItems","buildBreadcrumbs","useCallback","crumbs","splitUrl","url","split","push","title","formatMessage","messages","navigate","params","clusterId","useEffect","length","Breadcrumb","ouiaId","map","oneLink","key","BreadcrumbItem","Link","to","isActive","propTypes","PropTypes","injectIntl","routerParams","CLUSTER_FETCH_URL","headers","axios","paramsSerializer","Qs","arrayFormat","fetchData","options","search","insights","chrome","auth","getUser","API","response","data","ClusterDetails","cluster","useIntl","dispatch","useDispatch","subnav","document","type","payload","ActionTypes","PageHeader","className","history","clusterFetchStatus","connect","props"],"mappings":"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","file":"js/InventoryDetails.ca8a41fdb17de101c84b.js","sourcesContent":["/* eslint-disable max-len */\nimport { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  documentTitle: {\n    id: 'documentTitle',\n    description: 'The title of the page as it appears in the browser tab',\n    defaultMessage: '{subnav} - OCP Advisor | Red Hat Insights',\n  },\n  clusters: {\n    id: 'clusters',\n    description:\n      'Clusters title used in recommendation table column and clusters tab header',\n    defaultMessage: 'Clusters',\n  },\n  added: {\n    id: 'added',\n    description: 'Recommendation table column title',\n    defaultMessage: 'Added',\n  },\n  loading: {\n    id: 'loading',\n    description: 'Loading text',\n    defaultMessage: 'Loading...',\n  },\n  lastSeen: {\n    id: 'lastSeen',\n    description:\n      'Used in the cluster table title column, the last time a cluster has checked in',\n    defaultMessage: 'Last seen',\n  },\n  actions: {\n    id: 'actions',\n    description: 'actions',\n    defaultMessage: 'Actions',\n  },\n  name: {\n    id: 'name',\n    description:\n      'Used in the cluster table title column, identifying display name of a cluster',\n    defaultMessage: 'Name',\n  },\n  filterBy: {\n    id: 'filterBy',\n    description: 'Filter by name',\n    defaultMessage: 'Filter by name',\n  },\n  totalRisk: {\n    id: 'totalRisk',\n    description:\n      'Recommendation table column title, recommendationdetails label',\n    defaultMessage: 'Total risk',\n  },\n  recommendation: {\n    id: 'recommendation',\n    description: 'Recommendation',\n    defaultMessage: 'Recommendation',\n  },\n  recommendations: {\n    id: 'recommendations',\n    description: 'Used as a title',\n    defaultMessage: 'Recommendations',\n  },\n  insightsHeader: {\n    id: 'insightsHeader',\n    description: 'Header for the application title',\n    defaultMessage: 'Advisor',\n  },\n});\n","import React, { useCallback, useEffect, useState } from 'react';\n\nimport { Breadcrumb } from '@patternfly/react-core/dist/js/components/Breadcrumb/Breadcrumb';\nimport { BreadcrumbItem } from '@patternfly/react-core/dist/js/components/Breadcrumb/BreadcrumbItem';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../Messages';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/RouterParams';\n\nconst Breadcrumbs = ({ current, match, intl }) => {\n  const [items, setItems] = useState([]);\n  const buildBreadcrumbs = useCallback(() => {\n    const crumbs = [];\n    const splitUrl = match.url.split('/');\n\n    // add base\n    crumbs.push({\n      title: `${intl.formatMessage(messages.insightsHeader)} ${splitUrl[1]}`,\n      navigate: `/${splitUrl[1]}`,\n    });\n\n    setItems(crumbs);\n  }, [intl, match.params.clusterId, match.url]);\n\n  useEffect(() => {\n    buildBreadcrumbs();\n  }, [buildBreadcrumbs, match.params.clusterId, match.url]);\n\n  return (\n    <React.Fragment>\n      {items.length > 0 && (\n        <Breadcrumb ouiaId=\"detail\">\n          {items.map((oneLink, key) => (\n            <BreadcrumbItem key={key}>\n              <Link to={oneLink.navigate}>{oneLink.title}</Link>\n            </BreadcrumbItem>\n          ))}\n          <BreadcrumbItem isActive>{current}</BreadcrumbItem>\n        </Breadcrumb>\n      )}\n    </React.Fragment>\n  );\n};\n\nBreadcrumbs.propTypes = {\n  current: PropTypes.string,\n  match: PropTypes.object,\n  intl: PropTypes.any,\n};\n\nexport default injectIntl(routerParams(Breadcrumbs));\n","export const CLUSTER_FETCH = 'CLUSTER_FETCH';\n\nexport const BASE_URL = '/api/insights-results-aggregator/v1';\nexport const CLUSTER_FETCH_URL = (clusterId) =>\n  `${BASE_URL}/clusters/${clusterId}/report`;\n\n/* let's uncomment only those that are utilized\nexport const RULE_FETCH = 'RULE_FETCH';\nexport const RULES_FETCH = 'RULES_FETCH';\nexport const RULE_SET = 'RULE_SET';\nexport const VOTE_ON_RULE = 'VOTE_ON_RULE';\nexport const DISABLE_RULE = 'DISABLE_RULE';\nexport const ENABLE_RULE = 'ENABLE_RULE';\nexport const SEND_FEEDBACK_ON_RULE_DISABLE = 'SEND_FEEDBACK_ON_RULE_DISABLE';\nexport const RULE_CATEGORIES = 'RULE_CATEGORIES';\nexport const SET_REPORT_DETAILS = 'SET_REPORT_DETAILS';\n\nexport const SEVERITY_MAP = {\n  'critical-risk': 4,\n  'high-risk': 3,\n  'medium-risk': 2,\n  'low-risk': 1,\n};\n*/\n","import Qs from 'qs';\nimport axios from 'axios';\n\nexport default {\n  get(url, headers = {}, params = {}) {\n    return axios.get(url, {\n      headers,\n      params,\n      paramsSerializer(params) {\n        return Qs.stringify(params, { arrayFormat: 'repeat' });\n      },\n    });\n  },\n  put(url, data = {}, headers = {}) {\n    return axios.put(url, data, {\n      headers,\n    });\n  },\n  post(url, headers = {}, data = {}) {\n    return axios.post(url, data, {\n      headers,\n    });\n  },\n  delete(url, data = {}, headers = {}) {\n    return axios.delete(url, data, {\n      headers,\n    });\n  },\n};\n","import * as ActionTypes from './AppConstants';\n\nimport API from './Utilities/Api';\n\nconst fetchData = async (url, headers, options, search) => {\n  await insights.chrome.auth.getUser();\n  const response = search\n    ? await API.get(`${url}?${search}`, headers, options)\n    : await API.get(`${url}`, headers, options);\n  return response.data;\n};\n\nexport const fetchCluster = (clusterId) => ({\n  type: ActionTypes.CLUSTER_FETCH,\n  payload: fetchData(ActionTypes.CLUSTER_FETCH_URL(clusterId)),\n});\n","import React, { useEffect } from 'react';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { connect, useDispatch } from 'react-redux';\nimport Breadcrumbs from '../../PresentationalComponents/Breadcrumbs/Breadcrumbs';\n\nimport { PageHeader } from '@redhat-cloud-services/frontend-components/PageHeader';\n\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/RouterParams';\n\nimport * as AppActions from '../../AppActions';\nimport messages from '../../Messages';\n\nconst ClusterDetails = ({ cluster, match }) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (match.params.clusterId) {\n      const subnav = `${match.params.clusterId} - ${messages.clusters.defaultMessage}`;\n      document.title = intl.formatMessage(messages.documentTitle, { subnav });\n    }\n\n    dispatch(AppActions.fetchCluster(match.params.clusterId));\n  }, [match.params.clusterId]);\n\n  return (\n    <PageHeader className=\"pf-m-light ins-inventory-detail\">\n      {cluster && (\n        <Breadcrumbs current={match.params.clusterId} match={match} />\n      )}\n    </PageHeader>\n  );\n};\n\nClusterDetails.propTypes = {\n  history: PropTypes.object,\n  cluster: PropTypes.object,\n  clusterFetchStatus: PropTypes.string,\n  match: PropTypes.any,\n};\n\nconst mapStateToProps = ({ cluster, clusterFetchStatus, props }) => ({\n  cluster,\n  clusterFetchStatus,\n  ...props,\n});\n\nexport default routerParams(connect(mapStateToProps, null)(ClusterDetails));\n"],"sourceRoot":""}