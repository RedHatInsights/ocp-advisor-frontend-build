{"version":3,"file":"js/816.accd0696bb3ed0224eb8.js","mappings":"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","sources":["webpack:///./src/Routes.js","webpack:///./src/App.js","webpack:///./src/Services/AccountManagementService.js","webpack:///./src/Services/Filters.js","webpack:///./src/Services/SmartProxy.js","webpack:///./src/Store/index.js"],"sourcesContent":["import { Route, Switch } from 'react-router-dom';\nimport React, { Suspense, lazy } from 'react';\n\nimport { Bullseye } from '@patternfly/react-core/dist/js/layouts/Bullseye';\nimport { EmptyState } from '@patternfly/react-core/dist/js/components/EmptyState';\nimport { EmptyStateBody } from '@patternfly/react-core/dist/js/components/EmptyState';\nimport { Spinner } from '@patternfly/react-core/dist/js/components/Spinner';\n\nimport InvalidObject from '@redhat-cloud-services/frontend-components/InvalidObject/InvalidObject';\n\nconst Cluster = lazy(() =>\n  import(/* webpackChunkName: \"ClusterDetails\" */ './Components/Cluster')\n);\n\nconst Recommendation = lazy(() =>\n  import(/* webpackChunkName: \"Recommendation\" */ './Components/Recommendation')\n);\n\nconst paths = [\n  {\n    title: 'Clusters',\n    path: '/clusters/:clusterId',\n    component: Cluster,\n  },\n  {\n    title: 'Recommendations',\n    path: '/recommendations/:recommendationId',\n    component: Recommendation,\n  },\n];\n\n/**\n * the Switch component changes routes depending on the path.\n *\n * Route properties:\n *      exact - path must match exactly,\n *      path - https://prod.foo.redhat.com:1337/insights/advisor/rules\n *      component - component to be rendered when a route has been chosen.\n */\nexport const Routes = () => (\n  <Suspense\n    fallback={\n      <Bullseye>\n        <Spinner />\n      </Bullseye>\n    }\n  >\n    <Switch>\n      {paths.map((path) => (\n        <Route key={path.title} path={path.path} component={path.component} />\n      ))}\n      {/* Finally, catch all unmatched routes */}\n      <Route\n        path=\"*\"\n        component={() => (\n          <EmptyState>\n            <EmptyStateBody>\n              <InvalidObject />\n            </EmptyStateBody>\n          </EmptyState>\n        )}\n      />\n    </Switch>\n  </Suspense>\n);\n","import './App.scss';\n\nimport React, { useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport NotificationsPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry/Registry';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nimport { Routes } from './Routes';\n\nconst App = () => {\n  const history = useHistory();\n\n  useEffect(() => {\n    const registry = getRegistry();\n    registry.register({ notifications: notificationsReducer });\n    insights.chrome.init();\n    insights.chrome.identifyApp('ocp-advisor');\n    const unregister = insights.chrome.on('APP_NAVIGATION', (event) =>\n      history.push(`/${event.navId}`)\n    );\n    return () => {\n      unregister();\n    };\n  }, []);\n\n  return (\n    <React.Fragment>\n      <NotificationsPortal />\n      <Routes />\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\n\nconst BASE_URL = 'https://api.openshift.com/api/accounts_mgmt/v1';\n\nexport const AmsApi = createApi({\n  reducerPath: 'ams',\n  baseQuery: fetchBaseQuery({\n    baseUrl: BASE_URL,\n    prepareHeaders: async (headers) => {\n      await insights.chrome.auth.getUser();\n      const token = await insights.chrome.auth.getToken();\n      if (token) {\n        /* AMS API accepts only Bearer token acquired from the production SSO.\n         If you in non-prod env, fill in your prod token instead the `token` */\n        headers.set('Authorization', `Bearer ${token}`);\n      }\n      return headers;\n    },\n  }),\n  endpoints: (builder) => ({\n    getCurrentAccount: builder.query({\n      query: () => `current_account`,\n    }),\n    getClusterDisplayNameById: builder.query({\n      query: (clusterId) =>\n        `subscriptions?page=1&size=-1&search=external_cluster_id='${clusterId}'&fields=display_name`,\n      transformResponse: (response) => response?.items?.[0]?.display_name,\n    }),\n  }),\n});\n\n// Export hooks for usage in functional components\nexport const { useGetClusterDisplayNameByIdQuery } = AmsApi;\n","import { createSlice } from '@reduxjs/toolkit';\n\nconst filtersInitialState = {\n  affectedClustersState: {\n    limit: 10,\n    offset: 0,\n    text: '',\n    sortIndex: -1,\n    sortDirection: null,\n  },\n};\n\nconst filters = createSlice({\n  name: 'filters',\n  initialState: filtersInitialState,\n  reducers: {\n    updateAffectedClustersFilters(state, action) {\n      state.affectedClustersState = action.payload;\n    },\n  },\n});\n\nexport const { updateAffectedClustersFilters } = filters.actions;\n\nexport default filters.reducer;\n","import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\n\nconst BASE_URL = '/api/insights-results-aggregator/v1';\n\nexport const SmartProxyApi = createApi({\n  reducerPath: 'smartProxy',\n  baseQuery: fetchBaseQuery({\n    baseUrl: BASE_URL,\n  }),\n  endpoints: (builder) => ({\n    getClusterById: builder.query({\n      query: (id, includeDisabled = true) =>\n        `clusters/${id}/report?get_disabled=${includeDisabled}`,\n    }),\n    // Get rule's content using id (recId = recommendation id) in the rule_plugin_name|error_key format\n    getRuleById: builder.query({\n      query: (recId) => `rules/${recId}/content`,\n    }),\n    getAffectedClusters: builder.query({\n      query: (recId) => `rule/${recId}/clusters_detail`,\n      transformResponse: (response) => response?.data,\n    }),\n  }),\n});\n\n// Export hooks for usage in functional components\nexport const {\n  useGetClusterByIdQuery,\n  useLazyGetClusterByIdQuery,\n  useGetRuleByIdQuery,\n  useGetAffectedClustersQuery,\n} = SmartProxyApi;\n","import { configureStore } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\n\nimport { AmsApi } from '../Services/AccountManagementService';\nimport { SmartProxyApi } from '../Services/SmartProxy';\nimport filters from '../Services/Filters';\n\nconst reducer = {\n  [SmartProxyApi.reducerPath]: SmartProxyApi.reducer,\n  [AmsApi.reducerPath]: AmsApi.reducer,\n  filters,\n};\n\nconst getStore = (useLogger) =>\n  configureStore({\n    reducer,\n    middleware: (getDefaultMiddleware) => {\n      const middleware = getDefaultMiddleware().concat(\n        SmartProxyApi.middleware,\n        AmsApi.middleware\n      );\n      if (useLogger) {\n        middleware.concat(logger);\n      }\n      return middleware;\n    },\n  });\n\nexport default getStore;\n"],"names":["paths","title","path","component","lazy","Routes","Suspense","fallback","Bullseye","Spinner","Switch","map","Route","key","EmptyState","EmptyStateBody","InvalidObject","history","useHistory","useEffect","getRegistry","register","notifications","notificationsReducer","insights","chrome","init","identifyApp","unregister","on","event","push","navId","AmsApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","prepareHeaders","headers","auth","getUser","getToken","token","set","endpoints","builder","getCurrentAccount","query","getClusterDisplayNameById","clusterId","transformResponse","response","items","display_name","useGetClusterDisplayNameByIdQuery","filters","createSlice","name","initialState","affectedClustersState","limit","offset","text","sortIndex","sortDirection","reducers","updateAffectedClustersFilters","state","action","payload","actions","SmartProxyApi","getClusterById","id","includeDisabled","getRuleById","recId","getAffectedClusters","data","useGetClusterByIdQuery","useLazyGetClusterByIdQuery","useGetRuleByIdQuery","useGetAffectedClustersQuery","reducer","useLogger","configureStore","middleware","getDefaultMiddleware","concat","logger"],"sourceRoot":""}