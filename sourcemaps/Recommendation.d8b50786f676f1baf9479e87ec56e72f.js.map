{"version":3,"file":"js/Recommendation.21df815694b6de7525c4.js","mappings":"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","sources":["webpack:///./src/Utilities/Rule.js","webpack:///./src/Components/AffectedClustersTable/AffectedClustersTable.js","webpack:///./src/Components/AffectedClustersTable/index.js","webpack:///./src/Components/Recommendation/Recommendation.js","webpack:///./src/Components/Recommendation/index.js"],"sourcesContent":["const getPluginName = (rule) => rule.split('|')?.[0];\nconst getErrorKey = (rule) => rule.split('|')?.[1];\n// workaround. Should be removed when https://issues.redhat.com/browse/CCXDEV-5534 is done.\nconst adjustOCPRule = (rule, recId) => {\n  const errorKeyContent = rule?.error_keys?.[getErrorKey(recId)] || {};\n  const adjusted = {\n    ...rule,\n    ...errorKeyContent,\n    ...(errorKeyContent?.metadata || rule?.metadata || {}),\n  };\n  adjusted.impact = {\n    impact: adjusted.impact,\n  };\n  delete adjusted.metadata;\n  delete adjusted.error_keys;\n  return adjusted;\n};\n\nexport { getPluginName, getErrorKey, adjustOCPRule };\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter/conditionalFilterConstants';\nimport PrimaryToolbar from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport { EmptyTable } from '@redhat-cloud-services/frontend-components/EmptyTable';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components/TableToolbar';\n\nimport { Card, CardBody } from '@patternfly/react-core/dist/js/components/Card';\nimport { sortable } from '@patternfly/react-table/dist/js/components/Table/utils/decorators/sortable';\nimport { Table } from '@patternfly/react-table/dist/js/components/Table/Table';\nimport { TableBody } from '@patternfly/react-table/dist/js/components/Table/Body';\nimport { TableHeader } from '@patternfly/react-table/dist/js/components/Table/Header';\nimport { Bullseye } from '@patternfly/react-core/dist/js/layouts/Bullseye';\nimport {\n  Pagination,\n  PaginationVariant,\n} from '@patternfly/react-core/dist/js/components/Pagination/Pagination';\n\nimport {\n  ErrorState,\n  NoAffectedClusters,\n  NoMatchingClusters,\n} from '../MessageState/EmptyStates';\nimport Loading from '../Loading/Loading';\nimport { updateAffectedClustersFilters } from '../../Services/Filters';\nimport messages from '../../Messages';\n\nconst AffectedClustersTable = ({ query }) => {\n  const intl = useIntl();\n  const {\n    isError,\n    isUninitialized,\n    isFetching,\n    isSuccess,\n    data: rows = [],\n  } = query;\n  const dispatch = useDispatch();\n  const filters = useSelector(({ filters }) => filters.affectedClustersState);\n  const updateFilters = (filters) =>\n    dispatch(updateAffectedClustersFilters(filters));\n\n  const [filteredRows, setFilteredRows] = useState([]);\n  const [displayedRows, setDisplayedRows] = useState([]);\n  const [chips, setChips] = useState([]);\n  const perPage = filters.limit;\n  const page = filters.offset / filters.limit + 1;\n\n  const updateNameChip = (chips, newValue) => {\n    const newChips = chips;\n    const nameCategoryIndex = newChips.findIndex(\n      (chip) => chip.category === 'Name'\n    );\n    if (newValue === '') {\n      newChips.splice(nameCategoryIndex);\n    } else {\n      if (nameCategoryIndex === -1) {\n        newChips.push({ category: 'Name', chips: [{ name: newValue }] });\n      } else {\n        newChips[nameCategoryIndex] = {\n          category: 'Name',\n          chips: [{ name: newValue }],\n        };\n      }\n    }\n    return newChips;\n  };\n\n  const onChipDelete = () => {\n    // right now, only designed to treat the Name (text) filter\n    const newFilters = { ...filters, text: '' };\n    updateFilters(newFilters);\n  };\n\n  const onNameFilterChange = (value) => {\n    const newFilters = { ...filters, text: value, offset: 0 };\n    updateFilters(newFilters);\n  };\n\n  const filterConfig = {\n    items: [\n      {\n        label: 'Name',\n        placeholder: 'Filter by name',\n        type: conditionalFilterType.text,\n        filterValues: {\n          id: 'name-filter',\n          key: 'name-filter',\n          onChange: (_e, value) => onNameFilterChange(value),\n          value: filters.text,\n        },\n      },\n    ],\n    isDisabled: isError || (rows && rows.length === 0),\n  };\n\n  const onSort = (_e, index, direction) => {\n    updateFilters({ ...filters, sortIndex: index, sortDirection: direction });\n  };\n\n  const onSetPage = (_e, pageNumber) => {\n    const newOffset = pageNumber * filters.limit - filters.limit;\n    updateFilters({ ...filters, offset: newOffset });\n  };\n\n  const onSetPerPage = (_e, perPage) => {\n    updateFilters({ ...filters, limit: perPage });\n  };\n\n  // constructs array of rows (from the initial data) checking currently applied filters\n  const buildFilteredRows = (allRows, filters) => {\n    const rows = allRows;\n    return rows\n      .filter((row) => {\n        // further filters conditions will be added soon\n        return row?.cluster.includes(filters.text);\n      })\n      .sort((a, b) => {\n        if (filters.sortDirection === 'asc') {\n          return a?.cluster.localeCompare(b?.cluster);\n        }\n        return b?.cluster.localeCompare(a?.cluster);\n      });\n  };\n\n  const buildDisplayedRows = (rows) => {\n    return rows.slice(perPage * (page - 1), perPage * (page - 1) + perPage);\n  };\n\n  useEffect(() => {\n    const newFilteredRows = buildFilteredRows(rows, filters);\n    const newDisplayedRows = buildDisplayedRows(newFilteredRows);\n    const newChips = updateNameChip(chips, filters.text);\n    setFilteredRows(newFilteredRows);\n    setDisplayedRows(newDisplayedRows);\n    setChips(newChips);\n  }, [query, filters]);\n\n  return (\n    <div id=\"affected-list-table\">\n      <PrimaryToolbar\n        filterConfig={filterConfig}\n        pagination={{\n          itemCount: filteredRows.length,\n          page,\n          perPage,\n          onSetPage: onSetPage,\n          onPerPageSelect: onSetPerPage,\n        }}\n        activeFiltersConfig={\n          isError || (rows && rows.length === 0)\n            ? undefined\n            : {\n                filters: chips,\n                onDelete: onChipDelete,\n              }\n        }\n      />\n      <Table\n        aria-label=\"Table of affected clusters\"\n        ouiaId=\"affectedClustersTable\"\n        variant=\"compact\"\n        cells={[\n          { title: intl.formatMessage(messages.name), transforms: [sortable] },\n        ]}\n        rows={displayedRows.map((c) => ({\n          cells: [\n            <span key={c?.cluter}>\n              <Link to={`/clusters/${c?.cluster}`}>\n                {c?.cluster_name || c?.cluster}\n              </Link>\n            </span>,\n          ],\n        }))}\n        sortBy={{\n          index: filters.sortIndex,\n          direction: filters.sortDirection,\n        }}\n        onSort={onSort}\n      >\n        <TableHeader />\n        {(isUninitialized || isFetching) && <Loading />}\n        {isError && (\n          <Card id=\"error-state-message\">\n            <CardBody>\n              <ErrorState />\n            </CardBody>\n          </Card>\n        )}\n        {isSuccess && rows.length === 0 && (\n          <Card id=\"empty-state-message\">\n            <CardBody>\n              <NoAffectedClusters />\n            </CardBody>\n          </Card>\n        )}\n        {isSuccess &&\n          rows.length > 0 &&\n          (filteredRows.length > 0 ? (\n            <TableBody />\n          ) : (\n            <EmptyTable>\n              <Bullseye>\n                <NoMatchingClusters />\n              </Bullseye>\n            </EmptyTable>\n          ))}\n      </Table>\n      <TableToolbar isFooter className=\"ins-c-inventory__table--toolbar\">\n        <Pagination\n          variant={PaginationVariant.bottom}\n          itemCount={filteredRows.length}\n          page={page}\n          perPage={perPage}\n          onSetPage={onSetPage}\n          onPerPageSelect={onSetPerPage}\n          onPageInput={onSetPage}\n        />\n      </TableToolbar>\n    </div>\n  );\n};\n\nAffectedClustersTable.propTypes = {\n  query: PropTypes.shape({\n    isError: PropTypes.bool.isRequired,\n    isUninitialized: PropTypes.bool.isRequired,\n    isFetching: PropTypes.bool.isRequired,\n    isSuccess: PropTypes.bool.isRequired,\n    data: PropTypes.array,\n  }),\n};\n\nexport { AffectedClustersTable };\n","import React from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { useGetAffectedClustersQuery } from '../../Services/SmartProxy';\n\nimport { AffectedClustersTable } from './AffectedClustersTable';\n\nconst AffectedClustersTableWrapper = () => {\n  const query = useGetAffectedClustersQuery(useParams().recommendationId);\n\n  return <AffectedClustersTable query={query} />;\n};\n\nexport default AffectedClustersTableWrapper;\n","import './Recommendation.scss';\n\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\n\nimport {\n  Card,\n  CardBody,\n  CardFooter,\n  CardHeader,\n} from '@patternfly/react-core/dist/js/components/Card';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { Label } from '@patternfly/react-core/dist/js/components/Label/Label';\nimport { Title } from '@patternfly/react-core/dist/js/components/Title/Title';\nimport { LabelGroup } from '@patternfly/react-core/dist/js/components/LabelGroup';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\nimport { global_danger_color_100 as globalDangerColor100 } from '@patternfly/react-tokens/dist/js/global_danger_color_100';\nimport BellSlashIcon from '@patternfly/react-icons/dist/js/icons/bell-slash-icon';\nimport CaretDownIcon from '@patternfly/react-icons/dist/js/icons/caret-down-icon';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { Button } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport { Dropdown } from '@patternfly/react-core/dist/js/components/Dropdown/Dropdown';\nimport { DropdownItem } from '@patternfly/react-core/dist/js/components/Dropdown/DropdownItem';\nimport { DropdownToggle } from '@patternfly/react-core/dist/js/components/Dropdown/DropdownToggle';\nimport { Flex } from '@patternfly/react-core/dist/js/layouts/Flex/Flex';\nimport { FlexItem } from '@patternfly/react-core/dist/js/layouts/Flex/FlexItem';\n\nimport Breadcrumbs from '../Breadcrumbs';\nimport RuleLabels from '../Labels/RuleLabels';\nimport { FILTER_CATEGORIES, RULE_CATEGORIES } from '../../AppConstants';\nimport messages from '../../Messages';\nimport RuleDetails from './RuleDetails';\nimport Loading from '../Loading/Loading';\nimport { adjustOCPRule } from '../../Utilities/Rule';\nimport MessageState from '../MessageState/MessageState';\nimport AffectedClustersTable from '../AffectedClustersTable';\nimport { Delete, Post } from '../../Utilities/Api';\nimport { BASE_URL } from '../../Services/SmartProxy';\nimport DisableRule from '../Modals/DisableRule';\n\nconst Recommendation = ({ rule, ack, match }) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const notify = (data) => dispatch(addNotification(data));\n  const recId = match.params.recommendationId;\n  const [disableRuleModalOpen, setDisableRuleModalOpen] = useState(false);\n  const [actionsDropdownOpen, setActionsDropdownOpen] = useState(false);\n\n  const {\n    isError,\n    isUninitialized,\n    isLoading,\n    isFetching,\n    isSuccess,\n    data,\n    refetch,\n  } = rule;\n\n  const {\n    data: recAck = {},\n    isFetching: recAckIsFetching,\n    refetch: recAckRefetch,\n  } = ack;\n\n  const content = isSuccess ? adjustOCPRule(data.content, recId) : undefined;\n\n  const afterDisableFn = async () => {\n    refetch();\n    recAckRefetch();\n  };\n\n  const handleModalToggle = (disableRuleModalOpen) => {\n    setDisableRuleModalOpen(disableRuleModalOpen);\n  };\n\n  const enableRule = async (rule) => {\n    try {\n      await Delete(`${BASE_URL}/ack/${rule.rule_id}/`);\n      notify({\n        variant: 'success',\n        timeout: true,\n        dismissable: true,\n        title: intl.formatMessage(messages.recSuccessfullyEnabled),\n      });\n      refetch();\n    } catch (error) {\n      handleModalToggle(false);\n      notify({\n        variant: 'danger',\n        dismissable: true,\n        title: intl.formatMessage(messages.error),\n        description: `${error}`,\n      });\n    }\n  };\n\n  return (\n    <React.Fragment>\n      {disableRuleModalOpen && (\n        <DisableRule\n          handleModalToggle={handleModalToggle}\n          isModalOpen={disableRuleModalOpen}\n          rule={content}\n          afterFn={afterDisableFn}\n        />\n      )}\n      <PageHeader className=\"pageHeaderOverride\">\n        <Breadcrumbs current={content?.description || recId} />\n      </PageHeader>\n      {(isUninitialized || isLoading || isFetching) && (\n        <Main>\n          <Loading />\n        </Main>\n      )}\n      {isError && (\n        <Main>\n          <MessageState\n            title={intl.formatMessage(messages.unableToConnect)}\n            text={intl.formatMessage(messages.unableToConnectDesc)}\n            icon={ExclamationCircleIcon}\n            iconStyle={{ color: globalDangerColor100.value }}\n          />\n        </Main>\n      )}\n      {!(isUninitialized || isLoading || isFetching) && isSuccess && (\n        <React.Fragment>\n          <Main className=\"pf-m-light pf-u-pt-sm\">\n            <RuleDetails\n              isOpenShift\n              isDetailsPage\n              rule={content}\n              header={\n                <React.Fragment>\n                  <PageHeaderTitle\n                    title={\n                      <React.Fragment>\n                        {content.description} <RuleLabels rule={content} />\n                      </React.Fragment>\n                    }\n                  />\n                  <p>\n                    {intl.formatMessage(messages.rulesDetailsPubishdate, {\n                      date: (\n                        <DateFormat\n                          date={new Date(content.publish_date)}\n                          type=\"onlyDate\"\n                        />\n                      ),\n                    })}\n                    {content.tags &&\n                      (Array.isArray(content.tags) ? (\n                        <LabelGroup className=\"categoryLabels\" numLabels={1}>\n                          {content.tags.reduce((labels, tag) => {\n                            if (RULE_CATEGORIES[tag]) {\n                              labels.push(\n                                <Label key={`label-${tag}`} color=\"blue\">\n                                  {\n                                    FILTER_CATEGORIES.category.values[\n                                      RULE_CATEGORIES[tag] - 1\n                                    ].label\n                                  }\n                                </Label>\n                              );\n                            }\n                            return labels;\n                          }, [])}\n                        </LabelGroup>\n                      ) : (\n                        <Label>{content.tags}</Label>\n                      ))}\n                  </p>\n                </React.Fragment>\n              }\n              onFeedbackChanged={async (rule, rating) =>\n                await Post(`${BASE_URL}/v2/rating`, {}, { rule, rating })\n              }\n            >\n              <Flex>\n                <FlexItem align={{ default: 'alignRight' }}>\n                  <Dropdown\n                    className=\"ins-c-rec-details__actions_dropdown\"\n                    onSelect={() =>\n                      setActionsDropdownOpen(!actionsDropdownOpen)\n                    }\n                    position=\"right\"\n                    ouiaId=\"actions\"\n                    toggle={\n                      <DropdownToggle\n                        onToggle={(actionsDropdownOpen) =>\n                          setActionsDropdownOpen(actionsDropdownOpen)\n                        }\n                        toggleIndicator={CaretDownIcon}\n                      >\n                        {intl.formatMessage(messages.actions)}\n                      </DropdownToggle>\n                    }\n                    isOpen={actionsDropdownOpen}\n                    dropdownItems={\n                      content?.disabled\n                        ? [\n                            <DropdownItem\n                              key=\"link\"\n                              ouiaId=\"enable\"\n                              onClick={() => {\n                                enableRule(rule);\n                              }}\n                            >\n                              {intl.formatMessage(messages.enableRule)}\n                            </DropdownItem>,\n                          ]\n                        : [\n                            <DropdownItem\n                              key=\"link\"\n                              ouiaId=\"disable\"\n                              onClick={() => {\n                                handleModalToggle(true);\n                              }}\n                            >\n                              {intl.formatMessage(messages.disableRule)}\n                            </DropdownItem>,\n                          ]\n                    }\n                  />\n                </FlexItem>\n              </Flex>\n            </RuleDetails>\n          </Main>\n          <Main>\n            <React.Fragment>\n              {content?.disabled && (\n                <Card className=\"cardOverride\">\n                  <CardHeader>\n                    <Title headingLevel=\"h4\" size=\"xl\">\n                      <BellSlashIcon size=\"sm\" />\n                      &nbsp;\n                      {intl.formatMessage(messages.ruleIsDisabled)}\n                    </Title>\n                  </CardHeader>\n                  <CardBody>\n                    {!recAckIsFetching && (\n                      <React.Fragment>\n                        {intl.formatMessage(\n                          messages.ruleIsDisabledJustification\n                        )}\n                        <i>\n                          {recAck.justification ||\n                            intl.formatMessage(messages.none)}\n                        </i>\n                        {(recAck.updated_at || recAck.created_at) && (\n                          <span>\n                            &nbsp;\n                            <DateFormat\n                              date={\n                                new Date(recAck.updated_at || recAck.created_at)\n                              }\n                              type=\"onlyDate\"\n                            />\n                          </span>\n                        )}\n                      </React.Fragment>\n                    )}\n                  </CardBody>\n                  <CardFooter>\n                    <Button\n                      isInline\n                      variant=\"link\"\n                      onClick={() => enableRule(rule)}\n                      ouiaId=\"rule\"\n                    >\n                      {intl.formatMessage(messages.enableRule)}\n                    </Button>\n                  </CardFooter>\n                </Card>\n              )}\n              {!content?.disabled && (\n                <React.Fragment>\n                  <Title className=\"titleOverride\" headingLevel=\"h3\" size=\"2xl\">\n                    {intl.formatMessage(messages.affectedClusters)}\n                  </Title>\n                  <AffectedClustersTable />\n                </React.Fragment>\n              )}\n              {content?.disabled && (\n                <MessageState\n                  icon={BellSlashIcon}\n                  title={intl.formatMessage(messages.ruleIsDisabled)}\n                  text={intl.formatMessage(messages.ruleIsDisabledBody)}\n                />\n              )}\n            </React.Fragment>\n          </Main>\n        </React.Fragment>\n      )}\n    </React.Fragment>\n  );\n};\n\nRecommendation.propTypes = {\n  rule: PropTypes.object.isRequired,\n  ack: PropTypes.object.isRequired,\n  match: PropTypes.object.isRequired,\n};\n\nexport { Recommendation };\n","import React, { useEffect } from 'react';\nimport { useParams, useRouteMatch } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\n\nimport { Recommendation } from './Recommendation';\nimport { useGetRuleByIdQuery } from '../../Services/SmartProxy';\nimport { useGetRecAcksQuery } from '../../Services/Acks';\nimport messages from '../../Messages';\n\nconst RecommendationWrapper = () => {\n  const intl = useIntl();\n  const rule = useGetRuleByIdQuery(useParams().recommendationId);\n  const ack = useGetRecAcksQuery({ ruleId: useParams().recommendationId });\n  if (rule.isSuccess && rule.data?.content?.description) {\n    const subnav = `${rule.data.content.description} - Recommendations`;\n    document.title = intl.formatMessage(messages.documentTitle, { subnav });\n  }\n\n  useEffect(() => {\n    rule.refetch();\n  }, [useParams().recommendationId]);\n\n  return <Recommendation rule={rule} ack={ack} match={useRouteMatch()} />;\n};\n\nexport default RecommendationWrapper;\n"],"names":["AffectedClustersTable","query","intl","useIntl","isError","isUninitialized","isFetching","isSuccess","data","rows","dispatch","useDispatch","filters","useSelector","affectedClustersState","updateFilters","updateAffectedClustersFilters","useState","filteredRows","setFilteredRows","displayedRows","setDisplayedRows","chips","setChips","perPage","limit","page","offset","filterConfig","items","label","placeholder","type","conditionalFilterType","filterValues","id","key","onChange","_e","value","newFilters","text","onNameFilterChange","isDisabled","length","onSetPage","pageNumber","newOffset","onSetPerPage","useEffect","newFilteredRows","allRows","filter","row","cluster","includes","sort","a","b","sortDirection","localeCompare","buildFilteredRows","newDisplayedRows","slice","buildDisplayedRows","newChips","newValue","nameCategoryIndex","findIndex","chip","category","splice","push","name","updateNameChip","PrimaryToolbar","pagination","itemCount","onPerPageSelect","activeFiltersConfig","undefined","onDelete","Table","ouiaId","variant","cells","title","formatMessage","messages","transforms","sortable","map","c","cluter","Link","to","cluster_name","sortBy","index","sortIndex","direction","onSort","Loading","Card","CardBody","EmptyTable","Bullseye","TableToolbar","isFooter","className","Pagination","PaginationVariant","onPageInput","propTypes","PropTypes","useGetAffectedClustersQuery","useParams","recommendationId","Recommendation","rule","ack","match","notify","addNotification","recId","params","disableRuleModalOpen","setDisableRuleModalOpen","actionsDropdownOpen","setActionsDropdownOpen","isLoading","refetch","recAck","recAckIsFetching","recAckRefetch","content","errorKeyContent","error_keys","split","getErrorKey","adjusted","metadata","impact","adjustOCPRule","afterDisableFn","handleModalToggle","enableRule","Delete","BASE_URL","rule_id","timeout","dismissable","description","DisableRule","isModalOpen","afterFn","PageHeader","Breadcrumbs","current","Main","MessageState","icon","ExclamationCircleIcon","iconStyle","color","globalDangerColor100","RuleDetails","isOpenShift","isDetailsPage","header","PageHeaderTitle","RuleLabels","date","DateFormat","Date","publish_date","tags","Array","isArray","LabelGroup","numLabels","reduce","labels","tag","RULE_CATEGORIES","Label","FILTER_CATEGORIES","onFeedbackChanged","rating","Post","Flex","FlexItem","align","default","Dropdown","onSelect","position","toggle","DropdownToggle","onToggle","toggleIndicator","CaretDownIcon","isOpen","dropdownItems","disabled","DropdownItem","onClick","CardHeader","Title","headingLevel","size","justification","updated_at","created_at","CardFooter","Button","isInline","BellSlashIcon","useGetRuleByIdQuery","useGetRecAcksQuery","ruleId","subnav","document","useRouteMatch"],"sourceRoot":""}