{"version":3,"file":"js/ClusterDetails.2b359be3212ee520aa43.js","mappings":"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","sources":["webpack:///./src/Components/Breadcrumbs/index.js","webpack:///./src/Components/ClusterHeader/ClusterHeader.js","webpack:///./src/Components/ClusterHeader/index.js","webpack:///./src/Utilities/useFeatureFlag.js","webpack:///./src/Components/ClusterRules/ClusterRules.js","webpack:///./src/Components/UpgradeRisksTable/AlertsList.js","webpack:///./src/Components/UpgradeRisksTable/ClusterOperatorsList.js","webpack:///./src/Components/UpgradeRisksTable/UpgradeRisksTable.js","webpack:///./src/Components/UpgradeRisksTable/index.js","webpack:///./src/Components/ClusterTabs/ClusterTabs.js","webpack:///./src/Components/UpgradeRisksAlert/UpgradeRisksAlert.js","webpack:///./src/Components/UpgradeRisksAlert/index.js","webpack:///./src/Components/Cluster/Cluster.js","webpack:///./src/Components/Cluster/index.js","webpack:///./src/Components/Labels/RuleLabels.js","webpack:///./src/Components/Loading/Loading.js","webpack:///./src/Utilities/Loaders.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { Link, useLocation } from 'react-router-dom';\n\nimport { Breadcrumb, BreadcrumbItem } from '@patternfly/react-core';\n\nimport messages from '../../Messages';\n\nconst Breadcrumbs = ({ current }) => {\n  const intl = useIntl();\n  const location = useLocation();\n  const splitUrl = location.pathname.split('/');\n\n  return (\n    <div>\n      <Breadcrumb ouiaId=\"detail\">\n        <BreadcrumbItem className=\"breadcrumb-item\">\n          <Link to={`..`} relative=\"path\">\n            {`${intl.formatMessage(messages.insightsHeader)} ${splitUrl[4]}`}\n          </Link>\n        </BreadcrumbItem>\n        <BreadcrumbItem className=\"breadcrumb-item\" isActive>\n          {current}\n        </BreadcrumbItem>\n      </Breadcrumb>\n    </div>\n  );\n};\n\nBreadcrumbs.propTypes = {\n  current: PropTypes.string,\n};\n\nexport default Breadcrumbs;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport {\n  Grid,\n  GridItem,\n  Stack,\n  StackItem,\n  Title,\n} from '@patternfly/react-core';\nimport { Dropdown, DropdownToggle, DropdownItem } from '@patternfly/react-core';\nimport Skeleton from '@redhat-cloud-services/frontend-components/Skeleton';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat/DateFormat';\n\nimport messages from '../../Messages';\nimport { OneLineLoader } from '../../Utilities/Loaders';\n\nexport const ClusterHeader = ({ clusterId, clusterData, clusterInfo }) => {\n  const location = window.location;\n  const [isOpen, setIsOpen] = useState(false);\n  const intl = useIntl();\n  // subscribe to the cluster data query\n  const {\n    isUninitialized: isUninitializedCluster,\n    isFetching: isFetchingCluster,\n    data: cluster,\n  } = clusterData;\n\n  const {\n    isUninitialized: isUninitializedInfo,\n    isFetching: isFetchingInfo,\n    data: info,\n  } = clusterInfo;\n\n  const redirectOCM = (clusterId) => {\n    location.assign(\n      location.origin +\n        (location.pathname.includes('preview') ? `/preview` : '') +\n        `/openshift/details/${clusterId}`\n    );\n  };\n\n  const dropDownItems = [\n    <DropdownItem key=\"link\" onClick={() => redirectOCM(clusterId)}>\n      <snap>{intl.formatMessage(messages.clusterDetailsRedirect)}</snap>\n    </DropdownItem>,\n  ];\n\n  return (\n    <Grid id=\"cluster-header\" md={12} hasGutter>\n      <GridItem span={8}>\n        <Title\n          size=\"2xl\"\n          headingLevel=\"h1\"\n          id=\"cluster-header-title\"\n          ouiaId=\"cluster-name\"\n        >\n          {isUninitializedInfo || isFetchingInfo ? (\n            <Skeleton size=\"sm\" />\n          ) : (\n            info?.display_name || clusterId\n          )}\n        </Title>\n      </GridItem>\n      <GridItem span={4} id=\"cluster-header-dropdown\">\n        <Dropdown\n          position=\"right\"\n          onSelect={() => setIsOpen(!isOpen)}\n          autoFocus={false}\n          isOpen={isOpen}\n          toggle={\n            <DropdownToggle\n              id=\"toggle-id-2\"\n              onToggle={(isOpen) => setIsOpen(isOpen)}\n            >\n              {intl.formatMessage(messages.dropDownActionSingleCluster)}\n            </DropdownToggle>\n          }\n          dropdownItems={dropDownItems}\n        />\n      </GridItem>\n      <GridItem>\n        <Stack>\n          <StackItem id=\"cluster-header-uuid\">\n            <span>UUID:</span> <span>{clusterId}</span>\n          </StackItem>\n          <StackItem id=\"cluster-header-last-seen\">\n            <span>{intl.formatMessage(messages.lastSeen)}: </span>\n            <span>\n              {isUninitializedCluster || isFetchingCluster ? (\n                <OneLineLoader />\n              ) : cluster?.report?.meta?.last_checked_at ? (\n                <DateFormat\n                  date={cluster?.report?.meta?.last_checked_at}\n                  type=\"exact\"\n                />\n              ) : (\n                intl.formatMessage(messages.unknown)\n              )}\n            </span>\n          </StackItem>\n        </Stack>\n      </GridItem>\n    </Grid>\n  );\n};\n\nClusterHeader.propTypes = {\n  clusterId: PropTypes.string.isRequired,\n  clusterData: PropTypes.object.isRequired,\n  clusterInfo: PropTypes.shape({\n    isUninitialized: PropTypes.bool.isRequired,\n    isFetching: PropTypes.bool.isRequired,\n    data: PropTypes.shape({\n      cluster_id: PropTypes.string,\n      display_name: PropTypes.string,\n      managed: PropTypes.bool,\n      status: PropTypes.string,\n    }),\n  }),\n};\n","import React from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport {\n  useGetClusterByIdQuery,\n  useGetClusterInfoQuery,\n} from '../../Services/SmartProxy';\nimport { ClusterHeader } from './ClusterHeader';\n\nconst ClusterHeaderWrapper = () => {\n  const { clusterId } = useParams();\n  const clusterData = useGetClusterByIdQuery({\n    id: clusterId,\n    includeDisabled: false,\n  });\n  const clusterInfo = useGetClusterInfoQuery({\n    id: clusterId,\n  });\n\n  return (\n    <ClusterHeader\n      clusterId={clusterId}\n      clusterData={clusterData}\n      clusterInfo={clusterInfo}\n    />\n  );\n};\n\nexport default ClusterHeaderWrapper;\n","import { useFlag, useFlagsStatus } from '@unleash/proxy-client-react';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\n\nconst useFeatureFlag = (flag) => {\n  const { flagsReady } = useFlagsStatus();\n  const isFlagEnabled = useFlag(flag);\n  return flagsReady ? isFlagEnabled : false;\n};\n\nexport default useFeatureFlag;\n\nexport const UPGRADE_RISKS_ENABLE_FLAG =\n  'ocp-advisor.upgrade-risks.enable-in-stable';\n\nexport const useUpgradeRisksFeatureFlag = () => {\n  const upgradeRisksEnabled = useFeatureFlag(UPGRADE_RISKS_ENABLE_FLAG);\n  const chrome = useChrome();\n\n  return chrome.isBeta() || upgradeRisksEnabled;\n};\n","import './_ClusterRules.scss';\n\nimport React, { useEffect, useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { useLocation, useParams } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport capitalize from 'lodash/capitalize';\n\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat/DateFormat';\nimport InsightsLabel from '@redhat-cloud-services/frontend-components/InsightsLabel';\nimport {\n  SortByDirection,\n  Table,\n  TableBody,\n  TableHeader,\n  TableVariant,\n} from '@patternfly/react-table';\nimport { Tooltip } from '@patternfly/react-core';\nimport { TooltipPosition } from '@patternfly/react-core/dist/js/components/Tooltip';\nimport PrimaryToolbar from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\n\nimport messages from '../../Messages';\nimport {\n  IMPACT_LABEL,\n  LIKELIHOOD_LABEL,\n  FILTER_CATEGORIES as FC,\n  CLUSTER_RULES_COLUMNS_KEYS,\n  FILTER_CATEGORIES,\n  CLUSTER_RULES_COLUMNS,\n  CLUSTER_RULES_IMPACTED_CELL,\n} from '../../AppConstants';\nimport { ReportDetails } from '@redhat-cloud-services/frontend-components-advisor-components';\nimport RuleLabels from '../Labels/RuleLabels';\nimport {\n  ErrorState,\n  NoMatchingRecs,\n  NoRecsError,\n  NoInsightsResults,\n  NoRecsAffecting,\n} from '../MessageState/EmptyStates';\nimport {\n  paramParser,\n  passFilters,\n  removeFilterParam as _removeFilterParam,\n  addFilterParam as _addFilterParam,\n  translateSortParams,\n} from '../Common/Tables';\nimport {\n  CLUSTER_RULES_INITIAL_STATE,\n  resetFilters,\n  updateClusterRulesFilters,\n} from '../../Services/Filters';\nimport { getErrorKey, getPluginName } from '../../Utilities/Rule';\nimport Loading from '../Loading/Loading';\nimport { useGetClusterByIdQuery } from '../../Services/SmartProxy';\n\nconst ClusterRules = () => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const updateFilters = (filters) =>\n    dispatch(updateClusterRulesFilters(filters));\n  const filters = useSelector(({ filters }) => filters.clusterRulesState);\n  const { clusterId } = useParams();\n\n  const { isError, isUninitialized, isFetching, isSuccess, data, error } =\n    useGetClusterByIdQuery({\n      id: clusterId,\n      includeDisabled: false,\n    });\n  const reports = data?.report?.data || [];\n  const [filteredRows, setFilteredRows] = useState([]);\n  const [displayedRows, setDisplayedRows] = useState([]);\n  const [isAllExpanded, setIsAllExpanded] = useState(false);\n  const [expandFirst, setExpandFirst] = useState(true);\n  const [firstRule, setFirstRule] = useState(''); // show a particular rule first\n  const results = filteredRows.length;\n  const { search } = useLocation();\n  // helps to distinguish the state when the API data received but not yet filtered\n  const [rowsFiltered, setRowsFiltered] = useState(false);\n  const loadingState = isUninitialized || isFetching || !rowsFiltered;\n  const errorState = isError;\n  const successState = isSuccess;\n  const noInput = successState && reports.length === 0;\n  const noMatch = reports.length > 0 && filteredRows.length === 0;\n\n  const removeFilterParam = (param) =>\n    _removeFilterParam(filters, updateFilters, param);\n\n  const addFilterParam = (param, values) => {\n    setExpandFirst(false);\n    setFirstRule('');\n    return _addFilterParam(filters, updateFilters, param, values);\n  };\n\n  useEffect(() => {\n    if (search) {\n      const paramsObject = paramParser(search);\n      if (paramsObject.sort) {\n        const sortObj = translateSortParams(paramsObject.sort);\n        paramsObject.sortIndex = CLUSTER_RULES_COLUMNS_KEYS.indexOf(\n          sortObj.name\n        );\n        paramsObject.sortDirection = sortObj.direction;\n      }\n      if (paramsObject.first) {\n        setFirstRule(paramsObject.first);\n        delete paramsObject.first;\n      }\n      updateFilters({ ...filters, ...paramsObject });\n    }\n  }, []);\n\n  useEffect(() => {\n    setFilteredRows(buildFilteredRows(reports, filters));\n  }, [data, filters]);\n\n  useEffect(() => {\n    setDisplayedRows(\n      buildDisplayedRows(filteredRows, filters.sortIndex, filters.sortDirection)\n    );\n    setRowsFiltered(true);\n  }, [filteredRows]);\n\n  const handleOnCollapse = (_e, rowId, isOpen) => {\n    if (rowId === undefined) {\n      // if undefined, all rows are affected\n      setIsAllExpanded(isOpen);\n      setDisplayedRows(\n        displayedRows.map((row) => ({\n          ...row,\n          isOpen: isOpen,\n        }))\n      );\n    } else {\n      setDisplayedRows(\n        displayedRows.map((row, index) =>\n          index === rowId ? { ...row, isOpen } : row\n        )\n      );\n    }\n  };\n\n  const buildFilteredRows = (allRows, filters) => {\n    setRowsFiltered(false);\n    const expandedRowsSet = new Set(\n      displayedRows\n        .filter((ruleExpanded) => ruleExpanded?.isOpen)\n        .map((object) => object?.rule?.rule_id)\n    );\n\n    return allRows\n      .filter((rule) => passFilters(rule, filters))\n      .map((value, key) => [\n        {\n          rule: value,\n          isOpen: isAllExpanded || expandedRowsSet?.has(value?.rule_id),\n          cells: [\n            {\n              title: (\n                <div>\n                  {value?.description || value?.rule_id}{' '}\n                  <RuleLabels rule={value} />\n                </div>\n              ),\n            },\n            {\n              title: (\n                <div key={key}>\n                  <DateFormat\n                    date={value.created_at}\n                    type=\"relative\"\n                    tooltipProps={{ position: TooltipPosition.bottom }}\n                  />\n                </div>\n              ),\n            },\n            value.impacted\n              ? {\n                  title: (\n                    <div key={key}>\n                      <DateFormat\n                        extraTitle={`${intl.formatMessage(\n                          messages.impacted\n                        )}: `}\n                        date={value.impacted}\n                        type=\"relative\"\n                        tooltipProps={{ position: TooltipPosition.bottom }}\n                      />\n                    </div>\n                  ),\n                }\n              : {\n                  title: (\n                    <Tooltip\n                      key={key}\n                      content={\n                        <span>\n                          {intl.formatMessage(messages.impacted) + ': '}\n                          {intl.formatMessage(messages.nA)}\n                        </span>\n                      }\n                    >\n                      <span>{intl.formatMessage(messages.nA)}</span>\n                    </Tooltip>\n                  ),\n                },\n            {\n              title: (\n                <div key={key} style={{ verticalAlign: 'top' }}>\n                  {value?.likelihood && value?.impact ? (\n                    <Tooltip\n                      key={key}\n                      position={TooltipPosition.bottom}\n                      content={\n                        // TODO: refine fields lookup\n                        <span>\n                          The <strong>likelihood</strong> that this will be a\n                          problem is{' '}\n                          {value.likelihood\n                            ? LIKELIHOOD_LABEL[value.likelihood]\n                            : 'unknown'}\n                          .The <strong>impact</strong> of the problem would be{' '}\n                          {value.impact\n                            ? IMPACT_LABEL[value.impact]\n                            : 'unknown'}{' '}\n                          if it occurred.\n                        </span>\n                      }\n                    >\n                      <InsightsLabel\n                        value={value.total_risk}\n                        rest={{ isCompact: true }}\n                      />\n                    </Tooltip>\n                  ) : (\n                    <InsightsLabel\n                      value={value.total_risk}\n                      rest={{ isCompact: true }}\n                    />\n                  )}\n                </div>\n              ),\n            },\n          ],\n        },\n        {\n          fullWidth: true,\n          cells: [\n            {\n              title: (\n                <ReportDetails\n                  key={`child-${key}`}\n                  report={{\n                    rule: value,\n                    resolution: value.resolution,\n                    details: value.extra_data,\n                  }}\n                />\n              ),\n            },\n          ],\n        },\n      ]);\n  };\n\n  const buildDisplayedRows = (rows, index, direction) => {\n    let sortingRows = [...rows];\n    if (index >= 0 && !firstRule) {\n      const d = direction === SortByDirection.asc ? 1 : -1;\n      sortingRows = [...rows].sort((firstItem, secondItem) => {\n        let fst = firstItem[0].rule[CLUSTER_RULES_COLUMNS_KEYS[index]];\n        let snd = secondItem[0].rule[CLUSTER_RULES_COLUMNS_KEYS[index]];\n        if (index === CLUSTER_RULES_IMPACTED_CELL) {\n          //sorting for the impacted column\n          fst = new Date(firstItem[0].rule.impacted || 0);\n          snd = new Date(secondItem[0].rule.impacted || 0);\n        }\n        return fst > snd ? d : snd > fst ? -d : 0;\n      });\n    } else if (firstRule) {\n      const i = rows.findIndex((row) => {\n        const rule = row[0].rule;\n        /* rule_id is given with the plugin name only,\n           thus we need to look at extra_data for the error key */\n        return (\n          rule.rule_id.split('.report')[0] === getPluginName(firstRule) &&\n          rule.extra_data.error_key === getErrorKey(firstRule)\n        );\n      });\n      i !== -1 && sortingRows.unshift(sortingRows.splice(i, 1)[0]);\n    }\n    return sortingRows.flatMap((row, index) => {\n      const updatedRow = [...row];\n      if (expandFirst && index === 0) {\n        row[0].isOpen = true;\n      }\n      row[1].parent = index * 2;\n      return updatedRow;\n    });\n  };\n\n  const onSort = (_e, index, direction) => {\n    setRowsFiltered(false);\n    setExpandFirst(false);\n    setFirstRule('');\n    return updateFilters({\n      ...filters,\n      sortIndex: index,\n      sortDirection: direction,\n    });\n  };\n\n  const filterConfigItems = [\n    {\n      label: 'description',\n      filterValues: {\n        key: 'text-filter',\n        onChange: (_e, value) => addFilterParam('text', value),\n        value: filters.text,\n      },\n    },\n    {\n      label: FC.total_risk.title,\n      type: FC.total_risk.type,\n      id: FC.total_risk.urlParam,\n      value: `checkbox-${FC.total_risk.urlParam}`,\n      filterValues: {\n        key: `${FC.total_risk.urlParam}-filter`,\n        onChange: (_e, values) =>\n          addFilterParam(FILTER_CATEGORIES.total_risk.urlParam, values),\n        value: filters.total_risk,\n        items: FC.total_risk.values,\n      },\n    },\n    {\n      label: FC.category.title,\n      type: FC.category.type,\n      id: FC.category.urlParam,\n      value: `checkbox-${FC.category.urlParam}`,\n      filterValues: {\n        key: `${FC.category.urlParam}-filter`,\n        onChange: (_e, values) =>\n          addFilterParam(FILTER_CATEGORIES.category.urlParam, values),\n        value: filters.category,\n        items: FC.category.values,\n      },\n    },\n  ];\n\n  const pruneFilters = (localFilters, filterCategories) => {\n    const prunedFilters = Object.entries(localFilters);\n    return prunedFilters.length > 0\n      ? prunedFilters.reduce((arr, item) => {\n          if (filterCategories[item[0]]) {\n            const category = filterCategories[item[0]];\n            const chips = Array.isArray(item[1])\n              ? item[1].map((value) => {\n                  const selectedCategoryValue = category.values.find(\n                    (values) => values.value === String(value)\n                  );\n                  return selectedCategoryValue\n                    ? {\n                        name:\n                          selectedCategoryValue.text ||\n                          selectedCategoryValue.label,\n                        value,\n                      }\n                    : { name: value, value };\n                })\n              : [\n                  {\n                    name: category.values.find(\n                      (values) => values.value === String(item[1])\n                    ).label,\n                    value: item[1],\n                  },\n                ];\n            return [\n              ...arr,\n              {\n                category: capitalize(category.title),\n                chips,\n                urlParam: category.urlParam,\n              },\n            ];\n          } else if (item[0] === 'text') {\n            return [\n              ...arr,\n              ...(item[1].length > 0\n                ? [\n                    {\n                      category: intl.formatMessage(messages.description),\n                      chips: [{ name: item[1], value: item[1] }],\n                      urlParam: item[0],\n                    },\n                  ]\n                : []),\n            ];\n          } else {\n            return arr;\n          }\n        }, [])\n      : [];\n  };\n\n  const buildFilterChips = () => {\n    const localFilters = { ...filters };\n    delete localFilters.sortIndex;\n    delete localFilters.sortDirection;\n    return pruneFilters(localFilters, FILTER_CATEGORIES);\n  };\n\n  const activeFiltersConfig = {\n    deleteTitle: intl.formatMessage(messages.resetFilters),\n    filters: buildFilterChips(),\n    onDelete: (_event, itemsToRemove, isAll) => {\n      if (isAll) {\n        resetFilters(filters, CLUSTER_RULES_INITIAL_STATE, updateFilters);\n      } else {\n        itemsToRemove.map((item) => {\n          const newFilter = {\n            [item.urlParam]: Array.isArray(filters[item.urlParam])\n              ? filters[item.urlParam].filter(\n                  (value) => String(value) !== String(item.chips[0].value)\n                )\n              : '',\n          };\n          newFilter[item.urlParam].length > 0\n            ? updateFilters({ ...filters, ...newFilter })\n            : removeFilterParam(item.urlParam);\n        });\n      }\n    },\n  };\n\n  return (\n    <div id=\"cluster-recs-list-table\" data-ouia-safe={!loadingState}>\n      <PrimaryToolbar\n        filterConfig={{\n          items: filterConfigItems,\n          isDisabled: loadingState || errorState || reports.length === 0,\n        }}\n        pagination={\n          <React.Fragment>\n            {results === 1\n              ? `${results} ${intl.formatMessage(messages.recommendation)}`\n              : `${results} ${intl.formatMessage(messages.recommendations)}`}\n          </React.Fragment>\n        }\n        activeFiltersConfig={\n          loadingState || errorState || reports.length === 0\n            ? undefined\n            : activeFiltersConfig\n        }\n      />\n      <Table\n        aria-label={'Cluster recommendations table'}\n        ouiaId=\"recommendations\"\n        ouiaSafe={!loadingState}\n        onCollapse={handleOnCollapse} // TODO: set undefined when there is an empty state\n        rows={\n          errorState || loadingState || noMatch || noInput ? (\n            [\n              {\n                fullWidth: true,\n                cells: [\n                  {\n                    props: {\n                      colSpan: CLUSTER_RULES_COLUMNS.length + 1,\n                    },\n                    title: errorState ? (\n                      error?.status === 404 ? (\n                        <NoInsightsResults /> // no Insights results received yet\n                      ) : (\n                        <NoRecsError /> // any other problem\n                      )\n                    ) : loadingState ? (\n                      <Loading />\n                    ) : noInput ? (\n                      <NoRecsAffecting />\n                    ) : (\n                      <NoMatchingRecs />\n                    ),\n                  },\n                ],\n              },\n            ]\n          ) : successState ? (\n            displayedRows\n          ) : (\n            <ErrorState />\n          )\n        }\n        cells={CLUSTER_RULES_COLUMNS}\n        sortBy={{\n          index: filters.sortIndex,\n          direction: filters.sortDirection,\n        }}\n        onSort={onSort}\n        variant={TableVariant.compact}\n        isStickyHeader\n        canCollapseAll\n      >\n        <TableHeader />\n        <TableBody />\n      </Table>\n    </div>\n  );\n};\n\nexport default ClusterRules;\n","import { Flex, Icon } from '@patternfly/react-core';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';\nimport InfoCircleIcon from '@patternfly/react-icons/dist/esm/icons/info-circle-icon';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport {\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from '@patternfly/react-table';\nimport React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useGetUpgradeRisksQuery } from '../../Services/SmartProxy';\n\nexport const ALERTS_SEVERITY_ICONS = {\n  critical: (\n    <Icon status=\"danger\">\n      <ExclamationCircleIcon />\n    </Icon>\n  ),\n  warning: (\n    <Icon status=\"warning\">\n      <ExclamationTriangleIcon />\n    </Icon>\n  ),\n  info: (\n    <Icon status=\"info\">\n      <InfoCircleIcon />\n    </Icon>\n  ),\n  success: (\n    <Icon status=\"success\">\n      <CheckCircleIcon />\n    </Icon>\n  ),\n};\n\nexport const ALERTS_SEVERITY_LABEL = {\n  critical: (\n    <Flex alignItems={{ default: 'alignItemsCenter' }}>\n      {ALERTS_SEVERITY_ICONS['critical']} <b>Critical</b>\n    </Flex>\n  ),\n  warning: (\n    <Flex alignItems={{ default: 'alignItemsCenter' }}>\n      {ALERTS_SEVERITY_ICONS['warning']} <b>Warning</b>\n    </Flex>\n  ),\n  info: (\n    <Flex alignItems={{ default: 'alignItemsCenter' }}>\n      {ALERTS_SEVERITY_ICONS['info']} <b>Info</b>\n    </Flex>\n  ),\n};\n\nexport const ALERTS_SEVERITY_ORDER = ['critical', 'warning', 'info'];\n\nconst AlertsList = () => {\n  const { clusterId } = useParams();\n  const { data } = useGetUpgradeRisksQuery({ id: clusterId });\n  const { alerts = [] } =\n    data?.upgrade_recommendation?.upgrade_risks_predictors || {};\n\n  return (\n    <TableComposable\n      aria-label=\"Alerts firing table\"\n      variant=\"compact\"\n      borders={false}\n    >\n      <Thead>\n        <Tr>\n          <Th width={50}>Name</Th>\n          <Th width={25}>Status</Th>\n          <Th width={25}>Namespace</Th>\n        </Tr>\n      </Thead>\n      <Tbody>\n        {alerts.map(({ name, namespace, severity, url = '' }) => (\n          <Tr key={name}>\n            <Td className=\"alerts__name\">\n              {url === '' ? name : <a href={url}>{name}</a>}\n            </Td>\n            <Td className=\"alerts__severity\">\n              {ALERTS_SEVERITY_LABEL[severity]}\n            </Td>\n            <Td className=\"alerts__namespace\">{namespace}</Td>\n          </Tr>\n        ))}\n      </Tbody>\n    </TableComposable>\n  );\n};\n\nexport default AlertsList;\n","import React from 'react';\nimport {\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from '@patternfly/react-table';\nimport { useParams } from 'react-router-dom';\nimport { useGetUpgradeRisksQuery } from '../../Services/SmartProxy';\nimport { Flex, Icon } from '@patternfly/react-core';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon';\n\nexport const CLUSTER_OPERATOR_LABEL = {\n  degraded: 'Degraded',\n  failing: 'Failing',\n  available: 'Not Available',\n  upgradeable: 'Not Upgradeable',\n};\n\nconst ClusterOperatorsList = () => {\n  const { clusterId } = useParams();\n  const { data } = useGetUpgradeRisksQuery({ id: clusterId });\n  const { operator_conditions: conditions = [] } =\n    data?.upgrade_recommendation?.upgrade_risks_predictors || {};\n\n  return (\n    <TableComposable\n      aria-label=\"Cluster operators firing table\"\n      variant=\"compact\"\n      borders={false}\n    >\n      <Thead>\n        <Tr>\n          <Th width={50}>Name</Th>\n          <Th width={25}>Status</Th>\n          <Th width={25}>Message</Th>\n        </Tr>\n      </Thead>\n      <Tbody>\n        {conditions.map(({ name, condition, reason, url = '' }) => (\n          <Tr key={name}>\n            <Td class=\"operators__name\">\n              {url === '' ? name : <a href={url}>{name}</a>}\n            </Td>\n            <Td class=\"operators__status\">\n              <Flex alignItems={{ default: 'alignItemsCenter' }}>\n                <Icon status=\"warning\">\n                  <ExclamationTriangleIcon />\n                </Icon>\n                <b>{CLUSTER_OPERATOR_LABEL[condition]}</b>\n              </Flex>\n            </Td>\n            <Td class=\"operators__message\">{reason || '-'}</Td>\n          </Tr>\n        ))}\n      </Tbody>\n    </TableComposable>\n  );\n};\n\nexport default ClusterOperatorsList;\n","import {\n  EmptyState,\n  EmptyStateIcon,\n  Flex,\n  Icon,\n  Label,\n  Spinner,\n} from '@patternfly/react-core';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon';\nimport {\n  ExpandableRowContent,\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from '@patternfly/react-table';\nimport ErrorState from '@redhat-cloud-services/frontend-components/ErrorState';\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useGetUpgradeRisksQuery } from '../../Services/SmartProxy';\nimport {\n  NoUpgradeRisks,\n  UpgradeRisksNotAvailable,\n} from '../MessageState/EmptyStates';\nimport AlertsList, {\n  ALERTS_SEVERITY_ICONS,\n  ALERTS_SEVERITY_ORDER,\n} from './AlertsList';\nimport ClusterOperatorsList from './ClusterOperatorsList';\n\nconst UpgradeRisksTable = () => {\n  const { clusterId } = useParams();\n  const { isError, isUninitialized, isFetching, isSuccess, data, error } =\n    useGetUpgradeRisksQuery({ id: clusterId });\n  const { alerts = [], operator_conditions: conditions = [] } =\n    data?.upgrade_recommendation?.upgrade_risks_predictors || {};\n\n  const alertsDisabled = alerts.length === 0;\n  const conditionsDisabled = conditions.length === 0;\n\n  const [alertsExpanded, setAlertsExpanded] = useState(true);\n  const [operatorsExpanded, setOperatorsExpanded] = useState(true);\n\n  useEffect(() => {\n    setAlertsExpanded(!alertsDisabled);\n    setOperatorsExpanded(!conditionsDisabled);\n  }, [data]);\n\n  const hasRisks = isSuccess && (alerts.length > 0 || conditions.length > 0);\n  const noRisks = isSuccess && alerts.length === 0 && conditions.length === 0;\n\n  return isUninitialized || isFetching ? (\n    <EmptyState>\n      <EmptyStateIcon variant=\"container\" component={Spinner} />\n    </EmptyState>\n  ) : (\n    <TableComposable\n      aria-label=\"Upgrade risks table\"\n      isExpandable\n      variant=\"compact\"\n      id=\"upgrade-risks-table\"\n      borders={hasRisks}\n    >\n      <Thead>\n        <Tr>\n          <Th />\n          <Th>Name</Th>\n        </Tr>\n      </Thead>\n      {hasRisks ? (\n        <>\n          <Tbody isExpanded={alertsExpanded}>\n            <Tr className=\"alerts__header\">\n              <Td\n                expand={\n                  alertsDisabled\n                    ? {}\n                    : {\n                        rowIndex: 0,\n                        isExpanded: alertsExpanded,\n                        onToggle: () => setAlertsExpanded(!alertsExpanded),\n                      }\n                }\n              />\n              <Td>\n                <Flex alignItems={{ default: 'alignItemsCenter' }}>\n                  {alertsDisabled\n                    ? ALERTS_SEVERITY_ICONS['success']\n                    : ALERTS_SEVERITY_ICONS[ // this algorithm helps to decide which icon (the most severe) to show\n                        ALERTS_SEVERITY_ORDER.filter((s) =>\n                          alerts.some(({ severity }) => s === severity)\n                        )[0]\n                      ]}\n                  <b>Alerts firing</b>\n                  <Label\n                    isCompact\n                    id=\"alerts-label\"\n                    color={alertsDisabled ? 'green' : 'grey'}\n                  >\n                    {alerts.length} upgrade risks\n                  </Label>\n                </Flex>\n              </Td>\n            </Tr>\n            <Tr isExpanded={alertsExpanded} className=\"alerts__content\">\n              <Td />\n              <Td>\n                <ExpandableRowContent>\n                  Learn how to resolve your alert firing risks.\n                  <AlertsList />\n                </ExpandableRowContent>\n              </Td>\n            </Tr>\n          </Tbody>\n          <Tbody isExpanded={operatorsExpanded}>\n            <Tr className=\"operators__header\">\n              <Td\n                expand={\n                  conditionsDisabled\n                    ? undefined\n                    : {\n                        rowIndex: 1,\n                        isExpanded: operatorsExpanded,\n                        onToggle: () =>\n                          setOperatorsExpanded(!operatorsExpanded),\n                      }\n                }\n              />\n              <Td>\n                <Flex alignItems={{ default: 'alignItemsCenter' }}>\n                  {conditionsDisabled ? (\n                    ALERTS_SEVERITY_ICONS['success']\n                  ) : (\n                    <Icon status=\"warning\">\n                      <ExclamationTriangleIcon />\n                    </Icon>\n                  )}\n                  <b>Cluster opertors</b>\n                  <Label\n                    isCompact\n                    id=\"operator-conditions-label\"\n                    color={conditionsDisabled ? 'green' : 'grey'}\n                  >\n                    {conditions.length} upgrade risks\n                  </Label>\n                </Flex>\n              </Td>\n            </Tr>\n            <Tr isExpanded={operatorsExpanded} className=\"operators__content\">\n              <Td />\n              <Td>\n                <ExpandableRowContent>\n                  Learn how to resolve your cluster operator risks.\n                  <ClusterOperatorsList />\n                </ExpandableRowContent>\n              </Td>\n            </Tr>\n          </Tbody>\n        </>\n      ) : (\n        <Tbody>\n          <Tr>\n            <Td colSpan={2}>\n              {noRisks ? (\n                <NoUpgradeRisks />\n              ) : isError && error.status === 404 ? (\n                <UpgradeRisksNotAvailable />\n              ) : (\n                <ErrorState />\n              )}\n            </Td>\n          </Tr>\n        </Tbody>\n      )}\n    </TableComposable>\n  );\n};\n\nexport default UpgradeRisksTable;\n","export { default as UpgradeRisksTable } from './UpgradeRisksTable';\n","import { Card, CardBody, Tab, Tabs } from '@patternfly/react-core';\nimport React, { useState } from 'react';\n\nimport { useIntl } from 'react-intl';\nimport { useSearchParams } from 'react-router-dom';\nimport messages from '../../Messages';\nimport { setSearchParameter } from '../../Utilities/Helpers';\nimport { useUpgradeRisksFeatureFlag } from '../../Utilities/useFeatureFlag';\nimport ClusterRules from '../ClusterRules/ClusterRules';\nimport { UpgradeRisksTable } from '../UpgradeRisksTable';\n\nconst CLUSTER_TABS = ['recommendations', 'upgrade_risks'];\n\nconst ClusterTabs = () => {\n  const intl = useIntl();\n  const upgradeRisksEnabled = useUpgradeRisksFeatureFlag();\n  const [searchParams] = useSearchParams();\n\n  const [activeKey, setActiveKey] = useState(() => {\n    const activeTab = searchParams.get('active_tab');\n    return upgradeRisksEnabled\n      ? CLUSTER_TABS.includes(activeTab)\n        ? activeTab\n        : 'recommendations'\n      : 'recommendations';\n  });\n\n  return (\n    <Card isCompact>\n      <CardBody>\n        <Tabs\n          activeKey={activeKey}\n          onSelect={(event, key) => {\n            setSearchParameter('active_tab', key);\n            setActiveKey(key);\n          }}\n          aria-label=\"Cluster tabs\"\n        >\n          <Tab\n            eventKey=\"recommendations\"\n            title={intl.formatMessage(messages.recommendations)}\n          >\n            {activeKey === 'recommendations' && <ClusterRules />}\n          </Tab>\n          <Tab\n            eventKey=\"upgrade_risks\"\n            title={intl.formatMessage(messages.upgradeRisks)}\n          >\n            {upgradeRisksEnabled && activeKey === 'upgrade_risks' && (\n              <UpgradeRisksTable />\n            )}\n          </Tab>\n        </Tabs>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default ClusterTabs;\n","import { Alert } from '@patternfly/react-core';\nimport React from 'react';\nimport { useIntl } from 'react-intl';\nimport { useParams } from 'react-router-dom';\nimport messages from '../../Messages';\nimport { useGetUpgradeRisksQuery } from '../../Services/SmartProxy';\nimport { strong } from '../../Utilities/Helpers';\n\nconst UpgradeRisksAlert = () => {\n  const intl = useIntl();\n  const { clusterId } = useParams();\n  const { isError, isUninitialized, isFetching, isSuccess, data, error } =\n    useGetUpgradeRisksQuery({ id: clusterId });\n  const { alerts = [], operator_conditions: conditions = [] } =\n    data?.upgrade_recommendation?.upgrade_risks_predictors || {};\n\n  const hasRisks = isSuccess && (alerts.length > 0 || conditions.length > 0);\n  const noRisks = isSuccess && alerts.length === 0 && conditions.length === 0;\n\n  return isUninitialized || isFetching ? (\n    <></>\n  ) : hasRisks ? (\n    <Alert\n      variant=\"warning\"\n      isInline\n      title={intl.formatMessage(messages.resolveUpgradeRisks)}\n    >\n      {intl.formatMessage(messages.resolveUpgradeRisksDesc, { strong })}\n    </Alert>\n  ) : noRisks ? (\n    <Alert\n      variant=\"success\"\n      isInline\n      title={intl.formatMessage(messages.noKnownUpgradeRisks)}\n    />\n  ) : isError && error.status === 404 ? (\n    <Alert\n      variant=\"warning\"\n      isInline\n      title={intl.formatMessage(messages.upgradeRisksNotCurrentlyAvailable)}\n    />\n  ) : (\n    <></>\n  );\n};\n\nexport default UpgradeRisksAlert;\n","export { default as UpgradeRisksAlert } from './UpgradeRisksAlert';\n","import './_Cluster.scss';\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport PageHeader from '@redhat-cloud-services/frontend-components/PageHeader';\nimport ClusterHeader from '../ClusterHeader';\nimport Breadcrumbs from '../Breadcrumbs';\nimport ClusterTabs from '../ClusterTabs/ClusterTabs';\nimport { Flex, FlexItem, PageSection } from '@patternfly/react-core';\nimport { UpgradeRisksAlert } from '../UpgradeRisksAlert';\n\nexport const Cluster = ({ cluster, clusterId }) => {\n  // TODO: make breadcrumbs take display name from GET /cluster/id/info\n  return (\n    <React.Fragment>\n      <PageHeader className=\"pf-m-light ins-inventory-detail\">\n        <Flex direction={{ default: 'column' }}>\n          <FlexItem>\n            <Breadcrumbs\n              current={cluster?.data?.report.meta.cluster_name || clusterId}\n            />\n            <ClusterHeader />\n          </FlexItem>\n          <UpgradeRisksAlert />\n        </Flex>\n      </PageHeader>\n      <PageSection>\n        <ClusterTabs cluster={cluster} />\n      </PageSection>\n    </React.Fragment>\n  );\n};\n\nCluster.propTypes = {\n  cluster: PropTypes.object.isRequired,\n  clusterId: PropTypes.string.isRequired,\n};\n","import React, { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\n\nimport { useGetClusterByIdQuery } from '../../Services/SmartProxy';\nimport messages from '../../Messages';\nimport { Cluster } from './Cluster';\n\nconst ClusterWrapper = () => {\n  const intl = useIntl();\n  const { clusterId } = useParams();\n  const cluster = useGetClusterByIdQuery({\n    id: clusterId,\n    includeDisabled: false,\n  });\n  const chrome = useChrome();\n\n  useEffect(() => {\n    cluster.refetch();\n  }, [clusterId]);\n\n  useEffect(() => {\n    const subnav = `${\n      cluster?.data?.report?.meta?.cluster_name || clusterId\n    } - ${intl.formatMessage(messages.clusters)}`;\n    chrome.updateDocumentTitle(\n      intl.formatMessage(messages.documentTitle, { subnav })\n    );\n  }, [cluster, clusterId]);\n  return <Cluster cluster={cluster} clusterId={clusterId} />;\n};\n\nexport default ClusterWrapper;\n","import { TooltipPosition } from '@patternfly/react-core/dist/js/components/Tooltip/Tooltip';\nimport { Tooltip, Label } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { useIntl } from 'react-intl';\nimport messages from '../../Messages';\n\nconst RuleLabels = ({ rule }) => {\n  const intl = useIntl();\n  return (\n    <React.Fragment>\n      {rule.disabled && (\n        <Tooltip\n          content={intl.formatMessage(messages.ruleIsDisabledTooltip)}\n          position={TooltipPosition.right}\n        >\n          <Label color=\"gray\" isCompact>\n            {intl.formatMessage(messages.disabled)}\n          </Label>\n        </Tooltip>\n      )}\n    </React.Fragment>\n  );\n};\n\nRuleLabels.propTypes = {\n  rule: PropTypes.object,\n};\n\nexport default RuleLabels;\n","import React from 'react';\nimport { Card, CardBody } from '@patternfly/react-core';\nimport { List } from 'react-content-loader';\n\nconst Loading = () => (\n  <Card ouiaId=\"loading-skeleton\">\n    <CardBody>\n      <List />\n    </CardBody>\n  </Card>\n);\n\nexport default Loading;\n","import React from 'react';\nimport ContentLoader from 'react-content-loader';\n\nconst OneLineLoader = () => (\n  <ContentLoader height={20}>\n    <rect x=\"0\" y=\"0\" rx=\"4\" ry=\"4\" width=\"300\" height=\"20\" />\n  </ContentLoader>\n);\n\nexport { OneLineLoader };\n"],"names":["Breadcrumbs","current","intl","useIntl","location","useLocation","splitUrl","pathname","split","ouiaId","className","Link","to","relative","formatMessage","messages","isActive","propTypes","PropTypes","ClusterHeader","clusterId","clusterData","clusterInfo","window","useState","isOpen","setIsOpen","isUninitializedCluster","isUninitialized","isFetchingCluster","isFetching","cluster","data","isUninitializedInfo","isFetchingInfo","info","dropDownItems","DropdownItem","key","onClick","assign","origin","includes","redirectOCM","Grid","id","md","hasGutter","GridItem","span","Title","size","headingLevel","Skeleton","display_name","Dropdown","position","onSelect","s","autoFocus","toggle","DropdownToggle","onToggle","dropdownItems","Stack","StackItem","report","meta","last_checked_at","date","type","cluster_id","managed","status","useParams","useGetClusterByIdQuery","includeDisabled","useGetClusterInfoQuery","UPGRADE_RISKS_ENABLE_FLAG","dispatch","useDispatch","updateFilters","filters","updateClusterRulesFilters","useSelector","clusterRulesState","isError","isSuccess","error","reports","filteredRows","setFilteredRows","displayedRows","setDisplayedRows","isAllExpanded","setIsAllExpanded","expandFirst","setExpandFirst","firstRule","setFirstRule","results","length","search","rowsFiltered","setRowsFiltered","loadingState","errorState","successState","noInput","noMatch","addFilterParam","param","values","_addFilterParam","useEffect","paramsObject","paramParser","sort","sortObj","translateSortParams","sortIndex","CLUSTER_RULES_COLUMNS_KEYS","name","sortDirection","direction","first","buildFilteredRows","buildDisplayedRows","allRows","expandedRowsSet","Set","filter","ruleExpanded","map","object","rule","rule_id","passFilters","value","has","cells","title","description","RuleLabels","created_at","tooltipProps","TooltipPosition","impacted","extraTitle","Tooltip","content","style","verticalAlign","likelihood","impact","LIKELIHOOD_LABEL","IMPACT_LABEL","InsightsLabel","total_risk","rest","isCompact","fullWidth","resolution","details","extra_data","rows","index","sortingRows","d","SortByDirection","firstItem","secondItem","fst","snd","CLUSTER_RULES_IMPACTED_CELL","Date","i","findIndex","row","getPluginName","error_key","getErrorKey","unshift","splice","flatMap","updatedRow","parent","filterConfigItems","label","filterValues","onChange","_e","text","FC","FILTER_CATEGORIES","items","category","activeFiltersConfig","deleteTitle","localFilters","filterCategories","prunedFilters","Object","entries","reduce","arr","item","chips","Array","isArray","selectedCategoryValue","find","String","capitalize","urlParam","pruneFilters","buildFilterChips","onDelete","_event","itemsToRemove","isAll","resetFilters","CLUSTER_RULES_INITIAL_STATE","newFilter","_removeFilterParam","PrimaryToolbar","filterConfig","isDisabled","pagination","Table","ouiaSafe","onCollapse","rowId","undefined","props","colSpan","CLUSTER_RULES_COLUMNS","Loading","sortBy","onSort","variant","TableVariant","isStickyHeader","canCollapseAll","TableHeader","TableBody","ALERTS_SEVERITY_ICONS","critical","Icon","warning","success","ALERTS_SEVERITY_LABEL","Flex","alignItems","default","ALERTS_SEVERITY_ORDER","useGetUpgradeRisksQuery","upgrade_recommendation","upgrade_risks_predictors","alerts","TableComposable","borders","Thead","Tr","Th","width","Tbody","namespace","severity","url","Td","href","CLUSTER_OPERATOR_LABEL","degraded","failing","available","upgradeable","operator_conditions","conditions","condition","reason","class","alertsDisabled","conditionsDisabled","alertsExpanded","setAlertsExpanded","operatorsExpanded","setOperatorsExpanded","hasRisks","noRisks","EmptyState","EmptyStateIcon","component","Spinner","isExpandable","isExpanded","expand","rowIndex","some","Label","color","ExpandableRowContent","ErrorState","CLUSTER_TABS","upgradeRisksEnabled","flag","flagsReady","useFlagsStatus","isFlagEnabled","useFlag","useFeatureFlag","chrome","useChrome","isBeta","useUpgradeRisksFeatureFlag","useSearchParams","searchParams","activeTab","get","activeKey","setActiveKey","Card","CardBody","Tabs","event","setSearchParameter","Tab","eventKey","Alert","isInline","strong","Cluster","PageHeader","FlexItem","cluster_name","PageSection","refetch","subnav","updateDocumentTitle","disabled","OneLineLoader","height","x","y","rx","ry"],"sourceRoot":""}