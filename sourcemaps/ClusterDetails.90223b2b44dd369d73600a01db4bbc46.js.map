{"version":3,"file":"js/ClusterDetails.47ebd1d2e7aea0077e49.js","mappings":"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","sources":["webpack:///./src/Components/ClusterHeader/ClusterHeader.js","webpack:///./src/Components/ClusterHeader/index.js","webpack:///./src/Components/ClusterRules/ClusterRules.js","webpack:///./src/Components/UpdateRisksTable/AlertsList.js","webpack:///./src/Components/UpdateRisksTable/ClusterOperatorsList.js","webpack:///./src/Components/UpdateRisksTable/UpdateRisksTable.js","webpack:///./src/Components/UpdateRisksTracker/UpdateRisksTracker.js","webpack:///./src/Components/UpdateRisksTable/useUpdateRisksFeature.js","webpack:///./src/Components/ClusterTabs/ClusterTabs.js","webpack:///./src/Components/UpdateRisksAlert/UpdateRisksAlert.js","webpack:///./src/Components/Cluster/Cluster.js","webpack:///./src/Components/Cluster/index.js","webpack:///./src/Components/Labels/RuleLabels.js"],"sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport {\n  Grid,\n  GridItem,\n  Stack,\n  StackItem,\n  Title,\n} from '@patternfly/react-core';\nimport { Dropdown, DropdownToggle, DropdownItem } from '@patternfly/react-core';\nimport Skeleton from '@redhat-cloud-services/frontend-components/Skeleton';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat/DateFormat';\n\nimport messages from '../../Messages';\nimport { OneLineLoader } from '../../Utilities/Loaders';\n\nexport const ClusterHeader = ({ clusterId, clusterData, clusterInfo }) => {\n  const location = window.location;\n  const [isOpen, setIsOpen] = useState(false);\n  const intl = useIntl();\n  // subscribe to the cluster data query\n  const {\n    isUninitialized: isUninitializedCluster,\n    isFetching: isFetchingCluster,\n    data: cluster,\n  } = clusterData;\n\n  const {\n    isUninitialized: isUninitializedInfo,\n    isFetching: isFetchingInfo,\n    data: info,\n  } = clusterInfo;\n\n  const redirectOCM = (clusterId) => {\n    location.assign(\n      location.origin +\n        (location.pathname.includes('preview') ? `/preview` : '') +\n        `/openshift/details/${clusterId}`\n    );\n  };\n\n  const dropDownItems = [\n    <DropdownItem key=\"link\" onClick={() => redirectOCM(clusterId)}>\n      <snap>{intl.formatMessage(messages.clusterDetailsRedirect)}</snap>\n    </DropdownItem>,\n  ];\n\n  return (\n    <Grid id=\"cluster-header\" md={12} hasGutter>\n      <GridItem span={8}>\n        <Title\n          size=\"2xl\"\n          headingLevel=\"h1\"\n          id=\"cluster-header-title\"\n          ouiaId=\"cluster-name\"\n        >\n          {isUninitializedInfo || isFetchingInfo ? (\n            <Skeleton size=\"sm\" />\n          ) : (\n            info?.display_name || clusterId\n          )}\n        </Title>\n      </GridItem>\n      <GridItem span={4} id=\"cluster-header-dropdown\">\n        <Dropdown\n          position=\"right\"\n          onSelect={() => setIsOpen(!isOpen)}\n          autoFocus={false}\n          isOpen={isOpen}\n          toggle={\n            <DropdownToggle\n              id=\"toggle-id-2\"\n              onToggle={(isOpen) => setIsOpen(isOpen)}\n            >\n              {intl.formatMessage(messages.dropDownActionSingleCluster)}\n            </DropdownToggle>\n          }\n          dropdownItems={dropDownItems}\n        />\n      </GridItem>\n      <GridItem>\n        <Stack>\n          <StackItem id=\"cluster-header-uuid\">\n            <span>UUID:</span> <span>{clusterId}</span>\n          </StackItem>\n          <StackItem id=\"cluster-header-last-seen\">\n            <span>{intl.formatMessage(messages.lastSeen)}: </span>\n            <span>\n              {isUninitializedCluster || isFetchingCluster ? (\n                <OneLineLoader />\n              ) : cluster?.report?.meta?.last_checked_at ? (\n                <DateFormat\n                  date={cluster?.report?.meta?.last_checked_at}\n                  type=\"exact\"\n                />\n              ) : (\n                intl.formatMessage(messages.unknown)\n              )}\n            </span>\n          </StackItem>\n        </Stack>\n      </GridItem>\n    </Grid>\n  );\n};\n\nClusterHeader.propTypes = {\n  clusterId: PropTypes.string.isRequired,\n  clusterData: PropTypes.object.isRequired,\n  clusterInfo: PropTypes.shape({\n    isUninitialized: PropTypes.bool.isRequired,\n    isFetching: PropTypes.bool.isRequired,\n    data: PropTypes.shape({\n      cluster_id: PropTypes.string,\n      display_name: PropTypes.string,\n      managed: PropTypes.bool,\n      status: PropTypes.string,\n    }),\n  }),\n};\n","import React from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport {\n  useGetClusterByIdQuery,\n  useGetClusterInfoQuery,\n} from '../../Services/SmartProxy';\nimport { ClusterHeader } from './ClusterHeader';\n\nconst ClusterHeaderWrapper = () => {\n  const { clusterId } = useParams();\n  const clusterData = useGetClusterByIdQuery({\n    id: clusterId,\n    includeDisabled: false,\n  });\n  const clusterInfo = useGetClusterInfoQuery({\n    id: clusterId,\n  }); // TODO: improve cache handling: do network request only when cache is empty\n\n  return (\n    <ClusterHeader\n      clusterId={clusterId}\n      clusterData={clusterData}\n      clusterInfo={clusterInfo}\n    />\n  );\n};\n\nexport default ClusterHeaderWrapper;\n","import './_ClusterRules.scss';\n\nimport React, { useEffect, useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { useLocation, useParams } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport capitalize from 'lodash/capitalize';\n\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat/DateFormat';\nimport InsightsLabel from '@redhat-cloud-services/frontend-components/InsightsLabel';\nimport {\n  SortByDirection,\n  Table,\n  TableBody,\n  TableHeader,\n  TableVariant,\n} from '@patternfly/react-table';\nimport { Tooltip } from '@patternfly/react-core';\nimport { TooltipPosition } from '@patternfly/react-core/dist/js/components/Tooltip';\nimport PrimaryToolbar from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\n\nimport messages from '../../Messages';\nimport {\n  IMPACT_LABEL,\n  LIKELIHOOD_LABEL,\n  FILTER_CATEGORIES as FC,\n  CLUSTER_RULES_COLUMNS_KEYS,\n  FILTER_CATEGORIES,\n  CLUSTER_RULES_COLUMNS,\n  CLUSTER_RULES_IMPACTED_CELL,\n} from '../../AppConstants';\nimport { ReportDetails } from '@redhat-cloud-services/frontend-components-advisor-components';\nimport RuleLabels from '../Labels/RuleLabels';\nimport {\n  ErrorState,\n  NoMatchingRecs,\n  NoRecsError,\n  NoInsightsResults,\n  NoRecsAffecting,\n} from '../MessageState/EmptyStates';\nimport {\n  paramParser,\n  passFilters,\n  removeFilterParam as _removeFilterParam,\n  addFilterParam as _addFilterParam,\n  translateSortParams,\n} from '../Common/Tables';\nimport {\n  CLUSTER_RULES_INITIAL_STATE,\n  resetFilters,\n  updateClusterRulesFilters,\n} from '../../Services/Filters';\nimport { getErrorKey, getPluginName } from '../../Utilities/Rule';\nimport Loading from '../Loading/Loading';\nimport { useGetClusterByIdQuery } from '../../Services/SmartProxy';\n\nconst ClusterRules = () => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const updateFilters = (filters) =>\n    dispatch(updateClusterRulesFilters(filters));\n  const filters = useSelector(({ filters }) => filters.clusterRulesState);\n  const { clusterId } = useParams();\n\n  const { isError, isUninitialized, isFetching, isSuccess, data, error } =\n    useGetClusterByIdQuery({\n      id: clusterId,\n      includeDisabled: false,\n    });\n  const reports = data?.report?.data || [];\n  const [filteredRows, setFilteredRows] = useState([]);\n  const [displayedRows, setDisplayedRows] = useState([]);\n  const [isAllExpanded, setIsAllExpanded] = useState(false);\n  const [expandFirst, setExpandFirst] = useState(true);\n  const [firstRule, setFirstRule] = useState(''); // show a particular rule first\n  const results = filteredRows.length;\n  const { search } = useLocation();\n  // helps to distinguish the state when the API data received but not yet filtered\n  const [rowsFiltered, setRowsFiltered] = useState(false);\n  const loadingState = isUninitialized || isFetching || !rowsFiltered;\n  const errorState = isError;\n  const successState = isSuccess;\n  const noInput = successState && reports.length === 0;\n  const noMatch = reports.length > 0 && filteredRows.length === 0;\n\n  const removeFilterParam = (param) =>\n    _removeFilterParam(filters, updateFilters, param);\n\n  const addFilterParam = (param, values) => {\n    setExpandFirst(false);\n    setFirstRule('');\n    return _addFilterParam(filters, updateFilters, param, values);\n  };\n\n  useEffect(() => {\n    if (search) {\n      const paramsObject = paramParser(search);\n      if (paramsObject.sort) {\n        const sortObj = translateSortParams(paramsObject.sort);\n        paramsObject.sortIndex = CLUSTER_RULES_COLUMNS_KEYS.indexOf(\n          sortObj.name\n        );\n        paramsObject.sortDirection = sortObj.direction;\n      }\n      if (paramsObject.first) {\n        setFirstRule(paramsObject.first);\n        delete paramsObject.first;\n      }\n      updateFilters({ ...filters, ...paramsObject });\n    }\n  }, []);\n\n  useEffect(() => {\n    setFilteredRows(buildFilteredRows(reports, filters));\n  }, [data, filters]);\n\n  useEffect(() => {\n    setDisplayedRows(\n      buildDisplayedRows(filteredRows, filters.sortIndex, filters.sortDirection)\n    );\n    setRowsFiltered(true);\n  }, [filteredRows]);\n\n  const handleOnCollapse = (_e, rowId, isOpen) => {\n    if (rowId === undefined) {\n      // if undefined, all rows are affected\n      setIsAllExpanded(isOpen);\n      setDisplayedRows(\n        displayedRows.map((row) => ({\n          ...row,\n          isOpen: isOpen,\n        }))\n      );\n    } else {\n      setDisplayedRows(\n        displayedRows.map((row, index) =>\n          index === rowId ? { ...row, isOpen } : row\n        )\n      );\n    }\n  };\n\n  const buildFilteredRows = (allRows, filters) => {\n    setRowsFiltered(false);\n    const expandedRowsSet = new Set(\n      displayedRows\n        .filter((ruleExpanded) => ruleExpanded?.isOpen)\n        .map((object) => object?.rule?.rule_id)\n    );\n\n    return allRows\n      .filter((rule) => passFilters(rule, filters))\n      .map((value, key) => [\n        {\n          rule: value,\n          isOpen: isAllExpanded || expandedRowsSet?.has(value?.rule_id),\n          cells: [\n            {\n              title: (\n                <div>\n                  {value?.description || value?.rule_id}{' '}\n                  <RuleLabels rule={value} />\n                </div>\n              ),\n            },\n            {\n              title: (\n                <div key={key}>\n                  <DateFormat\n                    date={value.created_at}\n                    type=\"relative\"\n                    tooltipProps={{ position: TooltipPosition.bottom }}\n                  />\n                </div>\n              ),\n            },\n            value.impacted\n              ? {\n                  title: (\n                    <div key={key}>\n                      <DateFormat\n                        extraTitle={`${intl.formatMessage(\n                          messages.impacted\n                        )}: `}\n                        date={value.impacted}\n                        type=\"relative\"\n                        tooltipProps={{ position: TooltipPosition.bottom }}\n                      />\n                    </div>\n                  ),\n                }\n              : {\n                  title: (\n                    <Tooltip\n                      key={key}\n                      content={\n                        <span>\n                          {intl.formatMessage(messages.impacted) + ': '}\n                          {intl.formatMessage(messages.nA)}\n                        </span>\n                      }\n                    >\n                      <span>{intl.formatMessage(messages.nA)}</span>\n                    </Tooltip>\n                  ),\n                },\n            {\n              title: (\n                <div key={key} style={{ verticalAlign: 'top' }}>\n                  {value?.likelihood && value?.impact ? (\n                    <Tooltip\n                      key={key}\n                      position={TooltipPosition.bottom}\n                      content={\n                        // TODO: refine fields lookup\n                        <span>\n                          The <strong>likelihood</strong> that this will be a\n                          problem is{' '}\n                          {value.likelihood\n                            ? LIKELIHOOD_LABEL[value.likelihood]\n                            : 'unknown'}\n                          .The <strong>impact</strong> of the problem would be{' '}\n                          {value.impact\n                            ? IMPACT_LABEL[value.impact]\n                            : 'unknown'}{' '}\n                          if it occurred.\n                        </span>\n                      }\n                    >\n                      <InsightsLabel\n                        value={value.total_risk}\n                        rest={{ isCompact: true }}\n                      />\n                    </Tooltip>\n                  ) : (\n                    <InsightsLabel\n                      value={value.total_risk}\n                      rest={{ isCompact: true }}\n                    />\n                  )}\n                </div>\n              ),\n            },\n          ],\n        },\n        {\n          fullWidth: true,\n          cells: [\n            {\n              title: (\n                <ReportDetails\n                  key={`child-${key}`}\n                  report={{\n                    rule: value,\n                    resolution: value.resolution,\n                    details: value.extra_data,\n                  }}\n                />\n              ),\n            },\n          ],\n        },\n      ]);\n  };\n\n  const buildDisplayedRows = (rows, index, direction) => {\n    let sortingRows = [...rows];\n    if (index >= 0 && !firstRule) {\n      const d = direction === SortByDirection.asc ? 1 : -1;\n      sortingRows = [...rows].sort((firstItem, secondItem) => {\n        let fst = firstItem[0].rule[CLUSTER_RULES_COLUMNS_KEYS[index]];\n        let snd = secondItem[0].rule[CLUSTER_RULES_COLUMNS_KEYS[index]];\n        if (index === CLUSTER_RULES_IMPACTED_CELL) {\n          //sorting for the impacted column\n          fst = new Date(firstItem[0].rule.impacted || 0);\n          snd = new Date(secondItem[0].rule.impacted || 0);\n        }\n        return fst > snd ? d : snd > fst ? -d : 0;\n      });\n    } else if (firstRule) {\n      const i = rows.findIndex((row) => {\n        const rule = row[0].rule;\n        /* rule_id is given with the plugin name only,\n           thus we need to look at extra_data for the error key */\n        return (\n          rule.rule_id.split('.report')[0] === getPluginName(firstRule) &&\n          rule.extra_data.error_key === getErrorKey(firstRule)\n        );\n      });\n      i !== -1 && sortingRows.unshift(sortingRows.splice(i, 1)[0]);\n    }\n    return sortingRows.flatMap((row, index) => {\n      const updatedRow = [...row];\n      if (expandFirst && index === 0) {\n        row[0].isOpen = true;\n      }\n      row[1].parent = index * 2;\n      return updatedRow;\n    });\n  };\n\n  const onSort = (_e, index, direction) => {\n    setRowsFiltered(false);\n    setExpandFirst(false);\n    setFirstRule('');\n    return updateFilters({\n      ...filters,\n      sortIndex: index,\n      sortDirection: direction,\n    });\n  };\n\n  const filterConfigItems = [\n    {\n      label: 'description',\n      filterValues: {\n        key: 'text-filter',\n        onChange: (_e, value) => addFilterParam('text', value),\n        value: filters.text,\n      },\n    },\n    {\n      label: FC.total_risk.title,\n      type: FC.total_risk.type,\n      id: FC.total_risk.urlParam,\n      value: `checkbox-${FC.total_risk.urlParam}`,\n      filterValues: {\n        key: `${FC.total_risk.urlParam}-filter`,\n        onChange: (_e, values) =>\n          addFilterParam(FILTER_CATEGORIES.total_risk.urlParam, values),\n        value: filters.total_risk,\n        items: FC.total_risk.values,\n      },\n    },\n    {\n      label: FC.category.title,\n      type: FC.category.type,\n      id: FC.category.urlParam,\n      value: `checkbox-${FC.category.urlParam}`,\n      filterValues: {\n        key: `${FC.category.urlParam}-filter`,\n        onChange: (_e, values) =>\n          addFilterParam(FILTER_CATEGORIES.category.urlParam, values),\n        value: filters.category,\n        items: FC.category.values,\n      },\n    },\n  ];\n\n  const pruneFilters = (localFilters, filterCategories) => {\n    const prunedFilters = Object.entries(localFilters);\n    return prunedFilters.length > 0\n      ? prunedFilters.reduce((arr, item) => {\n          if (filterCategories[item[0]]) {\n            const category = filterCategories[item[0]];\n            const chips = Array.isArray(item[1])\n              ? item[1].map((value) => {\n                  const selectedCategoryValue = category.values.find(\n                    (values) => values.value === String(value)\n                  );\n                  return selectedCategoryValue\n                    ? {\n                        name:\n                          selectedCategoryValue.text ||\n                          selectedCategoryValue.label,\n                        value,\n                      }\n                    : { name: value, value };\n                })\n              : [\n                  {\n                    name: category.values.find(\n                      (values) => values.value === String(item[1])\n                    ).label,\n                    value: item[1],\n                  },\n                ];\n            return [\n              ...arr,\n              {\n                category: capitalize(category.title),\n                chips,\n                urlParam: category.urlParam,\n              },\n            ];\n          } else if (item[0] === 'text') {\n            return [\n              ...arr,\n              ...(item[1].length > 0\n                ? [\n                    {\n                      category: intl.formatMessage(messages.description),\n                      chips: [{ name: item[1], value: item[1] }],\n                      urlParam: item[0],\n                    },\n                  ]\n                : []),\n            ];\n          } else {\n            return arr;\n          }\n        }, [])\n      : [];\n  };\n\n  const buildFilterChips = () => {\n    const localFilters = { ...filters };\n    delete localFilters.sortIndex;\n    delete localFilters.sortDirection;\n    return pruneFilters(localFilters, FILTER_CATEGORIES);\n  };\n\n  const activeFiltersConfig = {\n    deleteTitle: intl.formatMessage(messages.resetFilters),\n    filters: buildFilterChips(),\n    onDelete: (_event, itemsToRemove, isAll) => {\n      if (isAll) {\n        resetFilters(filters, CLUSTER_RULES_INITIAL_STATE, updateFilters);\n      } else {\n        itemsToRemove.map((item) => {\n          const newFilter = {\n            [item.urlParam]: Array.isArray(filters[item.urlParam])\n              ? filters[item.urlParam].filter(\n                  (value) => String(value) !== String(item.chips[0].value)\n                )\n              : '',\n          };\n          newFilter[item.urlParam].length > 0\n            ? updateFilters({ ...filters, ...newFilter })\n            : removeFilterParam(item.urlParam);\n        });\n      }\n    },\n  };\n\n  return (\n    <div id=\"cluster-recs-list-table\" data-ouia-safe={!loadingState}>\n      <PrimaryToolbar\n        filterConfig={{\n          items: filterConfigItems,\n          isDisabled: loadingState || errorState || reports.length === 0,\n        }}\n        pagination={\n          <React.Fragment>\n            {results === 1\n              ? `${results} ${intl.formatMessage(messages.recommendation)}`\n              : `${results} ${intl.formatMessage(messages.recommendations)}`}\n          </React.Fragment>\n        }\n        activeFiltersConfig={\n          loadingState || errorState || reports.length === 0\n            ? undefined\n            : activeFiltersConfig\n        }\n      />\n      <Table\n        aria-label={'Cluster recommendations table'}\n        ouiaId=\"recommendations\"\n        ouiaSafe={!loadingState}\n        onCollapse={handleOnCollapse} // TODO: set undefined when there is an empty state\n        rows={\n          errorState || loadingState || noMatch || noInput ? (\n            [\n              {\n                fullWidth: true,\n                cells: [\n                  {\n                    props: {\n                      colSpan: CLUSTER_RULES_COLUMNS.length + 1,\n                    },\n                    title: errorState ? (\n                      error?.status === 404 ? (\n                        <NoInsightsResults /> // no Insights results received yet\n                      ) : (\n                        <NoRecsError /> // any other problem\n                      )\n                    ) : loadingState ? (\n                      <Loading />\n                    ) : noInput ? (\n                      <NoRecsAffecting />\n                    ) : (\n                      <NoMatchingRecs />\n                    ),\n                  },\n                ],\n              },\n            ]\n          ) : successState ? (\n            displayedRows\n          ) : (\n            <ErrorState />\n          )\n        }\n        cells={CLUSTER_RULES_COLUMNS}\n        sortBy={{\n          index: filters.sortIndex,\n          direction: filters.sortDirection,\n        }}\n        onSort={onSort}\n        variant={TableVariant.compact}\n        isStickyHeader\n        canCollapseAll\n      >\n        <TableHeader />\n        <TableBody />\n      </Table>\n    </div>\n  );\n};\n\nexport default ClusterRules;\n","import { Flex, Icon } from '@patternfly/react-core';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\nimport InfoCircleIcon from '@patternfly/react-icons/dist/js/icons/info-circle-icon';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-triangle-icon';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport {\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from '@patternfly/react-table';\nimport React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useGetUpdateRisksState } from '../../Services/SmartProxy';\n\nexport const ALERTS_SEVERITY_ICONS = {\n  critical: (\n    <Icon status=\"danger\">\n      <ExclamationCircleIcon />\n    </Icon>\n  ),\n  warning: (\n    <Icon status=\"warning\">\n      <ExclamationTriangleIcon />\n    </Icon>\n  ),\n  info: (\n    <Icon status=\"info\">\n      <InfoCircleIcon />\n    </Icon>\n  ),\n  success: (\n    <Icon status=\"success\">\n      <CheckCircleIcon />\n    </Icon>\n  ),\n};\n\nexport const ALERTS_SEVERITY_LABEL = {\n  critical: (\n    <Flex alignItems={{ default: 'alignItemsCenter' }}>\n      {ALERTS_SEVERITY_ICONS['critical']} <b>Critical</b>\n    </Flex>\n  ),\n  warning: (\n    <Flex alignItems={{ default: 'alignItemsCenter' }}>\n      {ALERTS_SEVERITY_ICONS['warning']} <b>Warning</b>\n    </Flex>\n  ),\n  info: (\n    <Flex alignItems={{ default: 'alignItemsCenter' }}>\n      {ALERTS_SEVERITY_ICONS['info']} <b>Info</b>\n    </Flex>\n  ),\n};\n\nexport const ALERTS_SEVERITY_ORDER = ['critical', 'warning', 'info'];\n\nconst AlertsList = () => {\n  const { clusterId } = useParams();\n  const { data } = useGetUpdateRisksState({ id: clusterId });\n  const { alerts = [] } =\n    data?.upgrade_recommendation?.upgrade_risks_predictors || {};\n\n  return (\n    <TableComposable\n      aria-label=\"Alerts firing table\"\n      variant=\"compact\"\n      borders={false}\n    >\n      <Thead>\n        <Tr>\n          <Th width={50}>Name</Th>\n          <Th width={25}>Status</Th>\n          <Th width={25}>Namespace</Th>\n        </Tr>\n      </Thead>\n      <Tbody>\n        {alerts.map(({ name, namespace, severity, url = '' }) => (\n          <Tr key={name}>\n            <Td className=\"alerts__name\">\n              {url === '' ? name : <a href={url}>{name}</a>}\n            </Td>\n            <Td className=\"alerts__severity\">\n              {ALERTS_SEVERITY_LABEL[severity]}\n            </Td>\n            <Td className=\"alerts__namespace\">{namespace}</Td>\n          </Tr>\n        ))}\n      </Tbody>\n    </TableComposable>\n  );\n};\n\nexport default AlertsList;\n","import React from 'react';\nimport {\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from '@patternfly/react-table';\nimport { useParams } from 'react-router-dom';\nimport { useGetUpdateRisksState } from '../../Services/SmartProxy';\nimport { Flex, Icon } from '@patternfly/react-core';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-triangle-icon';\n\nconst ClusterOperatorsList = () => {\n  const { clusterId } = useParams();\n  const { data } = useGetUpdateRisksState({ id: clusterId });\n  const { operator_conditions: conditions = [] } =\n    data?.upgrade_recommendation?.upgrade_risks_predictors || {};\n\n  return (\n    <TableComposable\n      aria-label=\"Cluster operators firing table\"\n      variant=\"compact\"\n      borders={false}\n    >\n      <Thead>\n        <Tr>\n          <Th width={50}>Name</Th>\n          <Th width={25}>Status</Th>\n          <Th width={25}>Message</Th>\n        </Tr>\n      </Thead>\n      <Tbody>\n        {conditions.map(({ name, condition, reason, url = '' }) => (\n          <Tr key={name}>\n            <Td class=\"operators__name\">\n              {url === '' ? name : <a href={url}>{name}</a>}\n            </Td>\n            <Td class=\"operators__status\">\n              <Flex alignItems={{ default: 'alignItemsCenter' }}>\n                <Icon status=\"warning\">\n                  <ExclamationTriangleIcon />\n                </Icon>\n                <b>{condition}</b>\n              </Flex>\n            </Td>\n            <Td class=\"operators__message\">{reason || '-'}</Td>\n          </Tr>\n        ))}\n      </Tbody>\n    </TableComposable>\n  );\n};\n\nexport default ClusterOperatorsList;\n","import {\n  EmptyState,\n  EmptyStateIcon,\n  Flex,\n  Icon,\n  Label,\n  Spinner,\n} from '@patternfly/react-core';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-triangle-icon';\nimport {\n  ExpandableRowContent,\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from '@patternfly/react-table';\nimport ErrorState from '@redhat-cloud-services/frontend-components/ErrorState';\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useGetUpdateRisksQuery } from '../../Services/SmartProxy';\nimport {\n  NoUpdateRisks,\n  UpdateRisksNotAvailable,\n} from '../MessageState/EmptyStates';\nimport AlertsList, {\n  ALERTS_SEVERITY_ICONS,\n  ALERTS_SEVERITY_ORDER,\n} from './AlertsList';\nimport ClusterOperatorsList from './ClusterOperatorsList';\n\nconst UpdateRisksTable = () => {\n  const { clusterId } = useParams();\n  const { isError, isUninitialized, isFetching, isSuccess, data, error } =\n    useGetUpdateRisksQuery({ id: clusterId });\n  const { alerts = [], operator_conditions: conditions = [] } =\n    data?.upgrade_recommendation?.upgrade_risks_predictors || {};\n\n  const alertsDisabled = alerts.length === 0;\n  const conditionsDisabled = conditions.length === 0;\n\n  const [alertsExpanded, setAlertsExpanded] = useState(true);\n  const [operatorsExpanded, setOperatorsExpanded] = useState(true);\n\n  useEffect(() => {\n    setAlertsExpanded(!alertsDisabled);\n    setOperatorsExpanded(!conditionsDisabled);\n  }, [data]);\n\n  const hasRisks = isSuccess && (alerts.length > 0 || conditions.length > 0);\n  const noRisks = isSuccess && alerts.length === 0 && conditions.length === 0;\n\n  return isUninitialized || isFetching ? (\n    <EmptyState>\n      <EmptyStateIcon variant=\"container\" component={Spinner} />\n    </EmptyState>\n  ) : (\n    <TableComposable\n      aria-label=\"Update risks table\"\n      isExpandable\n      variant=\"compact\"\n      id=\"update-risks-table\"\n      borders={hasRisks}\n    >\n      <Thead>\n        <Tr>\n          <Th />\n          <Th>Name</Th>\n        </Tr>\n      </Thead>\n      {hasRisks ? (\n        <>\n          <Tbody isExpanded={alertsExpanded}>\n            <Tr className=\"alerts__header\">\n              <Td\n                expand={\n                  alertsDisabled\n                    ? {}\n                    : {\n                        rowIndex: 0,\n                        isExpanded: alertsExpanded,\n                        onToggle: () => setAlertsExpanded(!alertsExpanded),\n                      }\n                }\n              />\n              <Td>\n                <Flex alignItems={{ default: 'alignItemsCenter' }}>\n                  {alertsDisabled\n                    ? ALERTS_SEVERITY_ICONS['success']\n                    : ALERTS_SEVERITY_ICONS[ // this algorithm helps to decide which icon (the most severe) to show\n                        ALERTS_SEVERITY_ORDER.filter((s) =>\n                          alerts.some(({ severity }) => s === severity)\n                        )[0]\n                      ]}\n                  <b>Alerts firing</b>\n                  <Label\n                    isCompact\n                    id=\"alerts-label\"\n                    color={alertsDisabled ? 'green' : 'grey'}\n                  >\n                    {alerts.length} update risks\n                  </Label>\n                </Flex>\n              </Td>\n            </Tr>\n            <Tr isExpanded={alertsExpanded} className=\"alerts__content\">\n              <Td />\n              <Td>\n                <ExpandableRowContent>\n                  <AlertsList />\n                </ExpandableRowContent>\n              </Td>\n            </Tr>\n          </Tbody>\n          <Tbody isExpanded={operatorsExpanded}>\n            <Tr className=\"operators__header\">\n              <Td\n                expand={\n                  conditionsDisabled\n                    ? undefined\n                    : {\n                        rowIndex: 1,\n                        isExpanded: operatorsExpanded,\n                        onToggle: () =>\n                          setOperatorsExpanded(!operatorsExpanded),\n                      }\n                }\n              />\n              <Td>\n                <Flex alignItems={{ default: 'alignItemsCenter' }}>\n                  {conditionsDisabled ? (\n                    ALERTS_SEVERITY_ICONS['success']\n                  ) : (\n                    <Icon status=\"warning\">\n                      <ExclamationTriangleIcon />\n                    </Icon>\n                  )}\n                  <b>Cluster operators</b>\n                  <Label\n                    isCompact\n                    id=\"operator-conditions-label\"\n                    color={conditionsDisabled ? 'green' : 'grey'}\n                  >\n                    {conditions.length} update risks\n                  </Label>\n                </Flex>\n              </Td>\n            </Tr>\n            <Tr isExpanded={operatorsExpanded} className=\"operators__content\">\n              <Td />\n              <Td>\n                <ExpandableRowContent>\n                  <ClusterOperatorsList />\n                </ExpandableRowContent>\n              </Td>\n            </Tr>\n          </Tbody>\n        </>\n      ) : (\n        <Tbody>\n          <Tr>\n            <Td colSpan={2}>\n              {noRisks ? (\n                <NoUpdateRisks />\n              ) : isError && error.status === 404 ? (\n                <UpdateRisksNotAvailable />\n              ) : (\n                <ErrorState />\n              )}\n            </Td>\n          </Tr>\n        </Tbody>\n      )}\n    </TableComposable>\n  );\n};\n\nexport default UpdateRisksTable;\n","import useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport get from 'lodash/get';\nimport React, { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useGetUpdateRisksState } from '../../Services/SmartProxy';\n\nconst UPDATE_RISKS_TRACK_EVENT_ID = 'ocp-upgrade-risks-viewed';\n\nconst UpdateRisksTracker = () => {\n  const { analytics } = useChrome();\n  const { clusterId } = useParams();\n  const { isError, isSuccess, data } = useGetUpdateRisksState({\n    id: clusterId,\n  });\n\n  useEffect(() => {\n    if (isError || isSuccess) {\n      analytics.track(UPDATE_RISKS_TRACK_EVENT_ID, {\n        cluster_id: clusterId,\n        upgrade_recommended: get(\n          data,\n          'upgrade_recommendation.upgrade_recommended',\n          null\n        ),\n      });\n    }\n  }, [isError, isSuccess]);\n\n  return <></>;\n};\n\nexport default UpdateRisksTracker;\n","import get from 'lodash/get';\nimport { useParams } from 'react-router-dom';\n\nimport { useUpdateRisksFeatureFlag } from '../../Utilities/useFeatureFlag';\nimport { useGetClusterInfoState } from '../../Services/SmartProxy';\n\nconst useUpdateRisksFeature = (clusterId) => {\n  const updateRisksEnabled = useUpdateRisksFeatureFlag();\n  const id = clusterId || useParams().clusterId;\n  const clusterInfo = useGetClusterInfoState({ id }); // doesn't request new data, uses cache\n  const isManaged = get(clusterInfo, 'data.managed', true);\n\n  return updateRisksEnabled && !isManaged;\n};\n\nexport default useUpdateRisksFeature;\n","import { Card, CardBody, Tab, Tabs } from '@patternfly/react-core';\nimport React, { useEffect, useState } from 'react';\n\nimport { useIntl } from 'react-intl';\nimport { useParams, useSearchParams } from 'react-router-dom';\nimport messages from '../../Messages';\nimport { setSearchParameter } from '../../Utilities/Helpers';\nimport ClusterRules from '../ClusterRules/ClusterRules';\nimport { UpdateRisksTable } from '../UpdateRisksTable';\nimport { UpdateRisksTracker } from '../UpdateRisksTracker';\nimport useUpdateRisksFeature from '../UpdateRisksTable/useUpdateRisksFeature';\n\nconst CLUSTER_TABS = ['recommendations', 'update_risks'];\n\nconst ClusterTabs = () => {\n  const intl = useIntl();\n  const [searchParams] = useSearchParams();\n  const { clusterId } = useParams();\n  const updateRisksEnabled = useUpdateRisksFeature(clusterId);\n\n  const [activeKey, setActiveKey] = useState('recommendations');\n\n  useEffect(() => {\n    const tabKey = searchParams.get('active_tab');\n    setActiveKey(\n      updateRisksEnabled && CLUSTER_TABS.includes(tabKey)\n        ? tabKey\n        : 'recommendations'\n    );\n  }, [updateRisksEnabled]);\n\n  return (\n    <Card isCompact>\n      <CardBody>\n        <Tabs\n          activeKey={activeKey}\n          onSelect={(event, key) => {\n            setSearchParameter('active_tab', key);\n            setActiveKey(key);\n          }}\n          aria-label=\"Cluster tabs\"\n        >\n          <Tab\n            eventKey=\"recommendations\"\n            title={intl.formatMessage(messages.recommendations)}\n            ouiaId=\"recommendations-tab\"\n          >\n            {activeKey === 'recommendations' && <ClusterRules />}\n          </Tab>\n          {updateRisksEnabled && (\n            <Tab\n              eventKey=\"update_risks\"\n              title={intl.formatMessage(messages.updateRisks)}\n              ouiaId=\"update-risks-tab\"\n            >\n              {activeKey === 'update_risks' && (\n                <>\n                  <UpdateRisksTracker />\n                  <UpdateRisksTable />\n                </>\n              )}\n            </Tab>\n          )}\n        </Tabs>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default ClusterTabs;\n","import { Alert } from '@patternfly/react-core';\nimport React from 'react';\nimport { useIntl } from 'react-intl';\nimport { useParams } from 'react-router-dom';\nimport messages from '../../Messages';\nimport { useGetUpdateRisksQuery } from '../../Services/SmartProxy';\nimport { strong } from '../../Utilities/Helpers';\n\nconst UpdateRisksAlert = () => {\n  const intl = useIntl();\n  const { clusterId } = useParams();\n  const { isError, isUninitialized, isFetching, isSuccess, data, error } =\n    useGetUpdateRisksQuery({ id: clusterId });\n  const { alerts = [], operator_conditions: conditions = [] } =\n    data?.upgrade_recommendation?.upgrade_risks_predictors || {};\n\n  const hasRisks = isSuccess && (alerts.length > 0 || conditions.length > 0);\n  const noRisks = isSuccess && alerts.length === 0 && conditions.length === 0;\n\n  return isUninitialized || isFetching ? (\n    <></>\n  ) : hasRisks ? (\n    <Alert\n      variant=\"warning\"\n      isInline\n      title={intl.formatMessage(messages.resolveUpdateRisks)}\n      ouiaId=\"update-risks-alert\"\n    >\n      {intl.formatMessage(messages.resolveUpdateRisksDesc, { strong })}\n    </Alert>\n  ) : noRisks ? (\n    <Alert\n      variant=\"success\"\n      isInline\n      title={intl.formatMessage(messages.noKnownUpdateRisks)}\n      ouiaId=\"update-risks-alert\"\n    />\n  ) : isError && error.status === 404 ? (\n    <Alert\n      variant=\"warning\"\n      isInline\n      title={intl.formatMessage(messages.updateRisksNotCurrentlyAvailable)}\n      ouiaId=\"update-risks-alert\"\n    >\n      {intl.formatMessage(messages.updateRisksNotAvailableDesc)}\n    </Alert>\n  ) : (\n    <></>\n  );\n};\n\nexport default UpdateRisksAlert;\n","import './_Cluster.scss';\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport PageHeader from '@redhat-cloud-services/frontend-components/PageHeader';\nimport ClusterHeader from '../ClusterHeader';\nimport Breadcrumbs from '../Breadcrumbs';\nimport ClusterTabs from '../ClusterTabs/ClusterTabs';\nimport { Flex, FlexItem, PageSection } from '@patternfly/react-core';\nimport { UpdateRisksAlert } from '../UpdateRisksAlert';\nimport useUpdateRisksFeature from '../UpdateRisksTable/useUpdateRisksFeature';\n\nexport const Cluster = ({ cluster, clusterId }) => {\n  const areUpdateRisksEnabled = useUpdateRisksFeature(clusterId);\n\n  // TODO: make breadcrumbs take display name from GET /cluster/id/info\n  return (\n    <React.Fragment>\n      <PageHeader className=\"pf-m-light ins-inventory-detail\">\n        <Flex direction={{ default: 'column' }}>\n          <FlexItem>\n            <Breadcrumbs\n              current={cluster?.data?.report.meta.cluster_name || clusterId}\n            />\n            <ClusterHeader />\n          </FlexItem>\n          {areUpdateRisksEnabled && <UpdateRisksAlert />}\n        </Flex>\n      </PageHeader>\n      <PageSection>\n        <ClusterTabs cluster={cluster} />\n      </PageSection>\n    </React.Fragment>\n  );\n};\n\nCluster.propTypes = {\n  cluster: PropTypes.object.isRequired,\n  clusterId: PropTypes.string.isRequired,\n};\n","import React, { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\n\nimport { useGetClusterByIdQuery } from '../../Services/SmartProxy';\nimport messages from '../../Messages';\nimport { Cluster } from './Cluster';\n\nconst ClusterWrapper = () => {\n  const intl = useIntl();\n  const { clusterId } = useParams();\n  const cluster = useGetClusterByIdQuery({\n    id: clusterId,\n    includeDisabled: false,\n  });\n  const chrome = useChrome();\n\n  useEffect(() => {\n    cluster.refetch();\n  }, [clusterId]);\n\n  useEffect(() => {\n    const subnav = `${\n      cluster?.data?.report?.meta?.cluster_name || clusterId\n    } - ${intl.formatMessage(messages.clusters)}`;\n    chrome.updateDocumentTitle(\n      intl.formatMessage(messages.documentTitle, { subnav })\n    );\n  }, [cluster, clusterId]);\n  return <Cluster cluster={cluster} clusterId={clusterId} />;\n};\n\nexport default ClusterWrapper;\n","import { TooltipPosition } from '@patternfly/react-core/dist/js/components/Tooltip/Tooltip';\nimport { Tooltip, Label } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { useIntl } from 'react-intl';\nimport messages from '../../Messages';\n\nconst RuleLabels = ({ rule }) => {\n  const intl = useIntl();\n  return (\n    <React.Fragment>\n      {rule.disabled && (\n        <Tooltip\n          content={intl.formatMessage(messages.ruleIsDisabledTooltip)}\n          position={TooltipPosition.right}\n        >\n          <Label color=\"gray\" isCompact>\n            {intl.formatMessage(messages.disabled)}\n          </Label>\n        </Tooltip>\n      )}\n    </React.Fragment>\n  );\n};\n\nRuleLabels.propTypes = {\n  rule: PropTypes.object,\n};\n\nexport default RuleLabels;\n"],"names":["ClusterHeader","clusterId","clusterData","clusterInfo","location","window","useState","isOpen","setIsOpen","intl","useIntl","isUninitializedCluster","isUninitialized","isFetchingCluster","isFetching","cluster","data","isUninitializedInfo","isFetchingInfo","info","dropDownItems","DropdownItem","key","onClick","assign","origin","pathname","includes","redirectOCM","formatMessage","messages","clusterDetailsRedirect","Grid","id","md","hasGutter","GridItem","span","Title","size","headingLevel","ouiaId","Skeleton","display_name","Dropdown","position","onSelect","autoFocus","toggle","DropdownToggle","onToggle","dropDownActionSingleCluster","dropdownItems","Stack","StackItem","lastSeen","report","meta","last_checked_at","date","type","unknown","propTypes","PropTypes","isRequired","cluster_id","managed","status","useParams","useGetClusterByIdQuery","includeDisabled","useGetClusterInfoQuery","dispatch","useDispatch","updateFilters","filters","updateClusterRulesFilters","useSelector","clusterRulesState","isError","isSuccess","error","reports","filteredRows","setFilteredRows","displayedRows","setDisplayedRows","isAllExpanded","setIsAllExpanded","expandFirst","setExpandFirst","firstRule","setFirstRule","results","length","search","useLocation","rowsFiltered","setRowsFiltered","loadingState","errorState","successState","noInput","noMatch","addFilterParam","param","values","_addFilterParam","useEffect","paramsObject","paramParser","sort","sortObj","translateSortParams","sortIndex","CLUSTER_RULES_COLUMNS_KEYS","indexOf","name","sortDirection","direction","first","buildFilteredRows","buildDisplayedRows","localFilters","allRows","expandedRowsSet","Set","filter","ruleExpanded","map","object","rule","rule_id","passFilters","value","has","cells","title","description","RuleLabels","created_at","tooltipProps","TooltipPosition","bottom","impacted","extraTitle","Tooltip","content","nA","style","verticalAlign","likelihood","impact","LIKELIHOOD_LABEL","IMPACT_LABEL","InsightsLabel","total_risk","rest","isCompact","fullWidth","resolution","details","extra_data","rows","index","sortingRows","d","SortByDirection","asc","firstItem","secondItem","fst","snd","CLUSTER_RULES_IMPACTED_CELL","Date","i","findIndex","row","split","getPluginName","error_key","getErrorKey","unshift","splice","flatMap","updatedRow","parent","filterConfigItems","label","filterValues","onChange","_e","text","FC","urlParam","FILTER_CATEGORIES","items","category","activeFiltersConfig","deleteTitle","resetFilters","filterCategories","prunedFilters","Object","entries","reduce","arr","item","chips","Array","isArray","selectedCategoryValue","find","String","capitalize","pruneFilters","onDelete","_event","itemsToRemove","isAll","CLUSTER_RULES_INITIAL_STATE","newFilter","_removeFilterParam","PrimaryToolbar","filterConfig","isDisabled","pagination","recommendation","recommendations","undefined","Table","ouiaSafe","onCollapse","rowId","props","colSpan","CLUSTER_RULES_COLUMNS","Loading","sortBy","onSort","variant","TableVariant","compact","isStickyHeader","canCollapseAll","TableHeader","TableBody","ALERTS_SEVERITY_ICONS","critical","Icon","warning","success","ALERTS_SEVERITY_LABEL","Flex","alignItems","default","ALERTS_SEVERITY_ORDER","useGetUpdateRisksState","upgrade_recommendation","upgrade_risks_predictors","alerts","TableComposable","borders","Thead","Tr","Th","width","Tbody","namespace","severity","url","Td","className","href","operator_conditions","conditions","condition","reason","class","useGetUpdateRisksQuery","alertsDisabled","conditionsDisabled","alertsExpanded","setAlertsExpanded","operatorsExpanded","setOperatorsExpanded","hasRisks","noRisks","EmptyState","EmptyStateIcon","component","Spinner","isExpandable","isExpanded","expand","rowIndex","s","some","Label","color","ExpandableRowContent","ErrorState","analytics","useChrome","track","upgrade_recommended","get","updateRisksEnabled","useUpdateRisksFeatureFlag","useGetClusterInfoState","isManaged","CLUSTER_TABS","useSearchParams","searchParams","useUpdateRisksFeature","activeKey","setActiveKey","tabKey","Card","CardBody","Tabs","event","setSearchParameter","Tab","eventKey","updateRisks","Alert","isInline","resolveUpdateRisks","resolveUpdateRisksDesc","strong","noKnownUpdateRisks","updateRisksNotCurrentlyAvailable","updateRisksNotAvailableDesc","Cluster","areUpdateRisksEnabled","PageHeader","FlexItem","Breadcrumbs","current","cluster_name","PageSection","chrome","refetch","subnav","clusters","updateDocumentTitle","documentTitle","disabled","ruleIsDisabledTooltip","right"],"sourceRoot":""}