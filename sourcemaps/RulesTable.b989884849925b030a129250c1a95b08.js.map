{"version":3,"file":"js/RulesTable.f01e0e3c4b2b6ea22065.js","mappings":"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","sources":["webpack:///./src/Components/Labels/CategoryLabel.js","webpack:///./src/Components/RecsListTable/RecsListTable.js","webpack:///./src/Components/RecsListTable/index.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport camelCase from 'lodash/camelCase';\n\nimport { Label } from '@patternfly/react-core/dist/js/components/Label/index';\nimport { LabelGroup } from '@patternfly/react-core/dist/js/components/LabelGroup/LabelGroup';\nimport LockIcon from '@patternfly/react-icons/dist/esm/icons/lock-icon';\nimport PortIcon from '@patternfly/react-icons/dist/esm/icons/port-icon';\nimport AutomationIcon from '@patternfly/react-icons/dist/esm/icons/automation-icon';\nimport SyncAltIcon from '@patternfly/react-icons/dist/esm/icons/sync-icon';\n\nimport messages from '../../Messages';\nimport { RULE_CATEGORIES } from '../../AppConstants';\n\nconst CATEGORY_ICONS = {\n  security: <LockIcon />,\n  service_availability: <AutomationIcon />,\n  performance: <PortIcon />,\n  fault_tolerance: <SyncAltIcon />,\n};\n\nexport const extractCategories = (tags) =>\n  tags.filter((t) => Object.keys(RULE_CATEGORIES).includes(t));\n\nconst CategoryLabel = ({ tags }) => {\n  const intl = useIntl();\n\n  return (\n    <LabelGroup numLabels={1} isCompact>\n      {extractCategories(tags).map((tag, key) => (\n        <Label\n          key={key}\n          icon={CATEGORY_ICONS[tag]}\n          variant=\"outline\"\n          color=\"blue\"\n          isCompact\n        >\n          {intl.formatMessage(messages[camelCase(tag)])}\n        </Label>\n      ))}\n    </LabelGroup>\n  );\n};\n\nCategoryLabel.propTypes = {\n  tags: PropTypes.array.isRequired,\n};\n\nexport default CategoryLabel;\n","import './RecsListTable.scss';\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useIntl } from 'react-intl';\nimport { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport capitalize from 'lodash/capitalize';\nimport {\n  SortByDirection,\n  Table,\n  TableBody,\n  TableHeader,\n  TableVariant,\n} from '@patternfly/react-table';\nimport { Card, CardBody } from '@patternfly/react-core/dist/js/components/Card';\nimport {\n  Pagination,\n  PaginationVariant,\n} from '@patternfly/react-core/dist/js/components/Pagination';\nimport { Stack } from '@patternfly/react-core/dist/js/layouts/Stack';\nimport isEqual from 'lodash/isEqual';\nimport {\n  Tooltip,\n  TooltipPosition,\n} from '@patternfly/react-core/dist/js/components/Tooltip';\n\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { InsightsLabel } from '@redhat-cloud-services/frontend-components/InsightsLabel';\nimport PrimaryToolbar from '@redhat-cloud-services/frontend-components/PrimaryToolbar/PrimaryToolbar';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\n\nimport {\n  FILTER_CATEGORIES,\n  RECS_LIST_COLUMNS,\n  RECS_LIST_COLUMNS_KEYS,\n  TOTAL_RISK_LABEL_LOWER,\n} from '../../AppConstants';\nimport messages from '../../Messages';\nimport {\n  RECS_LIST_INITIAL_STATE,\n  updateRecsListFilters,\n} from '../../Services/Filters';\nimport RuleLabels from '../Labels/RuleLabels';\nimport { strong } from '../../Utilities/intlHelper';\nimport { List } from 'react-content-loader';\nimport { ErrorState, NoMatchingRecs } from '../MessageState/EmptyStates';\nimport RuleDetails from '../Recommendation/RuleDetails';\nimport {\n  passFilters,\n  paramParser,\n  translateSortParams,\n  updateSearchParams,\n} from '../Common/Tables';\nimport DisableRule from '../Modals/DisableRule';\nimport { Delete } from '../../Utilities/Api';\nimport { BASE_URL } from '../../Services/SmartProxy';\nimport CategoryLabel, { extractCategories } from '../Labels/CategoryLabel';\n\nconst RecsListTable = ({ query }) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const filters = useSelector(({ filters }) => filters.recsListState);\n  const { isError, isUninitialized, isFetching, isSuccess, data, refetch } =\n    query;\n  const recs = data?.recommendations || [];\n  const page = filters.offset / filters.limit + 1;\n  const [filteredRows, setFilteredRows] = useState([]);\n  const [displayedRows, setDisplayedRows] = useState([]);\n  const [disableRuleOpen, setDisableRuleOpen] = useState(false);\n  const [selectedRule, setSelectedRule] = useState({});\n  const [isAllExpanded, setIsAllExpanded] = useState(false);\n  const notify = (data) => dispatch(addNotification(data));\n  const { search } = useLocation();\n  const [filterBuilding, setFilterBuilding] = useState(true);\n  // helps to distinguish the state when the API data received but not yet filtered\n  const [rowsFiltered, setRowsFiltered] = useState(false);\n  // helps to distinguish if the component safe to test\n  const testSafe = rowsFiltered && !(isFetching || isUninitialized);\n  const updateFilters = (filters) => dispatch(updateRecsListFilters(filters));\n  const searchText = filters?.text || '';\n  const loadingState = isUninitialized || isFetching || !rowsFiltered;\n  const errorState = isError || (isSuccess && recs.length === 0);\n  const successState = isSuccess && recs.length > 0;\n\n  useEffect(() => {\n    setDisplayedRows(\n      buildDisplayedRows(filteredRows, filters.sortIndex, filters.sortDirection)\n    );\n    if (isSuccess && !rowsFiltered) {\n      setRowsFiltered(true);\n    }\n  }, [\n    filteredRows,\n    filters.limit,\n    filters.offset,\n    filters.sortIndex,\n    filters.sortDirection,\n  ]);\n\n  useEffect(() => {\n    setFilteredRows(buildFilteredRows(recs, filters));\n  }, [data, filters]);\n\n  useEffect(() => {\n    if (search && filterBuilding) {\n      const paramsObject = paramParser(search);\n\n      if (paramsObject.sort) {\n        const sortObj = translateSortParams(paramsObject.sort);\n        paramsObject.sortIndex = RECS_LIST_COLUMNS_KEYS.indexOf(sortObj.name);\n        paramsObject.sortDirection = sortObj.direction;\n      }\n      paramsObject.offset &&\n        (paramsObject.offset = Number(paramsObject.offset[0]));\n      paramsObject.limit &&\n        (paramsObject.limit = Number(paramsObject.limit[0]));\n      paramsObject.impacting &&\n        !Array.isArray(paramsObject.impacting) &&\n        (paramsObject.impacting = [`${paramsObject.impacting}`]);\n      updateFilters({ ...filters, ...paramsObject });\n    }\n    setFilterBuilding(false);\n  }, []);\n\n  useEffect(() => {\n    if (!filterBuilding) {\n      updateSearchParams(filters, RECS_LIST_COLUMNS_KEYS);\n    }\n  }, [filters, filterBuilding]);\n\n  // constructs array of rows (from the initial data) checking currently applied filters\n  const buildFilteredRows = (allRows, filters) => {\n    setRowsFiltered(false);\n    return allRows\n      .filter((rule) => passFilters(rule, filters))\n      .map((value, key) => [\n        {\n          isOpen: isAllExpanded,\n          rule: value,\n          cells: [\n            {\n              title: (\n                <span key={key}>\n                  <Link\n                    key={key}\n                    // https://github.com/RedHatInsights/ocp-advisor-frontend/issues/29\n                    to={`/recommendations/${\n                      process.env.NODE_ENV === 'development'\n                        ? value.rule_id.replaceAll('.', '%2E')\n                        : value.rule_id\n                    }`}\n                  >\n                    {' '}\n                    {value?.description || value?.rule_id}{' '}\n                  </Link>\n                  <RuleLabels rule={value} />\n                </span>\n              ),\n            },\n            {\n              title: value?.publish_date ? (\n                <DateFormat\n                  key={key}\n                  date={value.publish_date}\n                  variant=\"relative\"\n                />\n              ) : (\n                intl.formatMessage(messages.nA)\n              ),\n            },\n            {\n              title: <CategoryLabel key={key} tags={value.tags} />,\n            },\n            {\n              title: (\n                <div key={key}>\n                  <Tooltip\n                    key={key}\n                    position={TooltipPosition.bottom}\n                    content={intl.formatMessage(\n                      messages.rulesDetailsTotalRiskBody,\n                      {\n                        risk:\n                          TOTAL_RISK_LABEL_LOWER[value.total_risk] ||\n                          intl.formatMessage(messages.undefined),\n                        strong: (str) => strong(str),\n                      }\n                    )}\n                  >\n                    {value?.total_risk ? (\n                      <InsightsLabel\n                        value={value.total_risk}\n                        rest={{ isCompact: true }}\n                      />\n                    ) : (\n                      intl.formatMessage(messages.nA)\n                    )}\n                  </Tooltip>\n                </div>\n              ),\n            },\n            {\n              title: (\n                <div key={key}>{`${\n                  value?.impacted_clusters_count !== undefined\n                    ? value.impacted_clusters_count.toLocaleString()\n                    : intl.formatMessage(messages.nA)\n                }`}</div>\n              ),\n            },\n          ],\n        },\n        {\n          fullWidth: true,\n          cells: [\n            {\n              title: (\n                <section className=\"pf-m-light pf-l-page__main-section pf-c-page__main-section\">\n                  <Stack hasGutter>\n                    <RuleDetails\n                      rule={{\n                        ...value,\n                        impact: { impact: value.impact },\n                      }}\n                      isDetailsPage={false}\n                    />\n                  </Stack>\n                </section>\n              ),\n            },\n          ],\n        },\n      ]);\n  };\n\n  const buildDisplayedRows = (rows, index, direction) => {\n    const sortingRows = [...rows].sort((firstItem, secondItem) => {\n      const d = direction === SortByDirection.asc ? 1 : -1;\n      const fst = firstItem[0].rule[RECS_LIST_COLUMNS_KEYS[index]];\n      const snd = secondItem[0].rule[RECS_LIST_COLUMNS_KEYS[index]];\n      if (index === 3) {\n        return extractCategories(fst)[0].localeCompare(\n          extractCategories(snd)[0]\n        );\n      }\n      return fst > snd ? d : snd > fst ? -d : 0;\n    });\n    return sortingRows\n      .slice(\n        filters.limit * (page - 1),\n        filters.limit * (page - 1) + filters.limit\n      )\n      .flatMap((row, index) => {\n        const updatedRow = [...row];\n        row[1].parent = index * 2;\n        return updatedRow;\n      });\n  };\n\n  const removeFilterParam = (param) => {\n    const filter = { ...filters, offset: 0 };\n    delete filter[param];\n    updateFilters({ ...filter, ...(param === 'text' ? { text: '' } : {}) });\n  };\n\n  // TODO: update URL when filters changed\n  const addFilterParam = (param, values) =>\n    values.length > 0\n      ? updateFilters({ ...filters, offset: 0, ...{ [param]: values } })\n      : removeFilterParam(param);\n\n  const toggleRulesDisabled = (rule_status) =>\n    updateFilters({\n      ...filters,\n      rule_status,\n      offset: 0,\n    });\n\n  const filterConfigItems = [\n    {\n      label: intl.formatMessage(messages.name).toLowerCase(),\n      filterValues: {\n        key: 'text-filter',\n        onChange: (_event, value) =>\n          updateFilters({ ...filters, offset: 0, text: value }),\n        value: searchText,\n        placeholder: intl.formatMessage(messages.filterBy),\n      },\n    },\n    {\n      label: FILTER_CATEGORIES.total_risk.title,\n      type: FILTER_CATEGORIES.total_risk.type,\n      id: FILTER_CATEGORIES.total_risk.urlParam,\n      value: `checkbox-${FILTER_CATEGORIES.total_risk.urlParam}`,\n      filterValues: {\n        key: `${FILTER_CATEGORIES.total_risk.urlParam}-filter`,\n        onChange: (_event, values) =>\n          addFilterParam(FILTER_CATEGORIES.total_risk.urlParam, values),\n        value: filters.total_risk,\n        items: FILTER_CATEGORIES.total_risk.values,\n      },\n    },\n    {\n      label: FILTER_CATEGORIES.impact.title,\n      type: FILTER_CATEGORIES.impact.type,\n      id: FILTER_CATEGORIES.impact.urlParam,\n      value: `checkbox-${FILTER_CATEGORIES.impact.urlParam}`,\n      filterValues: {\n        key: `${FILTER_CATEGORIES.impact.urlParam}-filter`,\n        onChange: (_event, values) =>\n          addFilterParam(FILTER_CATEGORIES.impact.urlParam, values),\n        value: filters.impact,\n        items: FILTER_CATEGORIES.impact.values,\n      },\n    },\n    {\n      label: FILTER_CATEGORIES.likelihood.title,\n      type: FILTER_CATEGORIES.likelihood.type,\n      id: FILTER_CATEGORIES.likelihood.urlParam,\n      value: `checkbox-${FILTER_CATEGORIES.likelihood.urlParam}`,\n      filterValues: {\n        key: `${FILTER_CATEGORIES.likelihood.urlParam}-filter`,\n        onChange: (_event, values) =>\n          addFilterParam(FILTER_CATEGORIES.likelihood.urlParam, values),\n        value: filters.likelihood,\n        items: FILTER_CATEGORIES.likelihood.values,\n      },\n    },\n    {\n      label: FILTER_CATEGORIES.category.title,\n      type: FILTER_CATEGORIES.category.type,\n      id: FILTER_CATEGORIES.category.urlParam,\n      value: `checkbox-${FILTER_CATEGORIES.category.urlParam}`,\n      filterValues: {\n        key: `${FILTER_CATEGORIES.category.urlParam}-filter`,\n        onChange: (_event, values) =>\n          addFilterParam(FILTER_CATEGORIES.category.urlParam, values),\n        value: filters.category,\n        items: FILTER_CATEGORIES.category.values,\n      },\n    },\n    {\n      label: FILTER_CATEGORIES.rule_status.title,\n      type: FILTER_CATEGORIES.rule_status.type,\n      id: FILTER_CATEGORIES.rule_status.urlParam,\n      value: `radio-${FILTER_CATEGORIES.rule_status.urlParam}`,\n      filterValues: {\n        key: `${FILTER_CATEGORIES.rule_status.urlParam}-filter`,\n        onChange: (_event, value) => toggleRulesDisabled(value),\n        value: `${filters.rule_status}`,\n        items: FILTER_CATEGORIES.rule_status.values,\n      },\n    },\n    {\n      label: FILTER_CATEGORIES.impacting.title,\n      type: FILTER_CATEGORIES.impacting.type,\n      id: FILTER_CATEGORIES.impacting.urlParam,\n      value: `checkbox-${FILTER_CATEGORIES.impacting.urlParam}`,\n      filterValues: {\n        key: `${FILTER_CATEGORIES.impacting.urlParam}-filter`,\n        onChange: (e, values) =>\n          addFilterParam(FILTER_CATEGORIES.impacting.urlParam, values),\n        value: filters.impacting,\n        items: FILTER_CATEGORIES.impacting.values,\n      },\n    },\n  ];\n\n  const onSort = (_e, index, direction) => {\n    setRowsFiltered(false);\n    return updateFilters({\n      ...filters,\n      sortIndex: index,\n      sortDirection: direction,\n    });\n  };\n\n  const pruneFilters = (localFilters, filterCategories) => {\n    const prunedFilters = Object.entries(localFilters);\n    return prunedFilters.length > 0\n      ? prunedFilters.reduce((arr, item) => {\n          if (filterCategories[item[0]]) {\n            const category = filterCategories[item[0]];\n            const chips = Array.isArray(item[1])\n              ? item[1].map((value) => {\n                  const selectedCategoryValue = category.values.find(\n                    (values) => values.value === String(value)\n                  );\n                  return selectedCategoryValue\n                    ? {\n                        name:\n                          selectedCategoryValue.text ||\n                          selectedCategoryValue.label,\n                        value,\n                      }\n                    : { name: value, value };\n                })\n              : [\n                  {\n                    name: category.values.find(\n                      (values) => values.value === String(item[1])\n                    ).label,\n                    value: item[1],\n                  },\n                ];\n            return [\n              ...arr,\n              {\n                category: capitalize(category.title),\n                chips,\n                urlParam: category.urlParam,\n              },\n            ];\n          } else if (item[0] === 'text') {\n            return [\n              ...arr,\n              ...(item[1].length > 0\n                ? [\n                    {\n                      category: 'Name',\n                      chips: [{ name: item[1], value: item[1] }],\n                      urlParam: item[0],\n                    },\n                  ]\n                : []),\n            ];\n          } else {\n            return arr;\n          }\n        }, [])\n      : [];\n  };\n\n  const buildFilterChips = () => {\n    const localFilters = { ...filters };\n    delete localFilters.sortIndex;\n    delete localFilters.sortDirection;\n    delete localFilters.offset;\n    delete localFilters.limit;\n    return pruneFilters(localFilters, FILTER_CATEGORIES);\n  };\n\n  const activeFiltersConfig = {\n    showDeleteButton: true,\n    deleteTitle: intl.formatMessage(messages.resetFilters),\n    filters: buildFilterChips(),\n    onDelete: (_event, itemsToRemove, isAll) => {\n      if (isAll) {\n        if (isEqual(filters, RECS_LIST_INITIAL_STATE)) {\n          refetch();\n        } else {\n          updateFilters(RECS_LIST_INITIAL_STATE);\n        }\n      } else {\n        itemsToRemove.map((item) => {\n          const newFilter = {\n            [item.urlParam]: Array.isArray(filters[item.urlParam])\n              ? filters[item.urlParam].filter(\n                  (value) => String(value) !== String(item.chips[0].value)\n                )\n              : '',\n          };\n          newFilter[item.urlParam].length > 0\n            ? updateFilters({ ...filters, ...newFilter })\n            : removeFilterParam(item.urlParam);\n        });\n      }\n    },\n  };\n\n  //Responsible for the handling collapse for all the recommendations\n  //Used in the PrimaryToolbar\n  const collapseAll = (_e, isOpen) => {\n    setIsAllExpanded(isOpen);\n    setDisplayedRows(\n      displayedRows.map((row) => {\n        return {\n          ...row,\n          isOpen: isOpen,\n        };\n      })\n    );\n  };\n\n  //Responsible for handling collapse for single recommendation\n  const handleOnCollapse = (_e, rowId, isOpen) => {\n    const collapseRows = [...displayedRows];\n    collapseRows[rowId] = { ...collapseRows[rowId], isOpen };\n    setDisplayedRows(collapseRows);\n  };\n\n  const ackRule = async (rowId) => {\n    const rule = displayedRows[rowId].rule;\n\n    try {\n      if (!rule.disabled) {\n        // show disable rule modal\n        setSelectedRule(rule);\n        setDisableRuleOpen(true);\n      } else {\n        try {\n          await Delete(`${BASE_URL}/v2/ack/${rule.rule_id}/`);\n          notify({\n            variant: 'success',\n            timeout: true,\n            dismissable: true,\n            title: intl.formatMessage(messages.recSuccessfullyEnabled),\n          });\n          refetch();\n        } catch (error) {\n          notify({\n            variant: 'danger',\n            dismissable: true,\n            title: intl.formatMessage(messages.error),\n            description: `${error}`,\n          });\n        }\n      }\n    } catch (error) {\n      notify({\n        variant: 'danger',\n        dismissable: true,\n        title: rule.disabled\n          ? intl.formatMessage(messages.rulesTableErrorEnabled)\n          : intl.formatMessage(messages.rulesTableErrorDisabled),\n        description: `${error}`,\n      });\n    }\n  };\n\n  const actionResolver = (rowData, { rowIndex }) => {\n    const rule = displayedRows?.[rowIndex]?.rule\n      ? displayedRows[rowIndex].rule\n      : null;\n    if (rowIndex % 2 !== 0 || !rule) {\n      return null;\n    }\n\n    return rule && !rule.disabled\n      ? [\n          {\n            title: intl.formatMessage(messages.disableRule),\n            onClick: (_event, rowId) => ackRule(rowId),\n          },\n        ]\n      : [\n          {\n            title: intl.formatMessage(messages.enableRule),\n            onClick: (_event, rowId) => ackRule(rowId),\n          },\n        ];\n  };\n\n  return (\n    <div id=\"recs-list-table\" data-ouia-safe={testSafe}>\n      {disableRuleOpen && (\n        <DisableRule\n          handleModalToggle={setDisableRuleOpen}\n          isModalOpen={disableRuleOpen}\n          rule={selectedRule}\n          afterFn={refetch}\n        />\n      )}\n      <PrimaryToolbar\n        expandAll={{ isAllExpanded, onClick: collapseAll }}\n        pagination={{\n          itemCount: filteredRows.length,\n          page: filters.offset / filters.limit + 1,\n          perPage: Number(filters.limit),\n          onSetPage(_event, page) {\n            setRowsFiltered(false);\n            updateFilters({\n              ...filters,\n              offset: filters.limit * (page - 1),\n            });\n          },\n          onPerPageSelect(_event, perPage) {\n            setRowsFiltered(false);\n            updateFilters({ ...filters, limit: perPage, offset: 0 });\n          },\n          isCompact: true,\n          ouiaId: 'pager',\n        }}\n        filterConfig={{\n          items: filterConfigItems,\n          isDisabled: loadingState || errorState,\n        }}\n        activeFiltersConfig={errorState ? undefined : activeFiltersConfig}\n      />\n      {errorState && (\n        <Card id=\"error-state-message\" ouiaId=\"error-state\">\n          <CardBody>\n            <ErrorState />\n          </CardBody>\n        </Card>\n      )}\n      {(loadingState || successState) && (\n        <React.Fragment>\n          <Table\n            aria-label=\"Table of recommendations\"\n            ouiaId=\"recommendations\"\n            variant={TableVariant.compact}\n            cells={RECS_LIST_COLUMNS}\n            rows={\n              loadingState\n                ? [\n                    {\n                      fullWidth: true,\n                      cells: [\n                        {\n                          props: { colSpan: 5 },\n                          title: <List key=\"loading-cell\" />,\n                        },\n                      ],\n                    },\n                  ]\n                : recs.length > 0 && filteredRows.length === 0\n                ? [\n                    {\n                      fullWidth: true,\n                      cells: [\n                        {\n                          props: { colSpan: 5 },\n                          title: <NoMatchingRecs ouiaId=\"empty-state\" />,\n                        },\n                      ],\n                    },\n                  ]\n                : displayedRows\n            }\n            onCollapse={handleOnCollapse}\n            sortBy={{\n              index: filters.sortIndex,\n              direction: filters.sortDirection,\n            }}\n            onSort={onSort}\n            actionResolver={actionResolver}\n            isStickyHeader\n            ouiaSafe={testSafe}\n          >\n            <TableHeader />\n            <TableBody />\n          </Table>\n        </React.Fragment>\n      )}\n      <Pagination\n        ouiaId=\"pager\"\n        itemCount={filteredRows.length}\n        page={filters.offset / filters.limit + 1}\n        perPage={Number(filters.limit)}\n        onSetPage={(_e, page) =>\n          updateFilters({\n            ...filters,\n            offset: filters.limit * (page - 1),\n          })\n        }\n        onPerPageSelect={(_e, perPage) =>\n          updateFilters({ ...filters, limit: perPage, offset: 0 })\n        }\n        widgetId={`pagination-options-menu-bottom`}\n        variant={PaginationVariant.bottom}\n      />\n    </div>\n  );\n};\n\nRecsListTable.propTypes = {\n  query: PropTypes.shape({\n    isError: PropTypes.bool.isRequired,\n    isUninitialized: PropTypes.bool.isRequired,\n    isFetching: PropTypes.bool.isRequired,\n    isSuccess: PropTypes.bool.isRequired,\n    data: PropTypes.array,\n    refetch: PropTypes.func,\n  }),\n};\n\nexport { RecsListTable };\n","import React from 'react';\n\nimport { RecsListTable } from './RecsListTable';\nimport { useGetRecsQuery } from '../../Services/SmartProxy';\n\nconst RecsListTableWrapper = () => {\n  const query = useGetRecsQuery();\n\n  return <RecsListTable query={query} />;\n};\n\nexport default RecsListTableWrapper;\n"],"names":["CATEGORY_ICONS","security","service_availability","performance","fault_tolerance","extractCategories","tags","filter","t","Object","keys","RULE_CATEGORIES","includes","CategoryLabel","intl","useIntl","LabelGroup","numLabels","isCompact","map","tag","key","Label","icon","variant","color","formatMessage","messages","camelCase","propTypes","PropTypes","RecsListTable","query","dispatch","useDispatch","filters","useSelector","f","recsListState","isError","isUninitialized","isFetching","isSuccess","data","refetch","recs","recommendations","page","offset","limit","useState","filteredRows","setFilteredRows","displayedRows","setDisplayedRows","disableRuleOpen","setDisableRuleOpen","selectedRule","setSelectedRule","isAllExpanded","setIsAllExpanded","notify","addNotification","search","useLocation","filterBuilding","setFilterBuilding","rowsFiltered","setRowsFiltered","testSafe","updateFilters","updateRecsListFilters","searchText","text","loadingState","errorState","length","successState","useEffect","buildDisplayedRows","sortIndex","sortDirection","buildFilteredRows","paramsObject","paramParser","sort","sortObj","translateSortParams","RECS_LIST_COLUMNS_KEYS","name","direction","Number","impacting","Array","isArray","updateSearchParams","allRows","rule","passFilters","value","isOpen","cells","title","Link","to","rule_id","description","RuleLabels","publish_date","DateFormat","date","Tooltip","position","TooltipPosition","content","risk","TOTAL_RISK_LABEL_LOWER","total_risk","strong","str","s","InsightsLabel","rest","undefined","impacted_clusters_count","toLocaleString","fullWidth","className","Stack","hasGutter","RuleDetails","impact","isDetailsPage","rows","index","sortingRows","firstItem","secondItem","d","SortByDirection","fst","snd","localeCompare","slice","flatMap","row","updatedRow","parent","removeFilterParam","param","addFilterParam","values","filterConfigItems","label","toLowerCase","filterValues","onChange","_event","placeholder","FILTER_CATEGORIES","type","id","items","likelihood","category","rule_status","e","activeFiltersConfig","showDeleteButton","deleteTitle","localFilters","filterCategories","prunedFilters","entries","reduce","arr","item","chips","selectedCategoryValue","find","String","capitalize","urlParam","pruneFilters","buildFilterChips","onDelete","itemsToRemove","isAll","isEqual","RECS_LIST_INITIAL_STATE","newFilter","ackRule","rowId","disabled","Delete","BASE_URL","timeout","dismissable","DisableRule","handleModalToggle","isModalOpen","afterFn","expandAll","onClick","_e","pagination","itemCount","perPage","onSetPage","onPerPageSelect","ouiaId","filterConfig","isDisabled","Card","CardBody","Table","TableVariant","RECS_LIST_COLUMNS","props","colSpan","onCollapse","collapseRows","sortBy","onSort","actionResolver","rowData","rowIndex","isStickyHeader","ouiaSafe","TableHeader","TableBody","Pagination","widgetId","PaginationVariant","useGetRecsQuery"],"sourceRoot":""}