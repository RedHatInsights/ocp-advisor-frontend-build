{"version":3,"sources":["webpack:///./src/Messages.js","webpack:///./src/Components/ClusterHeader/ClusterHeader.js","webpack:///./src/Components/ClusterHeader/index.js","webpack:///./src/Components/MessageState/MessageState.js","webpack:///./src/AppConstants.js","webpack:///./src/Components/ReportDetails/ReportDetails.js","webpack:///./src/Components/RuleLabels/RuleLabels.js","webpack:///./src/Components/ClusterRules/ClusterRules.js","webpack:///./src/Components/Breadcrumbs/Breadcrumbs.js","webpack:///./src/Components/Breadcrumbs/index.js","webpack:///./src/Components/Loading/Loading.js","webpack:///./src/Components/Cluster/Cluster.js","webpack:///./src/Components/Cluster/index.js"],"names":["defineMessages","documentTitle","id","defaultMessage","clusters","added","loading","lastSeen","actions","name","filterBy","totalRisk","recommendation","recommendations","insightsHeader","unknown","low","moderate","important","critical","veryLow","medium","high","serviceAvailability","performance","faultTolerance","security","osdEligible","enabled","impact","impactLevel","impactDescription","category","likelihood","likelihoodLevel","likelihoodDescription","all","disabled","resetFilters","noMatchingRecommendations","noMatchingRecommendationsDesc","noRecommendations","noRecommendationsDesc","ruleIsDisabledTooltip","ClusterHeader","clusterId","displayName","intl","useIntl","isUninitialized","isLoading","isFetching","clusterName","data","Grid","md","hasGutter","GridItem","Skeleton","size","Title","headingLevel","Stack","StackItem","formatMessage","messages","propTypes","PropTypes","routerParams","match","params","useGetClusterDisplayNameByIdQuery","useLazyGetClusterByIdQuery","report","MessageState","className","children","icon","iconClass","iconStyle","text","title","variant","EmptyState","EmptyStateIcon","style","EmptyStateBody","marginBottom","defaultProps","CubesIcon","EmptyStateVariant","cache","createIntlCache","locale","navigator","language","slice","createIntl","onError","console","error","intlSettings","LIKELIHOOD_LABEL","intlHelper","IMPACT_LABEL","TOTAL_RISK_LABEL","RISK_OF_CHANGE_LABEL","RULE_CATEGORIES","service_availability","fault_tolerance","osd_eligible","FILTER_CATEGORIES","total_risk","type","urlParam","values","label","value","res_risk","rule_status","DEFAULT_CLUSTER_RULES_FILTERS","ReportDetails","AsyncComponent","appName","module","details","extra_data","resolution","RuleLabels","rule","Tooltip","content","position","TooltipPosition","Label","color","ClusterRules","prunedFilters","chips","reports","useState","activeReports","setActiveReports","sortBy","setSortBy","filters","setFilters","searchValue","setSearchValue","isSelected","setIsSelected","rows","setRows","results","length","cols","transforms","sortable","cellWidth","handleOnCollapse","_e","rowId","isOpen","collapseRows","onKebabClick","action","allRows","map","row","key","Object","prototype","hasOwnProperty","call","onClick","buildRows","builtRows","flatMap","entity","filter","rowVal","rowKey","rule_id","selected","reportRow","cells","description","DateFormat","date","created_at","tooltipProps","verticalAlign","InsightsLabel","parent","fullWidth","isValidSearchValue","toLowerCase","includes","isValidFilterValue","keys","filterValues","rowValue","tags","find","categoryName","String","every","x","forEach","index","selectedItemsLength","getSelectedItems","onBulkSelect","bulkSelect","items","count","checked","onSelect","onFilterChange","param","newFilters","removeFilterParam","filterConfigItems","onChange","onInputChange","FC","activeFiltersConfig","deleteTitle","entries","item","Array","isArray","capitalize","push","onDelete","itemsToRemove","isAll","useEffect","activeReportsData","PrimaryToolbar","actionsConfig","filterConfig","pagination","Table","onCollapse","canSelectAll","onSort","direction","sortedReports","sort","concat","firstItem","secondItem","sortedReportsDirectional","SortByDirection","reverse","TableVariant","isStickyHeader","TableHeader","TableBody","Card","CardBody","CheckIcon","Breadcrumbs","current","setItems","buildBreadcrumbs","useCallback","crumbs","splitUrl","url","split","navigate","Breadcrumb","ouiaId","oneLink","BreadcrumbItem","isActive","Cluster","cluster","isError","isSuccess","PageHeader","Main","SearchIcon","span","useGetClusterByIdQuery","refetch","subnav","document"],"mappings":"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","file":"js/ClusterDetails.6a1d54a0902f0557019a.js","sourcesContent":["/* eslint-disable max-len */\nimport { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  documentTitle: {\n    id: 'documentTitle',\n    description: 'The title of the page as it appears in the browser tab',\n    defaultMessage: '{subnav} - OCP Advisor | Red Hat Insights',\n  },\n  clusters: {\n    id: 'clusters',\n    description:\n      'Clusters title used in recommendation table column and clusters tab header',\n    defaultMessage: 'Clusters',\n  },\n  added: {\n    id: 'added',\n    description: 'Recommendation table column title',\n    defaultMessage: 'Added',\n  },\n  loading: {\n    id: 'loading',\n    description: 'Loading text',\n    defaultMessage: 'Loading',\n  },\n  lastSeen: {\n    id: 'lastSeen',\n    description:\n      'Used in the cluster table title column, the last time a cluster has checked in',\n    defaultMessage: 'Last seen',\n  },\n  actions: {\n    id: 'actions',\n    description: 'actions',\n    defaultMessage: 'Actions',\n  },\n  name: {\n    id: 'name',\n    description:\n      'Used in the cluster table title column, identifying display name of a cluster',\n    defaultMessage: 'Name',\n  },\n  filterBy: {\n    id: 'filterBy',\n    description: 'Filter by name',\n    defaultMessage: 'Filter by name',\n  },\n  totalRisk: {\n    id: 'totalRisk',\n    description:\n      'Recommendation table column title, recommendationdetails label',\n    defaultMessage: 'Total risk',\n  },\n  recommendation: {\n    id: 'recommendation',\n    description: 'Recommendation',\n    defaultMessage: 'Recommendation',\n  },\n  recommendations: {\n    id: 'recommendations',\n    description: 'Used as a title',\n    defaultMessage: 'Recommendations',\n  },\n  insightsHeader: {\n    id: 'insightsHeader',\n    description: 'Header for the application title',\n    defaultMessage: 'Advisor',\n  },\n  unknown: {\n    id: 'unknown',\n    description: 'Unknown',\n    defaultMessage: 'Unknown',\n  },\n  low: {\n    id: 'low',\n    description: 'Filter value',\n    defaultMessage: 'Low',\n  },\n  moderate: {\n    id: 'moderate',\n    description: 'Filter value',\n    defaultMessage: 'Moderate',\n  },\n  important: {\n    id: 'important',\n    description: 'Filter value',\n    defaultMessage: 'Important',\n  },\n  critical: {\n    id: 'critical',\n    description: 'Filter value',\n    defaultMessage: 'Critical',\n  },\n  veryLow: {\n    id: 'veryLow',\n    description: 'Filter value',\n    defaultMessage: 'Very Low',\n  },\n  medium: {\n    id: 'medium',\n    description: 'Filter value',\n    defaultMessage: 'Medium',\n  },\n  high: {\n    id: 'high',\n    description: 'Filter value',\n    defaultMessage: 'High',\n  },\n  serviceAvailability: {\n    id: 'serviceAvailability',\n    description: 'Filter value',\n    defaultMessage: 'Service Availability',\n  },\n  performance: {\n    id: 'performance',\n    description: 'Filter value',\n    defaultMessage: 'Performance',\n  },\n  faultTolerance: {\n    id: 'faultTolerance',\n    description: 'Filter value',\n    defaultMessage: 'Fault Tolerance',\n  },\n  security: {\n    id: 'security',\n    description: 'Filter value',\n    defaultMessage: 'Security',\n  },\n  osdEligible: {\n    id: 'osdEligible',\n    description: 'Filter value',\n    defaultMessage: 'OSD Eligible',\n  },\n  enabled: {\n    id: 'enabled',\n    description: 'Filter value',\n    defaultMessage: 'Enabled',\n  },\n  impact: {\n    id: 'impact',\n    description: 'Filter title',\n    defaultMessage: 'Impact',\n  },\n  impactLevel: {\n    id: 'impactLevel',\n    description: 'Describes the impact level of a rule',\n    defaultMessage: '{level} impact',\n  },\n  impactDescription: {\n    id: 'impactDescription',\n    description:\n      'Used in the SeverityLine tooltip to describe the impact of a rule',\n    defaultMessage:\n      'The impact of the problem would be {level} if it occurred.',\n  },\n  category: {\n    id: 'category',\n    description: 'Filter title',\n    defaultMessage: 'Category',\n  },\n  likelihood: {\n    id: 'likelihood',\n    description: 'Filter title',\n    defaultMessage: 'Likelihood',\n  },\n  likelihoodLevel: {\n    id: 'likelihoodLevel',\n    description: 'Describes the likelihood of a rule',\n    defaultMessage: '{level} likelihood',\n  },\n  likelihoodDescription: {\n    id: 'likelihoodDescription',\n    description:\n      'Used in the SeverityLine tooltip to describe the likelihood of a rule',\n    defaultMessage: 'The likelihood that this will be a problem is {level}.',\n  },\n  all: {\n    id: 'all',\n    description: 'All',\n    defaultMessage: 'All',\n  },\n  disabled: {\n    id: 'disabled',\n    description: 'Disabled',\n    defaultMessage: 'Disabled',\n  },\n  resetFilters: {\n    id: 'resetFilters',\n    description: 'Filter action, reset all filter chips',\n    defaultMessage: 'Reset filters',\n  },\n  noMatchingRecommendations: {\n    id: 'noMatchingRecommendations',\n    defaultMessage: 'No matching recommendations found',\n  },\n  noMatchingRecommendationsDesc: {\n    id: 'noMatchingRecommendationsDesc',\n    defaultMessage:\n      'This filter criteria matches no recommendations. Try changing your filter settings.',\n  },\n  noRecommendations: {\n    id: 'noRecommendations',\n    description:\n      'Recommendation table, no recommendations message for any known rules, body',\n    defaultMessage:\n      'None of your connected systems are affected by any known recommendations.',\n  },\n  noRecommendationsDesc: {\n    id: 'noRecommendationsDesc',\n    defaultMessage: 'No known recommendations affect this cluster.',\n  },\n  ruleIsDisabledTooltip: {\n    id: 'ruleIsDisabledTooltip',\n    description:\n      'Disabled badge tooltip explaining the meaning of a disabled recommendation',\n    defaultMessage:\n      'Indicates this recommendation will not be shown for the cluster.',\n  },\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  Grid,\n  GridItem,\n  Stack,\n  StackItem,\n  Title,\n} from '@patternfly/react-core';\nimport { useIntl } from 'react-intl';\nimport Skeleton from '@redhat-cloud-services/frontend-components/Skeleton';\n\nimport messages from '../../Messages';\n\nexport const ClusterHeader = ({ clusterId, lastSeen, displayName }) => {\n  const intl = useIntl();\n  const {\n    isUninitialized,\n    isLoading,\n    isFetching,\n    data: clusterName,\n  } = displayName;\n\n  return (\n    <React.Fragment>\n      <Grid md={12} hasGutter>\n        <GridItem>\n          {isUninitialized || isLoading || isFetching ? (\n            <Skeleton size=\"sm\" />\n          ) : (\n            <Title size=\"2xl\" headingLevel=\"h1\">\n              {clusterName || clusterId}\n            </Title>\n          )}\n        </GridItem>\n        <GridItem>\n          <Stack>\n            <StackItem>\n              <span>UUID: </span>\n              <span>{clusterId || intl.formatMessage(messages.unknown)}</span>\n            </StackItem>\n            <StackItem>\n              <span>{intl.formatMessage(messages.lastSeen)}: </span>\n              <span>{lastSeen || intl.formatMessage(messages.unknown)}</span>\n            </StackItem>\n          </Stack>\n        </GridItem>\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nClusterHeader.propTypes = {\n  clusterId: PropTypes.string.isRequired,\n  displayName: PropTypes.object.isRequired,\n  lastSeen: PropTypes.string,\n};\n","import React from 'react';\nimport { routerParams } from '@redhat-cloud-services/frontend-components-utilities/RouterParams/RouterParams';\n\nimport { useGetClusterDisplayNameByIdQuery } from '../../Services/AccountManagementService';\nimport { useLazyGetClusterByIdQuery } from '../../Services/SmartProxy';\nimport { ClusterHeader } from './ClusterHeader';\n\nexport default routerParams(({ match }) => {\n  const clusterId = match.params.clusterId;\n  const displayName = useGetClusterDisplayNameByIdQuery(clusterId);\n  const { data } = useLazyGetClusterByIdQuery(clusterId);\n\n  return (\n    <ClusterHeader\n      clusterId={clusterId}\n      displayName={displayName}\n      lastSeen={data?.report?.lastSeen}\n    />\n  );\n});\n","import {\n  EmptyState,\n  EmptyStateVariant,\n} from '@patternfly/react-core/dist/js/components/EmptyState/EmptyState';\n\nimport CubesIcon from '@patternfly/react-icons/dist/js/icons/cubes-icon';\nimport { EmptyStateBody } from '@patternfly/react-core/dist/js/components/EmptyState/EmptyStateBody';\nimport { EmptyStateIcon } from '@patternfly/react-core/dist/js/components/EmptyState/EmptyStateIcon';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Title } from '@patternfly/react-core/dist/js/components/Title/Title';\n\nconst MessageState = ({\n  className,\n  children,\n  icon,\n  iconClass,\n  iconStyle,\n  text,\n  title,\n  variant,\n}) => (\n  <EmptyState className={className} variant={variant}>\n    {icon !== 'none' && (\n      <EmptyStateIcon className={iconClass} style={iconStyle} icon={icon} />\n    )}\n    <Title headingLevel=\"h5\" size=\"lg\">\n      {title}\n    </Title>\n    <EmptyStateBody style={{ marginBottom: '16px' }}>{text}</EmptyStateBody>\n    {children}\n  </EmptyState>\n);\n\nMessageState.propTypes = {\n  children: PropTypes.any,\n  icon: PropTypes.any,\n  iconClass: PropTypes.any,\n  iconStyle: PropTypes.any,\n  text: PropTypes.any,\n  title: PropTypes.string,\n  variant: PropTypes.any,\n  className: PropTypes.string,\n};\n\nMessageState.defaultProps = {\n  icon: CubesIcon,\n  title: '',\n  variant: EmptyStateVariant.full,\n};\n\nexport default MessageState;\n","import { createIntl, createIntlCache } from 'react-intl';\nimport intlHelper from '@redhat-cloud-services/frontend-components-translations/intlHelper';\n\nimport messages from './Messages';\n\nconst cache = createIntlCache();\nconst locale = navigator.language.slice(0, 2);\nconst intl = createIntl(\n  {\n    // eslint-disable-next-line no-console\n    onError: console.error,\n    locale,\n  },\n  cache\n);\nconst intlSettings = { locale };\n\nexport const LIKELIHOOD_LABEL = {\n  1: intlHelper(intl.formatMessage(messages.low), intlSettings),\n  2: intlHelper(intl.formatMessage(messages.medium), intlSettings),\n  3: intlHelper(intl.formatMessage(messages.high), intlSettings),\n  4: intlHelper(intl.formatMessage(messages.critical), intlSettings),\n};\nexport const IMPACT_LABEL = {\n  1: intlHelper(intl.formatMessage(messages.low), intlSettings),\n  2: intlHelper(intl.formatMessage(messages.medium), intlSettings),\n  3: intlHelper(intl.formatMessage(messages.high), intlSettings),\n  4: intlHelper(intl.formatMessage(messages.critical), intlSettings),\n};\nexport const TOTAL_RISK_LABEL = {\n  1: intlHelper(intl.formatMessage(messages.low), intlSettings),\n  2: intlHelper(intl.formatMessage(messages.moderate), intlSettings),\n  3: intlHelper(intl.formatMessage(messages.important), intlSettings),\n  4: intlHelper(intl.formatMessage(messages.critical), intlSettings),\n};\nexport const RISK_OF_CHANGE_LABEL = {\n  1: intlHelper(intl.formatMessage(messages.veryLow), intlSettings),\n  2: intlHelper(intl.formatMessage(messages.low), intlSettings),\n  3: intlHelper(intl.formatMessage(messages.moderate), intlSettings),\n  4: intlHelper(intl.formatMessage(messages.high), intlSettings),\n};\nexport const RULE_CATEGORIES = {\n  service_availability: 1,\n  security: 2,\n  fault_tolerance: 3,\n  performance: 4,\n  osd_eligible: 5,\n};\nexport const FILTER_CATEGORIES = {\n  total_risk: {\n    type: 'checkbox',\n    title: 'total risk',\n    urlParam: 'total_risk',\n    values: [\n      { label: TOTAL_RISK_LABEL[4], value: '4' },\n      { label: TOTAL_RISK_LABEL[3], value: '3' },\n      { label: TOTAL_RISK_LABEL[2], value: '2' },\n      { label: TOTAL_RISK_LABEL[1], value: '1' },\n    ],\n  },\n  res_risk: {\n    type: 'checkbox',\n    title: 'risk of change',\n    urlParam: 'res_risk',\n    values: [\n      { label: RISK_OF_CHANGE_LABEL[4], value: '4' },\n      { label: RISK_OF_CHANGE_LABEL[3], value: '3' },\n      { label: RISK_OF_CHANGE_LABEL[2], value: '2' },\n      { label: RISK_OF_CHANGE_LABEL[1], value: '1' },\n    ],\n  },\n  impact: {\n    type: 'checkbox',\n    title: 'impact',\n    urlParam: 'impact',\n    values: [\n      { label: IMPACT_LABEL[4], value: '4' },\n      { label: IMPACT_LABEL[3], value: '3' },\n      { label: IMPACT_LABEL[2], value: '2' },\n      { label: IMPACT_LABEL[1], value: '1' },\n    ],\n  },\n  likelihood: {\n    type: 'checkbox',\n    title: 'likelihood',\n    urlParam: 'likelihood',\n    values: [\n      { label: LIKELIHOOD_LABEL[4], value: '4' },\n      { label: LIKELIHOOD_LABEL[3], value: '3' },\n      { label: LIKELIHOOD_LABEL[2], value: '2' },\n      { label: LIKELIHOOD_LABEL[1], value: '1' },\n    ],\n  },\n  rule_status: {\n    type: 'radio',\n    title: 'status',\n    urlParam: 'rule_status',\n    values: [\n      {\n        label: intlHelper(intl.formatMessage(messages.all), intlSettings),\n        value: 'all',\n      },\n      {\n        label: intlHelper(intl.formatMessage(messages.enabled), intlSettings),\n        value: 'enabled',\n      },\n      {\n        label: intlHelper(intl.formatMessage(messages.disabled), intlSettings),\n        value: 'disabled',\n      },\n    ],\n  },\n  category: {\n    type: 'checkbox',\n    title: 'category',\n    urlParam: 'category',\n    values: [\n      {\n        label: intlHelper(\n          intl.formatMessage(messages.serviceAvailability),\n          intlSettings\n        ),\n        value: `${RULE_CATEGORIES.service_availability}`,\n      },\n      {\n        label: intlHelper(\n          intl.formatMessage(messages.performance),\n          intlSettings\n        ),\n        value: `${RULE_CATEGORIES.performance}`,\n      },\n      {\n        label: intlHelper(\n          intl.formatMessage(messages.faultTolerance),\n          intlSettings\n        ),\n        value: `${RULE_CATEGORIES.fault_tolerance}`,\n      },\n      {\n        label: intlHelper(intl.formatMessage(messages.security), intlSettings),\n        value: `${RULE_CATEGORIES.security}`,\n      },\n      {\n        label: intlHelper(\n          intl.formatMessage(messages.osdEligible),\n          intlSettings\n        ),\n        value: `${RULE_CATEGORIES.osd_eligible}`,\n      },\n    ],\n  },\n};\nexport const DEFAULT_CLUSTER_RULES_FILTERS = {\n  [FILTER_CATEGORIES.rule_status.urlParam]: 'enabled',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\n\n// Rule fields processing: https://docs.google.com/document/d/1D0ZLD6-2DZqBX1cUHJY2vL2QAD0dIAzY3O3xFNlEsVg/edit?usp=sharing\n\nconst ReportDetails = ({ report }) => {\n  return (\n    <div className=\"advisor\">\n      <AsyncComponent\n        appName=\"advisor\"\n        module=\"./AdvisorReportDetails\"\n        // TODO: make API rename `extra_data` to `details` or modify AdvisorReportDetails property\n        report={{\n          ...report,\n          details: report.extra_data,\n          resolution: {\n            resolution: report.resolution,\n          },\n        }}\n      />\n    </div>\n  );\n};\n\nReportDetails.propTypes = {\n  report: PropTypes.object.isRequired,\n};\n\nexport default ReportDetails;\n","import {\n  Tooltip,\n  TooltipPosition,\n} from '@patternfly/react-core/dist/js/components/Tooltip/Tooltip';\n\nimport { Label } from '@patternfly/react-core/dist/js/components/Label/Label';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { useIntl } from 'react-intl';\nimport messages from '../../Messages';\n\nconst RuleLabels = ({ rule }) => {\n  const intl = useIntl();\n  return (\n    <React.Fragment>\n      {rule.disabled && (\n        <Tooltip\n          content={intl.formatMessage(messages.ruleIsDisabledTooltip)}\n          position={TooltipPosition.right}\n        >\n          <Label color=\"gray\">{intl.formatMessage(messages.disabled)}</Label>\n        </Tooltip>\n      )}\n    </React.Fragment>\n  );\n};\n\nRuleLabels.propTypes = {\n  rule: PropTypes.object,\n};\n\nexport default RuleLabels;\n","import './_ClusterRules.scss';\n\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { CheckIcon } from '@patternfly/react-icons';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat/DateFormat';\nimport InsightsLabel from '@redhat-cloud-services/frontend-components/InsightsLabel';\nimport {\n  SortByDirection,\n  Table,\n  TableBody,\n  TableHeader,\n  TableVariant,\n  cellWidth,\n  sortable,\n} from '@patternfly/react-table';\nimport {\n  capitalize,\n  Card,\n  CardBody,\n  Tooltip,\n  TooltipPosition,\n} from '@patternfly/react-core';\nimport PrimaryToolbar from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\n\nimport messages from '../../Messages';\nimport MessageState from '../MessageState/MessageState';\nimport {\n  IMPACT_LABEL,\n  LIKELIHOOD_LABEL,\n  FILTER_CATEGORIES as FC,\n  RULE_CATEGORIES,\n  DEFAULT_CLUSTER_RULES_FILTERS,\n} from '../../AppConstants';\nimport ReportDetails from '../ReportDetails/ReportDetails';\nimport RuleLabels from '../RuleLabels/RuleLabels';\n\nconst ClusterRules = ({ reports }) => {\n  const intl = useIntl();\n  const [activeReports, setActiveReports] = useState([]);\n  const [sortBy, setSortBy] = useState({});\n  const [filters, setFilters] = useState(DEFAULT_CLUSTER_RULES_FILTERS);\n  const [searchValue, setSearchValue] = useState('');\n  const [isSelected, setIsSelected] = useState(false);\n  const [rows, setRows] = useState([]);\n  const results = rows ? rows.length / 2 : 0;\n\n  const cols = [\n    {\n      title: intl.formatMessage(messages.name),\n      transforms: [sortable],\n    },\n    {\n      title: intl.formatMessage(messages.added),\n      transforms: [sortable, cellWidth(15)],\n    },\n    {\n      title: intl.formatMessage(messages.totalRisk),\n      transforms: [sortable, cellWidth(15)],\n    },\n  ];\n\n  const handleOnCollapse = (_e, rowId, isOpen) => {\n    const collapseRows = [...rows];\n    collapseRows[rowId] = { ...collapseRows[rowId], isOpen };\n    setRows(collapseRows);\n  };\n\n  const onKebabClick = (action) => {\n    const isOpen = action === 'insights-expand-all';\n    const allRows = [...rows];\n\n    allRows.map((row, key) => {\n      if (Object.prototype.hasOwnProperty.call(row, 'isOpen')) {\n        row.isOpen = isOpen;\n        isOpen && handleOnCollapse(null, key, isOpen);\n      }\n    });\n\n    setRows(allRows);\n  };\n\n  const actions = [\n    {\n      label: 'Collapse all',\n      onClick: () => onKebabClick('insights-collapse-all'),\n    },\n    {\n      label: 'Expand all',\n      onClick: () => onKebabClick('insights-expand-all'),\n    },\n  ];\n\n  const buildRows = (activeReports, filters, rows, searchValue = '') => {\n    const builtRows = activeReports.flatMap((value, key) => {\n      const rule = value;\n      const resolution = value.resolution;\n      const entity = rows.filter(\n        (rowVal, rowKey) =>\n          rowKey % 2 === 0 && rowVal.rule.rule_id === rule.rule_id && rowVal\n      );\n      const selected = entity.length ? entity[0].selected : false;\n      const isOpen = rows.length\n        ? entity.length\n          ? entity[0].isOpen\n          : false\n        : key === 0\n        ? true\n        : false;\n\n      const reportRow = [\n        {\n          rule,\n          resolution,\n          isOpen,\n          selected,\n          cells: [\n            {\n              title: (\n                <div>\n                  {rule.description} <RuleLabels rule={value} />\n                </div>\n              ),\n            },\n            {\n              title: (\n                <div key={key}>\n                  <DateFormat\n                    date={rule.created_at}\n                    type=\"relative\"\n                    tooltipProps={{ position: TooltipPosition.bottom }}\n                  />\n                </div>\n              ),\n            },\n            {\n              title: (\n                <div key={key} style={{ verticalAlign: 'top' }}>\n                  <Tooltip\n                    key={key}\n                    position={TooltipPosition.bottom}\n                    content={\n                      // TODO: refine fields lookup\n                      <span>\n                        The <strong>likelihood</strong> that this will be a\n                        problem is{' '}\n                        {rule.likelihood\n                          ? LIKELIHOOD_LABEL[rule.likelihood]\n                          : 'unknown'}\n                        . The <strong>impact</strong> of the problem would be{' '}\n                        {rule.impact ? IMPACT_LABEL[rule.impact] : 'unknown'} if\n                        it occurred.\n                      </span>\n                    }\n                  >\n                    <InsightsLabel value={rule.total_risk} />\n                  </Tooltip>\n                </div>\n              ),\n            },\n          ],\n        },\n        {\n          parent: key,\n          fullWidth: true,\n          cells: [\n            {\n              title: <ReportDetails key={`child-${key}`} report={value} />,\n            },\n          ],\n        },\n      ];\n      const isValidSearchValue =\n        searchValue.length === 0 ||\n        rule.description.toLowerCase().includes(searchValue.toLowerCase());\n      const isValidFilterValue =\n        Object.keys(filters).length === 0 ||\n        Object.keys(filters)\n          .map((key) => {\n            const filterValues = filters[key];\n            const rowValue = {\n              created_at: rule.created_at,\n              total_risk: rule.total_risk,\n              category: rule.tags,\n              rule_status: rule.disabled ? 'disabled' : 'enabled',\n            };\n            if (key === 'category') {\n              // in that case, rowValue['category'] is an array of categories (or \"tags\" in the back-end implementation)\n              // e.g. ['security', 'fault_tolerance']\n              return rowValue[key].find((categoryName) =>\n                filterValues.includes(String(RULE_CATEGORIES[categoryName]))\n              );\n            }\n            if (key === 'rule_status') {\n              return filterValues === 'all' || rowValue[key] === filterValues;\n            }\n            return filterValues.find(\n              (value) => String(value) === String(rowValue[key])\n            );\n          })\n          .every((x) => x);\n\n      return isValidSearchValue && isValidFilterValue ? reportRow : [];\n    });\n    // must recalculate parent for expandable table content whenever the array size changes\n    builtRows.forEach((row, index) =>\n      row.parent ? (row.parent = index - 1) : null\n    );\n\n    return builtRows;\n  };\n\n  const onSort = (_e, index, direction) => {\n    const sortedReports = {\n      2: 'description',\n      3: 'created_at',\n      4: 'total_risk',\n    };\n    const sort = () =>\n      activeReports\n        .concat()\n        .sort((firstItem, secondItem) =>\n          firstItem[sortedReports[index]] > secondItem[sortedReports[index]]\n            ? 1\n            : secondItem[sortedReports[index]] > firstItem[sortedReports[index]]\n            ? -1\n            : 0\n        );\n    const sortedReportsDirectional =\n      direction === SortByDirection.asc ? sort() : sort().reverse();\n\n    setActiveReports(sortedReportsDirectional);\n    setSortBy({\n      index,\n      direction,\n    });\n    setRows(buildRows(sortedReportsDirectional, filters, rows, searchValue));\n  };\n\n  const onRowSelect = (_e, isSelected, rowId) =>\n    setRows(\n      buildRows(\n        activeReports,\n        filters,\n        rows.map((row, index) =>\n          index === rowId ? { ...row, selected: isSelected } : row\n        ),\n        searchValue\n      )\n    );\n\n  const getSelectedItems = (rows) => rows.filter((entity) => entity.selected);\n  const selectedItemsLength = getSelectedItems(rows).length;\n\n  const onBulkSelect = (isSelected) => {\n    setIsSelected(isSelected);\n    setRows(\n      buildRows(\n        activeReports,\n        filters,\n        rows.map((row, index) =>\n          index % 2 === 0 ? { ...row, selected: isSelected } : row\n        ),\n        searchValue\n      )\n    );\n  };\n\n  const bulkSelect = {\n    items: [\n      {\n        title: 'Select none',\n        onClick: () => onBulkSelect(false),\n      },\n      {\n        title: 'Select all',\n        onClick: () => onBulkSelect(true),\n      },\n    ],\n    count: selectedItemsLength,\n    checked: isSelected,\n    onSelect: () => onBulkSelect(!isSelected),\n  };\n\n  const onInputChange = (value) => {\n    const builtRows = buildRows(activeReports, filters, rows, value);\n    setSearchValue(value);\n    setRows(builtRows);\n  };\n\n  const onFilterChange = (param, values) => {\n    const removeFilterParam = (param) => {\n      const filter = { ...filters };\n      delete filter[param];\n      return filter;\n    };\n\n    const newFilters =\n      values.length > 0\n        ? { ...filters, ...{ [param]: values } }\n        : removeFilterParam(param);\n    setRows(buildRows(activeReports, newFilters, rows, searchValue));\n    setFilters(newFilters);\n  };\n\n  const toggleRulesDisabled = (rule_status) => {\n    const newFilters = { ...filters, rule_status };\n    setRows(buildRows(activeReports, newFilters, rows, searchValue));\n    setFilters(newFilters);\n  };\n\n  const filterConfigItems = [\n    {\n      label: 'name',\n      filterValues: {\n        key: 'text-filter',\n        onChange: (_e, value) => onInputChange(value),\n        value: searchValue,\n      },\n    },\n    {\n      label: FC.total_risk.title,\n      type: FC.total_risk.type,\n      id: FC.total_risk.urlParam,\n      value: `checkbox-${FC.total_risk.urlParam}`,\n      filterValues: {\n        key: `${FC.total_risk.urlParam}-filter`,\n        onChange: (_e, values) =>\n          onFilterChange(FC.total_risk.urlParam, values),\n        value: filters.total_risk,\n        items: FC.total_risk.values,\n      },\n    },\n    {\n      label: FC.category.title,\n      type: FC.category.type,\n      id: FC.category.urlParam,\n      value: `checkbox-${FC.category.urlParam}`,\n      filterValues: {\n        key: `${FC.category.urlParam}-filter`,\n        onChange: (_e, values) => onFilterChange(FC.category.urlParam, values),\n        value: filters.category,\n        items: FC.category.values,\n      },\n    },\n    {\n      label: FC.rule_status.title,\n      type: FC.rule_status.type,\n      id: FC.rule_status.urlParam,\n      value: `radio-${FC.rule_status.urlParam}`,\n      filterValues: {\n        key: `${FC.rule_status.urlParam}-filter`,\n        onChange: (_e, value) => toggleRulesDisabled(value),\n        value: filters.rule_status,\n        items: FC.rule_status.values,\n      },\n    },\n  ];\n\n  const buildFilterChips = () => {\n    const prunedFilters = Object.entries(filters);\n    let chips =\n      filters && prunedFilters.length > 0\n        ? prunedFilters.map((item) => {\n            const category = FC[item[0]];\n            const chips = Array.isArray(item[1])\n              ? item[1].map((value) => ({\n                  name: category.values.find(\n                    (values) => values.value === String(value)\n                  ).label,\n                  value,\n                }))\n              : [\n                  {\n                    name: category.values.find(\n                      (values) => values.value === String(item[1])\n                    ).label,\n                    value: item[1],\n                  },\n                ];\n            return {\n              category: capitalize(category.title),\n              chips,\n              urlParam: category.urlParam,\n            };\n          })\n        : [];\n    searchValue.length > 0 &&\n      chips.push({\n        category: 'Name',\n        chips: [{ name: searchValue, value: searchValue }],\n      });\n    return chips;\n  };\n\n  const onChipDelete = (_e, itemsToRemove, isAll) => {\n    if (isAll) {\n      setRows(buildRows(activeReports, {}, rows, ''));\n      setFilters(DEFAULT_CLUSTER_RULES_FILTERS);\n      setSearchValue('');\n    } else {\n      itemsToRemove.map((item) => {\n        switch (item.category) {\n          case 'Name':\n            setRows(buildRows(activeReports, filters, rows, ''));\n            setSearchValue('');\n            break;\n          case 'Status':\n            onFilterChange(item.urlParam, []);\n            break;\n          default:\n            onFilterChange(\n              item.urlParam,\n              filters[item.urlParam].filter(\n                (value) => String(value) !== String(item.chips[0].value)\n              )\n            );\n        }\n      });\n    }\n  };\n\n  const activeFiltersConfig = {\n    deleteTitle: intl.formatMessage(messages.resetFilters),\n    filters: buildFilterChips(),\n    onDelete: onChipDelete,\n  };\n\n  useEffect(() => {\n    const activeReportsData = reports;\n    setActiveReports(activeReportsData);\n    setRows(buildRows(activeReportsData, filters, rows, searchValue));\n  }, []);\n\n  return (\n    <div>\n      <PrimaryToolbar\n        actionsConfig={{ actions }}\n        bulkSelect={bulkSelect}\n        filterConfig={{ items: filterConfigItems }}\n        pagination={\n          <React.Fragment>\n            {results === 1\n              ? `${results} ${intl.formatMessage(messages.recommendation)}`\n              : `${results} ${intl.formatMessage(messages.recommendations)}`}\n          </React.Fragment>\n        }\n        activeFiltersConfig={activeFiltersConfig}\n      />\n      {activeReports.length > 0 ? (\n        <React.Fragment>\n          <Table\n            aria-label={'Cluster recommendations table'}\n            onSelect={onRowSelect}\n            onCollapse={handleOnCollapse}\n            rows={rows}\n            cells={cols}\n            sortBy={sortBy}\n            canSelectAll={false}\n            onSort={onSort}\n            variant={TableVariant.compact}\n            isStickyHeader\n          >\n            <TableHeader />\n            <TableBody />\n          </Table>\n          {results === 0 && (\n            <Card>\n              <CardBody>\n                <MessageState\n                  title={intl.formatMessage(messages.noMatchingRecommendations)}\n                  text={intl.formatMessage(\n                    messages.noMatchingRecommendationsDesc\n                  )}\n                />\n              </CardBody>\n            </Card>\n          )}\n        </React.Fragment>\n      ) : (\n        // ? Welcome to Insights feature for novice clusters with disabled Insights?\n        <Card>\n          <CardBody>\n            <MessageState\n              icon={CheckIcon}\n              iconClass=\"ins-c-insights__check\"\n              title={intl.formatMessage(messages.noRecommendations)}\n              text={intl.formatMessage(messages.noRecommendationsDesc)}\n            />\n          </CardBody>\n        </Card>\n      )}\n    </div>\n  );\n};\n\nClusterRules.propTypes = {\n  reports: PropTypes.array.isRequired,\n};\n\nClusterRules.defaultProps = {\n  reports: [],\n};\n\nexport default ClusterRules;\n","import React, { useCallback, useEffect, useState } from 'react';\n\nimport { Breadcrumb } from '@patternfly/react-core/dist/js/components/Breadcrumb/Breadcrumb';\nimport { BreadcrumbItem } from '@patternfly/react-core/dist/js/components/Breadcrumb/BreadcrumbItem';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport messages from '../../Messages';\n\nexport const Breadcrumbs = ({ current, match }) => {\n  const intl = useIntl();\n  const [items, setItems] = useState([]);\n  const buildBreadcrumbs = useCallback(() => {\n    const crumbs = [];\n    const splitUrl = match.url.split('/');\n\n    // add base\n    crumbs.push({\n      title: `${intl.formatMessage(messages.insightsHeader)} ${splitUrl[1]}`,\n      navigate: `/${splitUrl[1]}`,\n    });\n\n    setItems(crumbs);\n  }, [intl, match.params.clusterId, match.url]);\n\n  useEffect(() => {\n    buildBreadcrumbs();\n  }, [buildBreadcrumbs, match.params.clusterId, match.url]);\n\n  return (\n    <React.Fragment>\n      {items.length > 0 && (\n        <Breadcrumb ouiaId=\"detail\">\n          {items.map((oneLink, key) => (\n            <BreadcrumbItem key={key}>\n              {/*<Link to={oneLink.navigate}>{oneLink.title}</Link>*/}\n              <span>{oneLink.title}</span>\n            </BreadcrumbItem>\n          ))}\n          <BreadcrumbItem isActive>{current}</BreadcrumbItem>\n        </Breadcrumb>\n      )}\n    </React.Fragment>\n  );\n};\n\nBreadcrumbs.propTypes = {\n  current: PropTypes.string,\n  match: PropTypes.object,\n};\n","import React from 'react';\n\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/RouterParams';\n\nimport { Breadcrumbs } from './Breadcrumbs';\n\nexport default routerParams(({ match, current }) => (\n  <Breadcrumbs current={current} match={match} />\n));\n","import { Card } from '@patternfly/react-core/dist/js/components/Card/Card';\nimport { CardBody } from '@patternfly/react-core/dist/js/components/Card/CardBody';\nimport { List } from 'react-content-loader';\nimport React from 'react';\nconst Loading = () => (\n  <Card>\n    <CardBody>\n      <List />\n    </CardBody>\n  </Card>\n);\n\nexport default Loading;\n","import './_Cluster.scss';\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid, GridItem } from '@patternfly/react-core';\n\nimport { SearchIcon } from '@patternfly/react-icons';\nimport PageHeader from '@redhat-cloud-services/frontend-components/PageHeader';\nimport Main from '@redhat-cloud-services/frontend-components/Main';\n\nimport ClusterHeader from '../ClusterHeader';\nimport ClusterRules from '../ClusterRules/ClusterRules';\nimport Breadcrumbs from '../Breadcrumbs';\nimport MessageState from '../MessageState/MessageState';\nimport Loading from '../Loading/Loading';\n\nexport const Cluster = ({ cluster, match }) => {\n  const {\n    isError,\n    isUninitialized,\n    isLoading,\n    isFetching,\n    isSuccess,\n    data,\n  } = cluster;\n\n  return (\n    <React.Fragment>\n      <PageHeader className=\"pf-m-light ins-inventory-detail\">\n        <Breadcrumbs current={match.params.clusterId} match={match} />\n        <ClusterHeader />\n      </PageHeader>\n      <Main>\n        <React.Fragment>\n          {isError && (\n            <MessageState\n              title=\"No recommendations available\"\n              text=\"There was an error fetching recommendations for this cluster. Refresh your page to try again.\"\n              icon={SearchIcon}\n            />\n          )}\n          {(isUninitialized || isLoading || isFetching) && <Loading />}\n          {isSuccess && (\n            <Grid hasGutter>\n              <GridItem span={12}>\n                <ClusterRules reports={data?.report?.data || []} />\n              </GridItem>\n            </Grid>\n          )}\n        </React.Fragment>\n      </Main>\n    </React.Fragment>\n  );\n};\n\nCluster.propTypes = {\n  cluster: PropTypes.object.isRequired,\n  match: PropTypes.object.isRequired,\n};\n","import React, { useEffect } from 'react';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/RouterParams';\nimport { useIntl } from 'react-intl';\n\nimport { useGetClusterByIdQuery } from '../../Services/SmartProxy';\nimport messages from '../../Messages';\nimport { Cluster } from './Cluster';\n\nexport default routerParams(({ match }) => {\n  const intl = useIntl();\n  const cluster = useGetClusterByIdQuery(match.params.clusterId);\n\n  useEffect(() => {\n    cluster.refetch();\n  }, [match.params.clusterId]);\n\n  useEffect(() => {\n    if (match.params.clusterId) {\n      const subnav = `${match.params.clusterId} - ${intl.formatMessage(\n        messages.clusters\n      )}`;\n      document.title = intl.formatMessage(messages.documentTitle, { subnav });\n    }\n  }, [match.params.clusterId]);\n\n  return <Cluster cluster={cluster} match={match} />;\n});\n"],"sourceRoot":""}