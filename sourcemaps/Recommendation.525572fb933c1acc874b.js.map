{"version":3,"file":"js/Recommendation.8ce060e2dc616ebd58ea.js","mappings":"2YAQMA,EAAc,SAAC,GAMf,IALJC,EAKI,EALJA,KACAC,EAII,EAJJA,OACAC,EAGI,EAHJA,cACAC,EAEI,EAFJA,eACAC,EACI,EADJA,iBAEMC,GAAOC,EAAAA,EAAAA,KAEb,OACE,yBAAKC,UAAU,WACb,kBAACC,EAAA,EAAD,CACEC,QAAQ,UACRC,OAAO,iCACPC,SAAU,kBAACC,EAAA,EAAD,MACVZ,KAAMA,EACNa,YAAU,EACVC,UAAWT,EACXH,cAAeA,EACfD,OAAQA,EACRE,eAAgBA,EAChBC,iBAAkBA,MAM1BL,EAAYgB,UAAY,CACtBd,OAAQe,IAAAA,IACRd,cAAec,IAAAA,KAAAA,WACfhB,KAAMgB,IAAAA,OAAAA,WACNb,eAAgBa,IAAAA,OAChBZ,iBAAkBY,IAAAA,QAGpB,UC3CA,I,mOCoBMC,EAAa,WACjB,IAAMZ,GAAOC,EAAAA,EAAAA,KACb,OACE,gBAACY,EAAAA,WAAD,KACE,gBAACA,EAAAC,eAAD,CACEC,KAAMC,EAAAA,QACNC,MAAOC,EAAAA,GAAAA,QAET,gBAAC,EAAAC,MAAD,CAAOC,aAAa,KAAKC,KAAK,MAC3BrB,EAAKsB,cAAcC,EAAAA,EAAAA,kBAEtB,gBAACV,EAAAW,eAAD,KACE,gBAACC,EAAAA,MAAD,KACE,gBAACA,EAAAC,UAAD,KAAY1B,EAAKsB,cAAcC,EAAAA,EAAAA,iBAC/B,gBAACE,EAAAC,UAAD,KACE,gBAACC,EAAA,EAAD,WAQNC,EAAqB,WACzB,IAAM5B,GAAOC,EAAAA,EAAAA,KACb,OACE,gBAACY,EAAAA,WAAD,KACE,gBAACA,EAAAC,eAAD,CACEC,KAAMc,EAAAA,QACNZ,MAAOa,EAAAA,GAAAA,QAET,gBAAC,EAAAX,MAAD,CAAOC,aAAa,KAAKC,KAAK,MAC3BrB,EAAKsB,cAAcC,EAAAA,EAAAA,0BAEtB,gBAACV,EAAAW,eAAD,KACGxB,EAAKsB,cAAcC,EAAAA,EAAAA,2BAMtBQ,EAAqB,WACzB,IAAM/B,GAAOC,EAAAA,EAAAA,KACb,OACE,gBAACY,EAAAA,WAAD,KACE,gBAAC,EAAAM,MAAD,CAAOC,aAAa,KAAKC,KAAK,MAC3BrB,EAAKsB,cAAcC,EAAAA,EAAAA,0BAEtB,gBAACV,EAAAW,eAAD,KACGxB,EAAKsB,cAAcC,EAAAA,EAAAA,2B,glBCxC5B,IAAMS,GAAwB,SAAC,GAAyB,IAAvBC,EAAuB,EAAvBA,iBACzBC,GAAWC,EAAAA,EAAAA,eACXC,GAAUC,EAAAA,EAAAA,cAAY,qBAAGD,QAAsBE,yBAC/CC,EAAUC,OAAOJ,EAAQK,OACzBC,EAAON,EAAQO,OAASP,EAAQK,MAAQ,EACxCG,EAAa,SAACR,GAAD,OACjBF,GAASW,EAAAA,EAAAA,GAA8BT,KAEvCU,EAKEb,EALFa,QACAC,EAIEd,EAJFc,gBACAC,EAGEf,EAHFe,WACAC,EAEEhB,EAFFgB,UAJF,EAMIhB,EADFiB,KAAMC,OALR,MAKe,GALf,EAOA,GAAwCC,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA0CF,EAAAA,EAAAA,UAAS,IAAnD,eAAOG,EAAP,KAAsBC,EAAtB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,IAAnC,eAAOK,EAAP,KAAcC,EAAd,KAiCMC,EAAe,CACnBC,MAAO,CACL,CACEC,MAAO,OACPC,KAAMC,EAAAA,GAAAA,KACNC,aAAc,CACZC,IAAK,cACLC,SAAU,SAACC,EAAIC,GAAL,OAZS,SAACA,GAC1B,IAAMC,EAAa,EAAH,KAAQjC,GAAR,IAAiBkC,KAAMF,EAAOzB,OAAQ,IACtDC,EAAWyB,GAUoBE,CAAmBH,IAC5CA,MAAOhC,EAAQkC,QAIrBE,WAAY1B,GAAYK,GAAwB,IAAhBA,EAAKsB,QAOjCC,EAAY,SAACP,EAAIQ,GACrB,IAAMC,EAAYD,EAAavC,EAAQK,MAAQL,EAAQK,MACvDG,EAAW,EAAD,KAAMR,GAAN,IAAeO,OAAQiC,MAG7BC,EAAe,SAACV,EAAI5B,GACxBK,EAAW,EAAD,KAAMR,GAAN,IAAeK,MAAOF,MAgClC,OATAuC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EApBkB,SAACC,EAAS5C,GAElC,OADa4C,EAEVC,QAAO,SAACC,GAEP,OAAOA,EAAIC,SAAS/C,EAAQkC,SAE7Bc,MAAK,SAACC,EAAGC,GACR,MAA8B,QAA1BlD,EAAQmD,cACHF,EAAEG,cAAcF,GAElBA,EAAEE,cAAcH,MASHI,CAAkBtC,EAAMf,GAC1CsD,EANmB,SAACvC,GAC1B,OAAOA,EAAKwC,MAAMpD,GAAWG,EAAO,GAAIH,GAAWG,EAAO,GAAKH,GAKtCqD,CAAmBb,GACtCc,EAlFe,SAACpC,EAAOqC,GAC7B,IAAMD,EAAWpC,EACXsC,EAAoBF,EAASG,WACjC,SAACC,GAAD,MAA4B,SAAlBA,EAAKC,YAcjB,MAZiB,KAAbJ,EACFD,EAASM,OAAOJ,IAEW,IAAvBA,EACFF,EAASO,KAAK,CAAEF,SAAU,OAAQzC,MAAO,CAAC,CAAE4C,KAAMP,MAElDD,EAASE,GAAqB,CAC5BG,SAAU,OACVzC,MAAO,CAAC,CAAE4C,KAAMP,KAIfD,EAiEUS,CAAe7C,EAAOrB,EAAQkC,MAC/ChB,EAAgByB,GAChBvB,EAAiBkC,GACjBhC,EAASmC,KACR,CAAC5D,EAAkBG,IAGpB,kBAAC,aAAD,KACE,kBAACmE,EAAA,EAAD,CACE5C,aAAcA,EACd6C,WAAY,CACVC,UAAWpD,EAAaoB,OACxB/B,KAAAA,EACAH,QAAAA,EACAmC,UAAWA,EACXgC,gBAAiB7B,GAEnB8B,oBAAqB,CACnBvE,QAASqB,EACTmD,SAjFa,WAEnB,IAAMvC,EAAa,EAAH,KAAQjC,GAAR,IAAiBkC,KAAM,KACvC1B,EAAWyB,QAiFPtB,GAAmBC,IAAe,kBAACzC,EAAA,EAAD,MACnCuC,GACC,kBAAC+D,EAAAA,KAAD,KACE,kBAACA,EAAAC,SAAD,KACE,kBAAClG,EAAD,QAILqC,GAA6B,IAAhBE,EAAKsB,QACjB,kBAACoC,EAAAA,KAAD,KACE,kBAACA,EAAAC,SAAD,KACE,kBAAClF,EAAD,QAILqB,GACCE,EAAKsB,OAAS,IACbpB,EAAaoB,OAAS,EACrB,kBAACsC,EAAA,EAAD,CACE,aAAW,6BACXC,OAAO,wBACPC,QAAQ,UACRC,MAAO,CAAC,CAAEC,MAAO,OAAQC,WAAY,CAACC,EAAAA,YACtClE,KAAMI,EAAc+D,KAAI,SAACC,GAAD,MAAQ,CAC9BL,MAAO,CACL,0BAAMjD,IAAKsD,GACT,kBAAC,EAAAC,KAAD,CAAMC,GAAE,oBAAeF,IAAMA,SAInCG,OAAQ,CACNC,MAAOvF,EAAQwF,UACfC,UAAWzF,EAAQmD,eAErBuC,OA5FK,SAAC3D,EAAIwD,EAAOE,GACzBjF,EAAW,EAAD,KAAMR,GAAN,IAAewF,UAAWD,EAAOpC,cAAesC,OA6FlD,kBAAC,IAAD,MACA,kBAAC,IAAD,OAGF,kBAACE,EAAA,EAAD,KACE,kBAACC,EAAAA,SAAD,KACE,kBAACjG,EAAD,SAIR,kBAACkG,EAAA,EAAD,CAAcC,UAAQ,EAAChI,UAAU,mCAC/B,kBAACiI,EAAA,GAAD,CACElB,QAASmB,EAAAA,GAAAA,OACT3B,UAAWpD,EAAaoB,OACxB/B,KAAMA,EACNH,QAASA,EACTmC,UAAWA,EACXgC,gBAAiB7B,EACjBwD,YAAa3D,OAOvB1C,GAAsBtB,UAAY,CAChCuB,iBAAkBtB,IAAAA,OCvMpB,SAR8B,WAC5B,IAAMsB,GAAmBqG,EAAAA,EAAAA,KACvBC,EAAAA,EAAAA,aAAYC,kBAGd,OAAO,kBAACxG,GAAD,CAAuBC,iBAAkBA,K,ykBCqBlD,IAAMwG,GAAiB,SAAC,GAAoB,IAAlB9I,EAAkB,EAAlBA,KAAM+I,EAAY,EAAZA,MACxB1I,GAAOC,EAAAA,EAAAA,KACL6C,EACNnD,EADMmD,QAASC,EACfpD,EADeoD,gBAAiB4F,EAChChJ,EADgCgJ,UAAW3F,EAC3CrD,EAD2CqD,WAAYC,EACvDtD,EADuDsD,UAAWC,EAClEvD,EADkEuD,KAG9D0F,GAAgBC,EAAAA,EAAAA,cAAY,SAAClJ,GACjC,IAAMmJ,EACJnJ,EAAKoJ,WJtCS,SAACpJ,GAAD,uBAAUA,EAAKqJ,MAAM,YAArB,aAAU,EAAkB,GIsC1BC,CAAYP,EAAMQ,OAAOV,mBACrCW,EAAW,YACZxJ,GACAmJ,GACAA,EAAgBM,UAQrB,OANAD,EAASE,OAAS,CAChBhD,KAAMiD,EAAAA,GAAcH,EAASE,QAC7BA,OAAQF,EAASE,eAEZF,EAASC,gBACTD,EAASJ,WACTI,IACN,IACGI,EAAUtG,EAAY2F,EAAc1F,EAAKqG,cAAWC,EAE1D,OACE,kBAAC,aAAD,MACIzG,GAAmB4F,GAAa3F,IAChC,kBAACyG,EAAA,EAAD,KACE,kBAAClJ,EAAA,EAAD,OAGHuC,GACC,kBAAC2G,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEvC,MAAOnH,EAAKsB,cAAcC,EAAAA,EAAAA,iBAC1B+C,KAAMtE,EAAKsB,cAAcC,EAAAA,EAAAA,qBACzBR,KAAMC,EAAAA,QACN2I,UAAW,CAAE1I,MAAOC,EAAAA,GAAAA,UAIzB+B,GACC,kBAAC,aAAD,KACE,kBAAC2G,EAAA,EAAD,CAAY1J,UAAU,sBACpB,kBAAC2J,EAAA,EAAD,CACEC,SAASP,MAAAA,OAAA,EAAAA,EAASQ,cAAerB,EAAMQ,OAAOV,oBAGlD,kBAACiB,EAAA,EAAD,CAAMvJ,UAAU,yBACd,kBAAC,EAAD,CACE8J,aAAW,EACXnK,eAAa,EACbF,KAAM4J,EACN3J,OACE,kBAAC,aAAD,KACE,kBAACqK,EAAA,EAAD,CACE9C,MACE,kBAAC,aAAD,KACGoC,EAAQQ,YADX,IACwB,kBAACG,EAAA,EAAD,CAAYvK,KAAM4J,OAI9C,2BACGvJ,EAAKsB,cAAcC,EAAAA,EAAAA,uBAAiC,CACnD4I,KACE,kBAACC,EAAA,EAAD,CACED,KAAM,IAAIE,KAAKd,EAAQe,cACvBxG,KAAK,eAIVyF,EAAQgB,OACNC,MAAMC,QAAQlB,EAAQgB,MACrB,kBAACG,EAAAA,WAAD,CAAYxK,UAAU,iBAAiByK,UAAW,GAC/CpB,EAAQgB,KAAKK,QAAO,SAACC,EAAQC,GAY5B,OAXIC,EAAAA,GAAgBD,IAClBD,EAAOzE,KACL,kBAAC4E,EAAAA,MAAD,CAAO/G,IAAG,gBAAW6G,GAAO7J,MAAM,QAE9BgK,EAAAA,GAAAA,SAAAA,OACEF,EAAAA,GAAgBD,GAAO,GACvBjH,QAKHgH,IACN,KAGL,kBAACG,EAAAA,MAAD,KAAQzB,EAAQgB,YAO9B,kBAACd,EAAA,EAAD,KACE,kBAAC,aAAD,KACE,kBAAC,aAAD,KACE,kBAACtI,EAAAA,MAAD,CAAOjB,UAAU,gBAAgBkB,aAAa,KAAKC,KAAK,OACrDrB,EAAKsB,cAAcC,EAAAA,EAAAA,mBAEtB,kBAAC,GAAD,YAUhBkH,GAAe/H,UAAY,CACzBf,KAAMgB,IAAAA,OAAAA,WACN+H,MAAO/H,IAAAA,OAAAA,YChIT,SAV8B,WAC5B,IAAMhB,GAAOuL,EAAAA,EAAAA,ILTO,SAACvL,GAAD,uBAAUA,EAAKqJ,MAAM,YAArB,aAAU,EAAkB,GKSfmC,EAAc5C,EAAAA,EAAAA,aAAYC,mBAM3D,OAJA1D,EAAAA,EAAAA,YAAU,WACRnF,EAAKyL,YACJ,EAAC7C,EAAAA,EAAAA,aAAYC,mBAET,kBAACC,GAAD,CAAgB9I,KAAMA,EAAM+I,OAAO2C,EAAAA,EAAAA","sources":["webpack:///./src/Components/Recommendation/RuleDetails.js","webpack:///./src/Utilities/RuleName.js","webpack:///./src/Components/MessageState/EmptyStates.js","webpack:///./src/Components/AffectedClustersTable/AffectedClustersTable.js","webpack:///./src/Components/AffectedClustersTable/index.js","webpack:///./src/Components/Recommendation/Recommendation.js","webpack:///./src/Components/Recommendation/index.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\n\nimport Loading from '../Loading/Loading';\n\nconst RuleDetails = ({\n  rule,\n  header,\n  isDetailsPage,\n  resolutionRisk,\n  riskOfChangeDesc,\n}) => {\n  const intl = useIntl();\n\n  return (\n    <div className=\"advisor\">\n      <AsyncComponent\n        appName=\"advisor\"\n        module=\"./AdvisorRecommendationDetails\"\n        fallback={<Loading />}\n        rule={rule}\n        customItnl\n        intlProps={intl}\n        isDetailsPage={isDetailsPage}\n        header={header}\n        resolutionRisk={resolutionRisk}\n        riskOfChangeDesc={riskOfChangeDesc}\n      />\n    </div>\n  );\n};\n\nRuleDetails.propTypes = {\n  header: PropTypes.any,\n  isDetailsPage: PropTypes.bool.isRequired,\n  rule: PropTypes.object.isRequired,\n  resolutionRisk: PropTypes.number,\n  riskOfChangeDesc: PropTypes.string,\n};\n\nexport default RuleDetails;\n","const getPluginName = (rule) => rule.split('|')?.[0];\nconst getErrorKey = (rule) => rule.split('|')?.[1];\n\nexport { getPluginName, getErrorKey };\n","import * as React from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { Stack, StackItem } from '@patternfly/react-core/dist/js/layouts/Stack';\nimport { Title } from '@patternfly/react-core/dist/js/components/Title';\nimport {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n} from '@patternfly/react-core/dist/js/components/EmptyState';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport { global_success_color_100 as globalSuccessColor100 } from '@patternfly/react-tokens/dist/js/global_success_color_100';\nimport { global_danger_color_100 as globalDangerColor100 } from '@patternfly/react-tokens/dist/js/global_danger_color_100';\n\nimport DefaultErrorMessage from '@redhat-cloud-services/frontend-components/ErrorState/DefaultErrorMessage';\n\nimport messages from '../../Messages';\n\n// Analogue for ErroState from the frontend-components without the \"Go to homepage\" button\nconst ErrorState = () => {\n  const intl = useIntl();\n  return (\n    <EmptyState>\n      <EmptyStateIcon\n        icon={ExclamationCircleIcon}\n        color={globalDangerColor100.value}\n      />\n      <Title headingLevel=\"h4\" size=\"lg\">\n        {intl.formatMessage(messages.errorStateTitle)}\n      </Title>\n      <EmptyStateBody>\n        <Stack>\n          <StackItem>{intl.formatMessage(messages.errorStateBody)}</StackItem>\n          <StackItem>\n            <DefaultErrorMessage />\n          </StackItem>\n        </Stack>\n      </EmptyStateBody>\n    </EmptyState>\n  );\n};\n\nconst NoAffectedClusters = () => {\n  const intl = useIntl();\n  return (\n    <EmptyState>\n      <EmptyStateIcon\n        icon={CheckCircleIcon}\n        color={globalSuccessColor100.value}\n      />\n      <Title headingLevel=\"h4\" size=\"lg\">\n        {intl.formatMessage(messages.noAffectedClustersTitle)}\n      </Title>\n      <EmptyStateBody>\n        {intl.formatMessage(messages.noAffectedClustersBody)}\n      </EmptyStateBody>\n    </EmptyState>\n  );\n};\n\nconst NoMatchingClusters = () => {\n  const intl = useIntl();\n  return (\n    <EmptyState>\n      <Title headingLevel=\"h5\" size=\"lg\">\n        {intl.formatMessage(messages.noMatchingClustersTitle)}\n      </Title>\n      <EmptyStateBody>\n        {intl.formatMessage(messages.noMatchingClustersBody)}\n      </EmptyStateBody>\n    </EmptyState>\n  );\n};\n\nexport { ErrorState, NoAffectedClusters, NoMatchingClusters };\n","import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport PrimaryToolbar from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter/conditionalFilterConstants';\nimport { EmptyTable } from '@redhat-cloud-services/frontend-components/EmptyTable';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components/TableToolbar';\n\nimport { Card, CardBody } from '@patternfly/react-core/dist/js/components/Card';\nimport { sortable } from '@patternfly/react-table/dist/js/components/Table/utils/decorators/sortable';\nimport { Table } from '@patternfly/react-table/dist/js/components/Table/Table';\nimport { TableBody } from '@patternfly/react-table/dist/js/components/Table/Body';\nimport { TableHeader } from '@patternfly/react-table/dist/js/components/Table/Header';\nimport { Bullseye } from '@patternfly/react-core/dist/js/layouts/Bullseye';\nimport {\n  Pagination,\n  PaginationVariant,\n} from '@patternfly/react-core/dist/js/components/Pagination/Pagination';\n\nimport {\n  ErrorState,\n  NoAffectedClusters,\n  NoMatchingClusters,\n} from '../MessageState/EmptyStates';\nimport { updateAffectedClustersFilters } from '../../Services/Filters';\nimport Loading from '../Loading/Loading';\n\nconst AffectedClustersTable = ({ affectedClusters }) => {\n  const dispatch = useDispatch();\n  const filters = useSelector(({ filters }) => filters.affectedClustersState);\n  const perPage = Number(filters.limit);\n  const page = filters.offset / filters.limit + 1;\n  const setFilters = (filters) =>\n    dispatch(updateAffectedClustersFilters(filters));\n  const {\n    isError,\n    isUninitialized,\n    isFetching,\n    isSuccess,\n    data: rows = [],\n  } = affectedClusters;\n  const [filteredRows, setFilteredRows] = useState([]);\n  const [displayedRows, setDisplayedRows] = useState([]);\n  const [chips, setChips] = useState([]);\n\n  const updateNameChip = (chips, newValue) => {\n    const newChips = chips;\n    const nameCategoryIndex = newChips.findIndex(\n      (chip) => chip.category === 'Name'\n    );\n    if (newValue === '') {\n      newChips.splice(nameCategoryIndex);\n    } else {\n      if (nameCategoryIndex === -1) {\n        newChips.push({ category: 'Name', chips: [{ name: newValue }] });\n      } else {\n        newChips[nameCategoryIndex] = {\n          category: 'Name',\n          chips: [{ name: newValue }],\n        };\n      }\n    }\n    return newChips;\n  };\n\n  const onChipDelete = () => {\n    // right now, only designed to treat the Name (text) filter\n    const newFilters = { ...filters, text: '' };\n    setFilters(newFilters);\n  };\n\n  const onNameFilterChange = (value) => {\n    const newFilters = { ...filters, text: value, offset: 0 };\n    setFilters(newFilters);\n  };\n\n  const filterConfig = {\n    items: [\n      {\n        label: 'Name',\n        type: conditionalFilterType.text,\n        filterValues: {\n          key: 'name-filter',\n          onChange: (_e, value) => onNameFilterChange(value),\n          value: filters.text,\n        },\n      },\n    ],\n    isDisabled: isError || (rows && rows.length === 0),\n  };\n\n  const onSort = (_e, index, direction) => {\n    setFilters({ ...filters, sortIndex: index, sortDirection: direction });\n  };\n\n  const onSetPage = (_e, pageNumber) => {\n    const newOffset = pageNumber * filters.limit - filters.limit;\n    setFilters({ ...filters, offset: newOffset });\n  };\n\n  const onSetPerPage = (_e, perPage) => {\n    setFilters({ ...filters, limit: perPage });\n  };\n\n  // constructs array of rows (from the initial data) checking currently applied filters\n  const buildFilteredRows = (allRows, filters) => {\n    const rows = allRows;\n    return rows\n      .filter((row) => {\n        // further filters conditions will be added soon\n        return row.includes(filters.text);\n      })\n      .sort((a, b) => {\n        if (filters.sortDirection === 'asc') {\n          return a.localeCompare(b);\n        }\n        return b.localeCompare(a);\n      });\n  };\n\n  const buildDisplayedRows = (rows) => {\n    return rows.slice(perPage * (page - 1), perPage * (page - 1) + perPage);\n  };\n\n  useEffect(() => {\n    const newFilteredRows = buildFilteredRows(rows, filters);\n    const newDisplayedRows = buildDisplayedRows(newFilteredRows);\n    const newChips = updateNameChip(chips, filters.text);\n    setFilteredRows(newFilteredRows);\n    setDisplayedRows(newDisplayedRows);\n    setChips(newChips);\n  }, [affectedClusters, filters]);\n\n  return (\n    <React.Fragment>\n      <PrimaryToolbar\n        filterConfig={filterConfig}\n        pagination={{\n          itemCount: filteredRows.length,\n          page,\n          perPage,\n          onSetPage: onSetPage,\n          onPerPageSelect: onSetPerPage,\n        }}\n        activeFiltersConfig={{\n          filters: chips,\n          onDelete: onChipDelete,\n        }}\n      />\n      {(isUninitialized || isFetching) && <Loading />}\n      {isError && (\n        <Card>\n          <CardBody>\n            <ErrorState />\n          </CardBody>\n        </Card>\n      )}\n      {isSuccess && rows.length === 0 && (\n        <Card>\n          <CardBody>\n            <NoAffectedClusters />\n          </CardBody>\n        </Card>\n      )}\n      {isSuccess &&\n        rows.length > 0 &&\n        (filteredRows.length > 0 ? (\n          <Table\n            aria-label=\"Table of affected clusters\"\n            ouiaId=\"affectedClustersTable\"\n            variant=\"compact\"\n            cells={[{ title: 'Name', transforms: [sortable] }]}\n            rows={displayedRows.map((c) => ({\n              cells: [\n                <span key={c}>\n                  <Link to={`/clusters/${c}`}>{c}</Link>\n                </span>,\n              ],\n            }))}\n            sortBy={{\n              index: filters.sortIndex,\n              direction: filters.sortDirection,\n            }}\n            onSort={onSort}\n          >\n            <TableHeader />\n            <TableBody />\n          </Table>\n        ) : (\n          <EmptyTable>\n            <Bullseye>\n              <NoMatchingClusters />\n            </Bullseye>\n          </EmptyTable>\n        ))}\n      <TableToolbar isFooter className=\"ins-c-inventory__table--toolbar\">\n        <Pagination\n          variant={PaginationVariant.bottom}\n          itemCount={filteredRows.length}\n          page={page}\n          perPage={perPage}\n          onSetPage={onSetPage}\n          onPerPageSelect={onSetPerPage}\n          onPageInput={onSetPage}\n        />\n      </TableToolbar>\n    </React.Fragment>\n  );\n};\n\nAffectedClustersTable.propTypes = {\n  affectedClusters: PropTypes.array,\n};\n\nexport { AffectedClustersTable };\n","import React from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { useGetAffectedClustersQuery } from '../../Services/SmartProxy';\nimport { AffectedClustersTable } from './AffectedClustersTable';\n\nconst RecommendationWrapper = () => {\n  const affectedClusters = useGetAffectedClustersQuery(\n    useParams().recommendationId\n  );\n\n  return <AffectedClustersTable affectedClusters={affectedClusters} />;\n};\n\nexport default RecommendationWrapper;\n","import './Recommendation.scss';\n\nimport React, { useCallback } from 'react';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\n\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { Label } from '@patternfly/react-core/dist/js/components/Label/Label';\nimport { Title } from '@patternfly/react-core/dist/js/components/Title/Title';\nimport { LabelGroup } from '@patternfly/react-core/dist/js/components/LabelGroup';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\nimport { global_danger_color_100 as globalDangerColor100 } from '@patternfly/react-tokens/dist/js/global_danger_color_100';\n\nimport Breadcrumbs from '../Breadcrumbs';\nimport RuleLabels from '../RuleLabels/RuleLabels';\nimport {\n  FILTER_CATEGORIES,\n  IMPACT_VALUES,\n  RULE_CATEGORIES,\n} from '../../AppConstants';\nimport messages from '../../Messages';\nimport RuleDetails from './RuleDetails';\nimport Loading from '../Loading/Loading';\nimport { getErrorKey } from '../../Utilities/RuleName';\nimport MessageState from '../MessageState/MessageState';\nimport AffectedClustersTable from '../AffectedClustersTable';\n\nconst Recommendation = ({ rule, match }) => {\n  const intl = useIntl();\n  const { isError, isUninitialized, isLoading, isFetching, isSuccess, data } =\n    rule;\n  // workaround. Should be removed when https://issues.redhat.com/browse/CCXDEV-5534 is done.\n  const adjustOCPRule = useCallback((rule) => {\n    const errorKeyContent =\n      rule.error_keys[getErrorKey(match.params.recommendationId)];\n    const adjusted = {\n      ...rule,\n      ...errorKeyContent,\n      ...errorKeyContent.metadata,\n    };\n    adjusted.impact = {\n      name: IMPACT_VALUES[adjusted.impact],\n      impact: adjusted.impact,\n    };\n    delete adjusted.metadata;\n    delete adjusted.error_keys;\n    return adjusted;\n  }, []);\n  const content = isSuccess ? adjustOCPRule(data.content) : undefined;\n\n  return (\n    <React.Fragment>\n      {(isUninitialized || isLoading || isFetching) && (\n        <Main>\n          <Loading />\n        </Main>\n      )}\n      {isError && (\n        <Main>\n          <MessageState\n            title={intl.formatMessage(messages.unableToConnect)}\n            text={intl.formatMessage(messages.unableToConnectDesc)}\n            icon={ExclamationCircleIcon}\n            iconStyle={{ color: globalDangerColor100.value }}\n          />\n        </Main>\n      )}\n      {isSuccess && (\n        <React.Fragment>\n          <PageHeader className=\"pageHeaderOverride\">\n            <Breadcrumbs\n              current={content?.description || match.params.recommendationId}\n            />\n          </PageHeader>\n          <Main className=\"pf-m-light pf-u-pt-sm\">\n            <RuleDetails\n              isOpenShift\n              isDetailsPage\n              rule={content}\n              header={\n                <React.Fragment>\n                  <PageHeaderTitle\n                    title={\n                      <React.Fragment>\n                        {content.description} <RuleLabels rule={content} />\n                      </React.Fragment>\n                    }\n                  />\n                  <p>\n                    {intl.formatMessage(messages.rulesDetailsPubishdate, {\n                      date: (\n                        <DateFormat\n                          date={new Date(content.publish_date)}\n                          type=\"onlyDate\"\n                        />\n                      ),\n                    })}\n                    {content.tags &&\n                      (Array.isArray(content.tags) ? (\n                        <LabelGroup className=\"categoryLabels\" numLabels={1}>\n                          {content.tags.reduce((labels, tag) => {\n                            if (RULE_CATEGORIES[tag]) {\n                              labels.push(\n                                <Label key={`label-${tag}`} color=\"blue\">\n                                  {\n                                    FILTER_CATEGORIES.category.values[\n                                      RULE_CATEGORIES[tag] - 1\n                                    ].label\n                                  }\n                                </Label>\n                              );\n                            }\n                            return labels;\n                          }, [])}\n                        </LabelGroup>\n                      ) : (\n                        <Label>{content.tags}</Label>\n                      ))}\n                  </p>\n                </React.Fragment>\n              }\n            />\n          </Main>\n          <Main>\n            <React.Fragment>\n              <React.Fragment>\n                <Title className=\"titleOverride\" headingLevel=\"h3\" size=\"2xl\">\n                  {intl.formatMessage(messages.affectedClusters)}\n                </Title>\n                <AffectedClustersTable />\n              </React.Fragment>\n            </React.Fragment>\n          </Main>\n        </React.Fragment>\n      )}\n    </React.Fragment>\n  );\n};\n\nRecommendation.propTypes = {\n  rule: PropTypes.object.isRequired,\n  match: PropTypes.object.isRequired,\n};\n\nexport { Recommendation };\n","import React, { useEffect } from 'react';\n\nimport { useParams, useRouteMatch } from 'react-router-dom';\n\nimport { Recommendation } from './Recommendation';\nimport { useGetRuleByIdQuery } from '../../Services/SmartProxy';\nimport { getPluginName } from '../../Utilities/RuleName';\n\nconst RecommendationWrapper = () => {\n  const rule = useGetRuleByIdQuery(getPluginName(useParams().recommendationId));\n\n  useEffect(() => {\n    rule.refetch();\n  }, [useParams().recommendationId]);\n\n  return <Recommendation rule={rule} match={useRouteMatch()} />;\n};\n\nexport default RecommendationWrapper;\n"],"names":["RuleDetails","rule","header","isDetailsPage","resolutionRisk","riskOfChangeDesc","intl","useIntl","className","AsyncComponent","appName","module","fallback","Loading","customItnl","intlProps","propTypes","PropTypes","ErrorState","EmptyState","EmptyStateIcon","icon","ExclamationCircleIcon","color","globalDangerColor100","Title","headingLevel","size","formatMessage","messages","EmptyStateBody","Stack","StackItem","DefaultErrorMessage","NoAffectedClusters","CheckCircleIcon","globalSuccessColor100","NoMatchingClusters","AffectedClustersTable","affectedClusters","dispatch","useDispatch","filters","useSelector","affectedClustersState","perPage","Number","limit","page","offset","setFilters","updateAffectedClustersFilters","isError","isUninitialized","isFetching","isSuccess","data","rows","useState","filteredRows","setFilteredRows","displayedRows","setDisplayedRows","chips","setChips","filterConfig","items","label","type","conditionalFilterType","filterValues","key","onChange","_e","value","newFilters","text","onNameFilterChange","isDisabled","length","onSetPage","pageNumber","newOffset","onSetPerPage","useEffect","newFilteredRows","allRows","filter","row","includes","sort","a","b","sortDirection","localeCompare","buildFilteredRows","newDisplayedRows","slice","buildDisplayedRows","newChips","newValue","nameCategoryIndex","findIndex","chip","category","splice","push","name","updateNameChip","PrimaryToolbar","pagination","itemCount","onPerPageSelect","activeFiltersConfig","onDelete","Card","CardBody","Table","ouiaId","variant","cells","title","transforms","sortable","map","c","Link","to","sortBy","index","sortIndex","direction","onSort","EmptyTable","Bullseye","TableToolbar","isFooter","Pagination","PaginationVariant","onPageInput","useGetAffectedClustersQuery","useParams","recommendationId","Recommendation","match","isLoading","adjustOCPRule","useCallback","errorKeyContent","error_keys","split","getErrorKey","params","adjusted","metadata","impact","IMPACT_VALUES","content","undefined","Main","MessageState","iconStyle","PageHeader","Breadcrumbs","current","description","isOpenShift","PageHeaderTitle","RuleLabels","date","DateFormat","Date","publish_date","tags","Array","isArray","LabelGroup","numLabels","reduce","labels","tag","RULE_CATEGORIES","Label","FILTER_CATEGORIES","useGetRuleByIdQuery","getPluginName","refetch","useRouteMatch"],"sourceRoot":""}