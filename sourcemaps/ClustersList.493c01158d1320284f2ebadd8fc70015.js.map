{"version":3,"file":"js/ClustersList.1da2e5b090bb4fbc0164.js","mappings":"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","sources":["webpack:///./src/Components/ClustersListTable/ClustersListTable.js","webpack:///./src/Components/ClustersListTable/index.js","webpack:///./src/Components/ClustersList/index.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport {\n  SortByDirection,\n  Table,\n  TableBody,\n  TableHeader,\n  TableVariant,\n} from '@patternfly/react-table';\nimport { Card, CardBody } from '@patternfly/react-core/dist/js/components/Card';\nimport { Bullseye } from '@patternfly/react-core/dist/js/layouts/Bullseye';\nimport { Spinner } from '@patternfly/react-core/dist/js/components/Spinner';\nimport {\n  Pagination,\n  PaginationVariant,\n} from '@patternfly/react-core/dist/js/components/Pagination';\nimport PrimaryToolbar from '@redhat-cloud-services/frontend-components/PrimaryToolbar/PrimaryToolbar';\n\nimport {\n  CLUSTERS_LIST_INITIAL_STATE,\n  updateClustersListFilters,\n} from '../../Services/Filters';\nimport {\n  CLUSTERS_LIST_COLUMNS,\n  CLUSTER_FILTER_CATEGORIES,\n  CLUSTER_LAST_CHECKED_CELL,\n  CLUSTER_NAME_CELL,\n} from '../../AppConstants';\nimport {\n  buildFilterChips,\n  mapClustersToRows,\n  passFiltersCluster,\n} from '../Common/Tables';\nimport Loading from '../Loading/Loading';\nimport messages from '../../Messages';\nimport {\n  ErrorState,\n  NoMatchingClusters,\n  NoRecsForClusters,\n} from '../MessageState/EmptyStates';\nimport isEqual from 'lodash/isEqual';\n\nconst ClustersListTable = ({\n  query: { isError, isUninitialized, isFetching, isSuccess, data, refetch },\n}) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const updateFilters = (payload) =>\n    dispatch(updateClustersListFilters(payload));\n  const filters = useSelector(({ filters }) => filters.clustersListState);\n\n  const clusters = data?.data || [];\n  const page = filters.offset / filters.limit + 1;\n\n  const [filteredRows, setFilteredRows] = useState([]);\n  const [displayedRows, setDisplayedRows] = useState([]);\n\n  useEffect(() => {\n    setDisplayedRows(\n      buildDisplayedRows(filteredRows, filters.sortIndex, filters.sortDirection)\n    );\n  }, [\n    filteredRows,\n    filters.sortIndex,\n    filters.sortDirection,\n    filters.limit,\n    filters.offset,\n  ]);\n\n  useEffect(() => {\n    setFilteredRows(buildFilteredRows(clusters, filters));\n  }, [data, filters.hits, filters.text]);\n\n  const buildFilteredRows = (allRows, filters) =>\n    mapClustersToRows(\n      allRows.filter((cluster) => passFiltersCluster(cluster, filters))\n    );\n\n  const buildDisplayedRows = (rows, index, direction) => {\n    const sorted = [...rows];\n    index !== -1 &&\n      sorted.sort((a, b) => {\n        let fst, snd;\n        const d = direction === SortByDirection.asc ? 1 : -1;\n        switch (index) {\n          case CLUSTER_NAME_CELL:\n            fst = a.cluster.cluster_name || a.cluster.cluster_id;\n            snd = b.cluster.cluster_name || b.cluster.cluster_id;\n            return fst.localeCompare(snd) ? fst.localeCompare(snd) * d : 0;\n          case CLUSTER_LAST_CHECKED_CELL:\n            fst = new Date(a.cluster.last_checked_at || 0);\n            snd = new Date(b.cluster.last_checked_at || 0);\n            return fst > snd ? d : snd > fst ? -d : 0;\n          default:\n            fst = a.cells[index];\n            snd = b.cells[index];\n            return fst > snd ? d : snd > fst ? -d : 0;\n        }\n      });\n    return sorted.slice(\n      filters.limit * (page - 1),\n      filters.limit * (page - 1) + filters.limit\n    );\n  };\n\n  useEffect(() => setInterval(() => refetch(), 20000), []);\n\n  const removeFilterParam = (param) => {\n    const { [param]: omitted, ...newFilters } = { ...filters, offset: 0 };\n    updateFilters({\n      ...newFilters,\n      ...(param === 'text'\n        ? { text: '' }\n        : param === 'hits'\n        ? { hits: [] }\n        : {}),\n    });\n  };\n\n  // TODO: update URL when filters changed\n  const addFilterParam = (param, values) => {\n    values.length > 0\n      ? updateFilters({ ...filters, offset: 0, ...{ [param]: values } })\n      : removeFilterParam(param);\n  };\n\n  const filterConfigItems = [\n    {\n      label: intl.formatMessage(messages.name).toLowerCase(),\n      filterValues: {\n        key: 'text-filter',\n        onChange: (_event, value) => updateFilters({ ...filters, text: value }),\n        value: filters.text,\n        placeholder: intl.formatMessage(messages.filterBy),\n      },\n    },\n    {\n      label: CLUSTER_FILTER_CATEGORIES.hits.title,\n      type: CLUSTER_FILTER_CATEGORIES.hits.type,\n      id: CLUSTER_FILTER_CATEGORIES.hits.urlParam,\n      value: `checkbox-${CLUSTER_FILTER_CATEGORIES.hits.urlParam}`,\n      filterValues: {\n        key: `${CLUSTER_FILTER_CATEGORIES.hits.urlParam}-filter`,\n        onChange: (_event, values) =>\n          addFilterParam(CLUSTER_FILTER_CATEGORIES.hits.urlParam, values),\n        value: filters.hits,\n        items: CLUSTER_FILTER_CATEGORIES.hits.values,\n      },\n    },\n  ];\n\n  const activeFiltersConfig = {\n    showDeleteButton: true,\n    deleteTitle: intl.formatMessage(messages.resetFilters),\n    filters: buildFilterChips(filters, CLUSTER_FILTER_CATEGORIES),\n    onDelete: (_event, itemsToRemove, isAll) => {\n      if (isAll) {\n        if (isEqual(filters, CLUSTERS_LIST_INITIAL_STATE)) {\n          refetch();\n        } else {\n          updateFilters(CLUSTERS_LIST_INITIAL_STATE);\n        }\n      } else {\n        itemsToRemove.map((item) => {\n          const newFilter = {\n            [item.urlParam]: Array.isArray(filters[item.urlParam])\n              ? filters[item.urlParam].filter(\n                  (value) => String(value) !== String(item.chips[0].value)\n                )\n              : '',\n          };\n          newFilter[item.urlParam].length > 0\n            ? updateFilters({ ...filters, ...newFilter })\n            : removeFilterParam(item.urlParam);\n        });\n      }\n    },\n  };\n\n  const onSort = (_e, index, direction) => {\n    updateFilters({ ...filters, sortIndex: index, sortDirection: direction });\n  };\n\n  return (\n    <>\n      {isUninitialized || isFetching ? (\n        <Bullseye>\n          <Spinner />\n        </Bullseye>\n      ) : clusters.length === 0 ? (\n        <NoRecsForClusters />\n      ) : (\n        <div id=\"clusters-list-table\">\n          <PrimaryToolbar\n            pagination={{\n              itemCount: filteredRows.length,\n              page,\n              perPage: filters.limit,\n              onSetPage: (_event, page) =>\n                updateFilters({\n                  ...filters,\n                  offset: filters.limit * (page - 1),\n                }),\n              onPerPageSelect: (_event, perPage) =>\n                updateFilters({ ...filters, limit: perPage, offset: 0 }),\n              isCompact: true,\n              ouiaId: 'pager',\n            }}\n            filterConfig={{ items: filterConfigItems }}\n            activeFiltersConfig={activeFiltersConfig}\n          />\n          {(isUninitialized || isFetching) && <Loading />}\n          {isError && (\n            <Card ouiaId=\"error-state\">\n              <CardBody>\n                <ErrorState />\n              </CardBody>\n            </Card>\n          )}\n          {!(isUninitialized || isFetching) && isSuccess && (\n            <React.Fragment>\n              <Table\n                aria-label=\"Table of clusters\"\n                ouiaId=\"clusters\"\n                variant={TableVariant.compact}\n                cells={CLUSTERS_LIST_COLUMNS}\n                rows={displayedRows}\n                sortBy={{\n                  index: filters.sortIndex,\n                  direction: filters.sortDirection,\n                }}\n                onSort={onSort}\n                isStickyHeader\n              >\n                <TableHeader />\n                <TableBody />\n              </Table>\n              {filteredRows.length === 0 && (\n                <Card ouiaId=\"empty-state\">\n                  <CardBody>\n                    <NoMatchingClusters />\n                  </CardBody>\n                </Card>\n              )}\n            </React.Fragment>\n          )}\n          <Pagination\n            ouiaId=\"pager\"\n            itemCount={filteredRows.length}\n            page={filters.offset / filters.limit + 1}\n            perPage={Number(filters.limit)}\n            onSetPage={(_e, page) =>\n              updateFilters({\n                ...filters,\n                offset: filters.limit * (page - 1),\n              })\n            }\n            onPerPageSelect={(_e, perPage) =>\n              updateFilters({ ...filters, limit: perPage, offset: 0 })\n            }\n            widgetId={`pagination-options-menu-bottom`}\n            variant={PaginationVariant.bottom}\n          />\n        </div>\n      )}\n    </>\n  );\n};\n\nClustersListTable.propTypes = {\n  query: PropTypes.object.isRequired,\n};\n\nexport { ClustersListTable };\n","import React from 'react';\nimport { useGetClustersQuery } from '../../Services/SmartProxy';\nimport { ClustersListTable } from './ClustersListTable';\n\nconst ClustersListTableWrapper = () => {\n  const query = useGetClustersQuery();\n\n  return <ClustersListTable query={query} />;\n};\n\nexport default ClustersListTableWrapper;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\n\nimport PageHeader, {\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport Main from '@redhat-cloud-services/frontend-components/Main';\n\nimport messages from '../../Messages';\nimport ClustersListTable from '../ClustersListTable';\n\nconst ClustersList = () => {\n  const intl = useIntl();\n  document.title = intl.formatMessage(messages.documentTitle, {\n    subnav: 'Clusters',\n  });\n\n  return (\n    <React.Fragment>\n      <PageHeader className=\"ins-c-clusters-header\">\n        <PageHeaderTitle\n          title={`${intl.formatMessage(messages.insightsHeader)} ${intl\n            .formatMessage(messages.clusters)\n            .toLowerCase()}`}\n        />\n      </PageHeader>\n      <Main>\n        <ClustersListTable />\n      </Main>\n    </React.Fragment>\n  );\n};\n\nexport default ClustersList;\n"],"names":["ClustersListTable","query","isError","isUninitialized","isFetching","isSuccess","data","refetch","intl","useIntl","dispatch","useDispatch","updateFilters","payload","updateClustersListFilters","filters","useSelector","f","clustersListState","clusters","page","offset","limit","useState","filteredRows","setFilteredRows","displayedRows","setDisplayedRows","useEffect","buildDisplayedRows","sortIndex","sortDirection","buildFilteredRows","hits","text","allRows","mapClustersToRows","filter","cluster","passFiltersCluster","rows","index","direction","sorted","sort","a","b","fst","snd","d","SortByDirection","CLUSTER_NAME_CELL","cluster_name","cluster_id","localeCompare","CLUSTER_LAST_CHECKED_CELL","Date","last_checked_at","cells","slice","s","setInterval","removeFilterParam","param","newFilters","filterConfigItems","label","formatMessage","messages","toLowerCase","filterValues","key","onChange","_event","value","placeholder","CLUSTER_FILTER_CATEGORIES","type","id","values","length","addFilterParam","items","activeFiltersConfig","showDeleteButton","deleteTitle","buildFilterChips","onDelete","itemsToRemove","isAll","isEqual","CLUSTERS_LIST_INITIAL_STATE","map","item","newFilter","urlParam","Array","isArray","String","chips","Bullseye","Spinner","pagination","itemCount","perPage","onSetPage","onPerPageSelect","isCompact","ouiaId","filterConfig","Loading","Card","CardBody","Table","variant","TableVariant","CLUSTERS_LIST_COLUMNS","sortBy","onSort","_e","isStickyHeader","TableHeader","TableBody","Pagination","Number","widgetId","PaginationVariant","propTypes","PropTypes","useGetClustersQuery","document","title","subnav","PageHeader","className","PageHeaderTitle","Main"],"sourceRoot":""}