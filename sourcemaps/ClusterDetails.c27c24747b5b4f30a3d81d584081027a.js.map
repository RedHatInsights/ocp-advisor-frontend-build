{"version":3,"file":"js/ClusterDetails.a9fa42dccaae3bc4d71f.js","mappings":"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","sources":["webpack:///./src/Components/Breadcrumbs/index.js","webpack:///./src/Components/ClusterHeader/ClusterHeader.js","webpack:///./src/Components/ClusterHeader/index.js","webpack:///./src/Components/ClusterRules/ClusterRules.js","webpack:///./src/Components/Cluster/Cluster.js","webpack:///./src/Components/Cluster/index.js","webpack:///./src/Components/Labels/RuleLabels.js","webpack:///./src/Components/Loading/Loading.js","webpack:///./src/Utilities/Loaders.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { Link, useLocation } from 'react-router-dom';\n\nimport { Breadcrumb, BreadcrumbItem } from '@patternfly/react-core';\n\nimport messages from '../../Messages';\n\nconst Breadcrumbs = ({ current }) => {\n  const intl = useIntl();\n  const location = useLocation();\n  const splitUrl = location.pathname.split('/');\n\n  return (\n    <div>\n      <Breadcrumb ouiaId=\"detail\">\n        <BreadcrumbItem className=\"breadcrumb-item\">\n          <Link to={`/${splitUrl[1]}`}>\n            {`${intl.formatMessage(messages.insightsHeader)} ${splitUrl[1]}`}\n          </Link>\n        </BreadcrumbItem>\n        <BreadcrumbItem className=\"breadcrumb-item\" isActive>\n          {current}\n        </BreadcrumbItem>\n      </Breadcrumb>\n    </div>\n  );\n};\n\nBreadcrumbs.propTypes = {\n  current: PropTypes.string,\n};\n\nexport default Breadcrumbs;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport {\n  Grid,\n  GridItem,\n  Stack,\n  StackItem,\n  Title,\n} from '@patternfly/react-core';\nimport { Dropdown, DropdownToggle, DropdownItem } from '@patternfly/react-core';\nimport Skeleton from '@redhat-cloud-services/frontend-components/Skeleton';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat/DateFormat';\n\nimport messages from '../../Messages';\nimport { OneLineLoader } from '../../Utilities/Loaders';\n\nexport const ClusterHeader = ({ clusterId, clusterData, clusterInfo }) => {\n  const location = window.location;\n  const [isOpen, setIsOpen] = useState(false);\n  const intl = useIntl();\n  // subscribe to the cluster data query\n  const {\n    isUninitialized: isUninitializedCluster,\n    isFetching: isFetchingCluster,\n    data: cluster,\n  } = clusterData;\n\n  const {\n    isUninitialized: isUninitializedInfo,\n    isFetching: isFetchingInfo,\n    data: info,\n  } = clusterInfo;\n\n  const redirectOCM = (clusterId) => {\n    location.assign(\n      location.origin +\n        (location.pathname.includes('beta') ? `/beta` : '') +\n        `/openshift/details/${clusterId}`\n    );\n  };\n\n  const dropDownItems = [\n    <DropdownItem key=\"link\" onClick={() => redirectOCM(clusterId)}>\n      <snap>{intl.formatMessage(messages.clusterDetailsRedirect)}</snap>\n    </DropdownItem>,\n  ];\n\n  return (\n    <Grid id=\"cluster-header\" md={12} hasGutter>\n      <GridItem span={8}>\n        <Title\n          size=\"2xl\"\n          headingLevel=\"h1\"\n          id=\"cluster-header-title\"\n          ouiaId=\"cluster-name\"\n        >\n          {isUninitializedInfo || isFetchingInfo ? (\n            <Skeleton size=\"sm\" />\n          ) : (\n            info?.display_name || clusterId\n          )}\n        </Title>\n      </GridItem>\n      <GridItem span={4} id=\"cluster-header-dropdown\">\n        <Dropdown\n          position=\"right\"\n          onSelect={() => setIsOpen(!isOpen)}\n          autoFocus={false}\n          isOpen={isOpen}\n          toggle={\n            <DropdownToggle\n              id=\"toggle-id-2\"\n              onToggle={(isOpen) => setIsOpen(isOpen)}\n            >\n              {intl.formatMessage(messages.dropDownActionSingleCluster)}\n            </DropdownToggle>\n          }\n          dropdownItems={dropDownItems}\n        />\n      </GridItem>\n      <GridItem>\n        <Stack>\n          <StackItem id=\"cluster-header-uuid\">\n            <span>UUID:</span> <span>{clusterId}</span>\n          </StackItem>\n          <StackItem id=\"cluster-header-last-seen\">\n            <span>{intl.formatMessage(messages.lastSeen)}: </span>\n            <span>\n              {isUninitializedCluster || isFetchingCluster ? (\n                <OneLineLoader />\n              ) : cluster?.report?.meta?.last_checked_at ? (\n                <DateFormat\n                  date={cluster?.report?.meta?.last_checked_at}\n                  type=\"exact\"\n                />\n              ) : (\n                intl.formatMessage(messages.unknown)\n              )}\n            </span>\n          </StackItem>\n        </Stack>\n      </GridItem>\n    </Grid>\n  );\n};\n\nClusterHeader.propTypes = {\n  clusterId: PropTypes.string.isRequired,\n  clusterData: PropTypes.object.isRequired,\n  clusterInfo: PropTypes.shape({\n    isUninitialized: PropTypes.bool.isRequired,\n    isFetching: PropTypes.bool.isRequired,\n    data: PropTypes.shape({\n      cluster_id: PropTypes.string,\n      display_name: PropTypes.string,\n      managed: PropTypes.bool,\n      status: PropTypes.string,\n    }),\n  }),\n};\n","import React from 'react';\nimport { useRouteMatch } from 'react-router-dom';\n\nimport {\n  useGetClusterByIdQuery,\n  useGetClusterInfoQuery,\n} from '../../Services/SmartProxy';\nimport { ClusterHeader } from './ClusterHeader';\n\nconst ClusterHeaderWrapper = () => {\n  const match = useRouteMatch();\n  const clusterId = match.params.clusterId;\n  const clusterData = useGetClusterByIdQuery({\n    id: clusterId,\n    includeDisabled: false,\n  });\n  const clusterInfo = useGetClusterInfoQuery({\n    id: clusterId,\n  });\n\n  return (\n    <ClusterHeader\n      clusterId={clusterId}\n      clusterData={clusterData}\n      clusterInfo={clusterInfo}\n    />\n  );\n};\n\nexport default ClusterHeaderWrapper;\n","import './_ClusterRules.scss';\n\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { useLocation } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport capitalize from 'lodash/capitalize';\n\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat/DateFormat';\nimport InsightsLabel from '@redhat-cloud-services/frontend-components/InsightsLabel';\nimport {\n  SortByDirection,\n  Table,\n  TableBody,\n  TableHeader,\n  TableVariant,\n} from '@patternfly/react-table';\nimport { Tooltip } from '@patternfly/react-core';\nimport { TooltipPosition } from '@patternfly/react-core/dist/js/components/Tooltip';\nimport PrimaryToolbar from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\n\nimport messages from '../../Messages';\nimport {\n  IMPACT_LABEL,\n  LIKELIHOOD_LABEL,\n  FILTER_CATEGORIES as FC,\n  CLUSTER_RULES_COLUMNS_KEYS,\n  FILTER_CATEGORIES,\n  CLUSTER_RULES_COLUMNS,\n  CLUSTER_RULES_IMPACTED_CELL,\n} from '../../AppConstants';\nimport { ReportDetails } from '@redhat-cloud-services/frontend-components-advisor-components';\nimport RuleLabels from '../Labels/RuleLabels';\nimport {\n  ErrorState,\n  NoMatchingRecs,\n  NoRecsError,\n  NoInsightsResults,\n  NoRecsAffecting,\n} from '../MessageState/EmptyStates';\nimport {\n  paramParser,\n  passFilters,\n  removeFilterParam as _removeFilterParam,\n  addFilterParam as _addFilterParam,\n  translateSortParams,\n} from '../Common/Tables';\nimport {\n  CLUSTER_RULES_INITIAL_STATE,\n  resetFilters,\n  updateClusterRulesFilters,\n} from '../../Services/Filters';\nimport { getErrorKey, getPluginName } from '../../Utilities/Rule';\nimport Loading from '../Loading/Loading';\n\nconst ClusterRules = ({ cluster }) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const updateFilters = (filters) =>\n    dispatch(updateClusterRulesFilters(filters));\n  const filters = useSelector(({ filters }) => filters.clusterRulesState);\n  const { isError, isUninitialized, isFetching, isSuccess, data, error } =\n    cluster;\n  const reports = data?.report?.data || [];\n  const [filteredRows, setFilteredRows] = useState([]);\n  const [displayedRows, setDisplayedRows] = useState([]);\n  const [isAllExpanded, setIsAllExpanded] = useState(false);\n  const [expandFirst, setExpandFirst] = useState(true);\n  const [firstRule, setFirstRule] = useState(''); // show a particular rule first\n  const results = filteredRows.length;\n  const { search } = useLocation();\n  // helps to distinguish the state when the API data received but not yet filtered\n  const [rowsFiltered, setRowsFiltered] = useState(false);\n  const loadingState = isUninitialized || isFetching || !rowsFiltered;\n  const errorState = isError;\n  const successState = isSuccess;\n  const noInput = successState && reports.length === 0;\n  const noMatch = reports.length > 0 && filteredRows.length === 0;\n\n  const removeFilterParam = (param) =>\n    _removeFilterParam(filters, updateFilters, param);\n\n  const addFilterParam = (param, values) => {\n    setExpandFirst(false);\n    setFirstRule('');\n    return _addFilterParam(filters, updateFilters, param, values);\n  };\n\n  useEffect(() => {\n    if (search) {\n      const paramsObject = paramParser(search);\n      if (paramsObject.sort) {\n        const sortObj = translateSortParams(paramsObject.sort);\n        paramsObject.sortIndex = CLUSTER_RULES_COLUMNS_KEYS.indexOf(\n          sortObj.name\n        );\n        paramsObject.sortDirection = sortObj.direction;\n      }\n      if (paramsObject.first) {\n        setFirstRule(paramsObject.first);\n        delete paramsObject.first;\n      }\n      updateFilters({ ...filters, ...paramsObject });\n    }\n  }, []);\n\n  useEffect(() => {\n    setFilteredRows(buildFilteredRows(reports, filters));\n  }, [data, filters]);\n\n  useEffect(() => {\n    setDisplayedRows(\n      buildDisplayedRows(filteredRows, filters.sortIndex, filters.sortDirection)\n    );\n    setRowsFiltered(true);\n  }, [filteredRows]);\n\n  const handleOnCollapse = (_e, rowId, isOpen) => {\n    if (rowId === undefined) {\n      // if undefined, all rows are affected\n      setIsAllExpanded(isOpen);\n      setDisplayedRows(\n        displayedRows.map((row) => ({\n          ...row,\n          isOpen: isOpen,\n        }))\n      );\n    } else {\n      setDisplayedRows(\n        displayedRows.map((row, index) =>\n          index === rowId ? { ...row, isOpen } : row\n        )\n      );\n    }\n  };\n\n  const buildFilteredRows = (allRows, filters) => {\n    setRowsFiltered(false);\n    const expandedRowsSet = new Set(\n      displayedRows\n        .filter((ruleExpanded) => ruleExpanded?.isOpen)\n        .map((object) => object?.rule?.rule_id)\n    );\n\n    return allRows\n      .filter((rule) => passFilters(rule, filters))\n      .map((value, key) => [\n        {\n          rule: value,\n          isOpen: isAllExpanded || expandedRowsSet?.has(value?.rule_id),\n          cells: [\n            {\n              title: (\n                <div>\n                  {value?.description || value?.rule_id}{' '}\n                  <RuleLabels rule={value} />\n                </div>\n              ),\n            },\n            {\n              title: (\n                <div key={key}>\n                  <DateFormat\n                    date={value.created_at}\n                    type=\"relative\"\n                    tooltipProps={{ position: TooltipPosition.bottom }}\n                  />\n                </div>\n              ),\n            },\n            value.impacted\n              ? {\n                  title: (\n                    <div key={key}>\n                      <DateFormat\n                        extraTitle={`${intl.formatMessage(\n                          messages.impacted\n                        )}: `}\n                        date={value.impacted}\n                        type=\"relative\"\n                        tooltipProps={{ position: TooltipPosition.bottom }}\n                      />\n                    </div>\n                  ),\n                }\n              : {\n                  title: (\n                    <Tooltip\n                      key={key}\n                      content={\n                        <span>\n                          {intl.formatMessage(messages.impacted) + ': '}\n                          {intl.formatMessage(messages.nA)}\n                        </span>\n                      }\n                    >\n                      <span>{intl.formatMessage(messages.nA)}</span>\n                    </Tooltip>\n                  ),\n                },\n            {\n              title: (\n                <div key={key} style={{ verticalAlign: 'top' }}>\n                  {value?.likelihood && value?.impact ? (\n                    <Tooltip\n                      key={key}\n                      position={TooltipPosition.bottom}\n                      content={\n                        // TODO: refine fields lookup\n                        <span>\n                          The <strong>likelihood</strong> that this will be a\n                          problem is{' '}\n                          {value.likelihood\n                            ? LIKELIHOOD_LABEL[value.likelihood]\n                            : 'unknown'}\n                          .The <strong>impact</strong> of the problem would be{' '}\n                          {value.impact\n                            ? IMPACT_LABEL[value.impact]\n                            : 'unknown'}{' '}\n                          if it occurred.\n                        </span>\n                      }\n                    >\n                      <InsightsLabel\n                        value={value.total_risk}\n                        rest={{ isCompact: true }}\n                      />\n                    </Tooltip>\n                  ) : (\n                    <InsightsLabel\n                      value={value.total_risk}\n                      rest={{ isCompact: true }}\n                    />\n                  )}\n                </div>\n              ),\n            },\n          ],\n        },\n        {\n          fullWidth: true,\n          cells: [\n            {\n              title: (\n                <ReportDetails\n                  key={`child-${key}`}\n                  report={{\n                    rule: value,\n                    resolution: value.resolution,\n                    details: value.extra_data,\n                  }}\n                />\n              ),\n            },\n          ],\n        },\n      ]);\n  };\n\n  const buildDisplayedRows = (rows, index, direction) => {\n    let sortingRows = [...rows];\n    if (index >= 0 && !firstRule) {\n      const d = direction === SortByDirection.asc ? 1 : -1;\n      sortingRows = [...rows].sort((firstItem, secondItem) => {\n        let fst = firstItem[0].rule[CLUSTER_RULES_COLUMNS_KEYS[index]];\n        let snd = secondItem[0].rule[CLUSTER_RULES_COLUMNS_KEYS[index]];\n        if (index === CLUSTER_RULES_IMPACTED_CELL) {\n          //sorting for the impacted column\n          fst = new Date(firstItem[0].rule.impacted || 0);\n          snd = new Date(secondItem[0].rule.impacted || 0);\n        }\n        return fst > snd ? d : snd > fst ? -d : 0;\n      });\n    } else if (firstRule) {\n      const i = rows.findIndex((row) => {\n        const rule = row[0].rule;\n        /* rule_id is given with the plugin name only,\n           thus we need to look at extra_data for the error key */\n        return (\n          rule.rule_id.split('.report')[0] === getPluginName(firstRule) &&\n          rule.extra_data.error_key === getErrorKey(firstRule)\n        );\n      });\n      i !== -1 && sortingRows.unshift(sortingRows.splice(i, 1)[0]);\n    }\n    return sortingRows.flatMap((row, index) => {\n      const updatedRow = [...row];\n      if (expandFirst && index === 0) {\n        row[0].isOpen = true;\n      }\n      row[1].parent = index * 2;\n      return updatedRow;\n    });\n  };\n\n  const onSort = (_e, index, direction) => {\n    setRowsFiltered(false);\n    setExpandFirst(false);\n    setFirstRule('');\n    return updateFilters({\n      ...filters,\n      sortIndex: index,\n      sortDirection: direction,\n    });\n  };\n\n  const filterConfigItems = [\n    {\n      label: 'description',\n      filterValues: {\n        key: 'text-filter',\n        onChange: (_e, value) => addFilterParam('text', value),\n        value: filters.text,\n      },\n    },\n    {\n      label: FC.total_risk.title,\n      type: FC.total_risk.type,\n      id: FC.total_risk.urlParam,\n      value: `checkbox-${FC.total_risk.urlParam}`,\n      filterValues: {\n        key: `${FC.total_risk.urlParam}-filter`,\n        onChange: (_e, values) =>\n          addFilterParam(FILTER_CATEGORIES.total_risk.urlParam, values),\n        value: filters.total_risk,\n        items: FC.total_risk.values,\n      },\n    },\n    {\n      label: FC.category.title,\n      type: FC.category.type,\n      id: FC.category.urlParam,\n      value: `checkbox-${FC.category.urlParam}`,\n      filterValues: {\n        key: `${FC.category.urlParam}-filter`,\n        onChange: (_e, values) =>\n          addFilterParam(FILTER_CATEGORIES.category.urlParam, values),\n        value: filters.category,\n        items: FC.category.values,\n      },\n    },\n  ];\n\n  const pruneFilters = (localFilters, filterCategories) => {\n    const prunedFilters = Object.entries(localFilters);\n    return prunedFilters.length > 0\n      ? prunedFilters.reduce((arr, item) => {\n          if (filterCategories[item[0]]) {\n            const category = filterCategories[item[0]];\n            const chips = Array.isArray(item[1])\n              ? item[1].map((value) => {\n                  const selectedCategoryValue = category.values.find(\n                    (values) => values.value === String(value)\n                  );\n                  return selectedCategoryValue\n                    ? {\n                        name:\n                          selectedCategoryValue.text ||\n                          selectedCategoryValue.label,\n                        value,\n                      }\n                    : { name: value, value };\n                })\n              : [\n                  {\n                    name: category.values.find(\n                      (values) => values.value === String(item[1])\n                    ).label,\n                    value: item[1],\n                  },\n                ];\n            return [\n              ...arr,\n              {\n                category: capitalize(category.title),\n                chips,\n                urlParam: category.urlParam,\n              },\n            ];\n          } else if (item[0] === 'text') {\n            return [\n              ...arr,\n              ...(item[1].length > 0\n                ? [\n                    {\n                      category: intl.formatMessage(messages.description),\n                      chips: [{ name: item[1], value: item[1] }],\n                      urlParam: item[0],\n                    },\n                  ]\n                : []),\n            ];\n          } else {\n            return arr;\n          }\n        }, [])\n      : [];\n  };\n\n  const buildFilterChips = () => {\n    const localFilters = { ...filters };\n    delete localFilters.sortIndex;\n    delete localFilters.sortDirection;\n    return pruneFilters(localFilters, FILTER_CATEGORIES);\n  };\n\n  const activeFiltersConfig = {\n    deleteTitle: intl.formatMessage(messages.resetFilters),\n    filters: buildFilterChips(),\n    onDelete: (_event, itemsToRemove, isAll) => {\n      if (isAll) {\n        resetFilters(filters, CLUSTER_RULES_INITIAL_STATE, updateFilters);\n      } else {\n        itemsToRemove.map((item) => {\n          const newFilter = {\n            [item.urlParam]: Array.isArray(filters[item.urlParam])\n              ? filters[item.urlParam].filter(\n                  (value) => String(value) !== String(item.chips[0].value)\n                )\n              : '',\n          };\n          newFilter[item.urlParam].length > 0\n            ? updateFilters({ ...filters, ...newFilter })\n            : removeFilterParam(item.urlParam);\n        });\n      }\n    },\n  };\n\n  return (\n    <div id=\"cluster-recs-list-table\" data-ouia-safe={!loadingState}>\n      <PrimaryToolbar\n        filterConfig={{\n          items: filterConfigItems,\n          isDisabled: loadingState || errorState || reports.length === 0,\n        }}\n        pagination={\n          <React.Fragment>\n            {results === 1\n              ? `${results} ${intl.formatMessage(messages.recommendation)}`\n              : `${results} ${intl.formatMessage(messages.recommendations)}`}\n          </React.Fragment>\n        }\n        activeFiltersConfig={\n          loadingState || errorState || reports.length === 0\n            ? undefined\n            : activeFiltersConfig\n        }\n      />\n      <Table\n        aria-label={'Cluster recommendations table'}\n        ouiaId=\"recommendations\"\n        ouiaSafe={!loadingState}\n        onCollapse={handleOnCollapse} // TODO: set undefined when there is an empty state\n        rows={\n          errorState || loadingState || noMatch || noInput ? (\n            [\n              {\n                fullWidth: true,\n                cells: [\n                  {\n                    props: {\n                      colSpan: CLUSTER_RULES_COLUMNS.length + 1,\n                    },\n                    title: errorState ? (\n                      error?.status === 404 ? (\n                        <NoInsightsResults /> // no Insights results received yet\n                      ) : (\n                        <NoRecsError /> // any other problem\n                      )\n                    ) : loadingState ? (\n                      <Loading />\n                    ) : noInput ? (\n                      <NoRecsAffecting />\n                    ) : (\n                      <NoMatchingRecs />\n                    ),\n                  },\n                ],\n              },\n            ]\n          ) : successState ? (\n            displayedRows\n          ) : (\n            <ErrorState />\n          )\n        }\n        cells={CLUSTER_RULES_COLUMNS}\n        sortBy={{\n          index: filters.sortIndex,\n          direction: filters.sortDirection,\n        }}\n        onSort={onSort}\n        variant={TableVariant.compact}\n        isStickyHeader\n        canCollapseAll\n      >\n        <TableHeader />\n        <TableBody />\n      </Table>\n    </div>\n  );\n};\n\nClusterRules.propTypes = {\n  cluster: PropTypes.shape({\n    isError: PropTypes.bool.isRequired,\n    isUninitialized: PropTypes.bool.isRequired,\n    isFetching: PropTypes.bool.isRequired,\n    isSuccess: PropTypes.bool.isRequired,\n    data: PropTypes.array,\n    refetch: PropTypes.func,\n    error: PropTypes.object,\n  }),\n};\n\nexport default ClusterRules;\n","import './_Cluster.scss';\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport PageHeader from '@redhat-cloud-services/frontend-components/PageHeader';\nimport ClusterHeader from '../ClusterHeader';\nimport ClusterRules from '../ClusterRules/ClusterRules';\nimport Breadcrumbs from '../Breadcrumbs';\n\nexport const Cluster = ({ cluster, match }) => {\n  // TODO: make breadcrumbs take display name from GET /cluster/id/info\n  return (\n    <React.Fragment>\n      <PageHeader className=\"pf-m-light ins-inventory-detail\">\n        <Breadcrumbs\n          current={\n            cluster?.data?.report.meta.cluster_name || match.params.clusterId\n          }\n          match={match}\n        />\n        <ClusterHeader />\n      </PageHeader>\n      <section className=\"pf-l-page__main-section pf-c-page__main-section\">\n        <ClusterRules cluster={cluster} />\n      </section>\n    </React.Fragment>\n  );\n};\n\nCluster.propTypes = {\n  cluster: PropTypes.object.isRequired,\n  displayName: PropTypes.object.isRequired,\n  match: PropTypes.object.isRequired,\n};\n","import React, { useEffect } from 'react';\nimport { useRouteMatch } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\n\nimport { useGetClusterByIdQuery } from '../../Services/SmartProxy';\nimport messages from '../../Messages';\nimport { Cluster } from './Cluster';\n\nconst ClusterWrapper = () => {\n  const intl = useIntl();\n  const match = useRouteMatch();\n  const cluster = useGetClusterByIdQuery({\n    id: match.params.clusterId,\n    includeDisabled: false,\n  });\n  const chrome = useChrome();\n\n  useEffect(() => {\n    cluster.refetch();\n  }, [match.params.clusterId]);\n\n  useEffect(() => {\n    const subnav = `${\n      cluster?.data?.report?.meta?.cluster_name || match.params.clusterId\n    } - ${intl.formatMessage(messages.clusters)}`;\n    chrome.updateDocumentTitle(\n      intl.formatMessage(messages.documentTitle, { subnav })\n    );\n  }, [cluster, match]);\n  return <Cluster cluster={cluster} match={match} />;\n};\n\nexport default ClusterWrapper;\n","import { TooltipPosition } from '@patternfly/react-core/dist/js/components/Tooltip/Tooltip';\nimport { Tooltip, Label } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { useIntl } from 'react-intl';\nimport messages from '../../Messages';\n\nconst RuleLabels = ({ rule }) => {\n  const intl = useIntl();\n  return (\n    <React.Fragment>\n      {rule.disabled && (\n        <Tooltip\n          content={intl.formatMessage(messages.ruleIsDisabledTooltip)}\n          position={TooltipPosition.right}\n        >\n          <Label color=\"gray\" isCompact>\n            {intl.formatMessage(messages.disabled)}\n          </Label>\n        </Tooltip>\n      )}\n    </React.Fragment>\n  );\n};\n\nRuleLabels.propTypes = {\n  rule: PropTypes.object,\n};\n\nexport default RuleLabels;\n","import React from 'react';\nimport { Card, CardBody } from '@patternfly/react-core';\nimport { List } from 'react-content-loader';\n\nconst Loading = () => (\n  <Card ouiaId=\"loading-skeleton\">\n    <CardBody>\n      <List />\n    </CardBody>\n  </Card>\n);\n\nexport default Loading;\n","import React from 'react';\nimport ContentLoader from 'react-content-loader';\n\nconst OneLineLoader = () => (\n  <ContentLoader height={20}>\n    <rect x=\"0\" y=\"0\" rx=\"4\" ry=\"4\" width=\"300\" height=\"20\" />\n  </ContentLoader>\n);\n\nexport { OneLineLoader };\n"],"names":["Breadcrumbs","current","intl","useIntl","location","useLocation","splitUrl","pathname","split","ouiaId","className","Link","to","formatMessage","messages","isActive","propTypes","PropTypes","ClusterHeader","clusterId","clusterData","clusterInfo","window","useState","isOpen","setIsOpen","isUninitializedCluster","isUninitialized","isFetchingCluster","isFetching","cluster","data","isUninitializedInfo","isFetchingInfo","info","dropDownItems","DropdownItem","key","onClick","assign","origin","includes","redirectOCM","Grid","id","md","hasGutter","GridItem","span","Title","size","headingLevel","Skeleton","display_name","Dropdown","position","onSelect","s","autoFocus","toggle","DropdownToggle","onToggle","dropdownItems","Stack","StackItem","report","meta","last_checked_at","date","type","cluster_id","managed","status","match","useRouteMatch","params","useGetClusterByIdQuery","includeDisabled","useGetClusterInfoQuery","ClusterRules","dispatch","useDispatch","updateFilters","filters","updateClusterRulesFilters","useSelector","clusterRulesState","isError","isSuccess","error","reports","filteredRows","setFilteredRows","displayedRows","setDisplayedRows","isAllExpanded","setIsAllExpanded","expandFirst","setExpandFirst","firstRule","setFirstRule","results","length","search","rowsFiltered","setRowsFiltered","loadingState","errorState","successState","noInput","noMatch","addFilterParam","param","values","_addFilterParam","useEffect","paramsObject","paramParser","sort","sortObj","translateSortParams","sortIndex","CLUSTER_RULES_COLUMNS_KEYS","name","sortDirection","direction","first","buildFilteredRows","buildDisplayedRows","allRows","expandedRowsSet","Set","filter","ruleExpanded","map","object","rule","rule_id","passFilters","value","has","cells","title","description","RuleLabels","created_at","tooltipProps","TooltipPosition","impacted","extraTitle","Tooltip","content","style","verticalAlign","likelihood","impact","LIKELIHOOD_LABEL","IMPACT_LABEL","InsightsLabel","total_risk","rest","isCompact","fullWidth","resolution","details","extra_data","rows","index","sortingRows","d","SortByDirection","firstItem","secondItem","fst","snd","CLUSTER_RULES_IMPACTED_CELL","Date","i","findIndex","row","getPluginName","error_key","getErrorKey","unshift","splice","flatMap","updatedRow","parent","filterConfigItems","label","filterValues","onChange","_e","text","FC","FILTER_CATEGORIES","items","category","activeFiltersConfig","deleteTitle","localFilters","filterCategories","prunedFilters","Object","entries","reduce","arr","item","chips","Array","isArray","selectedCategoryValue","find","String","capitalize","urlParam","pruneFilters","buildFilterChips","onDelete","_event","itemsToRemove","isAll","resetFilters","CLUSTER_RULES_INITIAL_STATE","newFilter","_removeFilterParam","PrimaryToolbar","filterConfig","isDisabled","pagination","Table","ouiaSafe","onCollapse","rowId","undefined","props","colSpan","CLUSTER_RULES_COLUMNS","Loading","sortBy","onSort","variant","TableVariant","isStickyHeader","canCollapseAll","TableHeader","TableBody","refetch","Cluster","PageHeader","cluster_name","displayName","chrome","useChrome","subnav","updateDocumentTitle","disabled","Label","color","Card","CardBody","OneLineLoader","height","x","y","rx","ry","width"],"sourceRoot":""}