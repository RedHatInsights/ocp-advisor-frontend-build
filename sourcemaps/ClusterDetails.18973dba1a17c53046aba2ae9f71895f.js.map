{"version":3,"file":"js/ClusterDetails.b0d1c869053ac1d4b9a3.js","mappings":"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","sources":["webpack:///./src/Components/ClusterHeader/ClusterHeader.js","webpack:///./src/Components/ClusterHeader/index.js","webpack:///./src/Components/ReportDetails/ReportDetails.js","webpack:///./src/Components/ClusterRules/ClusterRules.js","webpack:///./src/Components/Cluster/Cluster.js","webpack:///./src/Components/Cluster/index.js"],"sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport { Grid, GridItem } from '@patternfly/react-core/dist/js/layouts/Grid';\nimport { Stack, StackItem } from '@patternfly/react-core/dist/js/layouts/Stack';\nimport { Title } from '@patternfly/react-core/dist/js/components/Title';\nimport { Dropdown, DropdownToggle, DropdownItem } from '@patternfly/react-core';\nimport Skeleton from '@redhat-cloud-services/frontend-components/Skeleton';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat/DateFormat';\n\nimport messages from '../../Messages';\nimport { OneLineLoader } from '../../Utilities/Loaders';\n\nexport const ClusterHeader = ({ clusterId, clusterData }) => {\n  const location = window.location;\n  const [isOpen, setIsOpen] = useState(false);\n  const intl = useIntl();\n  // subscribe to the cluster data query\n  const {\n    isUninitialized: isUninitializedCluster,\n    isFetching: isFetchingCluster,\n    data: cluster,\n  } = clusterData;\n\n  const redirectOCM = (clusterId) => {\n    location.assign(\n      location.origin +\n        (location.pathname.includes('beta') ? `/beta` : '') +\n        `/openshift/details/${clusterId}`\n    );\n  };\n\n  const dropDownItems = [\n    <DropdownItem key=\"link\" onClick={() => redirectOCM(clusterId)}>\n      <snap>{intl.formatMessage(messages.clusterDetailsRedirect)}</snap>\n    </DropdownItem>,\n  ];\n\n  return (\n    <Grid id=\"cluster-header\" md={12} hasGutter>\n      <GridItem span={8}>\n        {isUninitializedCluster || isFetchingCluster ? (\n          <Skeleton size=\"sm\" />\n        ) : (\n          <Title\n            size=\"2xl\"\n            headingLevel=\"h1\"\n            id=\"cluster-header-title\"\n            ouiaId=\"cluster-name\"\n          >\n            {clusterData?.data?.report?.meta.cluster_name || clusterId}\n          </Title>\n        )}\n      </GridItem>\n      <GridItem span={4} id=\"cluster-header-dropdown\">\n        <Dropdown\n          position=\"right\"\n          onSelect={() => setIsOpen(!isOpen)}\n          autoFocus={false}\n          isOpen={isOpen}\n          toggle={\n            <DropdownToggle\n              id=\"toggle-id-2\"\n              onToggle={(isOpen) => setIsOpen(isOpen)}\n            >\n              {intl.formatMessage(messages.dropDownActionSingleCluster)}\n            </DropdownToggle>\n          }\n          dropdownItems={dropDownItems}\n        />\n      </GridItem>\n      <GridItem>\n        <Stack>\n          <StackItem id=\"cluster-header-uuid\">\n            <span>UUID: </span>\n            <span>{clusterId || intl.formatMessage(messages.unknown)}</span>\n          </StackItem>\n          <StackItem id=\"cluster-header-last-seen\">\n            <span>{intl.formatMessage(messages.lastSeen)}: </span>\n            <span>\n              {isUninitializedCluster || isFetchingCluster ? (\n                <OneLineLoader />\n              ) : cluster?.report?.meta?.last_checked_at ? (\n                <DateFormat\n                  date={cluster?.report?.meta?.last_checked_at}\n                  type=\"exact\"\n                />\n              ) : (\n                intl.formatMessage(messages.unknown)\n              )}\n            </span>\n          </StackItem>\n        </Stack>\n      </GridItem>\n    </Grid>\n  );\n};\n\nClusterHeader.propTypes = {\n  clusterId: PropTypes.string.isRequired,\n  displayName: PropTypes.object.isRequired,\n  clusterData: PropTypes.object.isRequired,\n};\n","import React from 'react';\nimport { routerParams } from '@redhat-cloud-services/frontend-components-utilities/RouterParams/RouterParams';\n\nimport { useGetClusterByIdQuery } from '../../Services/SmartProxy';\nimport { ClusterHeader } from './ClusterHeader';\n\nexport default routerParams(({ match }) => {\n  const clusterId = match.params.clusterId;\n  const clusterData = useGetClusterByIdQuery({\n    id: clusterId,\n    includeDisabled: false,\n  });\n\n  return <ClusterHeader clusterId={clusterId} clusterData={clusterData} />;\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\n\nimport Loading from '../Loading/Loading';\n\n// Rule fields processing: https://docs.google.com/document/d/1D0ZLD6-2DZqBX1cUHJY2vL2QAD0dIAzY3O3xFNlEsVg/edit?usp=sharing\n\nconst ReportDetails = ({ report }) => {\n  return window.CYPRESS_RUN ? (\n    <Loading />\n  ) : (\n    <div className=\"advisor\">\n      <AsyncComponent\n        appName=\"advisor\"\n        module=\"./AdvisorReportDetails\"\n        fallback={<Loading />}\n        // TODO: make API rename `extra_data` to `details` or modify AdvisorReportDetails property\n        report={{\n          ...report,\n          details: report.extra_data,\n          resolution: {\n            resolution: report.resolution,\n          },\n        }}\n      />\n    </div>\n  );\n};\n\nReportDetails.propTypes = {\n  report: PropTypes.object.isRequired,\n};\n\nexport default ReportDetails;\n","import './_ClusterRules.scss';\n\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { useLocation } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport capitalize from 'lodash/capitalize';\n\nimport CheckIcon from '@patternfly/react-icons/dist/js/icons/check-icon';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat/DateFormat';\nimport InsightsLabel from '@redhat-cloud-services/frontend-components/InsightsLabel';\nimport {\n  SortByDirection,\n  Table,\n  TableBody,\n  TableHeader,\n  TableVariant,\n} from '@patternfly/react-table';\nimport { Card, CardBody } from '@patternfly/react-core/dist/js/components/Card';\nimport {\n  Tooltip,\n  TooltipPosition,\n} from '@patternfly/react-core/dist/js/components/Tooltip';\nimport PrimaryToolbar from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\n\nimport messages from '../../Messages';\nimport MessageState from '../MessageState/MessageState';\nimport {\n  IMPACT_LABEL,\n  LIKELIHOOD_LABEL,\n  FILTER_CATEGORIES as FC,\n  CLUSTER_RULES_COLUMNS_KEYS,\n  FILTER_CATEGORIES,\n  CLUSTER_RULES_COLUMNS,\n} from '../../AppConstants';\nimport ReportDetails from '../ReportDetails/ReportDetails';\nimport RuleLabels from '../Labels/RuleLabels';\nimport { NoMatchingRecs } from '../MessageState/EmptyStates';\nimport {\n  paramParser,\n  passFilters,\n  translateSortParams,\n} from '../Common/Tables';\nimport {\n  CLUSTER_RULES_INITIAL_STATE,\n  updateClusterRulesFilters,\n} from '../../Services/Filters';\nimport { getErrorKey, getPluginName } from '../../Utilities/Rule';\n\nconst ClusterRules = ({ reports }) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const updateFilters = (filters) =>\n    dispatch(updateClusterRulesFilters(filters));\n  const filters = useSelector(({ filters }) => filters.clusterRulesState);\n\n  const [filteredRows, setFilteredRows] = useState([]);\n  const [displayedRows, setDisplayedRows] = useState([]);\n  const [isAllExpanded, setIsAllExpanded] = useState(false);\n  const [expandFirst, setExpandFirst] = useState(true);\n  const [firstRule, setFirstRule] = useState(''); // show a particular rule first\n  const results = filteredRows.length;\n  const { search } = useLocation();\n\n  useEffect(() => {\n    setDisplayedRows(\n      buildDisplayedRows(filteredRows, filters.sortIndex, filters.sortDirection)\n    );\n  }, [\n    filteredRows,\n    filters.limit,\n    filters.offset,\n    filters.sortIndex,\n    filters.sortDirection,\n  ]);\n\n  useEffect(() => {\n    setFilteredRows(buildFilteredRows(reports, filters));\n  }, [reports, filters]);\n\n  useEffect(() => {\n    if (search) {\n      const paramsObject = paramParser(search);\n      if (paramsObject.sort) {\n        const sortObj = translateSortParams(paramsObject.sort[0]);\n        paramsObject.sortIndex = CLUSTER_RULES_COLUMNS_KEYS.indexOf(\n          sortObj.name\n        );\n        paramsObject.sortDirection = sortObj.direction;\n      }\n      if (paramsObject.first) {\n        setFirstRule(paramsObject.first);\n        delete paramsObject.first;\n      }\n      updateFilters({ ...filters, ...paramsObject });\n    }\n  }, []);\n\n  const handleOnCollapse = (_e, rowId, isOpen) => {\n    const collapseRows = [...displayedRows];\n    collapseRows[rowId] = { ...collapseRows[rowId], isOpen };\n    setDisplayedRows(collapseRows);\n  };\n\n  const buildFilteredRows = (allRows, filters) =>\n    allRows\n      .filter((rule) => passFilters(rule, filters))\n      .map((value, key) => [\n        {\n          rule: value,\n          isOpen: isAllExpanded,\n          cells: [\n            {\n              title: (\n                <div>\n                  {value?.description || value?.rule_id}{' '}\n                  <RuleLabels rule={value} />\n                </div>\n              ),\n            },\n            {\n              title: (\n                <div key={key}>\n                  <DateFormat\n                    date={value.created_at}\n                    type=\"relative\"\n                    tooltipProps={{ position: TooltipPosition.bottom }}\n                  />\n                </div>\n              ),\n            },\n            {\n              title: (\n                <div key={key} style={{ verticalAlign: 'top' }}>\n                  {value?.likelihood && value?.impact ? (\n                    <Tooltip\n                      key={key}\n                      position={TooltipPosition.bottom}\n                      content={\n                        // TODO: refine fields lookup\n                        <span>\n                          The <strong>likelihood</strong> that this will be a\n                          problem is{' '}\n                          {value.likelihood\n                            ? LIKELIHOOD_LABEL[value.likelihood]\n                            : 'unknown'}\n                          .The <strong>impact</strong> of the problem would be{' '}\n                          {value.impact\n                            ? IMPACT_LABEL[value.impact]\n                            : 'unknown'}{' '}\n                          if it occurred.\n                        </span>\n                      }\n                    >\n                      <InsightsLabel\n                        value={value.total_risk}\n                        rest={{ isCompact: true }}\n                      />\n                    </Tooltip>\n                  ) : (\n                    <InsightsLabel\n                      value={value.total_risk}\n                      rest={{ isCompact: true }}\n                    />\n                  )}\n                </div>\n              ),\n            },\n          ],\n        },\n        {\n          fullWidth: true,\n          cells: [\n            {\n              title: <ReportDetails key={`child-${key}`} report={value} />,\n            },\n          ],\n        },\n      ]);\n\n  const buildDisplayedRows = (rows, index, direction) => {\n    let sortingRows = [...rows];\n    if (index >= 0) {\n      const d = direction === SortByDirection.asc ? 1 : -1;\n      sortingRows = [...rows].sort((firstItem, secondItem) => {\n        const fst = firstItem[0].rule[CLUSTER_RULES_COLUMNS_KEYS[index - 1]];\n        const snd = secondItem[0].rule[CLUSTER_RULES_COLUMNS_KEYS[index - 1]];\n        return fst > snd ? d : snd > fst ? -d : 0;\n      });\n    } else if (firstRule) {\n      const i = rows.findIndex((row) => {\n        const rule = row[0].rule;\n        /* rule_id is given with the plugin name only,\n           thus we need to look at extra_data for the error key */\n        return (\n          rule.rule_id.split('.report')[0] === getPluginName(firstRule) &&\n          rule.extra_data.error_key === getErrorKey(firstRule)\n        );\n      });\n      i !== -1 && sortingRows.unshift(sortingRows.splice(i, 1)[0]);\n    }\n    return sortingRows.flatMap((row, index) => {\n      const updatedRow = [...row];\n      if (expandFirst && index === 0) {\n        row[0].isOpen = true;\n      }\n      row[1].parent = index * 2;\n      return updatedRow;\n    });\n  };\n\n  const onSort = (_e, index, direction) => {\n    //setExpandFirst(false);\n    return updateFilters({\n      ...filters,\n      sortIndex: index,\n      sortDirection: direction,\n    });\n  };\n\n  const removeFilterParam = (param) => {\n    const filter = { ...filters, offset: 0 };\n    delete filter[param];\n    updateFilters({ ...filter, ...(param === 'text' ? { text: '' } : {}) });\n  };\n\n  // TODO: update URL when filters changed\n  const addFilterParam = (param, values) => {\n    setExpandFirst(false);\n    setFirstRule('');\n    return values.length > 0\n      ? updateFilters({ ...filters, offset: 0, ...{ [param]: values } })\n      : removeFilterParam(param);\n  };\n\n  const filterConfigItems = [\n    {\n      label: 'description',\n      filterValues: {\n        key: 'text-filter',\n        onChange: (_e, value) => addFilterParam('text', value),\n        value: filters.text,\n      },\n    },\n    {\n      label: FC.total_risk.title,\n      type: FC.total_risk.type,\n      id: FC.total_risk.urlParam,\n      value: `checkbox-${FC.total_risk.urlParam}`,\n      filterValues: {\n        key: `${FC.total_risk.urlParam}-filter`,\n        onChange: (_e, values) =>\n          addFilterParam(FILTER_CATEGORIES.total_risk.urlParam, values),\n        value: filters.total_risk,\n        items: FC.total_risk.values,\n      },\n    },\n    {\n      label: FC.category.title,\n      type: FC.category.type,\n      id: FC.category.urlParam,\n      value: `checkbox-${FC.category.urlParam}`,\n      filterValues: {\n        key: `${FC.category.urlParam}-filter`,\n        onChange: (_e, values) =>\n          addFilterParam(FILTER_CATEGORIES.category.urlParam, values),\n        value: filters.category,\n        items: FC.category.values,\n      },\n    },\n  ];\n\n  const pruneFilters = (localFilters, filterCategories) => {\n    const prunedFilters = Object.entries(localFilters);\n    return prunedFilters.length > 0\n      ? prunedFilters.reduce((arr, item) => {\n          if (filterCategories[item[0]]) {\n            const category = filterCategories[item[0]];\n            const chips = Array.isArray(item[1])\n              ? item[1].map((value) => {\n                  const selectedCategoryValue = category.values.find(\n                    (values) => values.value === String(value)\n                  );\n                  return selectedCategoryValue\n                    ? {\n                        name:\n                          selectedCategoryValue.text ||\n                          selectedCategoryValue.label,\n                        value,\n                      }\n                    : { name: value, value };\n                })\n              : [\n                  {\n                    name: category.values.find(\n                      (values) => values.value === String(item[1])\n                    ).label,\n                    value: item[1],\n                  },\n                ];\n            return [\n              ...arr,\n              {\n                category: capitalize(category.title),\n                chips,\n                urlParam: category.urlParam,\n              },\n            ];\n          } else if (item[0] === 'text') {\n            return [\n              ...arr,\n              ...(item[1].length > 0\n                ? [\n                    {\n                      category: intl.formatMessage(messages.description),\n                      chips: [{ name: item[1], value: item[1] }],\n                      urlParam: item[0],\n                    },\n                  ]\n                : []),\n            ];\n          } else {\n            return arr;\n          }\n        }, [])\n      : [];\n  };\n\n  const buildFilterChips = () => {\n    const localFilters = { ...filters };\n    delete localFilters.sortIndex;\n    delete localFilters.sortDirection;\n    delete localFilters.offset;\n    delete localFilters.limit;\n    return pruneFilters(localFilters, FILTER_CATEGORIES);\n  };\n\n  const activeFiltersConfig = {\n    deleteTitle: intl.formatMessage(messages.resetFilters),\n    filters: buildFilterChips(),\n    onDelete: (_event, itemsToRemove, isAll) => {\n      if (isAll) {\n        updateFilters(CLUSTER_RULES_INITIAL_STATE);\n      } else {\n        itemsToRemove.map((item) => {\n          const newFilter = {\n            [item.urlParam]: Array.isArray(filters[item.urlParam])\n              ? filters[item.urlParam].filter(\n                  (value) => String(value) !== String(item.chips[0].value)\n                )\n              : '',\n          };\n          newFilter[item.urlParam].length > 0\n            ? updateFilters({ ...filters, ...newFilter })\n            : removeFilterParam(item.urlParam);\n        });\n      }\n    },\n  };\n\n  //Responsible for the handling collapse for all the recommendations\n  //Used in the PrimaryToolbar\n  const collapseAll = (_e, isOpen) => {\n    setIsAllExpanded(isOpen);\n    setDisplayedRows(\n      displayedRows.map((row) => {\n        return {\n          ...row,\n          isOpen: isOpen,\n        };\n      })\n    );\n  };\n\n  return (\n    <div id=\"cluster-recs-list-table\">\n      <PrimaryToolbar\n        expandAll={{ isAllExpanded, onClick: collapseAll }}\n        filterConfig={{\n          items: filterConfigItems,\n          isDisabled: reports.length === 0,\n        }}\n        pagination={\n          <React.Fragment>\n            {results === 1\n              ? `${results} ${intl.formatMessage(messages.recommendation)}`\n              : `${results} ${intl.formatMessage(messages.recommendations)}`}\n          </React.Fragment>\n        }\n        activeFiltersConfig={\n          reports.length === 0 ? undefined : activeFiltersConfig\n        }\n      />\n      {reports.length > 0 ? (\n        <React.Fragment>\n          <Table\n            aria-label={'Cluster recommendations table'}\n            ouiaId=\"recommendations\"\n            onCollapse={handleOnCollapse}\n            rows={displayedRows}\n            cells={CLUSTER_RULES_COLUMNS}\n            sortBy={{\n              index: filters.sortIndex,\n              direction: filters.sortDirection,\n            }}\n            onSort={onSort}\n            variant={TableVariant.compact}\n            isStickyHeader\n          >\n            <TableHeader />\n            <TableBody />\n          </Table>\n          {results === 0 && (\n            <Card ouiaId=\"empty-state\">\n              <CardBody>\n                <NoMatchingRecs />\n              </CardBody>\n            </Card>\n          )}\n        </React.Fragment>\n      ) : (\n        // ? Welcome to Insights feature for novice clusters with disabled Insights?\n        <Card ouiaId=\"no-recommendations\">\n          <CardBody>\n            <MessageState\n              icon={CheckIcon}\n              iconClass=\"ins-c-insights__check\"\n              title={intl.formatMessage(messages.noRecommendations)}\n              text={intl.formatMessage(messages.noRecommendationsDesc)}\n            />\n          </CardBody>\n        </Card>\n      )}\n    </div>\n  );\n};\n\nClusterRules.propTypes = {\n  reports: PropTypes.array.isRequired,\n};\n\nClusterRules.defaultProps = {\n  reports: [],\n};\n\nexport default ClusterRules;\n","import './_Cluster.scss';\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport { Grid, GridItem } from '@patternfly/react-core/dist/js/layouts/Grid';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\nimport InfoCircleIcon from '@patternfly/react-icons/dist/js/icons/info-circle-icon';\nimport PageHeader from '@redhat-cloud-services/frontend-components/PageHeader';\nimport Main from '@redhat-cloud-services/frontend-components/Main';\nimport { global_danger_color_100 as globalDangerColor100 } from '@patternfly/react-tokens/dist/js/global_danger_color_100';\nimport { global_info_color_100 as globalInfoColor100 } from '@patternfly/react-tokens/dist/js/global_info_color_100.js';\n\nimport ClusterHeader from '../ClusterHeader';\nimport ClusterRules from '../ClusterRules/ClusterRules';\nimport Breadcrumbs from '../Breadcrumbs';\nimport MessageState from '../MessageState/MessageState';\nimport Loading from '../Loading/Loading';\nimport messages from '../../Messages';\n\nexport const Cluster = ({ cluster, match }) => {\n  const intl = useIntl();\n  const { isError, isUninitialized, isFetching, isSuccess, data, error } =\n    cluster;\n\n  return (\n    <React.Fragment>\n      <PageHeader className=\"pf-m-light ins-inventory-detail\">\n        <Breadcrumbs\n          current={\n            cluster?.data?.report.meta.cluster_name || match.params.clusterId\n          }\n          match={match}\n        />\n        <ClusterHeader />\n      </PageHeader>\n      {(isUninitialized || isFetching) && (\n        <Main id=\"loading-skeleton\">\n          <Loading />\n        </Main>\n      )}\n      {isError &&\n        (error?.status === 404 ? (\n          <Main>\n            <MessageState\n              title={intl.formatMessage(messages.noRecsFoundError)}\n              text={\n                <React.Fragment>\n                  {intl.formatMessage(messages.noRecsFoundErrorDesc)}\n                  <a href=\"https://docs.openshift.com/container-platform/latest/support/getting-support.html\">\n                    {' '}\n                    OpenShift documentation.\n                  </a>\n                </React.Fragment>\n              }\n              icon={InfoCircleIcon}\n              iconStyle={{ color: globalInfoColor100.value }}\n              variant=\"large\"\n            />\n          </Main>\n        ) : (\n          <Main>\n            <MessageState\n              title={intl.formatMessage(messages.noRecsError)}\n              text={intl.formatMessage(messages.noRecsErrorDesc)}\n              icon={ExclamationCircleIcon}\n              iconStyle={{ color: globalDangerColor100.value }}\n            />\n          </Main>\n        ))}\n      {isSuccess && !isFetching && (\n        <React.Fragment>\n          <Main>\n            <React.Fragment>\n              <Grid hasGutter>\n                <GridItem span={12}>\n                  <ClusterRules reports={data?.report?.data || []} />\n                </GridItem>\n              </Grid>\n            </React.Fragment>\n          </Main>\n        </React.Fragment>\n      )}\n    </React.Fragment>\n  );\n};\n\nCluster.propTypes = {\n  cluster: PropTypes.object.isRequired,\n  displayName: PropTypes.object.isRequired,\n  match: PropTypes.object.isRequired,\n};\n","import React, { useEffect } from 'react';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/RouterParams';\nimport { useIntl } from 'react-intl';\n\nimport { useGetClusterByIdQuery } from '../../Services/SmartProxy';\nimport messages from '../../Messages';\nimport { Cluster } from './Cluster';\n\nexport default routerParams(({ match }) => {\n  const intl = useIntl();\n  const cluster = useGetClusterByIdQuery({\n    id: match.params.clusterId,\n    includeDisabled: false,\n  });\n\n  useEffect(() => {\n    cluster.refetch();\n  }, [match.params.clusterId]);\n\n  useEffect(() => {\n    if (match.params.clusterId) {\n      const subnav = `${match.params.clusterId} - ${intl.formatMessage(\n        messages.clusters\n      )}`;\n      // FIXME: https://consoledot.pages.redhat.com/insights-chrome/dev/api.html#_using_updatedocumenttitle_function\n      document.title = intl.formatMessage(messages.documentTitle, { subnav });\n    }\n  }, [match.params.clusterId]);\n  return <Cluster cluster={cluster} match={match} />;\n});\n"],"names":["ClusterHeader","clusterId","clusterData","location","window","useState","isOpen","setIsOpen","intl","useIntl","isUninitializedCluster","isUninitialized","isFetchingCluster","isFetching","cluster","data","dropDownItems","DropdownItem","key","onClick","assign","origin","pathname","includes","redirectOCM","formatMessage","messages","Grid","id","md","hasGutter","GridItem","span","Skeleton","size","Title","headingLevel","ouiaId","report","meta","cluster_name","Dropdown","position","onSelect","s","autoFocus","toggle","DropdownToggle","onToggle","dropdownItems","Stack","StackItem","last_checked_at","date","type","propTypes","PropTypes","displayName","routerParams","match","params","useGetClusterByIdQuery","includeDisabled","ReportDetails","CYPRESS_RUN","Loading","className","AsyncComponent","appName","module","fallback","details","extra_data","resolution","ClusterRules","reports","dispatch","useDispatch","updateFilters","filters","updateClusterRulesFilters","useSelector","f","clusterRulesState","filteredRows","setFilteredRows","displayedRows","setDisplayedRows","isAllExpanded","setIsAllExpanded","expandFirst","setExpandFirst","firstRule","setFirstRule","results","length","search","useLocation","useEffect","buildDisplayedRows","sortIndex","sortDirection","limit","offset","buildFilteredRows","paramsObject","paramParser","sort","sortObj","translateSortParams","CLUSTER_RULES_COLUMNS_KEYS","name","direction","first","allRows","filter","rule","passFilters","map","value","cells","title","description","rule_id","RuleLabels","created_at","tooltipProps","TooltipPosition","style","verticalAlign","likelihood","impact","Tooltip","content","LIKELIHOOD_LABEL","IMPACT_LABEL","InsightsLabel","total_risk","rest","isCompact","fullWidth","rows","index","sortingRows","d","SortByDirection","firstItem","secondItem","fst","snd","i","findIndex","row","split","getPluginName","error_key","getErrorKey","unshift","splice","flatMap","updatedRow","parent","removeFilterParam","param","text","addFilterParam","values","filterConfigItems","label","filterValues","onChange","_e","FC","FILTER_CATEGORIES","items","category","activeFiltersConfig","deleteTitle","localFilters","filterCategories","prunedFilters","Object","entries","reduce","arr","item","chips","Array","isArray","selectedCategoryValue","find","String","capitalize","urlParam","pruneFilters","buildFilterChips","onDelete","_event","itemsToRemove","isAll","CLUSTER_RULES_INITIAL_STATE","newFilter","PrimaryToolbar","expandAll","filterConfig","isDisabled","pagination","Table","onCollapse","rowId","collapseRows","CLUSTER_RULES_COLUMNS","sortBy","onSort","variant","TableVariant","isStickyHeader","TableHeader","TableBody","Card","CardBody","MessageState","icon","CheckIcon","iconClass","defaultProps","Cluster","isError","isSuccess","error","PageHeader","Breadcrumbs","current","Main","status","href","InfoCircleIcon","iconStyle","color","globalInfoColor100","ExclamationCircleIcon","globalDangerColor100","refetch","subnav","document"],"sourceRoot":""}