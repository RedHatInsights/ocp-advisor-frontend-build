{"version":3,"file":"js/WorkloadsList.66a3ce63f00768690c2c.js","mappings":"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","sources":["webpack:///./src/Components/Loading/Loading.js","webpack:///./src/Components/WorkloadsListTable/WorkloadsListTable.js","webpack:///./src/Components/WorkloadsListTable/index.js","webpack:///./src/Components/WorkloadsList/index.js"],"sourcesContent":["import React from 'react';\nimport { Card, CardBody } from '@patternfly/react-core';\nimport { List } from 'react-content-loader';\n\nconst Loading = () => (\n  <Card ouiaId=\"loading-skeleton\">\n    <CardBody>\n      <List />\n    </CardBody>\n  </Card>\n);\n\nexport default Loading;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport PrimaryToolbar from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport { TableVariant } from '@patternfly/react-table';\nimport {\n  Table,\n  TableBody,\n  TableHeader,\n} from '@patternfly/react-table/deprecated';\nimport { PaginationVariant } from '@patternfly/react-core/dist/js/components/Pagination/Pagination';\nimport {\n  WORKLOADS_LIST_COLUMNS,\n  WORKLOADS_LIST_COLUMNS_KEYS,\n  WORKLOADS_TABLE_CELL_LAST_SEEN,\n  WORKLOADS_TABLE_CELL_NAME,\n  WORKLOADS_TABLE_CELL_OBJECTS,\n  WORKLOADS_TABLE_CELL_RECOMMENDATIONS,\n  WORKLOADS_TABLE_FILTER_CATEGORIES,\n  // WORKLOADS_TABLE_SEVERITY,\n} from '../../AppConstants';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { Link, useLocation } from 'react-router-dom';\nimport { BASE_PATH } from '../../Routes';\nimport { Pagination } from '@patternfly/react-core';\n/* import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter/conditionalFilterConstants'; */\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  WORKLOADS_TABLE_INITIAL_STATE,\n  resetFilters,\n  updateWorkloadsListFilters,\n} from '../../Services/Filters';\nimport isEqual from 'lodash/isEqual';\nimport {\n  buildFilterChips,\n  passFilterWorkloads,\n  removeFilterParam as _removeFilterParam,\n  /* addFilterParam as _addFilterParam, */\n  translateSortParams,\n  paramParser,\n  updateSearchParams,\n} from '../Common/Tables';\nimport {\n  ErrorState,\n  NoMatchingWorkloads,\n  NoDVOInstalledOrDataCollected,\n} from '../MessageState/EmptyStates';\nimport Loading from '../Loading/Loading';\n/* import ShieldSet from '../ShieldSet'; */\nimport { filtersAreApplied } from '../../Utilities/Workloads';\n\nconst WorkloadsListTable = ({\n  query: {\n    isError,\n    error,\n    isUninitialized,\n    isFetching,\n    isSuccess,\n    data,\n    refetch,\n  },\n}) => {\n  const dispatch = useDispatch();\n  const filters = useSelector(({ filters }) => filters.workloadsListState);\n  const workloads = data?.workloads || [];\n  const perPage = filters.limit;\n  const page = Math.floor(filters.offset / filters.limit) + 1;\n\n  const [rows, setRows] = useState([]);\n  const [filteredRows, setFilteredRows] = useState([]);\n  const [rowsFiltered, setRowsFiltered] = useState(false);\n  const [filtersApplied, setFiltersApplied] = useState(false);\n  const [filterBuilding, setFilterBuilding] = useState(true);\n  const updateFilters = (payload) =>\n    dispatch(updateWorkloadsListFilters(payload));\n  const removeFilterParam = (param) =>\n    _removeFilterParam(filters, updateFilters, param);\n\n  const loadingState = isUninitialized || isFetching || !rowsFiltered;\n  const errorState = isError;\n  const noMatch = filteredRows.length === 0;\n  const successState = isSuccess;\n  const { search } = useLocation();\n\n  /* const addFilterParam = (param, values) =>\n    _addFilterParam(filters, updateFilters, param, values); */\n\n  useEffect(() => {\n    setFilteredRows(buildFilteredRows(workloads));\n  }, [\n    data,\n    filters.namespace_name,\n    filters.cluster_name,\n    filters.severity,\n    filters.sortDirection,\n    filters.sortIndex,\n  ]);\n\n  useEffect(() => {\n    if (search && filterBuilding) {\n      const paramsObject = paramParser(search);\n\n      if (paramsObject.sort) {\n        const sortObj = translateSortParams(paramsObject.sort);\n        paramsObject.sortIndex = WORKLOADS_LIST_COLUMNS_KEYS.indexOf(\n          sortObj.name\n        );\n        paramsObject.sortDirection = sortObj.direction;\n      }\n      paramsObject.offset &&\n        (paramsObject.offset = Number(paramsObject.offset[0]));\n      paramsObject.limit &&\n        (paramsObject.limit = Number(paramsObject.limit[0]));\n      paramsObject.impacting &&\n        !Array.isArray(paramsObject.impacting) &&\n        (paramsObject.impacting = [`${paramsObject.impacting}`]);\n      updateFilters({ ...filters, ...paramsObject });\n    }\n    setFilterBuilding(false);\n  }, []);\n\n  useEffect(() => {\n    if (!filterBuilding) {\n      updateSearchParams(filters, WORKLOADS_LIST_COLUMNS_KEYS);\n    }\n  }, [filters, filterBuilding]);\n\n  useEffect(() => {\n    setRows(buildDisplayedRows(filteredRows));\n    setRowsFiltered(true);\n    setFiltersApplied(filtersAreApplied(filters));\n  }, [filteredRows, filters.limit, filters.offset]);\n\n  const buildFilteredRows = (items) => {\n    setRowsFiltered(false);\n    const filtered = items\n      .filter((workloadData) => {\n        return passFilterWorkloads(workloadData, filters);\n      })\n      .sort((a, b) => {\n        let fst, snd;\n        const d = filters.sortDirection === 'asc' ? 1 : -1;\n        switch (filters.sortIndex) {\n          case WORKLOADS_TABLE_CELL_NAME:\n            fst = a.cluster?.display_name || a.cluster.uuid;\n            snd = b.cluster?.display_name || b.cluster.uuid;\n            return d * fst.localeCompare(snd);\n          case WORKLOADS_TABLE_CELL_RECOMMENDATIONS:\n            fst = a.metadata.recommendations || 0;\n            snd = b.metadata.recommendations || 0;\n            return fst > snd ? d : snd > fst ? -d : 0;\n          // case WORKLOADS_TABLE_SEVERITY:\n          //   fst = a.metadata.hits_by_severity || { 1: 0, 2: 0, 3: 0, 4: 0 };\n          //   snd = b.metadata.hits_by_severity || { 1: 0, 2: 0, 3: 0, 4: 0 };\n          //   for (let i = 4; i > 0; i--) {\n          //     if (fst[i] > snd[i]) return d;\n          //     if (fst[i] < snd[i]) return -d;\n          //   }\n          //   return 0;\n          case WORKLOADS_TABLE_CELL_OBJECTS:\n            fst = a.metadata.objects || 0;\n            snd = b.metadata.objects || 0;\n            return fst > snd ? d : snd > fst ? -d : 0;\n          case WORKLOADS_TABLE_CELL_LAST_SEEN:\n            fst = new Date(a.metadata.last_checked_at || 0);\n            snd = new Date(b.metadata.last_checked_at || 0);\n            return fst > snd ? d : snd > fst ? -d : 0;\n        }\n      });\n\n    return filtered;\n  };\n\n  const buildDisplayedRows = (rows) => {\n    return rows\n      .slice(perPage * (page - 1), perPage * (page - 1) + perPage)\n      .map((item, index) => ({\n        entity: item,\n        cells: [\n          <span key={index}>\n            <Link\n              to={`${BASE_PATH}/workloads/${item.cluster.uuid}/${item.namespace.uuid}`}\n            >\n              <p key={`${index}-cluster`}>\n                {item.cluster.display_name || item.cluster.uuid}\n              </p>\n              <p key={`${index}-namespace`}>\n                {item.namespace.name || item.namespace.uuid}\n              </p>\n            </Link>\n          </span>,\n          item.metadata.recommendations,\n          item.metadata.objects,\n          <span key={index}>\n            <DateFormat\n              extraTitle=\"Last seen: \"\n              date={item.metadata.last_checked_at}\n              variant=\"relative\"\n            />\n          </span>,\n        ],\n      }));\n  };\n\n  const filterConfigItems = [\n    {\n      label: 'Cluster name',\n      type: 'text',\n      filterValues: {\n        key: 'cluster_name',\n        onChange: (_event, value) =>\n          updateFilters({ ...filters, offset: 0, cluster_name: value }),\n        value: filters.cluster_name,\n        placeholder: 'Filter by cluster name',\n      },\n    },\n    {\n      label: 'Namespace name',\n      type: 'text',\n      filterValues: {\n        key: 'namespace_name',\n        onChange: (_event, value) =>\n          updateFilters({ ...filters, offset: 0, namespace_name: value }),\n        value: filters.namespace_name,\n        placeholder: 'Filter by namespace name',\n      },\n    },\n    /* {\n      label: 'Severity',\n      type: conditionalFilterType.checkbox,\n      id: WORKLOADS_TABLE_FILTER_CATEGORIES.severity.urlParam,\n      value: `checkbox-${WORKLOADS_TABLE_FILTER_CATEGORIES.severity.urlParam}`,\n      filterValues: {\n        key: `${WORKLOADS_TABLE_FILTER_CATEGORIES.severity.urlParam}-filter`,\n        onChange: (_event, value) => addFilterParam('severity', value),\n        value: filters.severity,\n        items: WORKLOADS_TABLE_FILTER_CATEGORIES.severity.values,\n        placeholder: 'Filter by severity',\n      },\n    }, */\n  ];\n\n  const activeFiltersConfig = {\n    showDeleteButton: filtersApplied,\n    deleteTitle: 'Reset filters',\n    filters: buildFilterChips(filters, WORKLOADS_TABLE_FILTER_CATEGORIES),\n    onDelete: (_event, itemsToRemove, isAll) => {\n      if (isAll) {\n        if (isEqual(filters, WORKLOADS_TABLE_INITIAL_STATE)) {\n          refetch();\n        } else {\n          resetFilters(filters, WORKLOADS_TABLE_INITIAL_STATE, updateFilters);\n        }\n      } else {\n        itemsToRemove.map((item) => {\n          const newFilter = {\n            [item.urlParam]: Array.isArray(filters[item.urlParam])\n              ? filters[item.urlParam].filter(\n                  (value) => String(value) !== String(item.chips[0].value)\n                )\n              : '',\n          };\n          newFilter[item.urlParam].length > 0\n            ? updateFilters({ ...filters, ...newFilter })\n            : removeFilterParam(item.urlParam);\n        });\n      }\n    },\n  };\n\n  const onSetPage = (_e, pageNumber) => {\n    setRowsFiltered(false);\n    const newOffset = pageNumber * filters.limit - filters.limit;\n    updateFilters({ ...filters, offset: newOffset });\n  };\n\n  const onSetPerPage = (_e, perPage) => {\n    if (perPage !== filters.limit) {\n      setRowsFiltered(false);\n      updateFilters({ ...filters, limit: perPage, offset: 0 });\n    }\n  };\n\n  const onSort = (_e, index, direction) => {\n    setRowsFiltered(false);\n    updateFilters({ ...filters, sortIndex: index, sortDirection: direction });\n  };\n\n  return isError && error.status === 404 ? (\n    <NoDVOInstalledOrDataCollected />\n  ) : isSuccess && workloads.length === 0 ? (\n    <NoDVOInstalledOrDataCollected />\n  ) : (\n    <div id=\"workloads-list-table\">\n      <PrimaryToolbar\n        pagination={{\n          itemCount: filteredRows.length,\n          page,\n          perPage,\n          onSetPage,\n          onPerPageSelect: onSetPerPage,\n          isCompact: true,\n          ouiaId: 'pager',\n        }}\n        filterConfig={{ items: filterConfigItems }}\n        activeFiltersConfig={\n          isError ? { showDeleteButton: false } : activeFiltersConfig\n        }\n      />\n      <Table\n        aria-label=\"Table of workloads\"\n        ouiaId=\"workloads\"\n        variant={TableVariant.compact}\n        cells={WORKLOADS_LIST_COLUMNS}\n        rows={\n          errorState || loadingState || noMatch ? (\n            [\n              {\n                fullWidth: true,\n                cells: [\n                  {\n                    props: {\n                      colSpan: WORKLOADS_LIST_COLUMNS.length + 1,\n                    },\n                    title: errorState ? (\n                      <ErrorState />\n                    ) : loadingState ? (\n                      <Loading />\n                    ) : (\n                      <NoMatchingWorkloads />\n                    ),\n                  },\n                ],\n              },\n            ]\n          ) : successState ? (\n            rows\n          ) : (\n            <ErrorState />\n          )\n        }\n        isStickyHeader\n        sortBy={{\n          index: filters.sortIndex,\n          direction: filters.sortDirection,\n        }}\n        onSort={onSort}\n      >\n        <TableHeader />\n        <TableBody />\n      </Table>\n      <Pagination\n        ouiaId=\"pager\"\n        itemCount={filteredRows.length}\n        page={page}\n        perPage={perPage}\n        onSetPage={onSetPage}\n        onPerPageSelect={onSetPerPage}\n        onPageInput={onSetPage}\n        widgetId={`pagination-options-menu-bottom`}\n        variant={PaginationVariant.bottom}\n      />\n    </div>\n  );\n};\n\nWorkloadsListTable.propTypes = {\n  query: PropTypes.object.isRequired,\n};\n\nexport { WorkloadsListTable };\n","import React from 'react';\nimport { useGetWorkloadsQuery } from '../../Services/SmartProxy';\nimport { WorkloadsListTable } from './WorkloadsListTable';\n\nconst WorkloadsListTableWrapper = () => {\n  const query = useGetWorkloadsQuery();\n  return <WorkloadsListTable query={query} />;\n};\n\nexport default WorkloadsListTableWrapper;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\n\nimport PageHeader from '@redhat-cloud-services/frontend-components/PageHeader';\n\nimport messages from '../../Messages';\nimport WorkloadsListTable from '../WorkloadsListTable';\nimport { Title } from '@patternfly/react-core';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\n\nconst WorkloadsList = () => {\n  const intl = useIntl();\n  const chrome = useChrome();\n\n  chrome.updateDocumentTitle(\n    intl.formatMessage(messages.documentTitle, {\n      subnav: 'Workloads',\n    })\n  );\n\n  return (\n    <React.Fragment>\n      <PageHeader className=\"ins-c-clusters-header\">\n        <Title headingLevel=\"h1\" ouiaId=\"page-header\">\n          Workloads\n        </Title>\n      </PageHeader>\n      <section className=\"pf-l-page__main-section pf-c-page__main-section\">\n        <WorkloadsListTable />\n      </section>\n    </React.Fragment>\n  );\n};\n\nexport default WorkloadsList;\n"],"names":["React","Card","ouiaId","CardBody","List","WorkloadsListTable","_ref","_ref$query","query","isError","error","isUninitialized","isFetching","isSuccess","data","refetch","dispatch","useDispatch","filters","useSelector","_ref2","workloadsListState","workloads","perPage","limit","page","Math","floor","offset","_useState","useState","_useState2","_slicedToArray","rows","setRows","_useState3","_useState4","filteredRows","setFilteredRows","_useState5","_useState6","rowsFiltered","setRowsFiltered","_useState7","_useState8","filtersApplied","setFiltersApplied","_useState9","_useState10","filterBuilding","setFilterBuilding","updateFilters","payload","updateWorkloadsListFilters","loadingState","errorState","noMatch","length","successState","search","useLocation","useEffect","buildFilteredRows","namespace_name","cluster_name","severity","sortDirection","sortIndex","paramsObject","paramParser","sort","sortObj","translateSortParams","WORKLOADS_LIST_COLUMNS_KEYS","indexOf","name","direction","Number","impacting","Array","isArray","concat","_objectSpread","updateSearchParams","buildDisplayedRows","filtersAreApplied","items","filter","workloadData","passFilterWorkloads","a","b","_a$cluster","_b$cluster","fst","snd","d","WORKLOADS_TABLE_CELL_NAME","cluster","display_name","uuid","localeCompare","WORKLOADS_TABLE_CELL_RECOMMENDATIONS","metadata","recommendations","WORKLOADS_TABLE_CELL_OBJECTS","objects","WORKLOADS_TABLE_CELL_LAST_SEEN","Date","last_checked_at","slice","map","item","index","entity","cells","key","Link","to","BASE_PATH","namespace","DateFormat","extraTitle","date","variant","filterConfigItems","label","type","filterValues","onChange","_event","value","placeholder","activeFiltersConfig","showDeleteButton","deleteTitle","buildFilterChips","WORKLOADS_TABLE_FILTER_CATEGORIES","onDelete","itemsToRemove","isAll","isEqual","WORKLOADS_TABLE_INITIAL_STATE","resetFilters","param","newFilter","_defineProperty","urlParam","String","chips","_removeFilterParam","onSetPage","_e","pageNumber","newOffset","onSetPerPage","status","NoDVOInstalledOrDataCollected","id","PrimaryToolbar","pagination","itemCount","onPerPageSelect","isCompact","filterConfig","Table","TableVariant","compact","WORKLOADS_LIST_COLUMNS","fullWidth","props","colSpan","title","ErrorState","Loading","NoMatchingWorkloads","isStickyHeader","sortBy","onSort","TableHeader","TableBody","Pagination","onPageInput","widgetId","PaginationVariant","bottom","propTypes","PropTypes","isRequired","useGetWorkloadsQuery","intl","useIntl","useChrome","updateDocumentTitle","formatMessage","messages","documentTitle","subnav","PageHeader","className","Title","headingLevel"],"sourceRoot":""}