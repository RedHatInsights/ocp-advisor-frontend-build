{"version":3,"file":"js/545.3d568e4e76db75933072.js","mappings":"2PAUaA,EAAc,SAAC,GAAuB,IAArBC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,MAC/BC,GAAOC,EAAAA,EAAAA,KACb,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACMC,GAAmBC,EAAAA,EAAAA,cAAY,WACnC,IAAMC,EAAS,GACTC,EAAWT,EAAMU,IAAIC,MAAM,KAGjCH,EAAOI,KAAK,CACVC,MAAO,GAAF,OAAKZ,EAAKa,cAAcC,EAAAA,EAAAA,gBAAxB,YAAoDN,EAAS,IAClEO,SAAU,IAAF,OAAMP,EAAS,MAGzBJ,EAASG,KACR,CAACP,EAAMD,EAAMiB,OAAOC,UAAWlB,EAAMU,MAMxC,OAJAS,EAAAA,EAAAA,YAAU,WACRb,MACC,CAACA,EAAkBN,EAAMiB,OAAOC,UAAWlB,EAAMU,MAGlD,kBAAC,aAAD,KACGN,EAAMgB,OAAS,GACd,kBAACC,EAAA,EAAD,CAAYC,OAAO,UAChBlB,EAAMmB,KAAI,SAACC,EAASC,GAAV,OACT,kBAACC,EAAA,EAAD,CAAgBD,IAAKA,GACnB,kBAAC,EAAAE,KAAD,CAAMC,GAAIJ,EAAQR,UAAWQ,EAAQX,WAGzC,kBAACa,EAAA,EAAD,CAAgBG,UAAQ,GAAE9B,MAOpCD,EAAYgC,UAAY,CACtB/B,QAASgC,IAAAA,OACT/B,MAAO+B,IAAAA,OAAAA,YC1CT,IAAMC,EAAqB,SAAC,GAAD,IAAGjC,EAAH,EAAGA,QAAH,OACzB,kBAACD,EAAD,CAAaC,QAASA,EAASC,OAAOiC,EAAAA,EAAAA,oBAGxCD,EAAmBF,UAAY,CAC7B/B,QAASgC,IAAAA,OAAAA,YAGX","sources":["webpack:///./src/Components/Breadcrumbs/Breadcrumbs.js","webpack:///./src/Components/Breadcrumbs/index.js"],"sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\n\nimport { Breadcrumb } from '@patternfly/react-core/dist/js/components/Breadcrumb/Breadcrumb';\nimport { BreadcrumbItem } from '@patternfly/react-core/dist/js/components/Breadcrumb/BreadcrumbItem';\n\nimport messages from '../../Messages';\n\nexport const Breadcrumbs = ({ current, match }) => {\n  const intl = useIntl();\n  const [items, setItems] = useState([]);\n  const buildBreadcrumbs = useCallback(() => {\n    const crumbs = [];\n    const splitUrl = match.url.split('/');\n\n    // add base\n    crumbs.push({\n      title: `${intl.formatMessage(messages.insightsHeader)} ${splitUrl[1]}`,\n      navigate: `/${splitUrl[1]}`,\n    });\n\n    setItems(crumbs);\n  }, [intl, match.params.clusterId, match.url]);\n\n  useEffect(() => {\n    buildBreadcrumbs();\n  }, [buildBreadcrumbs, match.params.clusterId, match.url]);\n\n  return (\n    <React.Fragment>\n      {items.length > 0 && (\n        <Breadcrumb ouiaId=\"detail\">\n          {items.map((oneLink, key) => (\n            <BreadcrumbItem key={key}>\n              <Link to={oneLink.navigate}>{oneLink.title}</Link>\n            </BreadcrumbItem>\n          ))}\n          <BreadcrumbItem isActive>{current}</BreadcrumbItem>\n        </Breadcrumb>\n      )}\n    </React.Fragment>\n  );\n};\n\nBreadcrumbs.propTypes = {\n  current: PropTypes.string,\n  match: PropTypes.object.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useRouteMatch } from 'react-router-dom';\n\nimport { Breadcrumbs } from './Breadcrumbs';\n\nconst BreadcrumbsWrapper = ({ current }) => (\n  <Breadcrumbs current={current} match={useRouteMatch()} />\n);\n\nBreadcrumbsWrapper.propTypes = {\n  current: PropTypes.string.isRequired,\n};\n\nexport default BreadcrumbsWrapper;\n"],"names":["Breadcrumbs","current","match","intl","useIntl","useState","items","setItems","buildBreadcrumbs","useCallback","crumbs","splitUrl","url","split","push","title","formatMessage","messages","navigate","params","clusterId","useEffect","length","Breadcrumb","ouiaId","map","oneLink","key","BreadcrumbItem","Link","to","isActive","propTypes","PropTypes","BreadcrumbsWrapper","useRouteMatch"],"sourceRoot":""}