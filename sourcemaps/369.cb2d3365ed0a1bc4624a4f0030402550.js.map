{"version":3,"file":"js/369.1669735921588.dfece4e299981b0f12ef.js","mappings":"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","sources":["webpack:///./src/Components/Labels/RuleLabels.js","webpack:///./src/Components/Modals/DisableRule.js"],"sourcesContent":["import { TooltipPosition } from '@patternfly/react-core/dist/js/components/Tooltip/Tooltip';\nimport { Tooltip, Label } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { useIntl } from 'react-intl';\nimport messages from '../../Messages';\n\nconst RuleLabels = ({ rule }) => {\n  const intl = useIntl();\n  return (\n    <React.Fragment>\n      {rule.disabled && (\n        <Tooltip\n          content={intl.formatMessage(messages.ruleIsDisabledTooltip)}\n          position={TooltipPosition.right}\n        >\n          <Label color=\"gray\" isCompact>\n            {intl.formatMessage(messages.disabled)}\n          </Label>\n        </Tooltip>\n      )}\n    </React.Fragment>\n  );\n};\n\nRuleLabels.propTypes = {\n  rule: PropTypes.object,\n};\n\nexport default RuleLabels;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\n\nimport {\n  Button,\n  Checkbox,\n  Form,\n  FormGroup,\n  Modal,\n  TextInput,\n} from '@patternfly/react-core';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\n\nimport messages from '../../Messages';\nimport { disableRuleForCluster, useSetAckMutation } from '../../Services/Acks';\n\nconst DisableRule = ({\n  isModalOpen,\n  handleModalToggle,\n  rule,\n  afterFn,\n  host,\n  hosts,\n}) => {\n  const intl = useIntl();\n  const [justification, setJustificaton] = useState('');\n  const [singleHost, setSingleHost] = useState(!!host);\n  const [multipleHosts, setMultipleHosts] = useState(hosts.length > 0);\n  const [setAck] = useSetAckMutation();\n  const dispatch = useDispatch();\n  const notify = (data) => dispatch(addNotification(data));\n\n  const bulkHostActions = async () => {\n    // disable for a group of hosts (clusters)\n    try {\n      const requests = hosts.map((h) =>\n        disableRuleForCluster({\n          uuid: h.id,\n          recId: rule.rule_id,\n          justification,\n        })\n      );\n      await Promise.all(requests);\n      notify({\n        variant: 'success',\n        dismissable: true,\n        timeout: true,\n        title: intl.formatMessage(messages.recSuccessfullyDisabledForCluster),\n      });\n      afterFn && afterFn();\n    } catch (error) {\n      notify({\n        variant: 'danger',\n        dismissable: true,\n        title: intl.formatMessage(messages.error),\n        description: `${error}`,\n      });\n    }\n  };\n\n  const disableRule = async () => {\n    try {\n      if (singleHost) {\n        // disable the rec for this single cluster\n        await disableRuleForCluster({\n          uuid: host,\n          recId: rule.rule_id,\n          justification,\n        });\n        notify({\n          variant: 'success',\n          timeout: true,\n          dismissable: true,\n          title: intl.formatMessage(messages.recSuccessfullyDisabledForCluster),\n        });\n      } else if (multipleHosts) {\n        bulkHostActions();\n      } else {\n        // disable the whole rec\n        await setAck({\n          rule_id: rule.rule_id,\n          justification,\n        }).unwrap();\n        notify({\n          variant: 'success',\n          timeout: true,\n          dismissable: true,\n          title: intl.formatMessage(messages.recSuccessfullyDisabled),\n        });\n      }\n      setJustificaton('');\n      afterFn && afterFn();\n    } catch (error) {\n      notify({\n        variant: 'danger',\n        dismissable: true,\n        title: intl.formatMessage(messages.error),\n        description: `${error}`,\n      });\n    }\n\n    handleModalToggle(false);\n  };\n\n  return (\n    <Modal\n      variant=\"small\"\n      title={intl.formatMessage(messages.disableRule)}\n      isOpen={isModalOpen}\n      onClose={() => {\n        handleModalToggle();\n        setJustificaton('');\n      }}\n      actions={[\n        <Button\n          key=\"confirm\"\n          variant=\"primary\"\n          onClick={() => disableRule()}\n          ouiaId=\"confirm\"\n        >\n          {intl.formatMessage(messages.save)}\n        </Button>,\n        <Button\n          key=\"cancel\"\n          variant=\"link\"\n          onClick={() => {\n            handleModalToggle(false);\n            setJustificaton('');\n          }}\n          ouiaId=\"cancel\"\n        >\n          {intl.formatMessage(messages.cancel)}\n        </Button>,\n      ]}\n      ouiaId=\"recommendation-disable\"\n    >\n      {intl.formatMessage(messages.disableRuleBody)}\n      <Form>\n        <FormGroup fieldId=\"blank-form\" />\n        {(host || hosts.length > 0) && (\n          <FormGroup fieldId=\"disable-rule-one-system\">\n            <Checkbox\n              isChecked={singleHost || multipleHosts}\n              onChange={() => {\n                host\n                  ? setSingleHost(!singleHost)\n                  : setMultipleHosts(!multipleHosts);\n              }}\n              label={\n                host\n                  ? intl.formatMessage(messages.disableRuleSingleCluster)\n                  : intl.formatMessage(messages.disableRuleForClusters)\n              }\n              id=\"disable-rule-one-system\"\n              name=\"disable-rule-one-system\"\n              ouiaId=\"disable-recommendation-one-cluster\"\n            />\n          </FormGroup>\n        )}\n        <FormGroup\n          label={intl.formatMessage(messages.justificationNote)}\n          fieldId=\"disable-rule-justification\"\n        >\n          <TextInput\n            type=\"text\"\n            id=\"disable-rule-justification\"\n            aria-describedby=\"disable-rule-justification\"\n            value={justification}\n            onChange={(text) => setJustificaton(text)}\n            onKeyDown={(e) =>\n              e.key === 'Enter' && (e.preventDefault(), disableRule())\n            }\n          />\n        </FormGroup>\n      </Form>\n    </Modal>\n  );\n};\n\nDisableRule.propTypes = {\n  isModalOpen: PropTypes.bool,\n  rule: PropTypes.object,\n  handleModalToggle: PropTypes.func,\n  afterFn: PropTypes.func,\n  host: PropTypes.object,\n  hosts: PropTypes.array,\n};\n\nDisableRule.defaultProps = {\n  isModalOpen: false,\n  rule: {},\n  handleModalToggle: () => undefined,\n  afterFn: () => undefined,\n  host: undefined,\n  hosts: [],\n};\n\nexport default DisableRule;\n"],"names":["RuleLabels","rule","intl","useIntl","disabled","Tooltip","content","formatMessage","messages","position","TooltipPosition","Label","color","isCompact","propTypes","PropTypes","DisableRule","isModalOpen","handleModalToggle","afterFn","host","hosts","useState","justification","setJustificaton","singleHost","setSingleHost","length","multipleHosts","setMultipleHosts","useSetAckMutation","setAck","dispatch","useDispatch","notify","data","addNotification","bulkHostActions","requests","map","h","disableRuleForCluster","uuid","id","recId","rule_id","Promise","all","variant","dismissable","timeout","title","description","disableRule","unwrap","isOpen","onClose","actions","Button","key","onClick","ouiaId","fieldId","isChecked","onChange","label","name","type","value","text","s","onKeyDown","e","preventDefault","defaultProps","undefined"],"sourceRoot":""}