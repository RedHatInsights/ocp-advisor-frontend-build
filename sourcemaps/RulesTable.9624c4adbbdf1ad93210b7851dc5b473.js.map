{"version":3,"file":"js/RulesTable.10e35020b931095c7288.js","mappings":"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","sources":["webpack:///./src/Components/Labels/RuleLabels.js","webpack:///./src/Components/Modals/DisableRule.js","webpack:///./src/Components/Labels/CategoryLabel.js","webpack:///./src/Components/RecsListTable/RecsListTable.js","webpack:///./src/Components/RecsListTable/index.js"],"sourcesContent":["import { TooltipPosition } from '@patternfly/react-core/dist/js/components/Tooltip/Tooltip';\nimport { Tooltip, Label } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { useIntl } from 'react-intl';\nimport messages from '../../Messages';\n\nconst RuleLabels = ({ rule }) => {\n  const intl = useIntl();\n  return (\n    <React.Fragment>\n      {rule.disabled && (\n        <Tooltip\n          content={intl.formatMessage(messages.ruleIsDisabledTooltip)}\n          position={TooltipPosition.right}\n        >\n          <Label color=\"gray\" isCompact>\n            {intl.formatMessage(messages.disabled)}\n          </Label>\n        </Tooltip>\n      )}\n    </React.Fragment>\n  );\n};\n\nRuleLabels.propTypes = {\n  rule: PropTypes.object,\n};\n\nexport default RuleLabels;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\n\nimport {\n  Button,\n  Checkbox,\n  Form,\n  FormGroup,\n  Modal,\n  TextInput,\n} from '@patternfly/react-core';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\n\nimport messages from '../../Messages';\nimport { disableRuleForCluster, useSetAckMutation } from '../../Services/Acks';\n\nconst DisableRule = ({\n  isModalOpen,\n  handleModalToggle,\n  rule,\n  afterFn,\n  host,\n  hosts,\n}) => {\n  const intl = useIntl();\n  const [justification, setJustificaton] = useState('');\n  const [singleHost, setSingleHost] = useState(!!host);\n  const [multipleHosts, setMultipleHosts] = useState(hosts.length > 0);\n  const [setAck] = useSetAckMutation();\n  const dispatch = useDispatch();\n  const notify = (data) => dispatch(addNotification(data));\n\n  const bulkHostActions = async () => {\n    // disable for a group of hosts (clusters)\n    try {\n      const requests = hosts.map((h) =>\n        disableRuleForCluster({\n          uuid: h.id,\n          recId: rule.rule_id,\n          justification,\n        })\n      );\n      await Promise.all(requests);\n      notify({\n        variant: 'success',\n        dismissable: true,\n        timeout: true,\n        title: intl.formatMessage(messages.recSuccessfullyDisabledForCluster),\n      });\n    } catch (error) {\n      notify({\n        variant: 'danger',\n        dismissable: true,\n        title: intl.formatMessage(messages.error),\n        description: `${error}`,\n      });\n    }\n  };\n\n  const disableRule = async () => {\n    try {\n      if (singleHost) {\n        // disable the rec for this single cluster\n        await disableRuleForCluster({\n          uuid: host,\n          recId: rule.rule_id,\n          justification,\n        });\n        notify({\n          variant: 'success',\n          timeout: true,\n          dismissable: true,\n          title: intl.formatMessage(messages.recSuccessfullyDisabledForCluster),\n        });\n      } else if (multipleHosts) {\n        bulkHostActions();\n      } else {\n        // disable the whole rec\n        await setAck({\n          rule_id: rule.rule_id,\n          justification,\n        }).unwrap();\n        notify({\n          variant: 'success',\n          timeout: true,\n          dismissable: true,\n          title: intl.formatMessage(messages.recSuccessfullyDisabled),\n        });\n      }\n      setJustificaton('');\n      afterFn && afterFn();\n    } catch (error) {\n      notify({\n        variant: 'danger',\n        dismissable: true,\n        title: intl.formatMessage(messages.error),\n        description: `${error}`,\n      });\n    }\n\n    handleModalToggle(false);\n  };\n\n  return (\n    <Modal\n      variant=\"small\"\n      title={intl.formatMessage(messages.disableRule)}\n      isOpen={isModalOpen}\n      onClose={() => {\n        handleModalToggle();\n        setJustificaton('');\n      }}\n      actions={[\n        <Button\n          key=\"confirm\"\n          variant=\"primary\"\n          onClick={() => disableRule()}\n          ouiaId=\"confirm\"\n        >\n          {intl.formatMessage(messages.save)}\n        </Button>,\n        <Button\n          key=\"cancel\"\n          variant=\"link\"\n          onClick={() => {\n            handleModalToggle(false);\n            setJustificaton('');\n          }}\n          ouiaId=\"cancel\"\n        >\n          {intl.formatMessage(messages.cancel)}\n        </Button>,\n      ]}\n      ouiaId=\"recommendation-disable\"\n    >\n      {intl.formatMessage(messages.disableRuleBody)}\n      <Form>\n        <FormGroup fieldId=\"blank-form\" />\n        {(host || hosts.length > 0) && (\n          <FormGroup fieldId=\"disable-rule-one-system\">\n            <Checkbox\n              isChecked={singleHost || multipleHosts}\n              onChange={() => {\n                host\n                  ? setSingleHost(!singleHost)\n                  : setMultipleHosts(!multipleHosts);\n              }}\n              label={\n                host\n                  ? intl.formatMessage(messages.disableRuleSingleCluster)\n                  : intl.formatMessage(messages.disableRuleForClusters)\n              }\n              id=\"disable-rule-one-system\"\n              name=\"disable-rule-one-system\"\n              ouiaId=\"disable-recommendation-one-cluster\"\n            />\n          </FormGroup>\n        )}\n        <FormGroup\n          label={intl.formatMessage(messages.justificationNote)}\n          fieldId=\"disable-rule-justification\"\n        >\n          <TextInput\n            type=\"text\"\n            id=\"disable-rule-justification\"\n            aria-describedby=\"disable-rule-justification\"\n            value={justification}\n            onChange={(_event, text) => setJustificaton(text)}\n            onKeyDown={(e) =>\n              e.key === 'Enter' && (e.preventDefault(), disableRule())\n            }\n          />\n        </FormGroup>\n      </Form>\n    </Modal>\n  );\n};\n\nDisableRule.propTypes = {\n  isModalOpen: PropTypes.bool,\n  rule: PropTypes.object,\n  handleModalToggle: PropTypes.func,\n  afterFn: PropTypes.func,\n  host: PropTypes.object,\n  hosts: PropTypes.array,\n};\n\nDisableRule.defaultProps = {\n  isModalOpen: false,\n  rule: {},\n  handleModalToggle: () => undefined,\n  afterFn: () => undefined,\n  host: undefined,\n  hosts: [],\n};\n\nexport default DisableRule;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport camelCase from 'lodash/camelCase';\n\nimport { Label, LabelGroup } from '@patternfly/react-core';\nimport LockIcon from '@patternfly/react-icons/dist/js/icons/lock-icon';\nimport PortIcon from '@patternfly/react-icons/dist/js/icons/port-icon';\nimport AutomationIcon from '@patternfly/react-icons/dist/js/icons/automation-icon';\nimport SyncAltIcon from '@patternfly/react-icons/dist/js/icons/sync-icon';\nimport OptimizeIcon from '@patternfly/react-icons/dist/js/icons/optimize-icon';\n\nimport messages from '../../Messages';\nimport { RULE_CATEGORIES } from '../../AppConstants';\n\nconst CATEGORY_ICONS = {\n  security: <LockIcon />,\n  service_availability: <AutomationIcon />,\n  performance: <PortIcon />,\n  fault_tolerance: <SyncAltIcon />,\n  best_practice: <OptimizeIcon />,\n};\n\nexport const extractCategories = (tags) =>\n  tags.filter((t) => Object.keys(RULE_CATEGORIES).includes(t));\n\nconst CategoryLabel = ({ tags }) => {\n  const intl = useIntl();\n\n  return (\n    <LabelGroup numLabels={1} isCompact>\n      {extractCategories(tags).map((tag, key) => (\n        <Label\n          key={key}\n          icon={CATEGORY_ICONS[tag]}\n          variant=\"outline\"\n          color=\"blue\"\n          isCompact\n        >\n          {intl.formatMessage(messages[camelCase(tag)])}\n        </Label>\n      ))}\n    </LabelGroup>\n  );\n};\n\nCategoryLabel.propTypes = {\n  tags: PropTypes.array.isRequired,\n};\n\nexport default CategoryLabel;\n","import './RecsListTable.scss';\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useIntl } from 'react-intl';\nimport { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport capitalize from 'lodash/capitalize';\nimport { SortByDirection, TableVariant } from '@patternfly/react-table';\nimport {\n  Table,\n  TableBody,\n  TableHeader,\n} from '@patternfly/react-table/deprecated';\nimport { Pagination, Stack, Tooltip } from '@patternfly/react-core';\nimport { TooltipPosition } from '@patternfly/react-core/dist/js/components/Tooltip';\nimport { PaginationVariant } from '@patternfly/react-core/dist/js/components/Pagination/Pagination';\nimport isEqual from 'lodash/isEqual';\n\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { InsightsLabel } from '@redhat-cloud-services/frontend-components/InsightsLabel';\nimport PrimaryToolbar from '@redhat-cloud-services/frontend-components/PrimaryToolbar/PrimaryToolbar';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\n\nimport {\n  FILTER_CATEGORIES,\n  RECS_LIST_CATEGORY_CELL,\n  RECS_LIST_CLUSTERS_CELL,\n  RECS_LIST_COLUMNS,\n  RECS_LIST_COLUMNS_KEYS,\n  RECS_LIST_MODIFIED_CELL,\n  RECS_LIST_NAME_CELL,\n  RECS_LIST_TOTAL_RISK_CELL,\n  TOTAL_RISK_LABEL_LOWER,\n  RISK_OF_CHANGE_LABEL,\n  RECS_LIST_RISK_OF_CHANGE_CELL,\n  RISK_OF_CHANGE_DESC,\n} from '../../AppConstants';\nimport messages from '../../Messages';\nimport {\n  RECS_LIST_INITIAL_STATE,\n  resetFilters,\n  updateRecsListFilters,\n} from '../../Services/Filters';\nimport RuleLabels from '../Labels/RuleLabels';\nimport { formatMessages, mapContentToValues } from '../../Utilities/intlHelper';\nimport { strong } from '../../Utilities/Helpers';\nimport { ErrorState, NoMatchingRecs } from '../MessageState/EmptyStates';\nimport {\n  passFilters,\n  paramParser,\n  translateSortParams,\n  updateSearchParams,\n  removeFilterParam as _removeFilterParam,\n  addFilterParam as _addFilterParam,\n} from '../Common/Tables';\nimport DisableRule from '../Modals/DisableRule';\nimport { Delete } from '../../Utilities/Api';\nimport { BASE_URL } from '../../Services/SmartProxy';\nimport CategoryLabel, { extractCategories } from '../Labels/CategoryLabel';\nimport {\n  AdvisorProduct,\n  RuleDetails,\n  RuleDetailsMessagesKeys,\n} from '@redhat-cloud-services/frontend-components-advisor-components';\nimport { adjustOCPRule } from '../../Utilities/Rule';\nimport Loading from '../Loading/Loading';\nimport inRange from 'lodash/inRange';\nimport { BASE_PATH } from '../../Routes';\n\nconst RecsListTable = ({ query }) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const filters = useSelector(({ filters }) => filters.recsListState);\n  const { isError, isUninitialized, isFetching, isSuccess, data, refetch } =\n    query;\n  const recs = data?.recommendations || [];\n  const page = filters.offset / filters.limit + 1;\n  const [filteredRows, setFilteredRows] = useState([]);\n  const [displayedRows, setDisplayedRows] = useState([]);\n  const [disableRuleOpen, setDisableRuleOpen] = useState(false);\n  const [selectedRule, setSelectedRule] = useState({});\n  const [isAllExpanded, setIsAllExpanded] = useState(false);\n  const notify = (data) => dispatch(addNotification(data));\n  const { search } = useLocation();\n  const [filterBuilding, setFilterBuilding] = useState(true);\n  // helps to distinguish the state when the API data received but not yet filtered\n  const [rowsFiltered, setRowsFiltered] = useState(false);\n  const updateFilters = (filters) => dispatch(updateRecsListFilters(filters));\n  const searchText = filters?.text || '';\n  const loadingState = isUninitialized || isFetching || !rowsFiltered;\n  const errorState = isError || (isSuccess && recs.length === 0);\n  const successState = isSuccess && recs.length > 0;\n  const noMatch = recs.length > 0 && filteredRows.length === 0;\n\n  const removeFilterParam = (param) =>\n    _removeFilterParam(filters, updateFilters, param);\n\n  const addFilterParam = (param, values) =>\n    _addFilterParam(filters, updateFilters, param, values);\n\n  useEffect(() => {\n    setDisplayedRows(\n      buildDisplayedRows(filteredRows, filters.sortIndex, filters.sortDirection)\n    );\n    setRowsFiltered(true);\n  }, [\n    filteredRows,\n    filters.limit,\n    filters.offset,\n    filters.sortIndex,\n    filters.sortDirection,\n  ]);\n\n  useEffect(() => {\n    const filteredRows = buildFilteredRows(recs, filters);\n    if (filteredRows.length && filteredRows.length <= filters.offset) {\n      updateFilters({\n        ...filters,\n        offset: 0,\n      });\n    }\n    setFilteredRows(filteredRows);\n  }, [\n    data,\n    filters.category,\n    filters.impact,\n    filters.impacting,\n    filters.total_risk,\n    filters.rule_status,\n    filters.likelihood,\n    filters.res_risk,\n    searchText,\n  ]);\n\n  useEffect(() => {\n    if (search && filterBuilding) {\n      const paramsObject = paramParser(search);\n\n      if (paramsObject.sort) {\n        const sortObj = translateSortParams(paramsObject.sort);\n        paramsObject.sortIndex = RECS_LIST_COLUMNS_KEYS.indexOf(sortObj.name);\n        paramsObject.sortDirection = sortObj.direction;\n      }\n      paramsObject.offset &&\n        (paramsObject.offset = Number(paramsObject.offset[0]));\n      paramsObject.limit &&\n        (paramsObject.limit = Number(paramsObject.limit[0]));\n      paramsObject.impacting &&\n        !Array.isArray(paramsObject.impacting) &&\n        (paramsObject.impacting = [`${paramsObject.impacting}`]);\n      updateFilters({ ...filters, ...paramsObject });\n    }\n    setFilterBuilding(false);\n  }, []);\n\n  useEffect(() => {\n    if (!filterBuilding) {\n      updateSearchParams(filters, RECS_LIST_COLUMNS_KEYS);\n    }\n  }, [filters, filterBuilding]);\n\n  // constructs array of rows (from the initial data) checking currently applied filters\n  const buildFilteredRows = (allRows, filters) => {\n    setRowsFiltered(false);\n    return allRows\n      .filter((rule) => passFilters(rule, filters))\n      .map((value, key) => [\n        {\n          isOpen: isAllExpanded,\n          rule: value,\n          cells: [\n            {\n              title: (\n                <span key={key}>\n                  <Link\n                    key={key}\n                    to={`${BASE_PATH}/recommendations/${value.rule_id}`}\n                  >\n                    {' '}\n                    {value?.description || value?.rule_id}{' '}\n                  </Link>\n                  <RuleLabels rule={value} />\n                </span>\n              ),\n            },\n            {\n              title: value?.publish_date ? (\n                <DateFormat\n                  key={key}\n                  date={value.publish_date}\n                  variant=\"relative\"\n                />\n              ) : (\n                intl.formatMessage(messages.nA)\n              ),\n            },\n            {\n              title: <CategoryLabel key={key} tags={value.tags} />,\n            },\n            {\n              title: (\n                <div key={key}>\n                  <Tooltip\n                    key={key}\n                    position={TooltipPosition.bottom}\n                    content={intl.formatMessage(\n                      messages.rulesDetailsTotalRiskBody,\n                      {\n                        risk:\n                          TOTAL_RISK_LABEL_LOWER[value.total_risk] ||\n                          intl.formatMessage(messages.undefined),\n                        strong,\n                      }\n                    )}\n                  >\n                    {value?.total_risk ? (\n                      <InsightsLabel\n                        value={value.total_risk}\n                        rest={{ isCompact: true }}\n                      />\n                    ) : (\n                      intl.formatMessage(messages.nA)\n                    )}\n                  </Tooltip>\n                </div>\n              ),\n            },\n            {\n              title: inRange(value?.resolution_risk, 1, 5) ? (\n                <InsightsLabel\n                  value={value.resolution_risk}\n                  rest={{ isCompact: true }}\n                  text={RISK_OF_CHANGE_LABEL[value.resolution_risk]}\n                  hideIcon\n                />\n              ) : (\n                intl.formatMessage(messages.nA)\n              ),\n            },\n            {\n              title: (\n                <div key={key}>{`${\n                  value?.impacted_clusters_count !== undefined\n                    ? value.impacted_clusters_count.toLocaleString()\n                    : intl.formatMessage(messages.nA)\n                }`}</div>\n              ),\n            },\n          ],\n        },\n        {\n          fullWidth: true,\n          cells: [\n            {\n              title: (\n                <section className=\"pf-l-page__main-section pf-c-page__main-section pf-m-light\">\n                  <Stack hasGutter>\n                    <RuleDetails\n                      messages={formatMessages(\n                        intl,\n                        RuleDetailsMessagesKeys,\n                        mapContentToValues(intl, adjustOCPRule(value))\n                      )}\n                      product={AdvisorProduct.ocp}\n                      rule={adjustOCPRule(value)}\n                      isDetailsPage={false}\n                      showViewAffected\n                      linkComponent={Link}\n                      {...(inRange(value?.resolution_risk, 1, 5) // resolution risk can be 0 (not defined for particular rule)\n                        ? {\n                            resolutionRisk: value?.resolution_risk,\n                            resolutionRiskDesc:\n                              RISK_OF_CHANGE_DESC[value?.resolution_risk],\n                          }\n                        : {})}\n                    />\n                  </Stack>\n                </section>\n              ),\n            },\n          ],\n        },\n      ]);\n  };\n  /* the category sorting compares only the first element of the array.\n   Could be refactored later when we assign a priority numbers to each of the category\n   and sort them in the array based on the priority.\n*/\n  const buildDisplayedRows = (rows, index, direction) => {\n    const sortingRows = [...rows].sort((firstItem, secondItem) => {\n      let fst = firstItem[0].rule;\n      let snd = secondItem[0].rule;\n      const d = direction === SortByDirection.asc ? 1 : -1;\n      switch (index) {\n        case RECS_LIST_NAME_CELL:\n          fst = fst.description;\n          snd = snd.description;\n          return fst.localeCompare(snd) ? fst.localeCompare(snd) * d : 0;\n        case RECS_LIST_MODIFIED_CELL:\n          fst = new Date(fst.publish_date || 0);\n          snd = new Date(snd.publish_date || 0);\n          return fst > snd ? d : snd > fst ? -d : 0;\n        case RECS_LIST_CATEGORY_CELL:\n          return (\n            d *\n            extractCategories(fst.tags)[0].localeCompare(\n              extractCategories(snd.tags)[0]\n            )\n          );\n        case RECS_LIST_TOTAL_RISK_CELL:\n          fst = fst.total_risk;\n          snd = snd.total_risk;\n          return fst > snd ? d : snd > fst ? -d : 0;\n        case RECS_LIST_RISK_OF_CHANGE_CELL:\n          fst = fst.resolution_risk;\n          snd = snd.resolution_risk;\n          return fst > snd ? d : snd > fst ? -d : 0;\n        case RECS_LIST_CLUSTERS_CELL:\n          fst = fst.impacted_clusters_count;\n          snd = snd.impacted_clusters_count;\n          return fst > snd ? d : snd > fst ? -d : 0;\n        default:\n          console.error('Incorrect sorting parameters received');\n      }\n    });\n    return sortingRows\n      .slice(\n        filters.limit * (page - 1),\n        filters.limit * (page - 1) + filters.limit\n      )\n      .flatMap((row, index) => {\n        const updatedRow = [...row];\n        row[1].parent = index * 2;\n        return updatedRow;\n      });\n  };\n\n  const toggleRulesDisabled = (rule_status) =>\n    updateFilters({\n      ...filters,\n      rule_status,\n      offset: 0,\n    });\n\n  const filterConfigItems = [\n    {\n      label: intl.formatMessage(messages.name).toLowerCase(),\n      type: 'text',\n      filterValues: {\n        key: 'text-filter',\n        onChange: (_event, value) =>\n          updateFilters({ ...filters, offset: 0, text: value }),\n        value: searchText,\n        placeholder: intl.formatMessage(messages.filterByName),\n      },\n    },\n    {\n      label: FILTER_CATEGORIES.total_risk.title,\n      type: FILTER_CATEGORIES.total_risk.type,\n      id: FILTER_CATEGORIES.total_risk.urlParam,\n      value: `checkbox-${FILTER_CATEGORIES.total_risk.urlParam}`,\n      filterValues: {\n        key: `${FILTER_CATEGORIES.total_risk.urlParam}-filter`,\n        onChange: (_event, values) =>\n          addFilterParam(FILTER_CATEGORIES.total_risk.urlParam, values),\n        value: filters.total_risk,\n        items: FILTER_CATEGORIES.total_risk.values,\n      },\n    },\n    {\n      label: FILTER_CATEGORIES.impact.title,\n      type: FILTER_CATEGORIES.impact.type,\n      id: FILTER_CATEGORIES.impact.urlParam,\n      value: `checkbox-${FILTER_CATEGORIES.impact.urlParam}`,\n      filterValues: {\n        key: `${FILTER_CATEGORIES.impact.urlParam}-filter`,\n        onChange: (_event, values) =>\n          addFilterParam(FILTER_CATEGORIES.impact.urlParam, values),\n        value: filters.impact,\n        items: FILTER_CATEGORIES.impact.values,\n      },\n    },\n    {\n      label: FILTER_CATEGORIES.likelihood.title,\n      type: FILTER_CATEGORIES.likelihood.type,\n      id: FILTER_CATEGORIES.likelihood.urlParam,\n      value: `checkbox-${FILTER_CATEGORIES.likelihood.urlParam}`,\n      filterValues: {\n        key: `${FILTER_CATEGORIES.likelihood.urlParam}-filter`,\n        onChange: (_event, values) =>\n          addFilterParam(FILTER_CATEGORIES.likelihood.urlParam, values),\n        value: filters.likelihood,\n        items: FILTER_CATEGORIES.likelihood.values,\n      },\n    },\n    {\n      label: FILTER_CATEGORIES.category.title,\n      type: FILTER_CATEGORIES.category.type,\n      id: FILTER_CATEGORIES.category.urlParam,\n      value: `checkbox-${FILTER_CATEGORIES.category.urlParam}`,\n      filterValues: {\n        key: `${FILTER_CATEGORIES.category.urlParam}-filter`,\n        onChange: (_event, values) =>\n          addFilterParam(FILTER_CATEGORIES.category.urlParam, values),\n        value: filters.category,\n        items: FILTER_CATEGORIES.category.values,\n      },\n    },\n    {\n      label: FILTER_CATEGORIES.rule_status.title,\n      type: FILTER_CATEGORIES.rule_status.type,\n      id: FILTER_CATEGORIES.rule_status.urlParam,\n      value: `radio-${FILTER_CATEGORIES.rule_status.urlParam}`,\n      filterValues: {\n        key: `${FILTER_CATEGORIES.rule_status.urlParam}-filter`,\n        onChange: (_event, value) => toggleRulesDisabled(value),\n        value: `${filters.rule_status}`,\n        items: FILTER_CATEGORIES.rule_status.values,\n      },\n    },\n    {\n      label: FILTER_CATEGORIES.impacting.title,\n      type: FILTER_CATEGORIES.impacting.type,\n      id: FILTER_CATEGORIES.impacting.urlParam,\n      value: `checkbox-${FILTER_CATEGORIES.impacting.urlParam}`,\n      filterValues: {\n        key: `${FILTER_CATEGORIES.impacting.urlParam}-filter`,\n        onChange: (e, values) =>\n          addFilterParam(FILTER_CATEGORIES.impacting.urlParam, values),\n        value: filters.impacting,\n        items: FILTER_CATEGORIES.impacting.values,\n      },\n    },\n    {\n      label: FILTER_CATEGORIES.res_risk.title,\n      type: FILTER_CATEGORIES.res_risk.type,\n      id: FILTER_CATEGORIES.res_risk.urlParam,\n      value: `checkbox-${FILTER_CATEGORIES.res_risk.urlParam}`,\n      filterValues: {\n        key: `${FILTER_CATEGORIES.res_risk.urlParam}-filter`,\n        onChange: (e, values) =>\n          addFilterParam(FILTER_CATEGORIES.res_risk.urlParam, values),\n        value: filters.res_risk,\n        items: FILTER_CATEGORIES.res_risk.values,\n      },\n    },\n  ];\n\n  const onSort = (_e, index, direction) => {\n    setRowsFiltered(false);\n    return updateFilters({\n      ...filters,\n      sortIndex: index,\n      sortDirection: direction,\n    });\n  };\n\n  const pruneFilters = (localFilters, filterCategories) => {\n    const prunedFilters = Object.entries(localFilters);\n    return prunedFilters.length > 0\n      ? prunedFilters.reduce((arr, item) => {\n          if (filterCategories[item[0]]) {\n            const category = filterCategories[item[0]];\n            const chips = Array.isArray(item[1])\n              ? item[1].map((value) => {\n                  const selectedCategoryValue = category.values.find(\n                    (values) => values.value === String(value)\n                  );\n                  return selectedCategoryValue\n                    ? {\n                        name:\n                          selectedCategoryValue.text ||\n                          selectedCategoryValue.label,\n                        value,\n                      }\n                    : { name: value, value };\n                })\n              : [\n                  {\n                    name: category.values.find(\n                      (values) => values.value === String(item[1])\n                    ).label,\n                    value: item[1],\n                  },\n                ];\n            return [\n              ...arr,\n              {\n                category: capitalize(category.title),\n                chips,\n                urlParam: category.urlParam,\n              },\n            ];\n          } else if (item[0] === 'text') {\n            return [\n              ...arr,\n              ...(item[1].length > 0\n                ? [\n                    {\n                      category: 'Name',\n                      chips: [{ name: item[1], value: item[1] }],\n                      urlParam: item[0],\n                    },\n                  ]\n                : []),\n            ];\n          } else {\n            return arr;\n          }\n        }, [])\n      : [];\n  };\n\n  // TODO: use the function from Common/Tables.js\n  const buildFilterChips = () => {\n    const localFilters = { ...filters };\n    delete localFilters.sortIndex;\n    delete localFilters.sortDirection;\n    delete localFilters.offset;\n    delete localFilters.limit;\n    return pruneFilters(localFilters, FILTER_CATEGORIES);\n  };\n\n  const activeFiltersConfig = {\n    showDeleteButton: true,\n    deleteTitle: intl.formatMessage(messages.resetFilters),\n    filters: buildFilterChips(),\n    onDelete: (_event, itemsToRemove, isAll) => {\n      if (isAll) {\n        if (isEqual(filters, RECS_LIST_INITIAL_STATE)) {\n          refetch();\n        } else {\n          resetFilters(filters, RECS_LIST_INITIAL_STATE, updateFilters);\n        }\n      } else {\n        itemsToRemove.map((item) => {\n          const newFilter = {\n            [item.urlParam]: Array.isArray(filters[item.urlParam])\n              ? filters[item.urlParam].filter(\n                  (value) => String(value) !== String(item.chips[0].value)\n                )\n              : '',\n          };\n          newFilter[item.urlParam].length > 0\n            ? updateFilters({ ...filters, ...newFilter })\n            : removeFilterParam(item.urlParam);\n        });\n      }\n    },\n  };\n\n  const handleOnCollapse = (_e, rowId, isOpen) => {\n    if (rowId === undefined) {\n      // if undefined, all rows are affected\n      setIsAllExpanded(isOpen);\n      setDisplayedRows(\n        displayedRows.map((row) => ({\n          ...row,\n          isOpen,\n        }))\n      );\n    } else {\n      setDisplayedRows(\n        displayedRows.map((row, index) =>\n          index === rowId ? { ...row, isOpen } : row\n        )\n      );\n    }\n  };\n\n  const ackRule = async (rowId) => {\n    const rule = displayedRows[rowId].rule;\n\n    try {\n      if (!rule.disabled) {\n        // show disable rule modal\n        setSelectedRule(rule);\n        setDisableRuleOpen(true);\n      } else {\n        try {\n          await Delete(`${BASE_URL}/v2/ack/${rule.rule_id}`);\n          notify({\n            variant: 'success',\n            timeout: true,\n            dismissable: true,\n            title: intl.formatMessage(messages.recSuccessfullyEnabled),\n          });\n          refetch();\n        } catch (error) {\n          notify({\n            variant: 'danger',\n            dismissable: true,\n            title: intl.formatMessage(messages.error),\n            description: `${error}`,\n          });\n        }\n      }\n    } catch (error) {\n      notify({\n        variant: 'danger',\n        dismissable: true,\n        title: rule.disabled\n          ? intl.formatMessage(messages.rulesTableErrorEnabled)\n          : intl.formatMessage(messages.rulesTableErrorDisabled),\n        description: `${error}`,\n      });\n    }\n  };\n\n  const actionResolver = (rowData, { rowIndex }) => {\n    const rule = displayedRows?.[rowIndex]?.rule\n      ? displayedRows[rowIndex].rule\n      : null;\n    if (rowIndex % 2 !== 0 || !rule) {\n      return null;\n    }\n\n    return rule && !rule.disabled\n      ? [\n          {\n            title: intl.formatMessage(messages.disableRule),\n            onClick: (_event, rowId) => ackRule(rowId),\n          },\n        ]\n      : [\n          {\n            title: intl.formatMessage(messages.enableRule),\n            onClick: (_event, rowId) => ackRule(rowId),\n          },\n        ];\n  };\n\n  return (\n    <div id=\"recs-list-table\" data-ouia-safe={!loadingState}>\n      {disableRuleOpen && (\n        <DisableRule\n          handleModalToggle={setDisableRuleOpen}\n          isModalOpen={disableRuleOpen}\n          rule={selectedRule}\n          afterFn={refetch}\n        />\n      )}\n      <PrimaryToolbar\n        pagination={{\n          itemCount: filteredRows.length,\n          page: filters.offset / filters.limit + 1,\n          perPage: Number(filters.limit),\n          onSetPage(_event, page) {\n            setRowsFiltered(false);\n            updateFilters({\n              ...filters,\n              offset: filters.limit * (page - 1),\n            });\n          },\n          onPerPageSelect(_event, perPage) {\n            setRowsFiltered(false);\n            updateFilters({ ...filters, limit: perPage, offset: 0 });\n          },\n          isCompact: true,\n          ouiaId: 'pager',\n        }}\n        filterConfig={{\n          items: filterConfigItems,\n          isDisabled: loadingState || errorState,\n        }}\n        activeFiltersConfig={errorState ? undefined : activeFiltersConfig}\n      />\n      <Table\n        aria-label=\"Table of recommendations\"\n        ouiaId=\"recommendations\"\n        variant={TableVariant.compact}\n        cells={RECS_LIST_COLUMNS}\n        rows={\n          errorState || loadingState || noMatch ? (\n            [\n              {\n                fullWidth: true,\n                cells: [\n                  {\n                    props: {\n                      colSpan: RECS_LIST_COLUMNS.length + 1,\n                    },\n                    title: errorState ? (\n                      <ErrorState />\n                    ) : loadingState ? (\n                      <Loading />\n                    ) : (\n                      <NoMatchingRecs />\n                    ),\n                  },\n                ],\n              },\n            ]\n          ) : successState ? (\n            displayedRows\n          ) : (\n            <ErrorState />\n          )\n        }\n        onCollapse={handleOnCollapse} // TODO: set undefined when there is an empty state\n        sortBy={{\n          index: filters.sortIndex,\n          direction: filters.sortDirection,\n        }}\n        onSort={onSort}\n        actionResolver={actionResolver}\n        isStickyHeader\n        ouiaSafe={!loadingState}\n        canCollapseAll\n      >\n        <TableHeader />\n        <TableBody />\n      </Table>\n      <Pagination\n        ouiaId=\"pager\"\n        itemCount={filteredRows.length}\n        page={filters.offset / filters.limit + 1}\n        perPage={Number(filters.limit)}\n        onSetPage={(_e, page) =>\n          updateFilters({\n            ...filters,\n            offset: filters.limit * (page - 1),\n          })\n        }\n        onPerPageSelect={(_e, perPage) =>\n          updateFilters({ ...filters, limit: perPage, offset: 0 })\n        }\n        widgetId={`pagination-options-menu-bottom`}\n        variant={PaginationVariant.bottom}\n      />\n    </div>\n  );\n};\n\nRecsListTable.propTypes = {\n  query: PropTypes.shape({\n    isError: PropTypes.bool.isRequired,\n    isUninitialized: PropTypes.bool.isRequired,\n    isFetching: PropTypes.bool.isRequired,\n    isSuccess: PropTypes.bool.isRequired,\n    data: PropTypes.object,\n    refetch: PropTypes.func,\n  }),\n};\n\nexport { RecsListTable };\n","import React from 'react';\n\nimport { RecsListTable } from './RecsListTable';\nimport { useGetRecsQuery } from '../../Services/SmartProxy';\n\nconst RecsListTableWrapper = () => {\n  const query = useGetRecsQuery();\n\n  return <RecsListTable query={query} />;\n};\n\nexport default RecsListTableWrapper;\n"],"names":["RuleLabels","_ref","rule","intl","useIntl","React","disabled","Tooltip","content","formatMessage","messages","ruleIsDisabledTooltip","position","TooltipPosition","right","Label","color","isCompact","propTypes","PropTypes","DisableRule","isModalOpen","handleModalToggle","afterFn","host","hosts","_useState","useState","_useState2","_slicedToArray","justification","setJustificaton","_useState3","_useState4","singleHost","setSingleHost","_useState5","length","_useState6","multipleHosts","setMultipleHosts","_useSetAckMutation","useSetAckMutation","setAck","dispatch","useDispatch","notify","data","addNotification","bulkHostActions","_ref2","_asyncToGenerator","_regeneratorRuntime","_callee","requests","_context","prev","next","map","h","disableRuleForCluster","uuid","id","recId","rule_id","Promise","all","variant","dismissable","timeout","title","recSuccessfullyDisabledForCluster","t0","error","description","concat","stop","apply","arguments","disableRule","_ref3","_callee2","_context2","unwrap","recSuccessfullyDisabled","Modal","isOpen","onClose","actions","Button","key","onClick","ouiaId","save","cancel","disableRuleBody","Form","FormGroup","fieldId","Checkbox","isChecked","onChange","label","disableRuleSingleCluster","disableRuleForClusters","name","justificationNote","TextInput","type","value","_event","text","onKeyDown","e","preventDefault","defaultProps","undefined","CATEGORY_ICONS","security","LockIcon","service_availability","AutomationIcon","performance","PortIcon","fault_tolerance","SyncAltIcon","best_practice","OptimizeIcon","extractCategories","tags","filter","t","Object","keys","RULE_CATEGORIES","includes","CategoryLabel","LabelGroup","numLabels","tag","icon","camelCase","isRequired","RecsListTable","query","filters","useSelector","recsListState","isError","isUninitialized","isFetching","isSuccess","refetch","recs","recommendations","page","offset","limit","filteredRows","setFilteredRows","displayedRows","setDisplayedRows","disableRuleOpen","setDisableRuleOpen","_useState7","_useState8","selectedRule","setSelectedRule","_useState9","_useState10","isAllExpanded","setIsAllExpanded","search","useLocation","_useState11","_useState12","filterBuilding","setFilterBuilding","_useState13","_useState14","rowsFiltered","setRowsFiltered","updateFilters","updateRecsListFilters","searchText","loadingState","errorState","successState","noMatch","addFilterParam","param","values","_addFilterParam","useEffect","buildDisplayedRows","sortIndex","sortDirection","buildFilteredRows","_objectSpread","category","impact","impacting","total_risk","rule_status","likelihood","res_risk","paramsObject","paramParser","sort","sortObj","translateSortParams","RECS_LIST_COLUMNS_KEYS","indexOf","direction","Number","Array","isArray","updateSearchParams","localFilters","allRows","passFilters","cells","Link","to","BASE_PATH","publish_date","DateFormat","date","nA","bottom","rulesDetailsTotalRiskBody","risk","TOTAL_RISK_LABEL_LOWER","strong","InsightsLabel","rest","inRange","resolution_risk","RISK_OF_CHANGE_LABEL","hideIcon","impacted_clusters_count","toLocaleString","fullWidth","className","Stack","hasGutter","RuleDetails","_extends","formatMessages","RuleDetailsMessagesKeys","mapContentToValues","adjustOCPRule","product","AdvisorProduct","ocp","isDetailsPage","showViewAffected","linkComponent","resolutionRisk","resolutionRiskDesc","RISK_OF_CHANGE_DESC","rows","index","_toConsumableArray","firstItem","secondItem","fst","snd","d","SortByDirection","asc","RECS_LIST_NAME_CELL","localeCompare","RECS_LIST_MODIFIED_CELL","Date","RECS_LIST_CATEGORY_CELL","RECS_LIST_TOTAL_RISK_CELL","RECS_LIST_RISK_OF_CHANGE_CELL","RECS_LIST_CLUSTERS_CELL","console","slice","flatMap","row","updatedRow","parent","filterConfigItems","toLowerCase","filterValues","placeholder","filterByName","FILTER_CATEGORIES","urlParam","items","activeFiltersConfig","showDeleteButton","deleteTitle","resetFilters","filterCategories","prunedFilters","entries","reduce","arr","item","chips","selectedCategoryValue","find","String","capitalize","pruneFilters","onDelete","itemsToRemove","isAll","isEqual","RECS_LIST_INITIAL_STATE","newFilter","_defineProperty","_removeFilterParam","ackRule","rowId","Delete","BASE_URL","recSuccessfullyEnabled","t1","rulesTableErrorEnabled","rulesTableErrorDisabled","_x","PrimaryToolbar","pagination","itemCount","perPage","onSetPage","onPerPageSelect","filterConfig","isDisabled","Table","TableVariant","compact","RECS_LIST_COLUMNS","props","colSpan","ErrorState","Loading","NoMatchingRecs","onCollapse","_e","sortBy","onSort","actionResolver","rowData","_ref4","_displayedRows$rowInd","rowIndex","enableRule","isStickyHeader","ouiaSafe","canCollapseAll","TableHeader","TableBody","Pagination","widgetId","PaginationVariant","useGetRecsQuery"],"sourceRoot":""}