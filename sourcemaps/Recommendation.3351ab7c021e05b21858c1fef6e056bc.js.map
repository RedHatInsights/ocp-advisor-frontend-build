{"version":3,"file":"js/Recommendation.653ad19ce1b00d82e9db.js","mappings":"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","sources":["webpack:///./src/Components/Breadcrumbs/index.js","webpack:///./src/Components/Loading/Loading.js","webpack:///./src/Components/AffectedClustersTable/AffectedClustersTable.js","webpack:///./src/Components/Modals/ViewHostAcks.js","webpack:///./src/Components/Recommendation/Recommendation.js","webpack:///./src/Components/Recommendation/index.js","webpack:///./src/Utilities/Loaders.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { Link, useLocation } from 'react-router-dom';\n\nimport { Breadcrumb, BreadcrumbItem } from '@patternfly/react-core';\n\nimport messages from '../../Messages';\n\nconst Breadcrumbs = ({ current }) => {\n  const intl = useIntl();\n  const location = useLocation();\n  const splitUrl = location.pathname.split('/');\n\n  return (\n    <div>\n      <Breadcrumb ouiaId=\"detail\">\n        <BreadcrumbItem className=\"breadcrumb-item\">\n          <Link to={`..`} relative=\"path\">\n            {`${intl.formatMessage(messages.insightsHeader)} ${splitUrl[4]}`}\n          </Link>\n        </BreadcrumbItem>\n        <BreadcrumbItem className=\"breadcrumb-item\" isActive>\n          {current}\n        </BreadcrumbItem>\n      </Breadcrumb>\n    </div>\n  );\n};\n\nBreadcrumbs.propTypes = {\n  current: PropTypes.string,\n};\n\nexport default Breadcrumbs;\n","import React from 'react';\nimport { Card, CardBody } from '@patternfly/react-core';\nimport { List } from 'react-content-loader';\n\nconst Loading = () => (\n  <Card ouiaId=\"loading-skeleton\">\n    <CardBody>\n      <List />\n    </CardBody>\n  </Card>\n);\n\nexport default Loading;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { valid } from 'semver';\nimport uniqBy from 'lodash/uniqBy';\n\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter/conditionalFilterConstants';\nimport PrimaryToolbar from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { Tooltip, Pagination } from '@patternfly/react-core';\nimport { PaginationVariant } from '@patternfly/react-core/dist/js/components/Pagination/Pagination';\nimport { Table, TableHeader, TableBody } from '@patternfly/react-table';\n\nimport {\n  ErrorState,\n  NoAffectedClusters,\n  NoMatchingClusters,\n} from '../MessageState/EmptyStates';\nimport {\n  AFFECTED_CLUSTERS_COLUMNS,\n  AFFECTED_CLUSTERS_IMPACTED_CELL,\n  AFFECTED_CLUSTERS_LAST_SEEN_CELL,\n  AFFECTED_CLUSTERS_NAME_CELL,\n  AFFECTED_CLUSTERS_VERSION_CELL,\n  FILTER_CATEGORIES,\n} from '../../AppConstants';\nimport Loading from '../Loading/Loading';\nimport {\n  AFFECTED_CLUSTERS_INITIAL_STATE,\n  resetFilters,\n  updateAffectedClustersFilters,\n} from '../../Services/Filters';\nimport messages from '../../Messages';\nimport DisableRule from '../Modals/DisableRule';\nimport {\n  buildFilterChips,\n  compareSemVer,\n  removeFilterParam as _removeFilterParam,\n  addFilterParam as _addFilterParam,\n} from '../Common/Tables';\nimport { BASE_PATH } from '../../Routes';\n\nconst AffectedClustersTable = ({ query, rule, afterDisableFn }) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n\n  const [filteredRows, setFilteredRows] = useState([]);\n  const [displayedRows, setDisplayedRows] = useState([]);\n  const [disableRuleModalOpen, setDisableRuleModalOpen] = useState(false);\n  const [selected, setSelected] = useState([]);\n  const [host, setHost] = useState(undefined);\n\n  const {\n    isError,\n    isUninitialized,\n    isFetching,\n    isSuccess,\n    /* the response contains two lists: `disabled` has clusters\n      for which the rec is disabled (acked), and `enable` contains\n       clusters that are affected by the rec */\n    data = { disabled: [], enabled: [] },\n  } = query;\n  const rows = data?.enabled || [];\n  const filters = useSelector(({ filters }) => filters.affectedClustersState);\n  const perPage = filters.limit;\n  const page = filters.offset / filters.limit + 1;\n  const allSelected =\n    filteredRows.length !== 0 && selected.length === filteredRows.length;\n  // helps to distinguish the state when the API data received but not yet filtered\n  const [rowsFiltered, setRowsFiltered] = useState(false);\n  const loadingState = isUninitialized || isFetching || !rowsFiltered;\n  const errorState = isError;\n  const successState = isSuccess;\n  const noInput = successState && rows.length === 0;\n  const noMatch = rows.length > 0 && filteredRows.length === 0;\n\n  const updateFilters = (filters) =>\n    dispatch(updateAffectedClustersFilters(filters));\n\n  const removeFilterParam = (param) =>\n    _removeFilterParam(filters, updateFilters, param);\n\n  const addFilterParam = (param, values) =>\n    _addFilterParam(filters, updateFilters, param, values);\n\n  const filterConfig = {\n    items: [\n      {\n        label: intl.formatMessage(messages.name),\n        placeholder: intl.formatMessage(messages.filterByName),\n        type: conditionalFilterType.text,\n        filterValues: {\n          id: 'name-filter',\n          key: 'name-filter',\n          onChange: (event, value) => addFilterParam('text', value),\n          value: filters.text,\n        },\n      },\n      {\n        label: intl.formatMessage(messages.version),\n        placeholder: intl.formatMessage(messages.filterByVersion),\n        type: conditionalFilterType.checkbox,\n        filterValues: {\n          id: 'version-filter',\n          key: 'version-filter',\n          onChange: (event, value) => addFilterParam('version', value),\n          value: filters.version,\n          items: uniqBy(\n            rows\n              .filter((r) => r.meta.cluster_version !== '')\n              .map((r) => ({\n                value: r.meta.cluster_version,\n              }))\n              .sort((a, b) => compareSemVer(a.value, b.value, 1))\n              .reverse(), // should start from the latest version\n            'value'\n          ),\n        },\n      },\n    ],\n    isDisabled: isError || (rows && rows.length === 0),\n  };\n\n  const onSort = (_e, index, direction) => {\n    setRowsFiltered(false);\n    updateFilters({ ...filters, sortIndex: index, sortDirection: direction });\n  };\n\n  const onSetPage = (_e, pageNumber) => {\n    setRowsFiltered(false);\n    const newOffset = pageNumber * filters.limit - filters.limit;\n    updateFilters({ ...filters, offset: newOffset });\n  };\n\n  const onSetPerPage = (_e, perPage) => {\n    setRowsFiltered(false);\n    updateFilters({ ...filters, limit: perPage, offset: 0 });\n  };\n\n  // constructs array of rows (from the initial data) checking currently applied filters\n  const buildFilteredRows = (allRows, filters) => {\n    setRowsFiltered(false);\n    const rows = allRows.map((r) => {\n      if (r.meta.cluster_version !== '' && !valid(r.meta.cluster_version)) {\n        console.error(\n          `Cluster version ${r.meta.cluster_version} has invalid format!`\n        );\n      }\n\n      return {\n        id: r.cluster,\n        cells: [\n          '',\n          r.cluster_name || r.cluster,\n          r.meta.cluster_version,\n          r.last_checked_at,\n          r.impacted,\n        ],\n      };\n    });\n    return rows\n      .filter((row) => {\n        return (\n          row?.cells[AFFECTED_CLUSTERS_NAME_CELL].toLowerCase().includes(\n            filters.text.toLowerCase()\n          ) &&\n          (filters.version.length === 0 ||\n            filters.version.includes(row.cells[AFFECTED_CLUSTERS_VERSION_CELL]))\n        );\n      })\n      .sort((a, b) => {\n        let fst, snd;\n        const d = filters.sortDirection === 'asc' ? 1 : -1;\n        switch (filters.sortIndex) {\n          case AFFECTED_CLUSTERS_NAME_CELL:\n            return (\n              d *\n              a?.cells[AFFECTED_CLUSTERS_NAME_CELL].localeCompare(\n                b?.cells[AFFECTED_CLUSTERS_NAME_CELL]\n              )\n            );\n          case AFFECTED_CLUSTERS_VERSION_CELL:\n            return compareSemVer(\n              a.cells[AFFECTED_CLUSTERS_VERSION_CELL] || '0.0.0',\n              b.cells[AFFECTED_CLUSTERS_VERSION_CELL] || '0.0.0',\n              d\n            );\n          case AFFECTED_CLUSTERS_LAST_SEEN_CELL:\n            fst = new Date(a.cells[AFFECTED_CLUSTERS_LAST_SEEN_CELL] || 0);\n            snd = new Date(b.cells[AFFECTED_CLUSTERS_LAST_SEEN_CELL] || 0);\n            return fst > snd ? d : snd > fst ? -d : 0;\n          case AFFECTED_CLUSTERS_IMPACTED_CELL:\n            fst = new Date(a.cells[AFFECTED_CLUSTERS_IMPACTED_CELL] || 0);\n            snd = new Date(b.cells[AFFECTED_CLUSTERS_IMPACTED_CELL] || 0);\n            return fst > snd ? d : snd > fst ? -d : 0;\n        }\n      });\n  };\n\n  const buildDisplayedRows = (rows) => {\n    return rows\n      .slice(perPage * (page - 1), perPage * (page - 1) + perPage)\n      .map((r) => ({\n        ...r,\n        cells: [\n          <span key={r.id}>\n            <Link to={`${BASE_PATH}/clusters/${r.id}?first=${rule.rule_id}`}>\n              {r.cells[AFFECTED_CLUSTERS_NAME_CELL]}\n            </Link>\n          </span>,\n          <span key={r.id}>\n            {r.cells[AFFECTED_CLUSTERS_VERSION_CELL] ||\n              intl.formatMessage(messages.nA)}\n          </span>,\n          <span key={r.id}>\n            {r.cells[AFFECTED_CLUSTERS_LAST_SEEN_CELL] ? (\n              <DateFormat\n                extraTitle={`${intl.formatMessage(messages.lastSeen)}: `}\n                date={r.cells[AFFECTED_CLUSTERS_LAST_SEEN_CELL]}\n                variant=\"relative\"\n              />\n            ) : (\n              <Tooltip\n                key={r.id}\n                content={\n                  <span>\n                    {intl.formatMessage(messages.lastSeen) + ': '}\n                    {intl.formatMessage(messages.nA)}\n                  </span>\n                }\n              >\n                <span>{intl.formatMessage(messages.nA)}</span>\n              </Tooltip>\n            )}\n          </span>,\n          <span key={r.id}>\n            {r.cells[AFFECTED_CLUSTERS_IMPACTED_CELL] ? (\n              <DateFormat\n                extraTitle={`${intl.formatMessage(messages.impacted)}: `}\n                date={r.cells[AFFECTED_CLUSTERS_IMPACTED_CELL]}\n                variant=\"relative\"\n              />\n            ) : (\n              <Tooltip\n                key={r.id}\n                content={\n                  <span>\n                    {intl.formatMessage(messages.impacted) + ': '}\n                    {intl.formatMessage(messages.nA)}\n                  </span>\n                }\n              >\n                <span>{intl.formatMessage(messages.nA)}</span>\n              </Tooltip>\n            )}\n          </span>,\n        ],\n      }));\n  };\n\n  // if rowId === -1, then select all rows\n  const onSelect = (event, isSelected, rowId) => {\n    let rows;\n    rowId === -1\n      ? (rows = filteredRows.map((r) => ({ ...r, selected: isSelected })))\n      : (rows = filteredRows.map((r, i) => ({\n          ...r,\n          selected: i === rowId ? isSelected : r.selected,\n        })));\n    setSelected(rows.filter((r) => r.selected));\n    setFilteredRows(rows);\n    setDisplayedRows(buildDisplayedRows(rows));\n  };\n\n  useEffect(() => {\n    setFilteredRows(buildFilteredRows(rows, filters));\n  }, [\n    query,\n    filters.text,\n    filters.version,\n    filters.sortIndex,\n    filters.sortDirection,\n  ]);\n\n  useEffect(() => {\n    setDisplayedRows(buildDisplayedRows(filteredRows));\n    setRowsFiltered(true);\n  }, [filteredRows, filters.limit, filters.offset]);\n\n  const handleModalToggle = (disableRuleModalOpen, host = undefined) => {\n    setDisableRuleModalOpen(disableRuleModalOpen);\n    setHost(host);\n  };\n\n  return (\n    <div id=\"affected-list-table\" data-ouia-safe={!loadingState}>\n      {disableRuleModalOpen && (\n        <DisableRule\n          handleModalToggle={handleModalToggle}\n          isModalOpen={disableRuleModalOpen}\n          rule={rule}\n          afterFn={afterDisableFn}\n          hosts={host !== undefined ? [] : selected}\n          host={host}\n        />\n      )}\n      <PrimaryToolbar\n        filterConfig={filterConfig}\n        pagination={{\n          itemCount: filteredRows.length,\n          page,\n          perPage,\n          onSetPage: onSetPage,\n          onPerPageSelect: onSetPerPage,\n          ouiaId: 'pager',\n        }}\n        activeFiltersConfig={\n          isError || (rows && rows.length === 0)\n            ? undefined\n            : {\n                filters: buildFilterChips(filters, FILTER_CATEGORIES),\n                deleteTitle: intl.formatMessage(messages.resetFilters),\n                onDelete: (event, itemsToRemove, isAll) => {\n                  if (isAll) {\n                    resetFilters(\n                      filters,\n                      AFFECTED_CLUSTERS_INITIAL_STATE,\n                      updateFilters\n                    );\n                  } else {\n                    itemsToRemove.map((item) => {\n                      const newFilter = {\n                        [item.urlParam]: Array.isArray(filters[item.urlParam])\n                          ? filters[item.urlParam].filter(\n                              (value) =>\n                                String(value) !== String(item.chips[0].value)\n                            )\n                          : '',\n                      };\n                      newFilter[item.urlParam].length > 0\n                        ? updateFilters({ ...filters, ...newFilter })\n                        : removeFilterParam(item.urlParam);\n                    });\n                  }\n                },\n              }\n        }\n        bulkSelect={{\n          count: selected.length,\n          items: [\n            {\n              title: intl.formatMessage(messages.selectNone),\n              onClick: (event) => onSelect(event, false, -1),\n            },\n            {\n              title: intl.formatMessage(messages.selectAll, {\n                items: filteredRows?.length || 0,\n              }),\n              onClick: (event) => onSelect(event, true, -1),\n            },\n          ],\n          checked: allSelected,\n          onSelect: (event) =>\n            allSelected\n              ? onSelect(event, false, -1)\n              : onSelect(event, true, -1),\n          ouiaId: 'clusters-selector',\n        }}\n        actionsConfig={{\n          actions: [\n            '',\n            {\n              label: intl.formatMessage(messages.disableRuleForClusters),\n              props: { isDisabled: selected.length === 0 },\n              onClick: () => handleModalToggle(true),\n            },\n          ],\n        }}\n      />\n      <Table\n        aria-label=\"Table of affected clusters\"\n        ouiaId=\"clusters\"\n        ouiaSafe={!loadingState}\n        variant=\"compact\"\n        cells={AFFECTED_CLUSTERS_COLUMNS}\n        rows={\n          errorState || loadingState || noMatch || noInput ? (\n            [\n              {\n                fullWidth: true,\n                cells: [\n                  {\n                    props: {\n                      colSpan: AFFECTED_CLUSTERS_COLUMNS.length + 1,\n                    },\n                    title: errorState ? (\n                      <ErrorState />\n                    ) : loadingState ? (\n                      <Loading />\n                    ) : noInput ? (\n                      <NoAffectedClusters />\n                    ) : (\n                      <NoMatchingClusters />\n                    ),\n                  },\n                ],\n              },\n            ]\n          ) : successState ? (\n            displayedRows\n          ) : (\n            <ErrorState />\n          )\n        }\n        sortBy={{\n          index: filters.sortIndex,\n          direction: filters.sortDirection,\n        }}\n        onSort={onSort}\n        canSelectAll={false}\n        onSelect={displayedRows?.length > 0 ? onSelect : undefined}\n        actions={[\n          {\n            title: 'Disable recommendation for cluster',\n            onClick: (event, rowIndex) =>\n              handleModalToggle(true, filteredRows[rowIndex].id),\n          },\n        ]}\n      >\n        <TableHeader />\n        <TableBody />\n      </Table>\n      <Pagination\n        variant={PaginationVariant.bottom}\n        itemCount={filteredRows.length}\n        page={page}\n        perPage={perPage}\n        onSetPage={onSetPage}\n        onPerPageSelect={onSetPerPage}\n        onPageInput={onSetPage}\n        ouiaId=\"pager\"\n      />\n    </div>\n  );\n};\n\nAffectedClustersTable.propTypes = {\n  query: PropTypes.shape({\n    isError: PropTypes.bool.isRequired,\n    isUninitialized: PropTypes.bool.isRequired,\n    isFetching: PropTypes.bool.isRequired,\n    isSuccess: PropTypes.bool.isRequired,\n    data: PropTypes.shape({\n      enabled: PropTypes.array,\n      disabled: PropTypes.array,\n    }),\n  }),\n  rule: PropTypes.object,\n  afterDisableFn: PropTypes.func,\n};\n\nexport { AffectedClustersTable };\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { List } from 'react-content-loader';\nimport { useIntl } from 'react-intl';\nimport { useDispatch } from 'react-redux';\n\nimport {\n  Table,\n  TableBody,\n  TableHeader,\n  cellWidth,\n} from '@patternfly/react-table';\nimport { Button, Modal } from '@patternfly/react-core';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport OutlinedBellIcon from '@patternfly/react-icons/dist/js/icons/outlined-bell-icon';\nimport { addNotification as notification } from '@redhat-cloud-services/frontend-components-notifications/';\n\nimport messages from '../../Messages';\nimport { enableRuleForCluster } from '../../Services/Acks';\n\nconst ViewHostAcks = ({\n  handleModalToggle,\n  isModalOpen,\n  clusters,\n  recId,\n  afterFn,\n}) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const addNotification = (data) => dispatch(notification(data));\n  const { data, isFetching, isLoading, refetch } = clusters;\n  const hostAcks = data?.disabled || [];\n  const [rows, setRows] = useState([]);\n  const [unclean, setUnclean] = useState(false);\n\n  const columns = [\n    {\n      title: intl.formatMessage(messages.clusterName),\n\n      transforms: [cellWidth(50)],\n    },\n    {\n      title: intl.formatMessage(messages.justificationNote),\n\n      transforms: [cellWidth(25)],\n    },\n    {\n      title: intl.formatMessage(messages.dateDisabled),\n\n      transforms: [cellWidth(15)],\n    },\n    '',\n  ];\n\n  const deleteAck = async (host) => {\n    try {\n      await enableRuleForCluster({ uuid: host.cluster_id, recId });\n      refetch();\n      setUnclean(true);\n    } catch (error) {\n      handleModalToggle(false);\n      addNotification({\n        variant: 'danger',\n        dismissable: true,\n        title: intl.formatMessage(messages.error),\n        description: `${error}`,\n      });\n    }\n  };\n\n  useEffect(() => {\n    const rows = hostAcks?.map((item) => ({\n      cells: [\n        item.cluster_name || item.cluster_id,\n        item.justification || intl.formatMessage(messages.none),\n        {\n          title: (\n            <DateFormat date={new Date(item.disabled_at)} type=\"onlyDate\" />\n          ),\n        },\n        {\n          title: (\n            <Button\n              key={item.cluster_id}\n              ouiaId=\"enable\"\n              isInline\n              variant=\"link\"\n              onClick={() => deleteAck(item)}\n            >\n              <OutlinedBellIcon size=\"sm\" />\n              {` ${intl.formatMessage(messages.enable)}`}\n            </Button>\n          ),\n        },\n      ],\n    }));\n\n    if (!isLoading && hostAcks.length === 0) {\n      afterFn();\n      handleModalToggle(false);\n    }\n    setRows(rows);\n  }, [hostAcks]);\n\n  return (\n    <Modal\n      width={'75%'}\n      title={intl.formatMessage(messages.hostAckModalTitle)}\n      isOpen={isModalOpen}\n      onClose={() => {\n        unclean && afterFn();\n        handleModalToggle(false);\n      }}\n      ouiaId=\"hosts-disabled\"\n    >\n      {!isFetching ? (\n        <Table aria-label=\"host-ack-table\" rows={rows} cells={columns}>\n          <TableHeader />\n          <TableBody />\n        </Table>\n      ) : (\n        <Table\n          aria-label=\"host-ack-table\"\n          rows={[\n            {\n              cells: [{ props: { colSpan: 3 }, title: <List /> }],\n            },\n          ]}\n          cells={columns}\n        >\n          <TableHeader />\n          <TableBody />\n        </Table>\n      )}\n    </Modal>\n  );\n};\n\nViewHostAcks.propTypes = {\n  isModalOpen: PropTypes.bool,\n  handleModalToggle: PropTypes.func,\n  clusters: PropTypes.object,\n  recId: PropTypes.string,\n  afterFn: PropTypes.func,\n};\n\nViewHostAcks.defaultProps = {\n  isModalOpen: false,\n  handleModalToggle: () => undefined,\n  clusters: {},\n  recId: '',\n  afterFn: () => undefined,\n};\n\nexport default ViewHostAcks;\n","import './Recommendation.scss';\n\nimport React, { useMemo, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\n\nimport {\n  Card,\n  CardBody,\n  CardFooter,\n  CardHeader,\n} from '@patternfly/react-core/dist/js/components/Card';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport {\n  Label,\n  Title,\n  LabelGroup,\n  Button,\n  Dropdown,\n  DropdownItem,\n  DropdownToggle,\n  Flex,\n  FlexItem,\n} from '@patternfly/react-core';\nimport BellSlashIcon from '@patternfly/react-icons/dist/js/icons/bell-slash-icon';\nimport CaretDownIcon from '@patternfly/react-icons/dist/js/icons/caret-down-icon';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { ErrorState } from '@redhat-cloud-services/frontend-components/ErrorState';\nimport {\n  AdvisorProduct,\n  RuleDetails,\n  RuleDetailsMessagesKeys,\n} from '@redhat-cloud-services/frontend-components-advisor-components';\n\nimport Breadcrumbs from '../Breadcrumbs';\nimport RuleLabels from '../Labels/RuleLabels';\nimport {\n  FILTER_CATEGORIES,\n  RISK_OF_CHANGE_DESC,\n  RULE_CATEGORIES,\n} from '../../AppConstants';\nimport messages from '../../Messages';\nimport Loading from '../Loading/Loading';\nimport { adjustOCPRule } from '../../Utilities/Rule';\nimport MessageState from '../MessageState/MessageState';\nimport { AffectedClustersTable } from '../AffectedClustersTable/AffectedClustersTable';\nimport { Delete, Post } from '../../Utilities/Api';\nimport { BASE_URL } from '../../Services/SmartProxy';\nimport DisableRule from '../Modals/DisableRule';\nimport ViewHostAcks from '../Modals/ViewHostAcks';\nimport { OneLineLoader } from '../../Utilities/Loaders';\nimport { enableRuleForCluster } from '../../Services/Acks';\nimport { formatMessages, mapContentToValues } from '../../Utilities/intlHelper';\nimport inRange from 'lodash/inRange';\n\nconst Recommendation = ({ rule, ack, clusters, recId }) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const notify = (data) => dispatch(addNotification(data));\n  const [disableRuleModalOpen, setDisableRuleModalOpen] = useState(false);\n  const [actionsDropdownOpen, setActionsDropdownOpen] = useState(false);\n  const [viewSystemsModalOpen, setViewSystemsModalOpen] = useState(false);\n\n  // rule's info\n  const {\n    isError,\n    isUninitialized,\n    isLoading,\n    isFetching,\n    isSuccess,\n    data,\n    refetch,\n  } = rule;\n  // justification note, last time acknowledged, etc.\n  const { data: ackData, isFetching: ackIsFetching, refetch: refetchAck } = ack;\n  const ruleDate = new Date(ackData?.updated_at || ackData?.created_at);\n  // affected and acked clusters lists\n  const {\n    data: clustersData,\n    isFetching: clustersIsFetching,\n    refetch: refetchClusters,\n  } = clusters;\n\n  const content =\n    isSuccess && data ? adjustOCPRule(data.content, recId) : undefined;\n  const ackedClusters =\n    !clustersIsFetching && clustersData ? clustersData.disabled : undefined;\n\n  const afterDisableFn = async () => {\n    refetch();\n    refetchAck();\n    refetchClusters();\n  };\n\n  const handleModalToggle = (disableRuleModalOpen) => {\n    setDisableRuleModalOpen(disableRuleModalOpen);\n  };\n\n  const enableRecForHosts = async ({ uuids }) => {\n    try {\n      const requests = uuids.map((uuid) =>\n        enableRuleForCluster({ uuid, recId })\n      );\n      await Promise.all(requests);\n      refetch();\n      refetchAck();\n      refetchClusters();\n      notify({\n        variant: 'success',\n        timeout: true,\n        dismissable: true,\n        title: intl.formatMessage(messages.recSuccessfullyEnabledForCluster),\n      });\n    } catch (error) {\n      notify({\n        variant: 'danger',\n        dismissable: true,\n        title: intl.formatMessage(messages.error),\n        description: `${error}`,\n      });\n    }\n  };\n\n  const enableRule = async (rule) => {\n    try {\n      await Delete(`${BASE_URL}/v2/ack/${rule.data.content.rule_id}`);\n      notify({\n        variant: 'success',\n        timeout: true,\n        dismissable: true,\n        title: intl.formatMessage(messages.recSuccessfullyEnabled),\n      });\n      refetch();\n    } catch (error) {\n      handleModalToggle(false);\n      notify({\n        variant: 'danger',\n        dismissable: true,\n        title: intl.formatMessage(messages.error),\n        description: `${error}`,\n      });\n    }\n  };\n\n  const messagesValues = useMemo(\n    () => (content ? mapContentToValues(intl, content) : {}),\n    [intl, content]\n  );\n\n  return (\n    <React.Fragment>\n      {viewSystemsModalOpen && (\n        <ViewHostAcks\n          handleModalToggle={(toggleModal) =>\n            setViewSystemsModalOpen(toggleModal)\n          }\n          isModalOpen={viewSystemsModalOpen}\n          clusters={clusters}\n          afterFn={() => refetchClusters()}\n          recId={recId}\n        />\n      )}\n      {disableRuleModalOpen && (\n        <DisableRule\n          handleModalToggle={handleModalToggle}\n          isModalOpen={disableRuleModalOpen}\n          rule={content}\n          afterFn={afterDisableFn}\n        />\n      )}\n      <PageHeader className=\"pageHeaderOverride\">\n        <Breadcrumbs current={content?.description || recId} />\n      </PageHeader>\n      {(isUninitialized || isLoading || isFetching) && (\n        <section className=\"pf-l-page__main-section pf-c-page__main-section pf-m-light pf-u-pt-sm\">\n          <Loading />\n        </section>\n      )}\n      {isError && (\n        <section className=\"pf-l-page__main-section pf-c-page__main-section pf-m-light pf-u-pt-sm\">\n          <ErrorState />\n        </section>\n      )}\n      {!(isUninitialized || isLoading || isFetching) && isSuccess && (\n        <React.Fragment>\n          <section className=\"pf-l-page__main-section pf-c-page__main-section pf-m-light pf-u-pt-sm\">\n            <RuleDetails\n              messages={formatMessages(\n                intl,\n                RuleDetailsMessagesKeys,\n                messagesValues\n              )}\n              product={AdvisorProduct.ocp}\n              rule={content}\n              isDetailsPage\n              header={\n                <React.Fragment>\n                  <PageHeaderTitle\n                    title={\n                      <React.Fragment>\n                        {content.description} <RuleLabels rule={content} />\n                      </React.Fragment>\n                    }\n                  />\n                  <p>\n                    {intl.formatMessage(messages.rulesDetailsModifiedDate, {\n                      date: (\n                        <DateFormat\n                          date={new Date(content.publish_date)}\n                          type=\"onlyDate\"\n                        />\n                      ),\n                    })}\n                    {content.tags &&\n                      (Array.isArray(content.tags) ? (\n                        <LabelGroup\n                          className=\"categoryLabels\"\n                          numLabels={1}\n                          isCompact\n                        >\n                          {content.tags.reduce((labels, tag) => {\n                            if (RULE_CATEGORIES[tag]) {\n                              labels.push(\n                                <Label\n                                  key={`label-${tag}`}\n                                  color=\"blue\"\n                                  isCompact\n                                >\n                                  {\n                                    FILTER_CATEGORIES.category.values[\n                                      RULE_CATEGORIES[tag] - 1\n                                    ].label\n                                  }\n                                </Label>\n                              );\n                            }\n                            return labels;\n                          }, [])}\n                        </LabelGroup>\n                      ) : (\n                        <Label isCompact>{content.tags}</Label>\n                      ))}\n                  </p>\n                </React.Fragment>\n              }\n              onVoteClick={async (rule, rating) =>\n                await Post(`${BASE_URL}/v2/rating`, {}, { rule, rating })\n              }\n              {...(inRange(content?.resolution_risk, 1, 5) // resolution risk can be 0 (not defined for particular rule)\n                ? {\n                    resolutionRisk: content?.resolution_risk,\n                    resolutionRiskDesc:\n                      RISK_OF_CHANGE_DESC[content?.resolution_risk],\n                  }\n                : {})}\n            >\n              <Flex>\n                <FlexItem align={{ default: 'alignRight' }}>\n                  <Dropdown\n                    className=\"ins-c-rec-details__actions_dropdown\"\n                    onSelect={() =>\n                      setActionsDropdownOpen(!actionsDropdownOpen)\n                    }\n                    position=\"right\"\n                    ouiaId=\"actions\"\n                    toggle={\n                      <DropdownToggle\n                        onToggle={(actionsDropdownOpen) =>\n                          setActionsDropdownOpen(actionsDropdownOpen)\n                        }\n                        toggleIndicator={CaretDownIcon}\n                      >\n                        {intl.formatMessage(messages.actions)}\n                      </DropdownToggle>\n                    }\n                    isOpen={actionsDropdownOpen}\n                    dropdownItems={\n                      content?.disabled\n                        ? [\n                            <DropdownItem\n                              key=\"link\"\n                              ouiaId=\"enable\"\n                              onClick={() => {\n                                enableRule(rule);\n                              }}\n                            >\n                              {intl.formatMessage(messages.enableRule)}\n                            </DropdownItem>,\n                          ]\n                        : [\n                            <DropdownItem\n                              key=\"link\"\n                              ouiaId=\"disable\"\n                              onClick={() => {\n                                handleModalToggle(true);\n                              }}\n                            >\n                              {intl.formatMessage(messages.disableRule)}\n                            </DropdownItem>,\n                          ]\n                    }\n                  />\n                </FlexItem>\n              </Flex>\n            </RuleDetails>\n          </section>\n          <section className=\"pf-l-page__main-section pf-c-page__main-section\">\n            <React.Fragment>\n              {(content?.hosts_acked_count ||\n                ackedClusters?.length > 0 ||\n                content?.disabled) && (\n                <Card className=\"cardOverride\" ouiaId=\"hosts-acked\">\n                  <CardHeader>\n                    <Title headingLevel=\"h4\" size=\"xl\">\n                      <BellSlashIcon size=\"sm\" />\n                      &nbsp;\n                      {intl.formatMessage(\n                        (content?.hosts_acked_count ||\n                          ackedClusters?.length > 0) &&\n                          !content?.disabled\n                          ? messages.ruleIsDisabledForClusters\n                          : messages.ruleIsDisabled\n                      )}\n                    </Title>\n                  </CardHeader>\n                  <CardBody>\n                    {(content?.hosts_acked_count ||\n                      ackedClusters?.length > 0) &&\n                    !content?.disabled ? (\n                      <React.Fragment>\n                        {intl.formatMessage(\n                          messages.ruleIsDisabledForClustersBody,\n                          {\n                            clusters: ackedClusters?.length,\n                          }\n                        )}\n                        {!clustersIsFetching && ackedClusters?.length > 0 ? (\n                          <React.Fragment>\n                            &nbsp;\n                            <Button\n                              isInline\n                              variant=\"link\"\n                              onClick={() => setViewSystemsModalOpen(true)}\n                              ouiaId=\"view-clusters\"\n                            >\n                              {intl.formatMessage(messages.viewClusters)}\n                            </Button>\n                          </React.Fragment>\n                        ) : (\n                          <OneLineLoader />\n                        )}\n                      </React.Fragment>\n                    ) : (\n                      !ackIsFetching &&\n                      ackData && (\n                        <React.Fragment>\n                          {ackData?.justification\n                            ? intl.formatMessage(\n                                messages.ruleIsDisabledWithJustificaiton,\n                                {\n                                  date: (\n                                    <span>\n                                      <DateFormat\n                                        date={ruleDate}\n                                        type=\"onlyDate\"\n                                      />\n                                    </span>\n                                  ),\n                                  reason: ackData.justification,\n                                }\n                              )\n                            : intl.formatMessage(\n                                messages.ruleIsDisabledWithoutJustificaiton,\n                                {\n                                  date: (\n                                    <span>\n                                      <DateFormat\n                                        date={ruleDate}\n                                        type=\"onlyDate\"\n                                      />\n                                    </span>\n                                  ),\n                                }\n                              )}\n                        </React.Fragment>\n                      )\n                    )}\n                  </CardBody>\n                  <CardFooter>\n                    {(content?.hosts_acked_count ||\n                      ackedClusters?.length > 0) &&\n                    !content?.disabled ? (\n                      !clustersIsFetching && ackedClusters ? (\n                        <Button\n                          isInline\n                          variant=\"link\"\n                          onClick={() =>\n                            enableRecForHosts({\n                              uuids: ackedClusters.map((c) => c.cluster_id),\n                            })\n                          }\n                          ouiaId=\"enable\"\n                        >\n                          {intl.formatMessage(messages.enableRuleForClusters)}\n                        </Button>\n                      ) : (\n                        <OneLineLoader />\n                      )\n                    ) : (\n                      <Button\n                        isInline\n                        variant=\"link\"\n                        onClick={() => enableRule(rule)}\n                        ouiaId=\"enable\"\n                      >\n                        {intl.formatMessage(messages.enableRule)}\n                      </Button>\n                    )}\n                  </CardFooter>\n                </Card>\n              )}\n              {!content?.disabled && (\n                <React.Fragment>\n                  <Title className=\"titleOverride\" headingLevel=\"h3\" size=\"2xl\">\n                    {intl.formatMessage(messages.affectedClusters)}\n                  </Title>\n                  <AffectedClustersTable\n                    query={clusters}\n                    rule={content}\n                    afterDisableFn={afterDisableFn}\n                  />\n                </React.Fragment>\n              )}\n              {content?.disabled && (\n                <MessageState\n                  icon={BellSlashIcon}\n                  title={intl.formatMessage(messages.ruleIsDisabled)}\n                  text={intl.formatMessage(messages.ruleIsDisabledBody)}\n                />\n              )}\n            </React.Fragment>\n          </section>\n        </React.Fragment>\n      )}\n    </React.Fragment>\n  );\n};\n\nRecommendation.propTypes = {\n  rule: PropTypes.object.isRequired,\n  ack: PropTypes.object.isRequired,\n  clusters: PropTypes.object.isRequired,\n  recId: PropTypes.string.isRequired,\n};\n\nexport { Recommendation };\n","import React, { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\n\nimport { Recommendation } from './Recommendation';\nimport {\n  useGetAffectedClustersQuery,\n  useGetRuleByIdQuery,\n} from '../../Services/SmartProxy';\nimport { useGetRecAcksQuery } from '../../Services/Acks';\nimport messages from '../../Messages';\n\nconst RecommendationWrapper = () => {\n  const intl = useIntl();\n  const { recommendationId } = useParams();\n  const rule = useGetRuleByIdQuery(recommendationId);\n  const ack = useGetRecAcksQuery({ ruleId: recommendationId });\n  const chrome = useChrome();\n\n  if (rule.isSuccess && rule.data?.content?.description) {\n    const subnav = `${rule.data.content.description} - Recommendations`;\n    chrome.updateDocumentTitle(\n      intl.formatMessage(messages.documentTitle, { subnav })\n    );\n  }\n  const clusters = useGetAffectedClustersQuery(recommendationId);\n\n  useEffect(() => {\n    rule.refetch();\n  }, [recommendationId]);\n\n  return (\n    <Recommendation\n      rule={rule}\n      ack={ack}\n      clusters={clusters}\n      recId={recommendationId}\n    />\n  );\n};\n\nexport default RecommendationWrapper;\n","import React from 'react';\nimport ContentLoader from 'react-content-loader';\n\nconst OneLineLoader = () => (\n  <ContentLoader height={20}>\n    <rect x=\"0\" y=\"0\" rx=\"4\" ry=\"4\" width=\"300\" height=\"20\" />\n  </ContentLoader>\n);\n\nexport { OneLineLoader };\n"],"names":["Breadcrumbs","current","intl","useIntl","location","useLocation","splitUrl","pathname","split","ouiaId","className","Link","to","relative","formatMessage","messages","insightsHeader","isActive","propTypes","PropTypes","Card","CardBody","AffectedClustersTable","query","rule","afterDisableFn","dispatch","useDispatch","useState","filteredRows","setFilteredRows","displayedRows","setDisplayedRows","disableRuleModalOpen","setDisableRuleModalOpen","selected","setSelected","undefined","host","setHost","isError","isUninitialized","isFetching","isSuccess","data","disabled","enabled","rows","filters","useSelector","affectedClustersState","perPage","limit","page","offset","allSelected","length","rowsFiltered","setRowsFiltered","loadingState","errorState","successState","noInput","noMatch","updateFilters","updateAffectedClustersFilters","addFilterParam","param","values","_addFilterParam","filterConfig","items","label","name","placeholder","filterByName","type","conditionalFilterType","text","filterValues","id","key","onChange","event","value","version","filterByVersion","checkbox","uniqBy","filter","r","meta","cluster_version","map","sort","a","b","compareSemVer","reverse","isDisabled","onSetPage","_e","pageNumber","newOffset","onSetPerPage","buildDisplayedRows","slice","cells","BASE_PATH","rule_id","AFFECTED_CLUSTERS_NAME_CELL","AFFECTED_CLUSTERS_VERSION_CELL","nA","AFFECTED_CLUSTERS_LAST_SEEN_CELL","DateFormat","extraTitle","lastSeen","date","variant","Tooltip","content","AFFECTED_CLUSTERS_IMPACTED_CELL","impacted","onSelect","isSelected","rowId","i","useEffect","allRows","valid","console","error","cluster","cluster_name","last_checked_at","row","toLowerCase","includes","fst","snd","d","sortDirection","sortIndex","localeCompare","Date","buildFilteredRows","handleModalToggle","DisableRule","isModalOpen","afterFn","hosts","PrimaryToolbar","pagination","itemCount","onPerPageSelect","activeFiltersConfig","buildFilterChips","FILTER_CATEGORIES","deleteTitle","resetFilters","onDelete","itemsToRemove","isAll","AFFECTED_CLUSTERS_INITIAL_STATE","item","newFilter","urlParam","Array","isArray","String","chips","_removeFilterParam","bulkSelect","count","title","selectNone","onClick","selectAll","checked","actionsConfig","actions","disableRuleForClusters","props","Table","ouiaSafe","AFFECTED_CLUSTERS_COLUMNS","fullWidth","colSpan","Loading","sortBy","index","direction","onSort","canSelectAll","rowIndex","TableHeader","TableBody","Pagination","PaginationVariant","bottom","onPageInput","isRequired","ViewHostAcks","clusters","recId","addNotification","notification","isLoading","refetch","hostAcks","setRows","unclean","setUnclean","columns","clusterName","transforms","cellWidth","justificationNote","dateDisabled","deleteAck","enableRuleForCluster","uuid","cluster_id","dismissable","description","justification","none","disabled_at","Button","isInline","size","enable","Modal","width","hostAckModalTitle","isOpen","onClose","defaultProps","Recommendation","ack","notify","actionsDropdownOpen","setActionsDropdownOpen","viewSystemsModalOpen","setViewSystemsModalOpen","ackData","ackIsFetching","refetchAck","ruleDate","updated_at","created_at","clustersData","clustersIsFetching","refetchClusters","adjustOCPRule","ackedClusters","enableRecForHosts","uuids","requests","Promise","all","timeout","recSuccessfullyEnabledForCluster","enableRule","Delete","BASE_URL","recSuccessfullyEnabled","messagesValues","useMemo","mapContentToValues","toggleModal","s","PageHeader","ErrorState","formatMessages","RuleDetailsMessagesKeys","product","AdvisorProduct","ocp","isDetailsPage","header","PageHeaderTitle","RuleLabels","rulesDetailsModifiedDate","publish_date","tags","LabelGroup","numLabels","isCompact","reduce","labels","tag","RULE_CATEGORIES","push","Label","color","category","onVoteClick","rating","Post","inRange","resolution_risk","resolutionRisk","resolutionRiskDesc","RISK_OF_CHANGE_DESC","Flex","FlexItem","align","default","Dropdown","position","toggle","DropdownToggle","onToggle","toggleIndicator","CaretDownIcon","dropdownItems","DropdownItem","disableRule","hosts_acked_count","CardHeader","Title","headingLevel","ruleIsDisabledForClusters","ruleIsDisabled","ruleIsDisabledForClustersBody","viewClusters","ruleIsDisabledWithJustificaiton","reason","ruleIsDisabledWithoutJustificaiton","CardFooter","c","enableRuleForClusters","affectedClusters","MessageState","icon","BellSlashIcon","ruleIsDisabledBody","recommendationId","useParams","useGetRuleByIdQuery","useGetRecAcksQuery","ruleId","chrome","useChrome","subnav","updateDocumentTitle","documentTitle","useGetAffectedClustersQuery","OneLineLoader","height","x","y","rx","ry"],"sourceRoot":""}