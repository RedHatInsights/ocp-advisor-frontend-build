{"version":3,"sources":["webpack:///./src/Routes.js","webpack:///./src/App.js","webpack:///./src/Store/index.js"],"names":["Clusters","lazy","paths","title","path","component","Routes","Suspense","fallback","Bullseye","Spinner","Switch","map","Route","key","Redirect","to","history","useHistory","useEffect","getRegistry","register","notifications","notificationsReducer","insights","chrome","init","identifyApp","unregister","on","event","push","navId","Fragment","localStorage","store","next","action","activeStore","getState","AdvisorStore","sessionStorage","setItem","JSON","stringify","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","middleware","promiseMiddleware","notificationsMiddleware","errorDescriptionKey"],"mappings":"4QAIMA,GAAWC,WAAK,kBACpB,4EAKIC,EAAQ,CACZ,CAAEC,MAAO,WAAYC,KAAM,YAAaC,UAAWL,GACnD,CAAEG,MAAO,WAAYC,KAAM,cAAeC,UAAWL,IAW1CM,EAAS,kBACpB,kBAAC,EAAAC,SAAD,CACEC,SACE,kBAAC,EAAAC,SAAD,KACE,kBAAC,EAAAC,QAAD,QAIJ,kBAAC,EAAAC,OAAD,KACGT,EAAMU,KAAI,SAACR,GAAD,OACT,kBAAC,EAAAS,MAAD,CAAOC,IAAKV,EAAKD,MAAOC,KAAMA,EAAKA,KAAMC,UAAWD,EAAKC,eAG3D,kBAAC,EAAAU,SAAD,CAAUC,GAAG,iB,qBCDnB,QAzBY,WACV,IAAMC,GAAUC,kBAgBhB,OAdAC,gBAAU,YACSC,UACRC,SAAS,CAAEC,cAAeC,OACnCC,SAASC,OAAOC,OAEhBF,SAASC,OAAOE,YAAY,eAC5B,IAAMC,EAAaJ,SAASC,OAAOI,GAAG,kBAAkB,SAACC,GAAD,OACtDb,EAAQc,KAAR,WAAiBD,EAAME,WAEzB,OAAO,WACLJ,OAED,IAGD,kBAAC,EAAAK,SAAD,KACE,kBAAC,KAAD,MACA,kBAAC3B,EAAD,S,uGCvBA4B,EAAe,SAACC,GAAD,OAAW,SAACC,GAAD,OAAU,SAACC,GACzCD,EAAKC,GACL,IAAMC,EAAcH,EAAMI,WAAWC,aACrCC,eAAeC,QAAQ,eAAgBC,KAAKC,UAAUN,OAGjD,SAASZ,IAAoB,IAClC,IAAMmB,EACJC,OAAOC,sCAAwCC,UAFf,mBAAZC,EAAY,yBAAZA,EAAY,gBAalC,OAVW7B,QACT,GADoB,UAGf6B,EAHe,CAIlBC,KACAC,QAAwB,CAAEC,oBAAqB,CAAC,SAAU,WAC1DlB,IAEFW","file":"js/11.7e20303b9589bad7d51e.js","sourcesContent":["import { Redirect, Route, Switch } from 'react-router-dom';\nimport React, { Suspense, lazy } from 'react';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\n\nconst Clusters = lazy(() =>\n  import(\n    /* webpackChunkName: \"Clusters\" */ './SmartComponents/Clusters/Clusters'\n  )\n);\n\nconst paths = [\n  { title: 'Clusters', path: '/clusters', component: Clusters },\n  { title: 'Clusters', path: '/clusters:?', component: Clusters },\n];\n\n/**\n * the Switch component changes routes depending on the path.\n *\n * Route properties:\n *      exact - path must match exactly,\n *      path - https://prod.foo.redhat.com:1337/insights/advisor/rules\n *      component - component to be rendered when a route has been chosen.\n */\nexport const Routes = () => (\n  <Suspense\n    fallback={\n      <Bullseye>\n        <Spinner />\n      </Bullseye>\n    }\n  >\n    <Switch>\n      {paths.map((path) => (\n        <Route key={path.title} path={path.path} component={path.component} />\n      ))}\n      {/* Finally, catch all unmatched routes */}\n      <Redirect to=\"/clusters\" />\n    </Switch>\n  </Suspense>\n);\n","import './App.scss';\n\nimport React, { Fragment, useEffect } from 'react';\n\nimport NotificationsPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport { Routes } from './Routes';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useHistory } from 'react-router-dom';\n\nconst App = () => {\n  const history = useHistory();\n\n  useEffect(() => {\n    const registry = getRegistry();\n    registry.register({ notifications: notificationsReducer });\n    insights.chrome.init();\n\n    insights.chrome.identifyApp('ocp-advisor');\n    const unregister = insights.chrome.on('APP_NAVIGATION', (event) =>\n      history.push(`/${event.navId}`)\n    );\n    return () => {\n      unregister();\n    };\n  }, []);\n\n  return (\n    <Fragment>\n      <NotificationsPortal />\n      <Routes />\n    </Fragment>\n  );\n};\n\nexport default App;\n","import { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport notificationsMiddleware from '@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware';\nimport { compose } from 'redux';\n\nlet registry;\n\nconst localStorage = (store) => (next) => (action) => {\n  next(action);\n  const activeStore = store.getState().AdvisorStore;\n  sessionStorage.setItem('AdvisorStore', JSON.stringify(activeStore));\n};\n\nexport function init(...middleware) {\n  const composeEnhancers =\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n  registry = getRegistry(\n    {},\n    [\n      ...middleware,\n      promiseMiddleware,\n      notificationsMiddleware({ errorDescriptionKey: ['detail', 'stack'] }),\n      localStorage,\n    ],\n    composeEnhancers\n  );\n  return registry;\n}\n\nexport function getStore() {\n  return registry.getStore();\n}\n\nexport function register(...args) {\n  return registry.register(...args);\n}\n"],"sourceRoot":""}