{"version":3,"file":"js/Recommendation.db109e4aef529eb55496.js","mappings":"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","sources":["webpack:///./src/Components/AffectedClustersTable/AffectedClustersTable.js","webpack:///./src/Components/Modals/ViewHostAcks.js","webpack:///./src/Utilities/Loaders.js","webpack:///./src/Components/Recommendation/Recommendation.js","webpack:///./src/Components/Recommendation/index.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter/conditionalFilterConstants';\nimport PrimaryToolbar from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport { EmptyTable } from '@redhat-cloud-services/frontend-components/EmptyTable';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components/TableToolbar';\n\nimport { Card, CardBody } from '@patternfly/react-core/dist/js/components/Card';\nimport { sortable } from '@patternfly/react-table/dist/js/components/Table/utils/decorators/sortable';\nimport { Table } from '@patternfly/react-table/dist/js/components/Table/Table';\nimport { TableBody } from '@patternfly/react-table/dist/js/components/Table/Body';\nimport { TableHeader } from '@patternfly/react-table/dist/js/components/Table/Header';\nimport { Bullseye } from '@patternfly/react-core/dist/js/layouts/Bullseye';\nimport {\n  Pagination,\n  PaginationVariant,\n} from '@patternfly/react-core/dist/js/components/Pagination/Pagination';\nimport { cellWidth } from '@patternfly/react-table';\n\nimport {\n  ErrorState,\n  NoAffectedClusters,\n  NoMatchingClusters,\n} from '../MessageState/EmptyStates';\nimport Loading from '../Loading/Loading';\nimport { updateAffectedClustersFilters } from '../../Services/Filters';\nimport messages from '../../Messages';\nimport DisableRule from '../Modals/DisableRule';\n\nconst AffectedClustersTable = ({ query, rule, afterDisableFn }) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n\n  const [filteredRows, setFilteredRows] = useState([]);\n  const [displayedRows, setDisplayedRows] = useState([]);\n  const [disableRuleModalOpen, setDisableRuleModalOpen] = useState(false);\n  const [chips, setChips] = useState([]);\n  const [selected, setSelected] = useState([]);\n  const [host, setHost] = useState(undefined);\n\n  const {\n    isError,\n    isUninitialized,\n    isFetching,\n    isSuccess,\n    /* the response contains two lists: `disabled` has clusters \n       for which the rec is disabled (acked), and `enable` contains\n       clusters that are affected by the rec */\n    data = { disabled: [], enabled: [] },\n  } = query;\n  const rows = data.enabled;\n  const filters = useSelector(({ filters }) => filters.affectedClustersState);\n  const perPage = filters.limit;\n  const page = filters.offset / filters.limit + 1;\n  const allSelected = selected.length === filteredRows.length;\n\n  const updateFilters = (filters) =>\n    dispatch(updateAffectedClustersFilters(filters));\n\n  const updateNameChip = (chips, newValue) => {\n    const newChips = chips;\n    const nameCategoryIndex = newChips.findIndex(\n      (chip) => chip.category === 'Name'\n    );\n    if (newValue === '') {\n      newChips.splice(nameCategoryIndex);\n    } else {\n      if (nameCategoryIndex === -1) {\n        newChips.push({ category: 'Name', chips: [{ name: newValue }] });\n      } else {\n        newChips[nameCategoryIndex] = {\n          category: 'Name',\n          chips: [{ name: newValue }],\n        };\n      }\n    }\n    return newChips;\n  };\n\n  const onChipDelete = () => {\n    // right now, only designed to treat the Name (text) filter\n    const newFilters = { ...filters, text: '' };\n    updateFilters(newFilters);\n  };\n\n  const onNameFilterChange = (value) => {\n    const newFilters = { ...filters, text: value, offset: 0 };\n    updateFilters(newFilters);\n  };\n\n  const filterConfig = {\n    items: [\n      {\n        label: 'Name',\n        placeholder: 'Filter by name',\n        type: conditionalFilterType.text,\n        filterValues: {\n          id: 'name-filter',\n          key: 'name-filter',\n          onChange: (_e, value) => onNameFilterChange(value),\n          value: filters.text,\n        },\n      },\n    ],\n    isDisabled: isError || (rows && rows.length === 0),\n  };\n\n  const onSort = (_e, index, direction) => {\n    updateFilters({ ...filters, sortIndex: index, sortDirection: direction });\n  };\n\n  const onSetPage = (_e, pageNumber) => {\n    const newOffset = pageNumber * filters.limit - filters.limit;\n    updateFilters({ ...filters, offset: newOffset });\n  };\n\n  const onSetPerPage = (_e, perPage) => {\n    updateFilters({ ...filters, limit: perPage });\n  };\n\n  // constructs array of rows (from the initial data) checking currently applied filters\n  const buildFilteredRows = (allRows, filters) => {\n    const rows = allRows.map((r) => ({\n      id: r.cluster,\n      cells: [r?.cluster_name || r.cluster],\n    }));\n    return rows\n      .filter((row) => {\n        // further filters conditions will be added soon\n        return row?.cells[0].includes(filters.text);\n      })\n      .sort((a, b) => {\n        if (filters.sortDirection === 'asc') {\n          return a?.cells[0].localeCompare(b?.cells[0]);\n        }\n        return b?.cells[0].localeCompare(a?.cells[0]);\n      });\n  };\n\n  const buildDisplayedRows = (rows) => {\n    return rows\n      .slice(perPage * (page - 1), perPage * (page - 1) + perPage)\n      .map((r) => ({\n        ...r,\n        cells: [\n          <span key={r.id}>\n            <Link to={`/clusters/${r.id}`}>{r.cells[0]}</Link>\n          </span>,\n        ],\n      }));\n  };\n\n  // if rowId === -1, then select all rows\n  const onSelect = (event, isSelected, rowId) => {\n    let rows;\n    rowId === -1\n      ? (rows = filteredRows.map((r) => ({ ...r, selected: isSelected })))\n      : (rows = filteredRows.map((r, i) => ({\n          ...r,\n          selected: i === rowId ? isSelected : r.selected,\n        })));\n    setSelected(rows.filter((r) => r.selected));\n    setFilteredRows(rows);\n    setDisplayedRows(buildDisplayedRows(rows));\n  };\n\n  useEffect(() => {\n    const newFilteredRows = buildFilteredRows(rows, filters);\n    const newDisplayedRows = buildDisplayedRows(newFilteredRows);\n    const newChips = updateNameChip(chips, filters.text);\n    setFilteredRows(newFilteredRows);\n    setDisplayedRows(newDisplayedRows);\n    setChips(newChips);\n  }, [query, filters]);\n\n  const handleModalToggle = (disableRuleModalOpen, host = undefined) => {\n    setDisableRuleModalOpen(disableRuleModalOpen);\n    setHost(host);\n  };\n\n  return (\n    <div id=\"affected-list-table\">\n      {disableRuleModalOpen && (\n        <DisableRule\n          handleModalToggle={handleModalToggle}\n          isModalOpen={disableRuleModalOpen}\n          rule={rule}\n          afterFn={afterDisableFn}\n          hosts={selected}\n          host={host}\n        />\n      )}\n      <PrimaryToolbar\n        filterConfig={filterConfig}\n        pagination={{\n          itemCount: filteredRows.length,\n          page,\n          perPage,\n          onSetPage: onSetPage,\n          onPerPageSelect: onSetPerPage,\n        }}\n        activeFiltersConfig={\n          isError || (rows && rows.length === 0)\n            ? undefined\n            : {\n                filters: chips,\n                onDelete: onChipDelete,\n              }\n        }\n        bulkSelect={{\n          count: selected.length,\n          items: [\n            {\n              title: intl.formatMessage(messages.selectNone),\n              onClick: (event) => onSelect(event, false, -1),\n            },\n            {\n              title: intl.formatMessage(messages.selectAll, {\n                items: filteredRows?.length || 0,\n              }),\n              onClick: (event) => onSelect(event, true, -1),\n            },\n          ],\n          checked: allSelected,\n          onSelect: (event) =>\n            allSelected\n              ? onSelect(event, false, -1)\n              : onSelect(event, true, -1),\n        }}\n        actionsConfig={{\n          actions: [\n            '',\n            {\n              label: intl.formatMessage(messages.disableRuleForClusters),\n              props: { isDisabled: selected.length === 0 },\n              onClick: () => handleModalToggle(true),\n            },\n          ],\n        }}\n      />\n      <Table\n        aria-label=\"Table of affected clusters\"\n        ouiaId=\"affectedClustersTable\"\n        variant=\"compact\"\n        cells={[\n          {\n            title: intl.formatMessage(messages.name),\n            transforms: [sortable, cellWidth(100)],\n          },\n        ]}\n        rows={displayedRows}\n        sortBy={{\n          index: filters.sortIndex,\n          direction: filters.sortDirection,\n        }}\n        onSort={onSort}\n        canSelectAll={false}\n        onSelect={displayedRows?.length > 0 ? onSelect : undefined}\n        actions={[\n          {\n            title: 'Disable recommendation for cluster',\n            onClick: (event, rowIndex) => {\n              console.log(filteredRows[rowIndex]);\n              return handleModalToggle(true, filteredRows[rowIndex].id);\n            },\n          },\n        ]}\n      >\n        <TableHeader />\n        {(isUninitialized || isFetching) && <Loading />}\n        {isError && (\n          <Card id=\"error-state-message\">\n            <CardBody>\n              <ErrorState />\n            </CardBody>\n          </Card>\n        )}\n        {isSuccess && rows.length === 0 && (\n          <Card id=\"empty-state-message\">\n            <CardBody>\n              <NoAffectedClusters />\n            </CardBody>\n          </Card>\n        )}\n        {isSuccess &&\n          rows.length > 0 &&\n          (filteredRows.length > 0 ? (\n            <TableBody />\n          ) : (\n            <EmptyTable>\n              <Bullseye>\n                <NoMatchingClusters />\n              </Bullseye>\n            </EmptyTable>\n          ))}\n      </Table>\n      <TableToolbar isFooter className=\"ins-c-inventory__table--toolbar\">\n        <Pagination\n          variant={PaginationVariant.bottom}\n          itemCount={filteredRows.length}\n          page={page}\n          perPage={perPage}\n          onSetPage={onSetPage}\n          onPerPageSelect={onSetPerPage}\n          onPageInput={onSetPage}\n        />\n      </TableToolbar>\n    </div>\n  );\n};\n\nAffectedClustersTable.propTypes = {\n  query: PropTypes.shape({\n    isError: PropTypes.bool.isRequired,\n    isUninitialized: PropTypes.bool.isRequired,\n    isFetching: PropTypes.bool.isRequired,\n    isSuccess: PropTypes.bool.isRequired,\n    data: PropTypes.array,\n  }),\n  rule: PropTypes.object,\n  afterDisableFn: PropTypes.func,\n};\n\nexport { AffectedClustersTable };\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { List } from 'react-content-loader';\nimport { useIntl } from 'react-intl';\nimport { useDispatch } from 'react-redux';\n\nimport {\n  Table,\n  TableBody,\n  TableHeader,\n  cellWidth,\n} from '@patternfly/react-table';\nimport { Button } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { Modal } from '@patternfly/react-core/dist/js/components/Modal/Modal';\nimport OutlinedBellIcon from '@patternfly/react-icons/dist/js/icons/outlined-bell-icon';\nimport { addNotification as notification } from '@redhat-cloud-services/frontend-components-notifications/';\n\nimport messages from '../../Messages';\nimport { enableRuleForCluster } from '../../Services/Acks';\n\nconst ViewHostAcks = ({\n  handleModalToggle,\n  isModalOpen,\n  clusters,\n  recId,\n  afterFn,\n}) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const addNotification = (data) => dispatch(notification(data));\n  const { data, isFetching, isLoading, refetch } = clusters;\n  const hostAcks = data?.disabled || [];\n  const [rows, setRows] = useState([]);\n  const [unclean, setUnclean] = useState(false);\n\n  const columns = [\n    {\n      title: intl.formatMessage(messages.clusterName),\n\n      transforms: [cellWidth(50)],\n    },\n    {\n      title: intl.formatMessage(messages.justificationNote),\n\n      transforms: [cellWidth(25)],\n    },\n    {\n      title: intl.formatMessage(messages.dateDisabled),\n\n      transforms: [cellWidth(15)],\n    },\n    '',\n  ];\n\n  const deleteAck = async (host) => {\n    try {\n      await enableRuleForCluster({ uuid: host.cluster_id, recId });\n      refetch();\n      setUnclean(true);\n    } catch (error) {\n      handleModalToggle(false);\n      addNotification({\n        variant: 'danger',\n        dismissable: true,\n        title: intl.formatMessage(messages.error),\n        description: `${error}`,\n      });\n    }\n  };\n\n  useEffect(() => {\n    const rows = hostAcks?.map((item) => ({\n      cells: [\n        item.display_name || item.cluster_id,\n        item.justification || intl.formatMessage(messages.none),\n        {\n          title: (\n            <DateFormat date={new Date(item.disabled_at)} type=\"onlyDate\" />\n          ),\n        },\n        {\n          title: (\n            <Button\n              key={item.cluster_id}\n              isInline\n              variant=\"link\"\n              onClick={() => deleteAck(item)}\n            >\n              <OutlinedBellIcon size=\"sm\" />\n              {` ${intl.formatMessage(messages.enable)}`}\n            </Button>\n          ),\n        },\n      ],\n    }));\n\n    if (!isLoading && hostAcks.length === 0) {\n      afterFn();\n      handleModalToggle(false);\n    }\n    setRows(rows);\n  }, [hostAcks]);\n\n  return (\n    <Modal\n      width={'75%'}\n      title={intl.formatMessage(messages.hostAckModalTitle)}\n      isOpen={isModalOpen}\n      onClose={() => {\n        unclean && afterFn();\n        handleModalToggle(false);\n      }}\n    >\n      {!isFetching ? (\n        <Table aria-label=\"host-ack-table\" rows={rows} cells={columns}>\n          <TableHeader />\n          <TableBody />\n        </Table>\n      ) : (\n        <Table\n          aria-label=\"host-ack-table\"\n          rows={[\n            {\n              cells: [{ props: { colSpan: 3 }, title: <List /> }],\n            },\n          ]}\n          cells={columns}\n        >\n          <TableHeader />\n          <TableBody />\n        </Table>\n      )}\n    </Modal>\n  );\n};\n\nViewHostAcks.propTypes = {\n  isModalOpen: PropTypes.bool,\n  handleModalToggle: PropTypes.func,\n  clusters: PropTypes.object,\n  recId: PropTypes.string,\n  afterFn: PropTypes.func,\n};\n\nViewHostAcks.defaultProps = {\n  isModalOpen: false,\n  handleModalToggle: () => undefined,\n  clusters: {},\n  recId: '',\n  afterFn: () => undefined,\n};\n\nexport default ViewHostAcks;\n","import React from 'react';\nimport ContentLoader from 'react-content-loader';\n\nconst OneLineLoader = () => (\n  <ContentLoader height={30}>\n    <rect x=\"0\" y=\"0\" rx=\"4\" ry=\"4\" width=\"300\" height=\"30\" />\n  </ContentLoader>\n);\n\nexport { OneLineLoader };\n","import './Recommendation.scss';\n\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\n\nimport {\n  Card,\n  CardBody,\n  CardFooter,\n  CardHeader,\n} from '@patternfly/react-core/dist/js/components/Card';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { Label } from '@patternfly/react-core/dist/js/components/Label/Label';\nimport { Title } from '@patternfly/react-core/dist/js/components/Title/Title';\nimport { LabelGroup } from '@patternfly/react-core/dist/js/components/LabelGroup';\nimport BellSlashIcon from '@patternfly/react-icons/dist/js/icons/bell-slash-icon';\nimport CaretDownIcon from '@patternfly/react-icons/dist/js/icons/caret-down-icon';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { Button } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport { Dropdown } from '@patternfly/react-core/dist/js/components/Dropdown/Dropdown';\nimport { DropdownItem } from '@patternfly/react-core/dist/js/components/Dropdown/DropdownItem';\nimport { DropdownToggle } from '@patternfly/react-core/dist/js/components/Dropdown/DropdownToggle';\nimport { Flex } from '@patternfly/react-core/dist/js/layouts/Flex/Flex';\nimport { FlexItem } from '@patternfly/react-core/dist/js/layouts/Flex/FlexItem';\nimport { ErrorState } from '@redhat-cloud-services/frontend-components/ErrorState';\n\nimport Breadcrumbs from '../Breadcrumbs';\nimport RuleLabels from '../Labels/RuleLabels';\nimport { FILTER_CATEGORIES, RULE_CATEGORIES } from '../../AppConstants';\nimport messages from '../../Messages';\nimport RuleDetails from './RuleDetails';\nimport Loading from '../Loading/Loading';\nimport { adjustOCPRule } from '../../Utilities/Rule';\nimport MessageState from '../MessageState/MessageState';\nimport { AffectedClustersTable } from '../AffectedClustersTable/AffectedClustersTable';\nimport { Delete, Post } from '../../Utilities/Api';\nimport { BASE_URL } from '../../Services/SmartProxy';\nimport DisableRule from '../Modals/DisableRule';\nimport ViewHostAcks from '../Modals/ViewHostAcks';\nimport { OneLineLoader } from '../../Utilities/Loaders';\nimport { enableRuleForCluster } from '../../Services/Acks';\n\nconst Recommendation = ({ rule, ack, clusters, match }) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const notify = (data) => dispatch(addNotification(data));\n  const recId = match.params.recommendationId;\n  const [disableRuleModalOpen, setDisableRuleModalOpen] = useState(false);\n  const [actionsDropdownOpen, setActionsDropdownOpen] = useState(false);\n  const [viewSystemsModalOpen, setViewSystemsModalOpen] = useState(false);\n\n  // rule's info\n  const {\n    isError,\n    isUninitialized,\n    isLoading,\n    isFetching,\n    isSuccess,\n    data,\n    refetch,\n  } = rule;\n  // justification note, last time acknowledged, etc.\n  const { data: ackData, isFetching: ackIsFetching, refetch: refetchAck } = ack;\n  // affected and acked clusters lists\n  const {\n    data: clustersData,\n    isFetching: clustersIsFetching,\n    refetch: refetchClusters,\n  } = clusters;\n\n  const content =\n    isSuccess && data ? adjustOCPRule(data.content, recId) : undefined;\n  const ackedClusters =\n    !clustersIsFetching && clustersData ? clustersData.disabled : undefined;\n\n  const afterDisableFn = async () => {\n    refetch();\n    refetchAck();\n    refetchClusters();\n  };\n\n  const handleModalToggle = (disableRuleModalOpen) => {\n    setDisableRuleModalOpen(disableRuleModalOpen);\n  };\n\n  const enableRecForHosts = async ({ uuids }) => {\n    try {\n      const requests = uuids.map((uuid) =>\n        enableRuleForCluster({ uuid, recId })\n      );\n      await Promise.all(requests);\n      refetch();\n      refetchAck();\n      refetchClusters();\n      notify({\n        variant: 'success',\n        timeout: true,\n        dismissable: true,\n        title: intl.formatMessage(messages.recSuccessfullyEnabledForCluster),\n      });\n    } catch (error) {\n      notify({\n        variant: 'danger',\n        dismissable: true,\n        title: intl.formatMessage(messages.error),\n        description: `${error}`,\n      });\n    }\n  };\n\n  const enableRule = async (rule) => {\n    try {\n      await Delete(`${BASE_URL}/ack/${rule.rule_id}/`);\n      notify({\n        variant: 'success',\n        timeout: true,\n        dismissable: true,\n        title: intl.formatMessage(messages.recSuccessfullyEnabled),\n      });\n      refetch();\n    } catch (error) {\n      handleModalToggle(false);\n      notify({\n        variant: 'danger',\n        dismissable: true,\n        title: intl.formatMessage(messages.error),\n        description: `${error}`,\n      });\n    }\n  };\n\n  return (\n    <React.Fragment>\n      {viewSystemsModalOpen && (\n        <ViewHostAcks\n          handleModalToggle={(toggleModal) =>\n            setViewSystemsModalOpen(toggleModal)\n          }\n          isModalOpen={viewSystemsModalOpen}\n          clusters={clusters}\n          afterFn={() => refetchClusters()}\n          recId={recId}\n        />\n      )}\n      {disableRuleModalOpen && (\n        <DisableRule\n          handleModalToggle={handleModalToggle}\n          isModalOpen={disableRuleModalOpen}\n          rule={content}\n          afterFn={afterDisableFn}\n        />\n      )}\n      <PageHeader className=\"pageHeaderOverride\">\n        <Breadcrumbs current={content?.description || recId} />\n      </PageHeader>\n      {(isUninitialized || isLoading || isFetching) && (\n        <Main>\n          <Loading />\n        </Main>\n      )}\n      {isError && (\n        <Main>\n          <ErrorState />\n        </Main>\n      )}\n      {!(isUninitialized || isLoading || isFetching) && isSuccess && (\n        <React.Fragment>\n          <Main className=\"pf-m-light pf-u-pt-sm\">\n            <RuleDetails\n              isOpenShift\n              isDetailsPage\n              rule={content}\n              header={\n                <React.Fragment>\n                  <PageHeaderTitle\n                    title={\n                      <React.Fragment>\n                        {content.description} <RuleLabels rule={content} />\n                      </React.Fragment>\n                    }\n                  />\n                  <p>\n                    {intl.formatMessage(messages.rulesDetailsPubishdate, {\n                      date: (\n                        <DateFormat\n                          date={new Date(content.publish_date)}\n                          type=\"onlyDate\"\n                        />\n                      ),\n                    })}\n                    {content.tags &&\n                      (Array.isArray(content.tags) ? (\n                        <LabelGroup className=\"categoryLabels\" numLabels={1}>\n                          {content.tags.reduce((labels, tag) => {\n                            if (RULE_CATEGORIES[tag]) {\n                              labels.push(\n                                <Label key={`label-${tag}`} color=\"blue\">\n                                  {\n                                    FILTER_CATEGORIES.category.values[\n                                      RULE_CATEGORIES[tag] - 1\n                                    ].label\n                                  }\n                                </Label>\n                              );\n                            }\n                            return labels;\n                          }, [])}\n                        </LabelGroup>\n                      ) : (\n                        <Label>{content.tags}</Label>\n                      ))}\n                  </p>\n                </React.Fragment>\n              }\n              onFeedbackChanged={async (rule, rating) =>\n                await Post(`${BASE_URL}/v2/rating`, {}, { rule, rating })\n              }\n            >\n              <Flex>\n                <FlexItem align={{ default: 'alignRight' }}>\n                  <Dropdown\n                    className=\"ins-c-rec-details__actions_dropdown\"\n                    onSelect={() =>\n                      setActionsDropdownOpen(!actionsDropdownOpen)\n                    }\n                    position=\"right\"\n                    ouiaId=\"actions\"\n                    toggle={\n                      <DropdownToggle\n                        onToggle={(actionsDropdownOpen) =>\n                          setActionsDropdownOpen(actionsDropdownOpen)\n                        }\n                        toggleIndicator={CaretDownIcon}\n                      >\n                        {intl.formatMessage(messages.actions)}\n                      </DropdownToggle>\n                    }\n                    isOpen={actionsDropdownOpen}\n                    dropdownItems={\n                      content?.disabled\n                        ? [\n                            <DropdownItem\n                              key=\"link\"\n                              ouiaId=\"enable\"\n                              onClick={() => {\n                                enableRule(rule);\n                              }}\n                            >\n                              {intl.formatMessage(messages.enableRule)}\n                            </DropdownItem>,\n                          ]\n                        : [\n                            <DropdownItem\n                              key=\"link\"\n                              ouiaId=\"disable\"\n                              onClick={() => {\n                                handleModalToggle(true);\n                              }}\n                            >\n                              {intl.formatMessage(messages.disableRule)}\n                            </DropdownItem>,\n                          ]\n                    }\n                  />\n                </FlexItem>\n              </Flex>\n            </RuleDetails>\n          </Main>\n          <Main>\n            <React.Fragment>\n              {(content?.hosts_acked_count ||\n                ackedClusters?.length > 0 ||\n                content?.disabled) && (\n                <Card className=\"cardOverride\">\n                  <CardHeader>\n                    <Title headingLevel=\"h4\" size=\"xl\">\n                      <BellSlashIcon size=\"sm\" />\n                      &nbsp;\n                      {intl.formatMessage(\n                        (content?.hosts_acked_count ||\n                          ackedClusters?.length > 0) &&\n                          !content?.disabled\n                          ? messages.ruleIsDisabledForClusters\n                          : messages.ruleIsDisabled\n                      )}\n                    </Title>\n                  </CardHeader>\n                  <CardBody>\n                    {(content?.hosts_acked_count ||\n                      ackedClusters?.length > 0) &&\n                    !content?.disabled ? (\n                      <React.Fragment>\n                        {intl.formatMessage(\n                          messages.ruleIsDisabledForClustersBody,\n                          {\n                            clusters: ackedClusters?.length,\n                          }\n                        )}\n                        {!clustersIsFetching && ackedClusters?.length > 0 ? (\n                          <React.Fragment>\n                            &nbsp;\n                            <Button\n                              isInline\n                              variant=\"link\"\n                              onClick={() => setViewSystemsModalOpen(true)}\n                              ouiaId=\"viewSystems\"\n                            >\n                              {intl.formatMessage(messages.viewClusters)}\n                            </Button>\n                          </React.Fragment>\n                        ) : (\n                          <OneLineLoader />\n                        )}\n                      </React.Fragment>\n                    ) : (\n                      !ackIsFetching &&\n                      ackData && (\n                        <React.Fragment>\n                          {intl.formatMessage(\n                            messages.ruleIsDisabledJustification\n                          )}\n                          <i>\n                            {ackData?.justification ||\n                              intl.formatMessage(messages.none)}\n                          </i>\n                          {(ackData?.updated_at || ackData?.created_at) && (\n                            <span>\n                              &nbsp;\n                              <DateFormat\n                                date={\n                                  new Date(\n                                    ackData?.updated_at || ackData?.created_at\n                                  )\n                                }\n                                type=\"onlyDate\"\n                              />\n                            </span>\n                          )}\n                        </React.Fragment>\n                      )\n                    )}\n                  </CardBody>\n                  <CardFooter>\n                    {(content?.hosts_acked_count ||\n                      ackedClusters?.length > 0) &&\n                    !content?.disabled ? (\n                      !clustersIsFetching && ackedClusters ? (\n                        <Button\n                          isInline\n                          variant=\"link\"\n                          onClick={() =>\n                            enableRecForHosts({\n                              uuids: ackedClusters.map((c) => c.cluster_id),\n                            })\n                          }\n                          ouiaId=\"bulkHost\"\n                        >\n                          {intl.formatMessage(messages.enableRuleForClusters)}\n                        </Button>\n                      ) : (\n                        <OneLineLoader />\n                      )\n                    ) : (\n                      <Button\n                        isInline\n                        variant=\"link\"\n                        onClick={() => enableRule(rule)}\n                        ouiaId=\"rule\"\n                      >\n                        {intl.formatMessage(messages.enableRule)}\n                      </Button>\n                    )}\n                  </CardFooter>\n                </Card>\n              )}\n              {!content?.disabled && (\n                <React.Fragment>\n                  <Title className=\"titleOverride\" headingLevel=\"h3\" size=\"2xl\">\n                    {intl.formatMessage(messages.affectedClusters)}\n                  </Title>\n                  <AffectedClustersTable\n                    query={clusters}\n                    rule={content}\n                    afterDisableFn={afterDisableFn}\n                  />\n                </React.Fragment>\n              )}\n              {content?.disabled && (\n                <MessageState\n                  icon={BellSlashIcon}\n                  title={intl.formatMessage(messages.ruleIsDisabled)}\n                  text={intl.formatMessage(messages.ruleIsDisabledBody)}\n                />\n              )}\n            </React.Fragment>\n          </Main>\n        </React.Fragment>\n      )}\n    </React.Fragment>\n  );\n};\n\nRecommendation.propTypes = {\n  rule: PropTypes.object.isRequired,\n  ack: PropTypes.object.isRequired,\n  clusters: PropTypes.object.isRequired,\n  match: PropTypes.object.isRequired,\n};\n\nexport { Recommendation };\n","import React, { useEffect } from 'react';\nimport { useParams, useRouteMatch } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\n\nimport { Recommendation } from './Recommendation';\nimport {\n  useGetAffectedClustersQuery,\n  useGetRuleByIdQuery,\n} from '../../Services/SmartProxy';\nimport { useGetRecAcksQuery } from '../../Services/Acks';\nimport messages from '../../Messages';\n\nconst RecommendationWrapper = () => {\n  const intl = useIntl();\n  const rule = useGetRuleByIdQuery(useParams().recommendationId);\n  const ack = useGetRecAcksQuery({ ruleId: useParams().recommendationId });\n  if (rule.isSuccess && rule.data?.content?.description) {\n    const subnav = `${rule.data.content.description} - Recommendations`;\n    document.title = intl.formatMessage(messages.documentTitle, { subnav });\n  }\n  const clusters = useGetAffectedClustersQuery(useParams().recommendationId);\n\n  useEffect(() => {\n    rule.refetch();\n  }, [useParams().recommendationId]);\n\n  return (\n    <Recommendation\n      rule={rule}\n      ack={ack}\n      clusters={clusters}\n      match={useRouteMatch()}\n    />\n  );\n};\n\nexport default RecommendationWrapper;\n"],"names":["AffectedClustersTable","query","rule","afterDisableFn","intl","useIntl","dispatch","useDispatch","useState","filteredRows","setFilteredRows","displayedRows","setDisplayedRows","disableRuleModalOpen","setDisableRuleModalOpen","chips","setChips","selected","setSelected","undefined","host","setHost","isError","isUninitialized","isFetching","isSuccess","data","rows","disabled","enabled","filters","useSelector","affectedClustersState","perPage","limit","page","offset","allSelected","length","updateFilters","updateAffectedClustersFilters","filterConfig","items","label","placeholder","type","conditionalFilterType","filterValues","id","key","onChange","_e","value","newFilters","text","onNameFilterChange","isDisabled","onSetPage","pageNumber","newOffset","onSetPerPage","buildDisplayedRows","slice","map","r","cells","Link","to","onSelect","event","isSelected","rowId","i","filter","useEffect","newFilteredRows","allRows","cluster","cluster_name","row","includes","sort","a","b","sortDirection","localeCompare","buildFilteredRows","newDisplayedRows","newChips","newValue","nameCategoryIndex","findIndex","chip","category","splice","push","name","updateNameChip","handleModalToggle","DisableRule","isModalOpen","afterFn","hosts","PrimaryToolbar","pagination","itemCount","onPerPageSelect","activeFiltersConfig","onDelete","bulkSelect","count","title","formatMessage","messages","onClick","checked","actionsConfig","actions","props","Table","ouiaId","variant","transforms","sortable","cellWidth","sortBy","index","sortIndex","direction","onSort","canSelectAll","rowIndex","console","log","Loading","Card","CardBody","EmptyTable","Bullseye","TableToolbar","isFooter","className","Pagination","PaginationVariant","onPageInput","propTypes","PropTypes","ViewHostAcks","clusters","recId","addNotification","notification","isLoading","refetch","hostAcks","setRows","unclean","setUnclean","columns","deleteAck","enableRuleForCluster","uuid","cluster_id","dismissable","description","item","display_name","justification","DateFormat","date","Date","disabled_at","Button","isInline","size","Modal","width","isOpen","onClose","colSpan","TableHeader","TableBody","defaultProps","OneLineLoader","height","x","y","rx","ry","Recommendation","ack","match","notify","params","recommendationId","actionsDropdownOpen","setActionsDropdownOpen","viewSystemsModalOpen","setViewSystemsModalOpen","ackData","ackIsFetching","refetchAck","clustersData","clustersIsFetching","refetchClusters","content","adjustOCPRule","ackedClusters","enableRecForHosts","uuids","requests","Promise","all","timeout","enableRule","Delete","BASE_URL","rule_id","toggleModal","PageHeader","Breadcrumbs","current","Main","ErrorState","RuleDetails","isOpenShift","isDetailsPage","header","PageHeaderTitle","RuleLabels","publish_date","tags","Array","isArray","LabelGroup","numLabels","reduce","labels","tag","RULE_CATEGORIES","Label","color","FILTER_CATEGORIES","onFeedbackChanged","rating","Post","Flex","FlexItem","align","default","Dropdown","position","toggle","DropdownToggle","onToggle","toggleIndicator","CaretDownIcon","dropdownItems","DropdownItem","hosts_acked_count","CardHeader","Title","headingLevel","updated_at","created_at","CardFooter","c","MessageState","icon","BellSlashIcon","useGetRuleByIdQuery","useParams","useGetRecAcksQuery","ruleId","subnav","document","useGetAffectedClustersQuery","useRouteMatch"],"sourceRoot":""}