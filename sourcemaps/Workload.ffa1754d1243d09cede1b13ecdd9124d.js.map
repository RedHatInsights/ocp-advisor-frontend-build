{"version":3,"file":"js/Workload.47ebd1d2e7aea0077e49.js","mappings":"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","sources":["webpack:///./src/Components/WorkloadHeader/WorkloadHeader.js","webpack:///./src/Components/WorkloadHeader/index.js","webpack:///./src/Components/ExpandedRulesDetails.js/ExpandedRulesDetails.js","webpack:///./src/Components/WorkloadRules/WorkloadRules.js","webpack:///./src/Components/Workload/Workload.js","webpack:///./src/Components/Workload/index.js"],"sourcesContent":["import React from 'react';\n\nimport {\n  Grid,\n  GridItem,\n  Stack,\n  StackItem,\n  Title,\n} from '@patternfly/react-core';\nimport Skeleton from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { OneLineLoader } from '../../Utilities/Loaders';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport PropTypes from 'prop-types';\n\nexport const WorkloadHeader = ({ workloadData, namespaceId, clusterId }) => {\n  const { isUninitialized, isFetching, data: workload } = workloadData;\n  return (\n    <Grid id=\"workload-header\" md={12} hasGutter>\n      <GridItem span={8}>\n        <Title\n          size=\"2xl\"\n          headingLevel=\"h1\"\n          id=\"cluster-header-title\"\n          ouiaId=\"cluster-name\"\n        >\n          {isUninitialized || isFetching ? (\n            <>\n              <Skeleton size=\"sm\" />\n              <Skeleton size=\"sm\" />\n            </>\n          ) : (\n            <>\n              <p>{workload.cluster.display_name}</p>\n              <p>{workload.namespace.name}</p>\n            </>\n          )}\n        </Title>\n      </GridItem>\n      <GridItem>\n        <Stack>\n          <StackItem id=\"workload-header-uuid\">\n            <span>Cluster UUID:</span> <span>{clusterId}</span>{' '}\n            <span>Namespace UUID:</span> <span>{namespaceId}</span>\n          </StackItem>\n          <StackItem id=\"workload-header-last-seen\">\n            <span>Last seen: </span>\n            <span>\n              {isUninitialized || isFetching ? (\n                <OneLineLoader />\n              ) : workload?.metadata?.last_checked_at ? (\n                <DateFormat\n                  date={workload.metadata.last_checked_at}\n                  type=\"exact\"\n                />\n              ) : (\n                <>Unknown</>\n              )}\n            </span>\n          </StackItem>\n        </Stack>\n      </GridItem>\n    </Grid>\n  );\n};\n\nWorkloadHeader.propTypes = {\n  clusterId: PropTypes.string.isRequired,\n  namespaceId: PropTypes.string.isRequired,\n  workloadData: PropTypes.shape({\n    isUninitialized: PropTypes.bool.isRequired,\n    isFetching: PropTypes.bool.isRequired,\n    data: PropTypes.shape({\n      namespace: PropTypes.shape({\n        uuid: PropTypes.string,\n        name: PropTypes.string,\n      }),\n      cluster: PropTypes.shape({\n        uuid: PropTypes.string,\n        display_name: PropTypes.string,\n      }),\n      status: PropTypes.string,\n    }),\n  }),\n};\n","import React from 'react';\nimport { WorkloadHeader } from './WorkloadHeader';\nimport { useParams } from 'react-router-dom';\nimport { useGetWorkloadByIdQuery } from '../../Services/SmartProxy';\n\nconst WorkloadsHeaderWrapper = () => {\n  const { namespaceId, clusterId } = useParams();\n  const workloadData = useGetWorkloadByIdQuery({\n    namespaceId,\n    clusterId,\n  });\n\n  return (\n    <WorkloadHeader\n      workloadData={workloadData}\n      namespaceId={namespaceId}\n      clusterId={clusterId}\n    />\n  );\n};\n\nexport default WorkloadsHeaderWrapper;\n","import React from 'react';\nimport {\n  BullseyeIcon,\n  InfoCircleIcon,\n  ThumbsUpIcon,\n} from '@patternfly/react-icons';\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  CodeBlock,\n  Divider,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\nimport { Table, Tbody, Td, Th, Thead, Tr } from '@patternfly/react-table';\nimport PropTypes from 'prop-types';\nimport TemplateProcessor from '@redhat-cloud-services/frontend-components-advisor-components/TemplateProcessor/TemplateProcessor';\n\nconst columnNames = {\n  object: 'Object ID',\n  kind: 'Kind',\n};\nconst code = `oc get namespace -o jsonpath={range .items[*]}{.metadata.name}{\"\\t\"}{.metadata.uid}{\"\\n\"}{end}\n  oc -n <namespace> get <resourceKind> -o jsonpath={range .items[*]}{.metadata.name}{\"\\t\"}{.metadata.uid}{\"\\n\"}{end}`;\n\nconst ExpandedRulesDetails = ({ more_info, resolution, objects }) => {\n  return (\n    <Card className=\"ins-c-report-details\" style={{ boxShadow: 'none' }}>\n      <CardBody>\n        <Stack\n          className=\"ins-c-report-details__cards-stack\"\n          widget-type=\"InsightsRulesCard\"\n          hasGutter\n        >\n          <StackItem>\n            <Card isCompact isPlain>\n              <CardHeader>\n                <BullseyeIcon className=\"ins-c-report-details__icon\" />\n                <strong>Detected issues</strong>\n              </CardHeader>\n              <CardBody>\n                This should be a reason field and extradata should provide us an\n                array of reasons to list here\n              </CardBody>\n            </Card>\n          </StackItem>\n          <Divider />\n          <StackItem>\n            <Card isCompact isPlain>\n              <CardHeader>\n                <ThumbsUpIcon className=\"ins-c-report-details__icon\" />\n                <strong>Steps to resolve</strong>\n              </CardHeader>\n              <CardBody>\n                <TemplateProcessor template={resolution} />\n              </CardBody>\n            </Card>\n          </StackItem>\n          <Table borders={'compactBorderless'}>\n            <Thead>\n              <Tr>\n                <Th modifier=\"fitContent\">{columnNames.object}</Th>\n                <Th modifier=\"fitContent\">{columnNames.kind}</Th>\n              </Tr>\n            </Thead>\n            <Tbody>\n              {objects.slice(0, 3).map((object, key) => (\n                <Tr key={key}>\n                  <Td dataLabel={columnNames.object}>{object.uid}</Td>\n                  <Td dataLabel={columnNames.kind}>{object.kind}</Td>\n                </Tr>\n              ))}\n            </Tbody>\n          </Table>\n          <Button variant=\"link\" isInline>\n            View all objects\n          </Button>\n          <br />\n          <CardHeader>\n            <strong>Note:</strong>\n          </CardHeader>\n          <CardBody>\n            Red Hat avoids gathering and processing namespace and resource names\n            as these may reveal confidential information. Namespaces and\n            resources are identified by their UIDs instead. You can use\n            in-cluster commands like the ones below to translate UIDs of\n            affected resources to their names.\n            <CodeBlock>{code}</CodeBlock>\n          </CardBody>\n          <React.Fragment>\n            <Divider />\n            <StackItem>\n              <Card isCompact isPlain>\n                <CardHeader>\n                  <InfoCircleIcon className=\"ins-c-report-details__icon\" />\n                  <strong>Additional info</strong>\n                </CardHeader>\n                <CardBody>{more_info}</CardBody>\n              </Card>\n            </StackItem>\n          </React.Fragment>\n        </Stack>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default ExpandedRulesDetails;\n\nExpandedRulesDetails.propTypes = {\n  extra_data: PropTypes.string.isRequired,\n  more_info: PropTypes.string.isRequired,\n  resolution: PropTypes.string.isRequired,\n  objects: PropTypes.arrayOf({\n    kind: PropTypes.string,\n    uid: PropTypes.string,\n  }),\n};\n","import React, { useEffect, useState } from 'react';\nimport {\n  Table,\n  TableBody,\n  TableHeader,\n  TableVariant,\n} from '@patternfly/react-table';\nimport PrimaryToolbar from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport {\n  WORKLOADS_RULES_FILTER_CONFIG,\n  WORKLOAD_RULES_COLUMNS,\n  WORKLOAD_RULES_FILTER_CATEGORIES,\n} from '../../AppConstants';\nimport PropTypes from 'prop-types';\nimport Loading from '../Loading/Loading';\nimport { ErrorState } from '../MessageState/EmptyStates';\n// import DateFormat from '@redhat-cloud-services/frontend-components/DateFormat/DateFormat';\nimport InsightsLabel from '@redhat-cloud-services/frontend-components/InsightsLabel';\nimport ExpandedRulesDetails from '../ExpandedRulesDetails.js/ExpandedRulesDetails';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  WORKLOADS_RECS_TABLE_INITIAL_STATE,\n  resetFilters,\n  updateWorkloadsRecsListFilters,\n} from '../../Services/Filters';\nimport {\n  addFilterParam as _addFilterParam,\n  passFilterWorkloadsRecs,\n  removeFilterParam as _removeFilterParam,\n} from '../Common/Tables';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport {\n  filtersAreApplied,\n  pruneWorkloadsRulesFilters,\n} from '../../Utilities/Workloads';\n\nconst WorkloadRules = ({ workload }) => {\n  const dispatch = useDispatch();\n  const { isError, isUninitialized, isFetching, isSuccess, data } = workload;\n  const recommendations = data?.recommendations || [];\n  const errorState = isError;\n  const successState = isSuccess;\n  const [isAllExpanded, setIsAllExpanded] = useState(false);\n  const [filteredRows, setFilteredRows] = useState([]);\n  const [displayedRows, setDisplayedRows] = useState([]);\n  const [rowsFiltered, setRowsFiltered] = useState(false);\n  const [filtersApplied, setFiltersApplied] = useState(false);\n  const [expandFirst, setExpandFirst] = useState(true);\n  const loadingState = isUninitialized || isFetching || !rowsFiltered;\n  //FILTERS\n  const filters = useSelector(({ filters }) => filters.workloadsRecsListState);\n  const updateFilters = (payload) =>\n    dispatch(updateWorkloadsRecsListFilters(payload));\n  const addFilterParam = (param, values) => {\n    setExpandFirst(false);\n    return _addFilterParam(filters, updateFilters, param, values);\n  };\n  const removeFilterParam = (param) =>\n    _removeFilterParam(filters, updateFilters, param);\n\n  useEffect(() => {\n    setFilteredRows(buildFilteredRows(recommendations, filters));\n  }, [data, filters]);\n\n  useEffect(() => {\n    setDisplayedRows(\n      buildDisplayedRows(filteredRows, filters.sortIndex, filters.sortDirection)\n    );\n    setFiltersApplied(filtersAreApplied(filters));\n    setRowsFiltered(true);\n  }, [filteredRows]);\n\n  const filterConfigItems = WORKLOADS_RULES_FILTER_CONFIG(\n    filters,\n    addFilterParam\n  );\n\n  const buildDisplayedRows = (filteredRows, sortIndex, sortDirection) => {\n    void sortIndex;\n    void sortDirection;\n\n    return filteredRows.flatMap((row, index) => {\n      const updatedRow = [...row];\n      if (expandFirst && index === 0) {\n        row[0].isOpen = true;\n      }\n      row[1].parent = index * 2;\n      return updatedRow;\n    });\n  };\n\n  const handleOnCollapse = (_e, rowId, isOpen) => {\n    if (rowId === undefined) {\n      // if undefined, all rows are affected\n      setIsAllExpanded(isOpen);\n      setDisplayedRows(\n        displayedRows.map((row) => ({\n          ...row,\n          // Don't show expand button for expanded content\n          ...(Object.hasOwn(row, 'parent') ? null : { isOpen }),\n        }))\n      );\n    } else {\n      setDisplayedRows(\n        displayedRows.map((row, index) =>\n          index === rowId ? { ...row, isOpen } : row\n        )\n      );\n    }\n  };\n\n  const buildFilteredRows = (allRows, filters) => {\n    setRowsFiltered(false);\n    const noFilters = filtersAreApplied(filters);\n    return allRows\n      .filter((recs) =>\n        noFilters ? passFilterWorkloadsRecs(recs, filters) : true\n      )\n      .map((value, key) => [\n        {\n          rule: value,\n          isOpen: isAllExpanded,\n          cells: [\n            {\n              title: value.details,\n            },\n            {\n              title: (\n                <div key={key}>\n                  <InsightsLabel value={4} rest={{ isCompact: true }} />\n                </div>\n              ),\n            },\n            {\n              title: value.objects.length,\n            },\n            {\n              title: (\n                <div key={key}>\n                  <DateFormat date={value.modified} type=\"relative\" />\n                </div>\n              ),\n            },\n          ],\n        },\n        {\n          cells: [\n            {\n              title: (\n                <ExpandedRulesDetails\n                  extra_data={value.extra_data}\n                  more_info={value.more_info}\n                  resolution={value.resolution}\n                  objects={value.objects}\n                />\n              ),\n            },\n          ],\n        },\n      ]);\n  };\n\n  const buildFilterChips = () => {\n    const localFilters = { ...filters };\n    delete localFilters.sortIndex;\n    delete localFilters.sortDirection;\n    return pruneWorkloadsRulesFilters(\n      localFilters,\n      WORKLOAD_RULES_FILTER_CATEGORIES\n    );\n  };\n\n  const activeFiltersConfig = {\n    showDeleteButton: filtersApplied ? true : false,\n    deleteTitle: 'Reset filters',\n    filters: buildFilterChips(),\n    onDelete: (_event, itemsToRemove, isAll) => {\n      if (isAll) {\n        resetFilters(\n          filters,\n          WORKLOADS_RECS_TABLE_INITIAL_STATE,\n          updateFilters\n        );\n      } else {\n        itemsToRemove.map((item) => {\n          const newFilter = {\n            [item.urlParam]: Array.isArray(filters[item.urlParam])\n              ? filters[item.urlParam].filter(\n                  (value) => String(value) !== String(item.chips[0].value)\n                )\n              : '',\n          };\n          newFilter[item.urlParam].length > 0\n            ? updateFilters({ ...filters, ...newFilter })\n            : removeFilterParam(item.urlParam);\n        });\n      }\n    },\n  };\n\n  return (\n    <div id=\"workload-recs-list-table\">\n      <PrimaryToolbar\n        filterConfig={{\n          items: filterConfigItems,\n          isDisabled:\n            loadingState || errorState || recommendations.length === 0,\n        }}\n        pagination={\n          <span className=\"pf-u-font-weight-bold\">\n            {recommendations?.length === 1\n              ? `${recommendations.length} Recommendation`\n              : `${recommendations.length} Recommendations`}\n          </span>\n        }\n        activeFiltersConfig={\n          loadingState || errorState || recommendations.length === 0\n            ? undefined\n            : activeFiltersConfig\n        }\n      />\n      <Table\n        aria-label={'Workload recommendations table'}\n        ouiaId=\"workload-recommendations\"\n        cells={WORKLOAD_RULES_COLUMNS}\n        ouiaSafe={!loadingState}\n        onCollapse={handleOnCollapse} // TODO: set undefined when there is an empty state\n        rows={\n          errorState || loadingState ? (\n            [\n              {\n                fullWidth: true,\n                cells: [\n                  {\n                    props: {\n                      colSpan: WORKLOAD_RULES_COLUMNS.length + 1,\n                    },\n                    title: <Loading />,\n                    // TODO: Empty state\n                  },\n                ],\n              },\n            ]\n          ) : successState ? (\n            displayedRows\n          ) : (\n            <ErrorState />\n          )\n        }\n        variant={TableVariant.compact}\n        isStickyHeader\n        canCollapseAll\n      >\n        <TableHeader />\n        <TableBody />\n      </Table>\n    </div>\n  );\n};\n\nexport default WorkloadRules;\n\nWorkloadRules.propTypes = {\n  workload: PropTypes.shape({\n    isUninitialized: PropTypes.bool.isRequired,\n    isFetching: PropTypes.bool.isRequired,\n    isError: PropTypes.bool.isRequired,\n    isSuccess: PropTypes.bool.isRequired,\n    error: PropTypes.object,\n    data: PropTypes.shape({\n      namespace: PropTypes.shape({\n        uuid: PropTypes.string,\n        name: PropTypes.string,\n      }),\n      cluster: PropTypes.shape({\n        uuid: PropTypes.string,\n        display_name: PropTypes.string,\n      }),\n      status: PropTypes.string,\n      recommendations: PropTypes.arrayOf(\n        PropTypes.shape({\n          check: PropTypes.string,\n          description: PropTypes.string,\n          objects: PropTypes.arrayOf(\n            PropTypes.shape({\n              kind: PropTypes.string,\n              uid: PropTypes.string,\n            })\n          ),\n          remediation: PropTypes.string,\n        })\n      ),\n    }),\n  }),\n};\n","import React from 'react';\nimport PageHeader from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Flex, FlexItem, PageSection, Title } from '@patternfly/react-core';\nimport Breadcrumbs from '../Breadcrumbs';\nimport WorkloadsHeader from '../WorkloadHeader';\nimport PropTypes from 'prop-types';\nimport WorkloadRules from '../WorkloadRules/WorkloadRules';\n\nexport const Workload = ({ workload, namespaceId, clusterId }) => {\n  return (\n    <React.Fragment>\n      <PageHeader className=\"pf-m-light ins-inventory-detail\">\n        <Flex direction={{ default: 'column' }}>\n          <FlexItem>\n            <Breadcrumbs\n              current={\n                workload?.data?.status === 'ok'\n                  ? `${workload.data.cluster.display_name} | ${workload.data.namespace.name}`\n                  : `${clusterId} | ${namespaceId}`\n              }\n            />\n            <WorkloadsHeader />\n          </FlexItem>\n        </Flex>\n      </PageHeader>\n      <PageSection>\n        <Title className=\"pf-u-mb-lg\" headingLevel=\"h3\" size=\"2xl\">\n          Recommendations\n        </Title>\n        <WorkloadRules workload={workload} />\n      </PageSection>\n    </React.Fragment>\n  );\n};\n\nWorkload.propTypes = {\n  clusterId: PropTypes.string.isRequired,\n  namespaceId: PropTypes.string.isRequired,\n  workload: PropTypes.shape({\n    isUninitialized: PropTypes.bool.isRequired,\n    isFetching: PropTypes.bool.isRequired,\n    data: PropTypes.shape({\n      namespace: PropTypes.shape({\n        uuid: PropTypes.string,\n        name: PropTypes.string,\n      }),\n      cluster: PropTypes.shape({\n        uuid: PropTypes.string,\n        display_name: PropTypes.string,\n      }),\n      status: PropTypes.string,\n    }),\n  }),\n};\n","import React, { useEffect } from 'react';\nimport { Workload } from './Workload';\nimport { useParams } from 'react-router-dom';\nimport { useGetWorkloadByIdQuery } from '../../Services/SmartProxy';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\n\nconst WorkloadWrapper = () => {\n  const chrome = useChrome();\n  const { namespaceId, clusterId } = useParams();\n  const workload = useGetWorkloadByIdQuery({\n    namespaceId,\n    clusterId,\n  });\n\n  useEffect(() => {\n    workload.refetch();\n  }, [namespaceId, clusterId]);\n\n  useEffect(() => {\n    const subnav = `${\n      workload?.data?.status === 'ok'\n        ? `${workload?.data?.cluster.display_name} | ${workload?.data?.namespace.name} - Workloads`\n        : `${clusterId} | ${namespaceId} - Workloads`\n    }`;\n    chrome.updateDocumentTitle(`${subnav} - OCP Advisor | Red Hat Insights`);\n  }, [workload, namespaceId, clusterId]);\n\n  return (\n    <Workload\n      workload={workload}\n      namespaceId={namespaceId}\n      clusterId={clusterId}\n    />\n  );\n};\n\nexport default WorkloadWrapper;\n"],"names":["WorkloadHeader","workloadData","namespaceId","clusterId","isUninitialized","isFetching","workload","data","Grid","id","md","hasGutter","GridItem","span","Title","size","headingLevel","ouiaId","Skeleton","cluster","display_name","namespace","name","Stack","StackItem","metadata","last_checked_at","DateFormat","date","type","propTypes","PropTypes","isRequired","uuid","status","useParams","useGetWorkloadByIdQuery","columnNames","ExpandedRulesDetails","more_info","resolution","objects","Card","className","style","boxShadow","CardBody","isCompact","isPlain","CardHeader","Divider","template","Table","borders","Thead","Tr","Th","modifier","Tbody","slice","map","object","key","Td","dataLabel","uid","kind","Button","variant","isInline","CodeBlock","extra_data","WorkloadRules","dispatch","useDispatch","isError","isSuccess","recommendations","errorState","successState","useState","isAllExpanded","setIsAllExpanded","filteredRows","setFilteredRows","displayedRows","setDisplayedRows","rowsFiltered","setRowsFiltered","filtersApplied","setFiltersApplied","expandFirst","setExpandFirst","loadingState","filters","useSelector","workloadsRecsListState","updateFilters","payload","updateWorkloadsRecsListFilters","useEffect","buildFilteredRows","buildDisplayedRows","sortIndex","sortDirection","filtersAreApplied","localFilters","filterConfigItems","WORKLOADS_RULES_FILTER_CONFIG","param","values","_addFilterParam","flatMap","row","index","updatedRow","isOpen","parent","allRows","noFilters","filter","recs","passFilterWorkloadsRecs","value","rule","cells","title","details","InsightsLabel","rest","length","modified","activeFiltersConfig","showDeleteButton","deleteTitle","pruneWorkloadsRulesFilters","WORKLOAD_RULES_FILTER_CATEGORIES","onDelete","_event","itemsToRemove","isAll","resetFilters","WORKLOADS_RECS_TABLE_INITIAL_STATE","item","newFilter","urlParam","Array","isArray","String","chips","_removeFilterParam","PrimaryToolbar","filterConfig","items","isDisabled","pagination","undefined","WORKLOAD_RULES_COLUMNS","ouiaSafe","onCollapse","_e","rowId","Object","hasOwn","rows","fullWidth","props","colSpan","Loading","TableVariant","compact","isStickyHeader","canCollapseAll","TableHeader","TableBody","error","check","description","remediation","Workload","PageHeader","Flex","direction","default","FlexItem","Breadcrumbs","current","PageSection","chrome","useChrome","refetch","subnav","updateDocumentTitle"],"sourceRoot":""}