{"version":3,"file":"js/ClusterDetails.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./node_modules/@redhat-cloud-services/frontend-components/DateFormat/DateFormat.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/DateFormat/helper.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/ErrorState/ErrorState.js","webpack:///./src/Components/Breadcrumbs/index.js","webpack:///./src/Components/ClusterHeader/ClusterHeader.js","webpack:///./src/Components/ClusterHeader/index.js","webpack:///./src/Components/ClusterRules/ClusterRules.js","webpack:///./src/Components/UpdateRisksTable/AlertsList.js","webpack:///./src/Components/UpdateRisksTable/ClusterOperatorsList.js","webpack:///./src/Components/UpdateRisksTable/UpdateRisksTable.js","webpack:///./src/Components/UpdateRisksTracker/UpdateRisksTracker.js","webpack:///./src/Components/UpdateRisksTable/useUpdateRisksFeature.js","webpack:///./src/Components/ClusterTabs/ClusterTabs.js","webpack:///./src/Components/UpdateRisksAlert/UpdateRisksAlert.js","webpack:///./src/Components/Cluster/Cluster.js","webpack:///./src/Components/Cluster/index.js","webpack:///./src/Components/Loading/Loading.js","webpack:///./src/Utilities/Loaders.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar jsx_runtime_1 = require(\"react/jsx-runtime\");\nvar react_1 = __importDefault(require(\"react\"));\nvar helper_1 = require(\"./helper\");\nvar DateFormat = function (_a) {\n    var date = _a.date, _b = _a.type, type = _b === void 0 ? 'relative' : _b, extraTitle = _a.extraTitle, tooltipProps = _a.tooltipProps;\n    var dateObj = date instanceof Date ? date : new Date(date);\n    var invalid = date === undefined || date === null || dateObj.toString() === 'Invalid Date';\n    var dateType = invalid ? 'invalid' : type;\n    return (0, jsx_runtime_1.jsx)(react_1.default.Fragment, { children: (0, helper_1.dateByType)(dateType, tooltipProps, extraTitle)(dateObj) });\n};\nexports.default = DateFormat;\n//# sourceMappingURL=DateFormat.js.map","\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.dateByType = exports.dateStringByType = exports.addTooltip = void 0;\nvar jsx_runtime_1 = require(\"react/jsx-runtime\");\nvar react_core_1 = require(\"@patternfly/react-core\");\nvar second = 1000;\nvar minute = second * 60;\nvar hour = minute * 60;\nvar day = hour * 24;\nvar month = day * 30;\nvar year = day * 365;\nvar formatTime = function (number, unit) { return \"\".concat(number, \" \").concat(number > 1 ? \"\".concat(unit, \"s\") : unit, \" ago\"); };\nvar relativeTimeTable = [\n    { rightBound: Infinity, description: function (date) { return formatTime(Math.round(date / year), 'year'); } },\n    { rightBound: year, description: function (date) { return formatTime(Math.round(date / month), 'month'); } },\n    { rightBound: month, description: function (date) { return formatTime(Math.round(date / day), 'day'); } },\n    { rightBound: day, description: function (date) { return formatTime(Math.round(date / hour), 'hour'); } },\n    { rightBound: hour, description: function (date) { return formatTime(Math.round(date / minute), 'minute'); } },\n    { rightBound: minute, description: function () { return 'Just now'; } },\n];\nvar exact = function (value) { return value.toUTCString().split(',')[1].slice(0, -7).trim(); };\nvar addTooltip = function (date, element, tooltipProps, extraTitle) {\n    if (extraTitle === void 0) { extraTitle = ''; }\n    return ((0, jsx_runtime_1.jsx)(react_core_1.Tooltip, __assign({}, tooltipProps, { content: (0, jsx_runtime_1.jsxs)(\"div\", { children: [extraTitle, date] }), children: element })));\n};\nexports.addTooltip = addTooltip;\nvar dateStringByType = function (type) {\n    return ({\n        exact: function (date) { return exact(date) + ' UTC'; },\n        onlyDate: function (date) { return exact(date).slice(0, -6); },\n        relative: function (date) {\n            return relativeTimeTable.reduce(function (acc, i) { return (i.rightBound > Date.now() - date.getTime() ? i.description(Date.now() - date.getTime()) : acc); }, exact(date));\n        },\n        invalid: function () { return 'Invalid date'; },\n    }[type]);\n};\nexports.dateStringByType = dateStringByType;\nvar dateByType = function (type, tooltipProps, extraTitle) {\n    return ({\n        exact: function (date) { return (0, exports.dateStringByType)(type)(date); },\n        onlyDate: function (date) { return (0, exports.dateStringByType)(type)(date); },\n        relative: function (date) { return (0, exports.addTooltip)((0, exports.dateStringByType)('exact')(date), (0, jsx_runtime_1.jsx)(\"span\", { children: (0, exports.dateStringByType)(type)(date) }), tooltipProps, extraTitle); },\n        invalid: function () { return 'Invalid date'; },\n    }[type]);\n};\nexports.dateByType = dateByType;\n//# sourceMappingURL=helper.js.map","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport ErrorStatePF from '@patternfly/react-component-groups/dist/dynamic/ErrorState';\nimport DefaultErrorMessage from './DefaultErrorMessage';\nvar ErrorState = function (props) { return _jsx(ErrorStatePF, __assign({ defaultErrorDescription: _jsx(DefaultErrorMessage, {}) }, props)); };\nexport default ErrorState;\n//# sourceMappingURL=ErrorState.js.map","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { Link, useLocation } from 'react-router-dom';\n\nimport { Breadcrumb, BreadcrumbItem } from '@patternfly/react-core';\n\nimport messages from '../../Messages';\n\nconst Breadcrumbs = ({ current, workloads }) => {\n  const intl = useIntl();\n  const location = useLocation();\n  const splitUrl = location.pathname.split('/');\n\n  return (\n    <div>\n      <Breadcrumb ouiaId=\"detail\" data-testid=\"breadcrumb-item\">\n        <BreadcrumbItem className=\"breadcrumb-item\">\n          <Link to={workloads ? `../..` : `..`} relative=\"path\">\n            {`${intl.formatMessage(messages.insightsHeader)} ${splitUrl[4]}`}\n          </Link>\n        </BreadcrumbItem>\n        <BreadcrumbItem className=\"breadcrumb-item\" isActive>\n          {current}\n        </BreadcrumbItem>\n      </Breadcrumb>\n    </div>\n  );\n};\n\nBreadcrumbs.propTypes = {\n  current: PropTypes.string,\n  workloads: PropTypes.boolean,\n};\n\nexport default Breadcrumbs;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport {\n  Dropdown,\n  DropdownItem,\n  DropdownList,\n  Grid,\n  GridItem,\n  MenuToggle,\n  Stack,\n  StackItem,\n  Title,\n} from '@patternfly/react-core';\nimport Skeleton from '@redhat-cloud-services/frontend-components/Skeleton';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat/DateFormat';\n\nimport messages from '../../Messages';\nimport { OneLineLoader } from '../../Utilities/Loaders';\n\nexport const ClusterHeader = ({ clusterId, clusterData, clusterInfo }) => {\n  const location = window.location;\n  const [isOpen, setIsOpen] = useState(false);\n  const intl = useIntl();\n  // subscribe to the cluster data query\n  const {\n    isUninitialized: isUninitializedCluster,\n    isFetching: isFetchingCluster,\n    data: cluster,\n  } = clusterData;\n\n  const {\n    isUninitialized: isUninitializedInfo,\n    isFetching: isFetchingInfo,\n    data: info,\n  } = clusterInfo;\n\n  const dropDownItems = [\n    <DropdownItem\n      key=\"link\"\n      to={\n        location.origin +\n        (location.pathname.includes('preview') ? `/preview` : '') +\n        `/openshift/details/${clusterId}`\n      }\n    >\n      <snap>{intl.formatMessage(messages.clusterDetailsRedirect)}</snap>\n    </DropdownItem>,\n  ];\n\n  return (\n    <Grid id=\"cluster-header\" md={12} hasGutter>\n      <GridItem span={8}>\n        <Title\n          size=\"2xl\"\n          headingLevel=\"h1\"\n          id=\"cluster-header-title\"\n          ouiaId=\"cluster-name\"\n        >\n          {isUninitializedInfo || isFetchingInfo ? (\n            <Skeleton size=\"sm\" />\n          ) : (\n            info?.display_name || clusterId\n          )}\n        </Title>\n      </GridItem>\n      <GridItem span={4} id=\"cluster-header-dropdown\">\n        <Dropdown\n          popperProps={{\n            position: 'right',\n          }}\n          onOpenChange={(isOpen) => setIsOpen(isOpen)}\n          autoFocus={false}\n          isOpen={isOpen}\n          toggle={(toggleRef) => (\n            <MenuToggle\n              ref={toggleRef}\n              id=\"toggle-id-2\"\n              onClick={() => setIsOpen(!isOpen)}\n            >\n              {intl.formatMessage(messages.dropDownActionSingleCluster)}\n            </MenuToggle>\n          )}\n        >\n          <DropdownList>{dropDownItems}</DropdownList>\n        </Dropdown>\n      </GridItem>\n      <GridItem>\n        <Stack>\n          <StackItem id=\"cluster-header-uuid\">\n            <span>UUID:</span> <span>{clusterId}</span>\n          </StackItem>\n          <StackItem id=\"cluster-header-last-seen\">\n            <span>{intl.formatMessage(messages.lastSeen)}: </span>\n            <span>\n              {isUninitializedCluster || isFetchingCluster ? (\n                <OneLineLoader />\n              ) : cluster?.report?.meta?.last_checked_at ? (\n                <DateFormat\n                  date={cluster?.report?.meta?.last_checked_at}\n                  type=\"exact\"\n                />\n              ) : (\n                intl.formatMessage(messages.unknown)\n              )}\n            </span>\n          </StackItem>\n        </Stack>\n      </GridItem>\n    </Grid>\n  );\n};\n\nClusterHeader.propTypes = {\n  clusterId: PropTypes.string.isRequired,\n  clusterData: PropTypes.object.isRequired,\n  clusterInfo: PropTypes.shape({\n    isUninitialized: PropTypes.bool.isRequired,\n    isFetching: PropTypes.bool.isRequired,\n    data: PropTypes.shape({\n      cluster_id: PropTypes.string,\n      display_name: PropTypes.string,\n      managed: PropTypes.bool,\n      status: PropTypes.string,\n    }),\n  }),\n};\n","import React from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport {\n  useGetClusterByIdQuery,\n  useGetClusterInfoQuery,\n} from '../../Services/SmartProxy';\nimport { ClusterHeader } from './ClusterHeader';\n\nconst ClusterHeaderWrapper = () => {\n  const { clusterId } = useParams();\n  const clusterData = useGetClusterByIdQuery({\n    id: clusterId,\n    includeDisabled: false,\n  });\n  const clusterInfo = useGetClusterInfoQuery({\n    id: clusterId,\n  }); // TODO: improve cache handling: do network request only when cache is empty\n\n  return (\n    <ClusterHeader\n      clusterId={clusterId}\n      clusterData={clusterData}\n      clusterInfo={clusterInfo}\n    />\n  );\n};\n\nexport default ClusterHeaderWrapper;\n","import './_ClusterRules.scss';\n\nimport React, { useEffect, useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { useLocation, useParams } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport capitalize from 'lodash/capitalize';\n\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat/DateFormat';\nimport InsightsLabel from '@redhat-cloud-services/frontend-components/InsightsLabel';\nimport { SortByDirection, TableVariant } from '@patternfly/react-table';\nimport {\n  Table,\n  TableBody,\n  TableHeader,\n} from '@patternfly/react-table/deprecated';\nimport { Tooltip } from '@patternfly/react-core';\nimport { TooltipPosition } from '@patternfly/react-core/dist/js/components/Tooltip';\nimport PrimaryToolbar from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\n\nimport messages from '../../Messages';\nimport {\n  IMPACT_LABEL,\n  LIKELIHOOD_LABEL,\n  FILTER_CATEGORIES as FC,\n  CLUSTER_RULES_COLUMNS_KEYS,\n  FILTER_CATEGORIES,\n  CLUSTER_RULES_COLUMNS,\n  CLUSTER_RULES_IMPACTED_CELL,\n} from '../../AppConstants';\nimport { ReportDetails } from '@redhat-cloud-services/frontend-components-advisor-components';\nimport RuleLabels from '../Labels/RuleLabels';\nimport {\n  ErrorState,\n  NoMatchingRecs,\n  NoRecsError,\n  NoInsightsResults,\n  NoRecsAffecting,\n} from '../MessageState/EmptyStates';\nimport {\n  paramParser,\n  passFilters,\n  removeFilterParam as _removeFilterParam,\n  addFilterParam as _addFilterParam,\n  translateSortParams,\n} from '../Common/Tables';\nimport {\n  CLUSTER_RULES_INITIAL_STATE,\n  resetFilters,\n  updateClusterRulesFilters,\n} from '../../Services/Filters';\nimport { getErrorKey, getPluginName } from '../../Utilities/Rule';\nimport Loading from '../Loading/Loading';\nimport { useGetClusterByIdQuery } from '../../Services/SmartProxy';\n\nconst ClusterRules = () => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const updateFilters = (filters) =>\n    dispatch(updateClusterRulesFilters(filters));\n  const filters = useSelector(({ filters }) => filters.clusterRulesState);\n  const { clusterId } = useParams();\n\n  const { isError, isUninitialized, isFetching, isSuccess, data, error } =\n    useGetClusterByIdQuery({\n      id: clusterId,\n      includeDisabled: false,\n    });\n  const reports = data?.report?.data || [];\n  const [filteredRows, setFilteredRows] = useState([]);\n  const [displayedRows, setDisplayedRows] = useState([]);\n  const [isAllExpanded, setIsAllExpanded] = useState(false);\n  const [expandFirst, setExpandFirst] = useState(true);\n  const [firstRule, setFirstRule] = useState(''); // show a particular rule first\n  const results = filteredRows.length;\n  const { search } = useLocation();\n  // helps to distinguish the state when the API data received but not yet filtered\n  const [rowsFiltered, setRowsFiltered] = useState(false);\n  const loadingState = isUninitialized || isFetching || !rowsFiltered;\n  const errorState = isError;\n  const successState = isSuccess;\n  const noInput = successState && reports.length === 0;\n  const noMatch = reports.length > 0 && filteredRows.length === 0;\n\n  const removeFilterParam = (param) =>\n    _removeFilterParam(filters, updateFilters, param);\n\n  const addFilterParam = (param, values) => {\n    setExpandFirst(false);\n    setFirstRule('');\n    return _addFilterParam(filters, updateFilters, param, values);\n  };\n\n  useEffect(() => {\n    if (search) {\n      const paramsObject = paramParser(search);\n      if (paramsObject.sort) {\n        const sortObj = translateSortParams(paramsObject.sort);\n        paramsObject.sortIndex = CLUSTER_RULES_COLUMNS_KEYS.indexOf(\n          sortObj.name\n        );\n        paramsObject.sortDirection = sortObj.direction;\n      }\n      if (paramsObject.first) {\n        setFirstRule(paramsObject.first);\n        delete paramsObject.first;\n      }\n      updateFilters({ ...filters, ...paramsObject });\n    }\n  }, []);\n\n  useEffect(() => {\n    setFilteredRows(buildFilteredRows(reports, filters));\n  }, [data, filters]);\n\n  useEffect(() => {\n    setDisplayedRows(\n      buildDisplayedRows(filteredRows, filters.sortIndex, filters.sortDirection)\n    );\n    setRowsFiltered(true);\n  }, [filteredRows]);\n\n  const handleOnCollapse = (_e, rowId, isOpen) => {\n    if (rowId === undefined) {\n      // if undefined, all rows are affected\n      setIsAllExpanded(isOpen);\n      setDisplayedRows(\n        displayedRows.map((row) => ({\n          ...row,\n          isOpen: isOpen,\n        }))\n      );\n    } else {\n      setDisplayedRows(\n        displayedRows.map((row, index) =>\n          index === rowId ? { ...row, isOpen } : row\n        )\n      );\n    }\n  };\n\n  const buildFilteredRows = (allRows, filters) => {\n    setRowsFiltered(false);\n    const expandedRowsSet = new Set(\n      displayedRows\n        .filter((ruleExpanded) => ruleExpanded?.isOpen)\n        .map((object) => object?.rule?.rule_id)\n    );\n\n    return allRows\n      .filter((rule) => passFilters(rule, filters))\n      .map((value, key) => [\n        {\n          rule: value,\n          isOpen: isAllExpanded || expandedRowsSet?.has(value?.rule_id),\n          cells: [\n            {\n              title: (\n                <div>\n                  {value?.description || value?.rule_id}{' '}\n                  <RuleLabels rule={value} />\n                </div>\n              ),\n            },\n            {\n              title: (\n                <div key={key}>\n                  <DateFormat\n                    date={value.created_at}\n                    type=\"relative\"\n                    tooltipProps={{ position: TooltipPosition.bottom }}\n                  />\n                </div>\n              ),\n            },\n            value.impacted\n              ? {\n                  title: (\n                    <div key={key}>\n                      <DateFormat\n                        extraTitle={`${intl.formatMessage(\n                          messages.impacted\n                        )}: `}\n                        date={value.impacted}\n                        type=\"relative\"\n                        tooltipProps={{ position: TooltipPosition.bottom }}\n                      />\n                    </div>\n                  ),\n                }\n              : {\n                  title: (\n                    <Tooltip\n                      key={key}\n                      content={\n                        <span>\n                          {intl.formatMessage(messages.impacted) + ': '}\n                          {intl.formatMessage(messages.nA)}\n                        </span>\n                      }\n                    >\n                      <span>{intl.formatMessage(messages.nA)}</span>\n                    </Tooltip>\n                  ),\n                },\n            {\n              title: (\n                <div key={key} style={{ verticalAlign: 'top' }}>\n                  {value?.likelihood && value?.impact ? (\n                    <Tooltip\n                      key={key}\n                      position={TooltipPosition.bottom}\n                      content={\n                        // TODO: refine fields lookup\n                        <span>\n                          The <strong>likelihood</strong> that this will be a\n                          problem is{' '}\n                          {value.likelihood\n                            ? LIKELIHOOD_LABEL[value.likelihood]\n                            : 'unknown'}\n                          .The <strong>impact</strong> of the problem would be{' '}\n                          {value.impact\n                            ? IMPACT_LABEL[value.impact]\n                            : 'unknown'}{' '}\n                          if it occurred.\n                        </span>\n                      }\n                    >\n                      <InsightsLabel\n                        value={value.total_risk}\n                        rest={{ isCompact: true }}\n                      />\n                    </Tooltip>\n                  ) : (\n                    <InsightsLabel\n                      value={value.total_risk}\n                      rest={{ isCompact: true }}\n                    />\n                  )}\n                </div>\n              ),\n            },\n          ],\n        },\n        {\n          fullWidth: true,\n          cells: [\n            {\n              title: (\n                <ReportDetails\n                  key={`child-${key}`}\n                  report={{\n                    rule: value,\n                    resolution: value.resolution,\n                    details: value.extra_data,\n                  }}\n                />\n              ),\n            },\n          ],\n        },\n      ]);\n  };\n\n  const buildDisplayedRows = (rows, index, direction) => {\n    let sortingRows = [...rows];\n    if (index >= 0 && !firstRule) {\n      const d = direction === SortByDirection.asc ? 1 : -1;\n      sortingRows = [...rows].sort((firstItem, secondItem) => {\n        let fst = firstItem[0].rule[CLUSTER_RULES_COLUMNS_KEYS[index]];\n        let snd = secondItem[0].rule[CLUSTER_RULES_COLUMNS_KEYS[index]];\n        if (index === CLUSTER_RULES_IMPACTED_CELL) {\n          //sorting for the impacted column\n          fst = new Date(firstItem[0].rule.impacted || 0);\n          snd = new Date(secondItem[0].rule.impacted || 0);\n        }\n        return fst > snd ? d : snd > fst ? -d : 0;\n      });\n    } else if (firstRule) {\n      const i = rows.findIndex((row) => {\n        const rule = row[0].rule;\n        /* rule_id is given with the plugin name only,\n           thus we need to look at extra_data for the error key */\n        return (\n          rule.rule_id.split('.report')[0] === getPluginName(firstRule) &&\n          rule.extra_data.error_key === getErrorKey(firstRule)\n        );\n      });\n      i !== -1 && sortingRows.unshift(sortingRows.splice(i, 1)[0]);\n    }\n    return sortingRows.flatMap((row, index) => {\n      const updatedRow = [...row];\n      if (expandFirst && index === 0) {\n        row[0].isOpen = true;\n      }\n      row[1].parent = index * 2;\n      return updatedRow;\n    });\n  };\n\n  const onSort = (_e, index, direction) => {\n    setRowsFiltered(false);\n    setExpandFirst(false);\n    setFirstRule('');\n    return updateFilters({\n      ...filters,\n      sortIndex: index,\n      sortDirection: direction,\n    });\n  };\n\n  const filterConfigItems = [\n    {\n      label: 'description',\n      type: 'text',\n      filterValues: {\n        key: 'text-filter',\n        onChange: (_e, value) => addFilterParam('text', value),\n        value: filters.text,\n      },\n    },\n    {\n      label: FC.total_risk.title,\n      type: FC.total_risk.type,\n      id: FC.total_risk.urlParam,\n      value: `checkbox-${FC.total_risk.urlParam}`,\n      filterValues: {\n        key: `${FC.total_risk.urlParam}-filter`,\n        onChange: (_e, values) =>\n          addFilterParam(FILTER_CATEGORIES.total_risk.urlParam, values),\n        value: filters.total_risk,\n        items: FC.total_risk.values,\n      },\n    },\n    {\n      label: FC.category.title,\n      type: FC.category.type,\n      id: FC.category.urlParam,\n      value: `checkbox-${FC.category.urlParam}`,\n      filterValues: {\n        key: `${FC.category.urlParam}-filter`,\n        onChange: (_e, values) =>\n          addFilterParam(FILTER_CATEGORIES.category.urlParam, values),\n        value: filters.category,\n        items: FC.category.values,\n      },\n    },\n  ];\n\n  const pruneFilters = (localFilters, filterCategories) => {\n    const prunedFilters = Object.entries(localFilters);\n    return prunedFilters.length > 0\n      ? prunedFilters.reduce((arr, item) => {\n          if (filterCategories[item[0]]) {\n            const category = filterCategories[item[0]];\n            const chips = Array.isArray(item[1])\n              ? item[1].map((value) => {\n                  const selectedCategoryValue = category.values.find(\n                    (values) => values.value === String(value)\n                  );\n                  return selectedCategoryValue\n                    ? {\n                        name:\n                          selectedCategoryValue.text ||\n                          selectedCategoryValue.label,\n                        value,\n                      }\n                    : { name: value, value };\n                })\n              : [\n                  {\n                    name: category.values.find(\n                      (values) => values.value === String(item[1])\n                    ).label,\n                    value: item[1],\n                  },\n                ];\n            return [\n              ...arr,\n              {\n                category: capitalize(category.title),\n                chips,\n                urlParam: category.urlParam,\n              },\n            ];\n          } else if (item[0] === 'text') {\n            return [\n              ...arr,\n              ...(item[1].length > 0\n                ? [\n                    {\n                      category: intl.formatMessage(messages.description),\n                      chips: [{ name: item[1], value: item[1] }],\n                      urlParam: item[0],\n                    },\n                  ]\n                : []),\n            ];\n          } else {\n            return arr;\n          }\n        }, [])\n      : [];\n  };\n\n  const buildFilterChips = () => {\n    const localFilters = { ...filters };\n    delete localFilters.sortIndex;\n    delete localFilters.sortDirection;\n    return pruneFilters(localFilters, FILTER_CATEGORIES);\n  };\n\n  const activeFiltersConfig = {\n    deleteTitle: intl.formatMessage(messages.resetFilters),\n    filters: buildFilterChips(),\n    onDelete: (_event, itemsToRemove, isAll) => {\n      if (isAll) {\n        resetFilters(filters, CLUSTER_RULES_INITIAL_STATE, updateFilters);\n      } else {\n        itemsToRemove.map((item) => {\n          const newFilter = {\n            [item.urlParam]: Array.isArray(filters[item.urlParam])\n              ? filters[item.urlParam].filter(\n                  (value) => String(value) !== String(item.chips[0].value)\n                )\n              : '',\n          };\n          newFilter[item.urlParam].length > 0\n            ? updateFilters({ ...filters, ...newFilter })\n            : removeFilterParam(item.urlParam);\n        });\n      }\n    },\n  };\n\n  return (\n    <div id=\"cluster-recs-list-table\" data-ouia-safe={!loadingState}>\n      <PrimaryToolbar\n        filterConfig={{\n          items: filterConfigItems,\n          isDisabled: loadingState || errorState || reports.length === 0,\n        }}\n        pagination={\n          <React.Fragment>\n            {results === 1\n              ? `${results} ${intl.formatMessage(messages.recommendation)}`\n              : `${results} ${intl.formatMessage(messages.recommendations)}`}\n          </React.Fragment>\n        }\n        activeFiltersConfig={\n          loadingState || errorState || reports.length === 0\n            ? undefined\n            : activeFiltersConfig\n        }\n      />\n      <Table\n        aria-label={'Cluster recommendations table'}\n        ouiaId=\"recommendations\"\n        ouiaSafe={!loadingState}\n        onCollapse={handleOnCollapse} // TODO: set undefined when there is an empty state\n        rows={\n          errorState || loadingState || noMatch || noInput ? (\n            [\n              {\n                fullWidth: true,\n                cells: [\n                  {\n                    props: {\n                      colSpan: CLUSTER_RULES_COLUMNS.length + 1,\n                    },\n                    title: errorState ? (\n                      error?.status === 404 ? (\n                        <NoInsightsResults /> // no Insights results received yet\n                      ) : (\n                        <NoRecsError /> // any other problem\n                      )\n                    ) : loadingState ? (\n                      <Loading />\n                    ) : noInput ? (\n                      <NoRecsAffecting />\n                    ) : (\n                      <NoMatchingRecs />\n                    ),\n                  },\n                ],\n              },\n            ]\n          ) : successState ? (\n            displayedRows\n          ) : (\n            <ErrorState />\n          )\n        }\n        cells={CLUSTER_RULES_COLUMNS}\n        sortBy={{\n          index: filters.sortIndex,\n          direction: filters.sortDirection,\n        }}\n        onSort={onSort}\n        variant={TableVariant.compact}\n        isStickyHeader\n        canCollapseAll\n      >\n        <TableHeader />\n        <TableBody />\n      </Table>\n    </div>\n  );\n};\n\nexport default ClusterRules;\n","import { Flex, Icon } from '@patternfly/react-core';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\nimport InfoCircleIcon from '@patternfly/react-icons/dist/js/icons/info-circle-icon';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-triangle-icon';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport {\n  Table /* data-codemods */,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from '@patternfly/react-table';\nimport React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useGetUpdateRisksState } from '../../Services/SmartProxy';\n\nexport const ALERTS_SEVERITY_ICONS = {\n  critical: (\n    <Icon status=\"danger\">\n      <ExclamationCircleIcon />\n    </Icon>\n  ),\n  warning: (\n    <Icon status=\"warning\">\n      <ExclamationTriangleIcon />\n    </Icon>\n  ),\n  info: (\n    <Icon status=\"info\">\n      <InfoCircleIcon />\n    </Icon>\n  ),\n  success: (\n    <Icon status=\"success\">\n      <CheckCircleIcon />\n    </Icon>\n  ),\n};\n\nexport const ALERTS_SEVERITY_LABEL = {\n  critical: (\n    <Flex alignItems={{ default: 'alignItemsCenter' }}>\n      {ALERTS_SEVERITY_ICONS['critical']} <b>Critical</b>\n    </Flex>\n  ),\n  warning: (\n    <Flex alignItems={{ default: 'alignItemsCenter' }}>\n      {ALERTS_SEVERITY_ICONS['warning']} <b>Warning</b>\n    </Flex>\n  ),\n  info: (\n    <Flex alignItems={{ default: 'alignItemsCenter' }}>\n      {ALERTS_SEVERITY_ICONS['info']} <b>Info</b>\n    </Flex>\n  ),\n};\n\nexport const ALERTS_SEVERITY_ORDER = ['critical', 'warning', 'info'];\n\nconst AlertsList = () => {\n  const { clusterId } = useParams();\n  const { data } = useGetUpdateRisksState({ id: clusterId });\n  const { alerts = [] } =\n    data?.upgrade_recommendation?.upgrade_risks_predictors || {};\n\n  return (\n    <Table aria-label=\"Alerts firing table\" variant=\"compact\" borders={false}>\n      <Thead>\n        <Tr>\n          <Th width={50}>Name</Th>\n          <Th width={25}>Status</Th>\n          <Th width={25}>Namespace</Th>\n        </Tr>\n      </Thead>\n      <Tbody>\n        {alerts.map(({ name, namespace, severity, url = '' }) => (\n          <Tr key={name}>\n            <Td className=\"alerts__name\">\n              {url === '' ? name : <a href={url}>{name}</a>}\n            </Td>\n            <Td className=\"alerts__severity\">\n              {ALERTS_SEVERITY_LABEL[severity]}\n            </Td>\n            <Td className=\"alerts__namespace\">{namespace}</Td>\n          </Tr>\n        ))}\n      </Tbody>\n    </Table>\n  );\n};\n\nexport default AlertsList;\n","import React from 'react';\nimport {\n  Table /* data-codemods */,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from '@patternfly/react-table';\nimport { useParams } from 'react-router-dom';\nimport { useGetUpdateRisksState } from '../../Services/SmartProxy';\nimport { Flex, Icon } from '@patternfly/react-core';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-triangle-icon';\n\nconst ClusterOperatorsList = () => {\n  const { clusterId } = useParams();\n  const { data } = useGetUpdateRisksState({ id: clusterId });\n  const { operator_conditions: conditions = [] } =\n    data?.upgrade_recommendation?.upgrade_risks_predictors || {};\n\n  return (\n    <Table\n      aria-label=\"Cluster operators firing table\"\n      variant=\"compact\"\n      borders={false}\n    >\n      <Thead>\n        <Tr>\n          <Th width={50}>Name</Th>\n          <Th width={25}>Status</Th>\n          <Th width={25}>Message</Th>\n        </Tr>\n      </Thead>\n      <Tbody>\n        {conditions.map(({ name, condition, reason, url = '' }) => (\n          <Tr key={name}>\n            <Td class=\"operators__name\">\n              {url === '' ? name : <a href={url}>{name}</a>}\n            </Td>\n            <Td class=\"operators__status\">\n              <Flex alignItems={{ default: 'alignItemsCenter' }}>\n                <Icon status=\"warning\">\n                  <ExclamationTriangleIcon />\n                </Icon>\n                <b>{condition}</b>\n              </Flex>\n            </Td>\n            <Td class=\"operators__message\">{reason || '-'}</Td>\n          </Tr>\n        ))}\n      </Tbody>\n    </Table>\n  );\n};\n\nexport default ClusterOperatorsList;\n","import {\n  EmptyState,\n  EmptyStateIcon,\n  Flex,\n  Icon,\n  Label,\n  Spinner,\n  EmptyStateHeader,\n} from '@patternfly/react-core';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-triangle-icon';\nimport {\n  ExpandableRowContent,\n  Table /* data-codemods */,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from '@patternfly/react-table';\nimport ErrorState from '@redhat-cloud-services/frontend-components/ErrorState';\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useGetUpdateRisksQuery } from '../../Services/SmartProxy';\nimport {\n  NoUpdateRisks,\n  UpdateRisksNotAvailable,\n} from '../MessageState/EmptyStates';\nimport AlertsList, {\n  ALERTS_SEVERITY_ICONS,\n  ALERTS_SEVERITY_ORDER,\n} from './AlertsList';\nimport ClusterOperatorsList from './ClusterOperatorsList';\n\nconst UpdateRisksTable = () => {\n  const { clusterId } = useParams();\n  const { isError, isUninitialized, isFetching, isSuccess, data, error } =\n    useGetUpdateRisksQuery({ id: clusterId });\n  const { alerts = [], operator_conditions: conditions = [] } =\n    data?.upgrade_recommendation?.upgrade_risks_predictors || {};\n\n  const alertsDisabled = alerts.length === 0;\n  const conditionsDisabled = conditions.length === 0;\n\n  const [alertsExpanded, setAlertsExpanded] = useState(true);\n  const [operatorsExpanded, setOperatorsExpanded] = useState(true);\n\n  useEffect(() => {\n    setAlertsExpanded(!alertsDisabled);\n    setOperatorsExpanded(!conditionsDisabled);\n  }, [data]);\n\n  const hasRisks = isSuccess && (alerts.length > 0 || conditions.length > 0);\n  const noRisks = isSuccess && alerts.length === 0 && conditions.length === 0;\n\n  return isUninitialized || isFetching ? (\n    <EmptyState>\n      <EmptyStateHeader icon={<EmptyStateIcon icon={Spinner} />} />\n    </EmptyState>\n  ) : (\n    <Table\n      aria-label=\"Update risks table\"\n      isExpandable\n      variant=\"compact\"\n      id=\"update-risks-table\"\n      borders={hasRisks}\n    >\n      <Thead>\n        <Tr>\n          <Th />\n          <Th>Name</Th>\n        </Tr>\n      </Thead>\n      {hasRisks ? (\n        <>\n          <Tbody isExpanded={alertsExpanded}>\n            <Tr className=\"alerts__header\">\n              <Td\n                expand={\n                  alertsDisabled\n                    ? {}\n                    : {\n                        rowIndex: 0,\n                        isExpanded: alertsExpanded,\n                        onToggle: () => setAlertsExpanded(!alertsExpanded),\n                      }\n                }\n              />\n              <Td>\n                <Flex alignItems={{ default: 'alignItemsCenter' }}>\n                  {alertsDisabled\n                    ? ALERTS_SEVERITY_ICONS['success']\n                    : ALERTS_SEVERITY_ICONS[ // this algorithm helps to decide which icon (the most severe) to show\n                        ALERTS_SEVERITY_ORDER.filter((s) =>\n                          alerts.some(({ severity }) => s === severity)\n                        )[0]\n                      ]}\n                  <b>Alerts firing</b>\n                  <Label\n                    isCompact\n                    id=\"alerts-label\"\n                    color={alertsDisabled ? 'green' : 'grey'}\n                  >\n                    {alerts.length} update risks\n                  </Label>\n                </Flex>\n              </Td>\n            </Tr>\n            <Tr isExpanded={alertsExpanded} className=\"alerts__content\">\n              <Td />\n              <Td>\n                <ExpandableRowContent>\n                  <AlertsList />\n                </ExpandableRowContent>\n              </Td>\n            </Tr>\n          </Tbody>\n          <Tbody isExpanded={operatorsExpanded}>\n            <Tr className=\"operators__header\">\n              <Td\n                expand={\n                  conditionsDisabled\n                    ? undefined\n                    : {\n                        rowIndex: 1,\n                        isExpanded: operatorsExpanded,\n                        onToggle: () =>\n                          setOperatorsExpanded(!operatorsExpanded),\n                      }\n                }\n              />\n              <Td>\n                <Flex alignItems={{ default: 'alignItemsCenter' }}>\n                  {conditionsDisabled ? (\n                    ALERTS_SEVERITY_ICONS['success']\n                  ) : (\n                    <Icon status=\"warning\">\n                      <ExclamationTriangleIcon />\n                    </Icon>\n                  )}\n                  <b>Cluster operators</b>\n                  <Label\n                    isCompact\n                    id=\"operator-conditions-label\"\n                    color={conditionsDisabled ? 'green' : 'grey'}\n                  >\n                    {conditions.length} update risks\n                  </Label>\n                </Flex>\n              </Td>\n            </Tr>\n            <Tr isExpanded={operatorsExpanded} className=\"operators__content\">\n              <Td />\n              <Td>\n                <ExpandableRowContent>\n                  <ClusterOperatorsList />\n                </ExpandableRowContent>\n              </Td>\n            </Tr>\n          </Tbody>\n        </>\n      ) : (\n        <Tbody>\n          <Tr>\n            <Td colSpan={2}>\n              {noRisks ? (\n                <NoUpdateRisks />\n              ) : isError && error.status === 404 ? (\n                <UpdateRisksNotAvailable />\n              ) : (\n                <ErrorState />\n              )}\n            </Td>\n          </Tr>\n        </Tbody>\n      )}\n    </Table>\n  );\n};\n\nexport default UpdateRisksTable;\n","import useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport get from 'lodash/get';\nimport React, { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useGetUpdateRisksState } from '../../Services/SmartProxy';\n\nconst UPDATE_RISKS_TRACK_EVENT_ID = 'ocp-upgrade-risks-viewed';\n\nconst UpdateRisksTracker = () => {\n  const { analytics } = useChrome();\n  const { clusterId } = useParams();\n  const { isError, isSuccess, data } = useGetUpdateRisksState({\n    id: clusterId,\n  });\n\n  useEffect(() => {\n    if (isError || isSuccess) {\n      analytics.track(UPDATE_RISKS_TRACK_EVENT_ID, {\n        cluster_id: clusterId,\n        upgrade_recommended: get(\n          data,\n          'upgrade_recommendation.upgrade_recommended',\n          null\n        ),\n      });\n    }\n  }, [isError, isSuccess]);\n\n  return <></>;\n};\n\nexport default UpdateRisksTracker;\n","import get from 'lodash/get';\nimport { useParams } from 'react-router-dom';\n\nimport { useUpdateRisksFeatureFlag } from '../../Utilities/useFeatureFlag';\nimport { useGetClusterInfoState } from '../../Services/SmartProxy';\n\nconst useUpdateRisksFeature = (clusterId) => {\n  const updateRisksEnabled = useUpdateRisksFeatureFlag();\n  const id = clusterId || useParams().clusterId;\n  const clusterInfo = useGetClusterInfoState({ id }); // doesn't request new data, uses cache\n  const isManaged = get(clusterInfo, 'data.managed', true);\n\n  return updateRisksEnabled && !isManaged;\n};\n\nexport default useUpdateRisksFeature;\n","import { Card, CardBody, Tab, Tabs } from '@patternfly/react-core';\nimport React, { useEffect, useState } from 'react';\n\nimport { useIntl } from 'react-intl';\nimport { useParams, useSearchParams } from 'react-router-dom';\nimport messages from '../../Messages';\nimport { setSearchParameter } from '../../Utilities/Helpers';\nimport ClusterRules from '../ClusterRules/ClusterRules';\nimport { UpdateRisksTable } from '../UpdateRisksTable';\nimport { UpdateRisksTracker } from '../UpdateRisksTracker';\nimport useUpdateRisksFeature from '../UpdateRisksTable/useUpdateRisksFeature';\n\nconst CLUSTER_TABS = ['recommendations', 'update_risks'];\n\nconst ClusterTabs = () => {\n  const intl = useIntl();\n  const [searchParams] = useSearchParams();\n  const { clusterId } = useParams();\n  const updateRisksEnabled = useUpdateRisksFeature(clusterId);\n\n  const [activeKey, setActiveKey] = useState('recommendations');\n\n  useEffect(() => {\n    const tabKey = searchParams.get('active_tab');\n    setActiveKey(\n      updateRisksEnabled && CLUSTER_TABS.includes(tabKey)\n        ? tabKey\n        : 'recommendations'\n    );\n  }, [updateRisksEnabled]);\n\n  return (\n    <Card isCompact>\n      <CardBody>\n        <Tabs\n          activeKey={activeKey}\n          onSelect={(event, key) => {\n            setSearchParameter('active_tab', key);\n            setActiveKey(key);\n          }}\n          aria-label=\"Cluster tabs\"\n        >\n          <Tab\n            eventKey=\"recommendations\"\n            title={intl.formatMessage(messages.recommendations)}\n            ouiaId=\"recommendations-tab\"\n          >\n            {activeKey === 'recommendations' && <ClusterRules />}\n          </Tab>\n          {updateRisksEnabled && (\n            <Tab\n              eventKey=\"update_risks\"\n              title={intl.formatMessage(messages.updateRisks)}\n              ouiaId=\"update-risks-tab\"\n            >\n              {activeKey === 'update_risks' && (\n                <>\n                  <UpdateRisksTracker />\n                  <UpdateRisksTable />\n                </>\n              )}\n            </Tab>\n          )}\n        </Tabs>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default ClusterTabs;\n","import { Alert } from '@patternfly/react-core';\nimport React from 'react';\nimport { useIntl } from 'react-intl';\nimport { useParams } from 'react-router-dom';\nimport messages from '../../Messages';\nimport { useGetUpdateRisksQuery } from '../../Services/SmartProxy';\nimport { strong } from '../../Utilities/Helpers';\n\nconst UpdateRisksAlert = () => {\n  const intl = useIntl();\n  const { clusterId } = useParams();\n  const { isError, isUninitialized, isFetching, isSuccess, data, error } =\n    useGetUpdateRisksQuery({ id: clusterId });\n  const { alerts = [], operator_conditions: conditions = [] } =\n    data?.upgrade_recommendation?.upgrade_risks_predictors || {};\n\n  const hasRisks = isSuccess && (alerts.length > 0 || conditions.length > 0);\n  const noRisks = isSuccess && alerts.length === 0 && conditions.length === 0;\n\n  return isUninitialized || isFetching ? (\n    <></>\n  ) : hasRisks ? (\n    <Alert\n      variant=\"warning\"\n      isInline\n      title={intl.formatMessage(messages.resolveUpdateRisks)}\n      ouiaId=\"update-risks-alert\"\n    >\n      {intl.formatMessage(messages.resolveUpdateRisksDesc, { strong })}\n    </Alert>\n  ) : noRisks ? (\n    <Alert\n      variant=\"success\"\n      isInline\n      title={intl.formatMessage(messages.noKnownUpdateRisks)}\n      ouiaId=\"update-risks-alert\"\n    />\n  ) : isError && error.status === 404 ? (\n    <Alert\n      variant=\"warning\"\n      isInline\n      title={intl.formatMessage(messages.updateRisksNotCurrentlyAvailable)}\n      ouiaId=\"update-risks-alert\"\n    >\n      {intl.formatMessage(messages.updateRisksNotAvailableDesc)}\n    </Alert>\n  ) : (\n    <></>\n  );\n};\n\nexport default UpdateRisksAlert;\n","import './_Cluster.scss';\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport PageHeader from '@redhat-cloud-services/frontend-components/PageHeader';\nimport ClusterHeader from '../ClusterHeader';\nimport Breadcrumbs from '../Breadcrumbs';\nimport ClusterTabs from '../ClusterTabs/ClusterTabs';\nimport { Flex, FlexItem, PageSection } from '@patternfly/react-core';\nimport { UpdateRisksAlert } from '../UpdateRisksAlert';\nimport useUpdateRisksFeature from '../UpdateRisksTable/useUpdateRisksFeature';\n\nexport const Cluster = ({ cluster, clusterId }) => {\n  const areUpdateRisksEnabled = useUpdateRisksFeature(clusterId);\n\n  // TODO: make breadcrumbs take display name from GET /cluster/id/info\n  return (\n    <React.Fragment>\n      <PageHeader className=\"pf-m-light ins-inventory-detail\">\n        <Flex direction={{ default: 'column' }}>\n          <FlexItem>\n            <Breadcrumbs\n              current={cluster?.data?.report.meta.cluster_name || clusterId}\n            />\n            <ClusterHeader />\n          </FlexItem>\n          {areUpdateRisksEnabled && <UpdateRisksAlert />}\n        </Flex>\n      </PageHeader>\n      <PageSection>\n        <ClusterTabs cluster={cluster} />\n      </PageSection>\n    </React.Fragment>\n  );\n};\n\nCluster.propTypes = {\n  cluster: PropTypes.object.isRequired,\n  clusterId: PropTypes.string.isRequired,\n};\n","import React, { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\n\nimport { useGetClusterByIdQuery } from '../../Services/SmartProxy';\nimport messages from '../../Messages';\nimport { Cluster } from './Cluster';\n\nconst ClusterWrapper = () => {\n  const intl = useIntl();\n  const { clusterId } = useParams();\n  const cluster = useGetClusterByIdQuery({\n    id: clusterId,\n    includeDisabled: false,\n  });\n  const chrome = useChrome();\n\n  useEffect(() => {\n    cluster.refetch();\n  }, [clusterId]);\n\n  useEffect(() => {\n    const subnav = `${\n      cluster?.data?.report?.meta?.cluster_name || clusterId\n    } - ${intl.formatMessage(messages.clusters)}`;\n    chrome.updateDocumentTitle(\n      intl.formatMessage(messages.documentTitle, { subnav })\n    );\n  }, [cluster, clusterId]);\n  return <Cluster cluster={cluster} clusterId={clusterId} />;\n};\n\nexport default ClusterWrapper;\n","import React from 'react';\nimport { Card, CardBody } from '@patternfly/react-core';\nimport { List } from 'react-content-loader';\n\nconst Loading = () => (\n  <Card ouiaId=\"loading-skeleton\">\n    <CardBody>\n      <List />\n    </CardBody>\n  </Card>\n);\n\nexport default Loading;\n","import React from 'react';\nimport ContentLoader from 'react-content-loader';\n\nconst OneLineLoader = () => (\n  <ContentLoader height={20}>\n    <rect x=\"0\" y=\"0\" rx=\"4\" ry=\"4\" width=\"300\" height=\"20\" />\n  </ContentLoader>\n);\n\nexport { OneLineLoader };\n"],"names":["__importDefault","this","mod","__esModule","Object","defineProperty","exports","value","jsx_runtime_1","react_1","helper_1","_a","date","_b","type","extraTitle","tooltipProps","dateObj","Date","dateType","toString","jsx","default","Fragment","children","dateByType","__assign","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","dateStringByType","addTooltip","react_core_1","hour","minute","day","month","year","formatTime","number","unit","concat","relativeTimeTable","rightBound","Infinity","description","Math","round","second","exact","toUTCString","split","slice","trim","element","Tooltip","content","jsxs","onlyDate","relative","reduce","acc","now","getTime","invalid","props","defaultErrorDescription","Breadcrumbs","current","workloads","intl","splitUrl","useLocation","pathname","Breadcrumb","ouiaId","BreadcrumbItem","className","Link","to","formatMessage","insightsHeader","isActive","propTypes","ClusterHeader","clusterId","clusterData","clusterInfo","location","window","isOpen","setIsOpen","useState","useIntl","isUninitialized","isUninitializedCluster","isFetching","isFetchingCluster","data","cluster","isUninitializedInfo","isFetchingInfo","info","dropDownItems","DropdownItem","key","origin","includes","clusterDetailsRedirect","Grid","id","md","hasGutter","GridItem","span","Title","size","headingLevel","Skeleton","display_name","Dropdown","popperProps","position","onOpenChange","autoFocus","toggle","toggleRef","MenuToggle","ref","onClick","dropDownActionSingleCluster","DropdownList","Stack","StackItem","lastSeen","report","meta","last_checked_at","unknown","isRequired","cluster_id","managed","status","useParams","includeDisabled","dispatch","useDispatch","updateFilters","filters","useSelector","clusterRulesState","isError","isSuccess","error","reports","filteredRows","setFilteredRows","displayedRows","setDisplayedRows","isAllExpanded","setIsAllExpanded","expandFirst","setExpandFirst","firstRule","setFirstRule","results","search","rowsFiltered","setRowsFiltered","loadingState","errorState","successState","noInput","noMatch","addFilterParam","param","values","useEffect","paramsObject","sort","sortObj","sortIndex","indexOf","name","sortDirection","direction","first","buildFilteredRows","buildDisplayedRows","allRows","expandedRowsSet","Set","filter","ruleExpanded","map","object","rule","rule_id","has","cells","title","RuleLabels","created_at","TooltipPosition","bottom","impacted","nA","style","verticalAlign","likelihood","impact","InsightsLabel","total_risk","rest","isCompact","fullWidth","resolution","details","extra_data","rows","index","sortingRows","d","asc","firstItem","secondItem","fst","snd","findIndex","row","error_key","unshift","splice","flatMap","updatedRow","parent","filterConfigItems","label","filterValues","onChange","_e","text","urlParam","items","category","activeFiltersConfig","deleteTitle","resetFilters","localFilters","filterCategories","prunedFilters","entries","arr","item","chips","Array","isArray","selectedCategoryValue","find","String","pruneFilters","buildFilterChips","onDelete","_event","itemsToRemove","isAll","newFilter","PrimaryToolbar","filterConfig","isDisabled","pagination","recommendation","recommendations","undefined","Table","ouiaSafe","onCollapse","rowId","colSpan","Loading","sortBy","onSort","variant","compact","isStickyHeader","canCollapseAll","ALERTS_SEVERITY_ICONS","critical","Icon","warning","success","ALERTS_SEVERITY_LABEL","Flex","alignItems","ALERTS_SEVERITY_ORDER","alerts","upgrade_recommendation","upgrade_risks_predictors","borders","Thead","Tr","Th","width","Tbody","namespace","severity","url","Td","href","operator_conditions","conditions","condition","reason","class","alertsDisabled","conditionsDisabled","alertsExpanded","setAlertsExpanded","operatorsExpanded","setOperatorsExpanded","hasRisks","noRisks","EmptyState","EmptyStateHeader","icon","EmptyStateIcon","Spinner","isExpandable","isExpanded","expand","rowIndex","onToggle","some","Label","color","ExpandableRowContent","ErrorState","analytics","useChrome","track","upgrade_recommended","updateRisksEnabled","isManaged","CLUSTER_TABS","searchParams","useSearchParams","activeKey","setActiveKey","tabKey","get","Card","CardBody","Tabs","onSelect","event","Tab","eventKey","updateRisks","Alert","isInline","resolveUpdateRisks","resolveUpdateRisksDesc","strong","noKnownUpdateRisks","updateRisksNotCurrentlyAvailable","updateRisksNotAvailableDesc","Cluster","areUpdateRisksEnabled","PageHeader","FlexItem","cluster_name","PageSection","chrome","refetch","subnav","clusters","updateDocumentTitle","documentTitle","OneLineLoader","height","x","y","rx","ry"],"sourceRoot":""}